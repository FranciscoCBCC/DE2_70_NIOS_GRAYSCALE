
DE2_70_D5M_NIOS.elf:     file format elf32-littlenios2
DE2_70_D5M_NIOS.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001f240 memsz 0x0001f240 flags r-x
    LOAD off    0x00020260 vaddr 0x0001f260 paddr 0x00020d3c align 2**12
         filesz 0x00001adc memsz 0x00001adc flags rw-
    LOAD off    0x00022818 vaddr 0x00022818 paddr 0x00022818 align 2**12
         filesz 0x00000000 memsz 0x00000b40 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e340  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d6c  0001e4f4  0001e4f4  0001f4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001adc  0001f260  00020d3c  00020260  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b40  00022818  00022818  00022818  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00021d3c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00002248  00000000  00000000  00021d68  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000ba57  00000000  00000000  00023fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00069a1a  00000000  00000000  0002fa07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001080e  00000000  00000000  00099421  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0002918a  00000000  00000000  000a9c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000602c  00000000  00000000  000d2dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00009409  00000000  00000000  000d8de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019405  00000000  00000000  000e21f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000fb5f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000033b0  00000000  00000000  000fb628  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00109c35  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00109c38  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00109c47  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00109c48  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00109c49  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00109c52  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00109c5b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00109c64  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000035  00000000  00000000  00109c6a  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00075817  00000000  00000000  00109c9f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0001e4f4 l    d  .rodata	00000000 .rodata
0001f260 l    d  .rwdata	00000000 .rwdata
00022818 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 image.c
00000000 l    df *ABS*	00000000 stdio-wrapper.c
00000000 l    df *ABS*	00000000 haar.cpp
00022828 l     O .bss	00000004 rectangles_array
0002282c l     O .bss	00000004 scaled_rectangles_array
00022824 l     O .bss	00000004 stages_array
00022834 l     O .bss	00000004 tree_thresh_array
00022830 l     O .bss	00000004 weights_array
0002283c l     O .bss	00000004 alpha2_array
00022838 l     O .bss	00000004 alpha1_array
00022840 l     O .bss	00000004 stages_thresh_array
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 rectangles.cpp
00000000 l    df *ABS*	00000000 functexcept.cc
00000000 l    df *ABS*	00000000 ios_failure.cc
00000000 l    df *ABS*	00000000 stdexcept.cc
00000000 l    df *ABS*	00000000 string-inst.cc
00000000 l    df *ABS*	00000000 atomicity.cc
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
0000ddd8 l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000e028 l     F .text	00000030 _Z12read_uleb128PKhPj
0000e058 l     F .text	00000054 _Z12read_sleb128PKhPi
0000e0ac l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
0000e148 l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
0000e31c l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
0000e3ac l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000e4ac l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
0000e530 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00022848 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
000228a0 l     O .bss	00000800 emergency_buffer
00022854 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 fp-bit.c
0000f50c l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000fd88 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000108e0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00022858 l     O .bss	00000004 fc_static
00010aec l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
00010c04 l     F .text	000000cc _Unwind_RaiseException_Phase2
00010cd0 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
0001ee9d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00011e88 l     F .text	00000058 std
00011f94 l     F .text	00000008 __fp_lock
00011f9c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 ftell.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001f260 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00014b94 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
000154bc l     F .text	00000058 __sprint_r
0001f096 l     O .rodata	00000010 blanks.3452
0001f086 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00017754 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00020d10 l     O .rwdata	00000004 charset
0001f0c8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mprec.c
0001f210 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0001b64c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001b6ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001b6d8 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0001b80c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001b94c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001baec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001bbcc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001bd28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0001be34 l     F .text	000000dc alt_file_locked
0001c098 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0001c218 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00020d2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001c4b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001fc1c l     O .rwdata	00001060 jtag_uart
00020c7c l     O .rwdata	00000054 Pixel_Buffer_DMA
0001c784 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001c9c4 l     F .text	00000228 altera_avalon_jtag_uart_irq
0001cbec l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001d4b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001db44 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001e054 l     F .text	00000004 register_fini
0000d19c  w    F .text	0000005c _ZNSs2atEm
0000f184 g     F .text	00000040 __cxa_free_exception
0000bb38  w    F .text	00000034 _ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
0000f300 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00019578 g     F .text	00000094 _mprec_log10
00002e28  w    F .text	00000044 _ZNKSt6vectorI6MyRectSaIS0_EE3endEv
0000ef34 g     F .text	00000018 _ZSt10unexpectedv
00007ba8 g     F .text	00000034 _ZSt18__throw_bad_typeidv
00019664 g     F .text	00000088 __any_on
00018fc0 g     F .text	00000070 _isatty_r
0001f1e8 g     O .rodata	00000028 __mprec_tinytens
00009444 g     F .text	00000030 _ZNSt14overflow_errorC1ERKSs
0001bd88 g     F .text	0000006c alt_main
000031ac  w    F .text	0000003c _ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E
00000ab8 g     F .text	0000007c createSumImage
0000b65c  w    F .text	00000040 _ZNKSs6substrEmm
00000794 g     F .text	00000194 writePgm
00014328 g     F .text	000000a0 _puts_r
000230c8 g     O .bss	00000100 alt_irq
00020cd0  w    O .rwdata	00000004 _ZNSs4nposE
000190f4 g     F .text	00000078 _lseek_r
00010a9c g     F .text	00000014 _Unwind_GetIPInfo
00020d3c g       *ABS*	00000000 __flash_rwdata_start
00005f68  w    F .text	00000058 _ZNSt6vectorIiSaIiEEixEm
00018f20 g     F .text	000000a0 __sflags
0001b19c g     F .text	00000088 __eqdf2
0000702c  w    F .text	000000b8 _ZNSt6vectorIiSaIiEE5eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EES5_
0000dcf0 g     F .text	00000074 __cxa_rethrow
00006844  w    F .text	00000044 _ZSt20uninitialized_fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_
00004594  w    F .text	000002a0 _ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_
00010a3c g     F .text	0000000c _Unwind_SjLj_Unregister
0000ace0  w    F .text	00000018 _ZNKSs6rbeginEv
0000ee54 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0000ba50  w    F .text	000000b4 _ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag
0000b7bc  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_
0000dbcc  w    F .text	00000024 _ZNSs7replaceEmmRKSs
00010a8c g     F .text	00000010 _Unwind_GetIP
00023358 g       *ABS*	00000000 __alt_heap_start
0001524c g     F .text	00000008 strtok_r
000096c4 g     F .text	00000030 _ZNSt12length_errorC1ERKSs
00014f5c g     F .text	00000074 _kill_r
0000d278  w    F .text	00000038 _ZNSs5beginEv
0000f174 g     F .text	00000010 _ZNSt9bad_allocD2Ev
000140c4 g     F .text	00000044 printf
0000ed34 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
00014e9c g     F .text	000000a0 _signal_r
0000487c g     F .text	00000048 _Z5myMinii
0001e77c  w    O .rodata	00000013 _ZTSSt14overflow_error
00014fd8 g     F .text	00000068 __sseek
00011ef0 g     F .text	000000a4 __sinit
0000328c  w    F .text	0000009c _ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_
000173e4 g     F .text	00000130 __swbuf_r
00006574  w    F .text	00000044 _ZSt20uninitialized_fill_nIPimiEvT_T0_RKT1_
0000c978  w    F .text	000000f8 _ZNSs6assignEPKcm
0000ed24 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00019054 g     F .text	00000084 _setlocale_r
0001eb30  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00011ff0 g     F .text	00000068 __sfmoreglue
00002718  w    F .text	000003e4 _Z18evalWeakClassifieriiiii
0001be14 g     F .text	00000020 __malloc_unlock
0000a1b0  w    F .text	00000018 _ZNSs7_M_moveEPcPKcm
00022818 g     O .bss	00000004 clock_counter
0000dc20  w    F .text	00000064 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc
0000de40 g     F .text	00000020 _ZSt18uncaught_exceptionv
0000f9a4 g     F .text	00000174 __divsf3
0001e73c  w    O .rodata	0000000c _ZTISt15underflow_error
0000647c  w    F .text	0000006c _ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_
0000c5e8  w    F .text	000000bc _ZNSsD2Ev
0000c4a0  w    F .text	0000008c _ZNSspLEc
0000c08c  w    F .text	000000e0 _ZNSs6appendEmc
00013ed4 g     F .text	000000e0 memmove
0000f0c0 g     F .text	00000010 _ZNSt9exceptionD2Ev
00011fe0 g     F .text	00000010 _cleanup
000196ec g     F .text	000000bc _Balloc
000151a8 g     F .text	000000a4 __strtok_r
0000fca0 g     F .text	00000094 __fixsfsi
000063dc  w    F .text	00000028 _ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_11__true_type
0000ba30  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_
0001e7e0  w    O .rodata	00000011 _ZTSSt12out_of_range
00003328  w    F .text	00000044 _ZSt19__copy_backward_auxIP6MyRectS1_ET0_T_S3_S2_
0001eaf8  w    O .rodata	0000000c _ZTISt8bad_cast
000066f8  w    F .text	00000048 _ZSt4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RKT0_
0000a1c8  w    F .text	00000018 _ZNSs7_M_copyEPcPKcm
0000cb00  w    F .text	00000040 _ZNSsaSEPKc
0000dc84 g     F .text	00000014 _ZN9__gnu_cxx18__exchange_and_addEPVii
00007c78 g     F .text	00000108 _ZSt19__throw_ios_failurePKc
0001b2ac g     F .text	00000088 __gtdf2
0001eb64  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
00008bd4  w    F .text	00000034 _ZNSt14overflow_errorD0Ev
00000000 g     F .entry	0000001c __reset
00020cd8  w    O .rwdata	00000001 _ZNSs4_Rep11_S_terminalE
0000a978  w    F .text	000000e0 _ZNKSs16find_last_not_ofEPKcmm
00005b70  w    F .text	00000024 _ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv
00005ffc  w    F .text	00000028 _ZSt13__destroy_auxIPiEvT_S1_11__true_type
00010acc g     F .text	00000008 _Unwind_GetRegionStart
00007434  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_iET0_T_S8_S7_SaIT1_E
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007478  w    F .text	0000008c _ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIiEEPT_PKS3_S6_S4_
00012c44 g     F .text	00000074 _fstat_r
0000ef4c g     F .text	00000100 _Znwm
0000a718  w    F .text	00000064 _ZNSs4_Rep10_M_disposeERKSaIcE
0002285c g     O .bss	00000004 errno
000108a8 g     F .text	00000038 __make_dp
00014bfc g     F .text	00000014 __srget
0000adf4  w    F .text	0000003c _ZNSsC2EmcRKSaIcE
0000ab14  w    F .text	0000007c _ZNKSs7compareEPKc
0000bb6c  w    F .text	000000fc _ZNSsC1ERKSs
00002f70  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv
00006684  w    F .text	00000074 _ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_
00010e9c g     F .text	00000080 _Unwind_Backtrace
0000b2f0  w    F .text	00000088 _ZNKSs4copyEPcmm
0002287c g     O .bss	00000004 alt_argv
0000619c  w    F .text	00000050 _ZSt3maxImERKT_S2_S2_
00028cd0 g       *ABS*	00000000 _gp
0000dc9c g     F .text	00000034 _ZNSt10bad_typeidD0Ev
0000f6f0 g     F .text	00000070 __subsf3
00008c08  w    F .text	00000010 _ZNSt14overflow_errorD1Ev
00004cd0 g     F .text	000005d4 _Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf
0000ec14 g     F .text	00000034 _ZNSt8bad_castD0Ev
0001b86c g     F .text	00000020 getpid
00006fdc  w    F .text	00000050 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_
0000cd34  w    F .text	00000038 _ZNSs6assignEmc
000075d0  w    F .text	00000050 _ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_
00009eb8  w    F .text	0000000c _ZNKSs4_Rep12_M_is_leakedEv
0000e5b4 g     F .text	00000180 __cxa_call_unexpected
00003b68  w    F .text	00000060 _ZNSt12_Vector_baseI6MyRectSaIS0_EED2Ev
0000de38 g     F .text	00000008 __cxa_get_exception_ptr
00011e64 g     F .text	00000024 fgets
000073ac  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_11__true_type
00003524  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_
00002b4c  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorI6MyRectED2Ev
0000a1e8  w    F .text	0000000c _ZNKSsixEm
0001fa9c g     O .rwdata	00000180 alt_fd_list
00003490  w    F .text	00000094 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type
00005d94  w    F .text	00000044 _ZNKSt6vectorIiSaIiEE5beginEv
0001e7f4  w    O .rodata	00000014 _ZTVSt12out_of_range
00010e4c g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
000037b4  w    F .text	0000032c _ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_
00010a60 g     F .text	00000014 _Unwind_GetCFA
0000ee40 g     F .text	00000014 _ZSt13set_terminatePFvvE
0001d5dc g     F .text	00000094 alt_find_dev
00013e34 g     F .text	000000a0 memcpy
0000a494  w    F .text	00000010 _ZNSsC2Ev
0000336c  w    F .text	00000084 _ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS4_SaIS4_EEEES9_EET0_T_SB_SA_
0000a384  w    F .text	0000000c _ZNKSs17find_first_not_ofERKSsm
0000a1f4  w    F .text	000000a4 _ZNKSs17find_first_not_ofEPKcmm
0000b93c  w    F .text	00000034 _ZNSsC1IPKcEET_S2_RKSaIcE
00011fd4 g     F .text	0000000c _cleanup_r
000106d8 g     F .text	000000f8 __floatsidf
0001dc08 g     F .text	00000078 alt_io_redirect
00010650 g     F .text	00000088 __ltdf2
0001e7c0  w    O .rodata	00000014 _ZTVSt11range_error
000099a0 g     F .text	00000104 _ZNSt13runtime_errorD2Ev
000086e0 g     F .text	00000190 _ZSt21__throw_runtime_errorPKc
0001e4f4 g       *ABS*	00000000 __DTOR_END__
0000a438  w    F .text	00000050 _ZNKSs5rfindEPKcm
0000f410 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
000095b4 g     F .text	000000b0 _ZNSt11logic_errorC2ERKSs
0001e860  w    O .rodata	00000014 _ZTVSt16invalid_argument
0000a4a4  w    F .text	00000010 _ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_
000143c8 g     F .text	00000014 puts
0000d3c8  w    F .text	00000150 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_
00002eb0  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_
00003568  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_S2_ET0_T_S9_S8_SaIT1_E
000094d4 g     F .text	00000030 _ZNSt11range_errorC2ERKSs
000194c8 g     F .text	000000b0 __ratio
0000bed8  w    F .text	00000004 _ZNSsaSERKSs
00003170  w    F .text	0000003c _ZSt8_DestroyIP6MyRectEvT_S2_
0001e7d4  w    O .rodata	0000000c _ZTISt12out_of_range
0000a120  w    F .text	00000038 _ZNKSs15_M_check_lengthEmmPKc
0000acf8  w    F .text	000000c0 _ZNSs12_S_constructEmcRKSaIcE
00006f58  w    F .text	00000084 _ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_
0001ce04 g     F .text	00000224 altera_avalon_jtag_uart_read
00013588 g     F .text	00000014 malloc
00014108 g     F .text	00000034 _printf_r
00010a1c g     F .text	00000008 __udivsi3
0001b88c g     F .text	000000c0 isatty
00014c80 g     F .text	000000cc _raise_r
0001f0f8 g     O .rodata	000000c8 __mprec_tens
0000c8dc  w    F .text	0000009c _ZNSs15_M_replace_safeEmmPKcm
000080a0 g     F .text	00000190 _ZSt22__throw_overflow_errorPKc
00006238  w    F .text	00000070 _ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type
00009694 g     F .text	00000030 _ZNSt12out_of_rangeC2ERKSs
00019030 g     F .text	00000008 __locale_charset
0000664c  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv
0000fb90 g     F .text	00000078 __lesf2
00007a98  w    F .text	00000048 _ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi
0000bedc  w    F .text	00000128 _ZNSs7reserveEm
00000200 g     F .text	00000114 strrev
0000af28  w    F .text	000000c8 _ZNKSs7compareEmmPKc
0001de44 g     F .text	00000090 alt_icache_flush
00009e70  w    F .text	0000000c _ZNKSs4sizeEv
00022860 g     O .bss	00000004 __malloc_top_pad
0000c6a4  w    F .text	00000238 _ZNSs9_M_mutateEmmm
0000d7ac  w    F .text	000002e0 _ZNSs7replaceEmmPKcm
0000a528  w    F .text	00000058 _ZNKSs16find_last_not_ofEcm
00014f58 g     F .text	00000004 _getpid_r
00003bc8  w    F .text	0000007c _ZNSt6vectorI6MyRectSaIS0_EED1Ev
0000dafc  w    F .text	00000010 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm
00020d0c g     O .rwdata	00000004 __mb_cur_max
0000c278  w    F .text	00000040 _ZNSs6appendEPKc
00019038 g     F .text	0000000c _localeconv_r
0000a580  w    F .text	00000064 _ZNKSs17find_first_not_ofEcm
00006024  w    F .text	0000003c _ZSt8_DestroyIPiEvT_S1_
00003688  w    F .text	00000064 _ZN9__gnu_cxx13new_allocatorI6MyRectE8allocateEmPKv
00019de4 g     F .text	0000003c __i2b
00012dc4 g     F .text	0000049c __sfvwrite_r
0000f430 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
000048c4 g     F .text	00000048 _Z5myAbsi
00014dd4 g     F .text	000000b4 __sigtramp_r
00009df0  w    F .text	00000008 _ZNKSs9_M_ibeginEv
00009334 g     F .text	000000b0 _ZNSt13runtime_errorC2ERKSs
00005c0c  w    F .text	00000050 _ZNKSt6vectorI6MyRectSaIS0_EE5emptyEv
00007620  w    F .text	00000478 _ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi
00007304  w    F .text	0000005c _ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES4_EET0_T_SA_S9_
00014c10 g     F .text	00000070 _sbrk_r
0001ebec  w    O .rodata	00000020 _ZTVSt9type_info
0001e848  w    O .rodata	00000015 _ZTSSt16invalid_argument
00007c10 g     F .text	00000034 _ZSt17__throw_bad_allocv
000040ac  w    F .text	00000058 _ZNKSt6vectorI6MyRectSaIS0_EE8capacityEv
00002fcc  w    F .text	00000038 _ZNSt6vectorI6MyRectSaIS0_EE5beginEv
00009dc0  w    F .text	00000010 _ZNSt11char_traitsIcE2eqERKcS2_
0001a160 g     F .text	00000078 _read_r
0000f090 g     F .text	00000010 _ZNKSt9exception4whatEv
0000a900  w    F .text	00000068 _ZNKSs4findEcm
00000c3c g     F .text	00000040 setSumImage
0001fa68 g     O .rwdata	0000000c __lc_ctype
00020d24 g     O .rwdata	00000004 alt_max_fd
0000ab90  w    F .text	00000050 _ZNKSs16find_last_not_ofEPKcm
00011670 g     F .text	00000138 __unpack_d
0000aac4  w    F .text	00000050 _ZNKSs4findEPKcm
000118a0 g     F .text	00000110 _fclose_r
0000ac30  w    F .text	00000050 _ZNKSs12find_last_ofEPKcm
0000a390  w    F .text	000000a8 _ZNKSs5rfindEPKcmm
0001ebe0  w    O .rodata	0000000c _ZTISt9bad_alloc
00009de4  w    F .text	0000000c _ZNKSs6_M_repEv
00011bc0 g     F .text	00000034 fflush
00002c60  w    F .text	00000030 _ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implD1Ev
00022864 g     O .bss	00000004 __malloc_max_sbrked_mem
00000a44 g     F .text	00000074 createImage
0000ce3c  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE
0000d1f8  w    F .text	00000044 _ZNSsixEm
0000bd64  w    F .text	00000174 _ZNSs6assignERKSs
0000fd34 g     F .text	00000054 __extendsfdf2
00005b08  w    F .text	00000038 _ZNSaIiEC1ERKS_
00011c8c g     F .text	00000090 _fgetc_r
00003028  w    F .text	00000058 _ZN9__gnu_cxxmiIPK6MyRectS3_St6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE
00010218 g     F .text	00000074 __adddf3
00005f0c  w    F .text	0000005c _ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl
0001eb04  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
000031e8  w    F .text	00000028 _ZNK9__gnu_cxx13new_allocatorI6MyRectE8max_sizeEv
0000c52c  w    F .text	000000bc _ZNSsD1Ev
000193a8 g     F .text	00000120 __b2d
00005ce4  w    F .text	00000038 _ZNSt6vectorIiSaIiEEC1ERKS0_
00002c90  w    F .text	00000024 _ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv
0000ec48 g     F .text	00000010 _ZNSt8bad_castD1Ev
0001a994 g     F .text	000005b0 __umoddi3
0001bc38 g     F .text	000000f0 lseek
0000d23c  w    F .text	0000003c _ZNSs3endEv
0000f490 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0001e8f4  w    O .rodata	00000014 _ZTVSt11logic_error
0000e01c g     F .text	0000000c _ZdlPv
00008ca0  w    F .text	00000034 _ZNSt12length_errorD0Ev
00020d00 g     O .rwdata	00000004 _global_impure_ptr
000143dc g     F .text	000005f4 _realloc_r
00023358 g       *ABS*	00000000 __bss_end
0001da4c g     F .text	000000f8 alt_iic_isr_register
0001dd18 g     F .text	0000010c alt_tick
00010a2c g     F .text	00000010 _Unwind_SjLj_Register
0001a3b8 g     F .text	000005dc __udivdi3
0001e790  w    O .rodata	00000014 _ZTVSt14overflow_error
00008a00 g     F .text	00000190 _ZSt20__throw_length_errorPKc
0001f1c0 g     O .rodata	00000028 __mprec_bigtens
0001a040 g     F .text	00000120 __s2b
00011870 g     F .text	00000018 abort
0001b3bc g     F .text	00000194 __floatunsidf
00006060  w    F .text	0000003c _ZSt8_DestroyIPiiEvT_S1_SaIT0_E
00005d1c  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_
0000a064  w    F .text	000000bc _ZNSs4_Rep10_M_refcopyEv
000192c8 g     F .text	00000060 __mcmp
00020cf8 g     O .rwdata	00000004 __ctype_ptr
0000de60 g     F .text	000000a4 __cxa_end_catch
00011fbc g     F .text	00000018 __fp_lock_all
0001da04 g     F .text	00000048 alt_ic_irq_enabled
0000f114 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
00006938  w    F .text	00000040 _ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm
0001dc80 g     F .text	00000098 alt_alarm_stop
00002df4  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_
00003ae0  w    F .text	00000088 _ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_
00015498 g     F .text	00000024 strtol
00009ec4  w    F .text	0000000c _ZNKSs4_Rep12_M_is_sharedEv
000065b8  w    F .text	00000044 _ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_SaIT2_E
00009dd0  w    F .text	00000008 _ZNKSs7_M_dataEv
0000b510  w    F .text	00000060 _ZNSsC2ERKSsmmRKSaIcE
00022884 g     O .bss	00000004 alt_irq_active
0000ef0c g     F .text	00000018 _ZSt9terminatev
0000d3c0  w    F .text	00000008 _ZNSs6resizeEm
00008bc4  w    F .text	00000010 _ZNSt15underflow_errorD1Ev
00008230 g     F .text	00000190 _ZSt24__throw_invalid_argumentPKc
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000ca70  w    F .text	00000040 _ZNSs6assignEPKc
0001fa74 g     O .rwdata	00000028 alt_dev_null
00005e54  w    F .text	0000004c _ZNKSt6vectorIiSaIiEE4sizeEv
0000b1ec  w    F .text	00000104 _ZNSs4_Rep7_M_grabERKSaIcES2_
0000d0bc  w    F .text	00000050 _ZNSs6insertEmRKSsmm
00008d6c g     F .text	00000008 _ZNKSt8ios_base7failure4whatEv
000065fc  w    F .text	00000050 _ZN9__gnu_cxxneIPiSt6vectorIiSaIiEEEEbRKNS_17__normal_iteratorIT_T0_EESA_
00009cb4 g     F .text	0000010c _ZNSt11logic_errorD0Ev
000111ec g     F .text	000000c8 __unpack_f
00006118  w    F .text	0000005c _ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEmiERKl
0000ac80  w    F .text	00000050 _ZNKSs13find_first_ofEPKcm
0001ec48  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00005aac  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_
0000c2f8  w    F .text	000000e8 _ZNSs6appendERKSsmm
0001d3bc g     F .text	00000044 alt_dcache_flush_all
00019194 g     F .text	00000070 __hi0bits
00020ce4  w    O .rwdata	00000008 _ZTISt9exception
000107d0 g     F .text	000000d8 __fixdfsi
0000acd0  w    F .text	00000010 _ZNKSs4rendEv
0000a378  w    F .text	0000000c _ZNKSs4findERKSsm
0000911c g     F .text	0000010c _ZNSt8ios_base7failureD0Ev
00009f00  w    F .text	0000014c _ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_
0000d10c  w    F .text	0000000c _ZNSs6insertEmRKSs
0000490c g     F .text	0000022c _Z9predicatefR6MyRectS0_
00020d3c g       *ABS*	00000000 __ram_rwdata_end
00006e0c  w    F .text	000000a0 _ZNSt6vectorI6MyRectSaIS0_EEC1EmRKS0_RKS1_
000068cc  w    F .text	0000006c _ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv
02201000 g       *ABS*	00000000 __alt_mem_onchip_memory
0000f330 g     F .text	00000010 _ZNSt9type_infoD1Ev
00020d1c g     O .rwdata	00000008 alt_dev_list
00022850 g     O .bss	00000004 __new_handler
000122bc g     F .text	00000058 _fputc_r
0001e880  w    O .rodata	00000011 _ZTSSt12domain_error
0001c394 g     F .text	00000120 write
0000cdb4  w    F .text	00000038 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc
00002f20  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv
00014240 g     F .text	000000e8 _putc_r
0000b8d4  w    F .text	00000034 _ZNSsC1EPKcmRKSaIcE
00006c04  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim
0000d2b0  w    F .text	0000004c _ZNSs4rendEv
0000f320 g     F .text	00000010 _ZNSt9type_infoD0Ev
0000989c g     F .text	00000104 _ZNSt13runtime_errorD1Ev
00005c5c  w    F .text	00000050 _ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_
0001f260 g       *ABS*	00000000 __ram_rodata_end
000033f0  w    F .text	00000050 _ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_
0001b738 g     F .text	000000d4 fstat
0000a05c  w    F .text	00000008 _ZNSs12_Alloc_hiderC2EPcRKSaIcE
0000727c  w    F .text	00000044 _ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_
0001b9ac g     F .text	00000140 kill
0000b4b0  w    F .text	00000060 _ZNSsC1ERKSsmmRKSaIcE
000097b4 g     F .text	00000030 _ZNSt12domain_errorC2ERKSs
00009784 g     F .text	00000030 _ZNSt12domain_errorC1ERKSs
00008d5c  w    F .text	00000010 _ZNSt12domain_errorD1Ev
0000b47c  w    F .text	00000034 _ZNSsC2IPcEET_S1_RKSaIcE
00019f20 g     F .text	00000120 __pow5mult
0000d660  w    F .text	0000014c _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_
0002286c g     O .bss	00000004 __nlocale_changed
00008b90  w    F .text	00000034 _ZNSt15underflow_errorD0Ev
00003004  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv
00010a24 g     F .text	00000008 __umodsi3
0000f318 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000db0c  w    F .text	00000064 _ZNSs7replaceEmmPKc
00006f10  w    F .text	00000048 _ZSt10__copy_auxIPiS0_ET0_T_S2_S1_
00023358 g       *ABS*	00000000 end
0000dc98 g     F .text	00000004 _ZN9__gnu_cxx12__atomic_addEPVii
0001108c g     F .text	00000160 __pack_f
00009414 g     F .text	00000030 _ZNSt15underflow_errorC2ERKSs
0000754c  w    F .text	00000084 _ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_
0000db70  w    F .text	0000005c _ZNSs7replaceEmmRKSsmm
0000a32c  w    F .text	00000030 _ZNKSs2atEm
00002c28  w    F .text	00000038 _ZNSaI6MyRectEC2ERKS0_
0000cab0  w    F .text	00000050 _ZNSs6assignERKSsmm
0000b788  w    F .text	00000034 _ZNSsC1IPcEET_S1_RKSaIcE
00011888 g     F .text	0000000c _atoi_r
00009df8  w    F .text	00000010 _ZNKSs7_M_iendEv
00010bec g     F .text	00000018 _Unwind_DeleteException
00012c20 g     F .text	00000024 fseek
0001c904 g     F .text	000000c0 altera_avalon_jtag_uart_init
00006530  w    F .text	00000044 _ZSt26__uninitialized_fill_n_auxIPimiEvT_T0_RKT1_11__true_type
00007ae0  w    F .text	000000c8 _ZNSt6vectorIiSaIiEE6resizeEmi
00009e58  w    F .text	00000008 _ZNKSs5beginEv
0001e4f0 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000cc0c  w    F .text	00000018 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc
00022890  w    O .bss	00000010 _ZNSs4_Rep20_S_empty_rep_storageE
00009228 g     F .text	00000008 _ZNKSt13runtime_error4whatEv
0001100c g     F .text	00000080 __clzsi2
000059dc  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIiEC2Ev
0001e91c  w    O .rodata	0000000c _ZTISt13runtime_error
0000f350 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0001d028 g     F .text	00000240 altera_avalon_jtag_uart_write
00011ee0 g     F .text	00000004 __sfp_lock_acquire
0001eb8c  w    O .rodata	00000012 _ZTSSt13bad_exception
00013cdc g     F .text	000000e4 memchr
00015514 g     F .text	00001eac ___vfprintf_internal_r
000020b4 g     F .text	000001b8 _Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE
0001e828  w    O .rodata	00000014 _ZTVSt12length_error
0000311c  w    F .text	00000054 _ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type
00005dfc  w    F .text	00000058 _ZN9__gnu_cxxmiIPKiS2_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE
000124d0 g     F .text	00000314 _free_r
0000daa8  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_
0000ae30  w    F .text	00000034 _ZNSsC1ERKSaIcE
0001e058 g     F .text	000001b0 __call_exitprocs
00014bb0 g     F .text	0000004c __srget_r
00009edc  w    F .text	00000008 _ZNSs4_Rep15_M_set_sharableEv
0000609c  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv
00020cd4  w    O .rwdata	00000004 _ZNSs4_Rep11_S_max_sizeE
00022870 g     O .bss	00000004 __mlocale_changed
00008cd4  w    F .text	00000010 _ZNSt12length_errorD1Ev
00020d08 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
0001e938  w    O .rodata	0000000c _ZTISt11logic_error
00009e94  w    F .text	00000008 _ZNKSs4dataEv
00000b98 g     F .text	00000064 freeSumImage
00022888 g     O .bss	00000004 _alt_tick_rate
000030ec  w    F .text	00000030 _ZSt8_DestroyI6MyRectEvPT_
00003080  w    F .text	0000004c _ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv
0001ec0c  w    O .rodata	0000000d _ZTSSt9type_info
00009e88  w    F .text	0000000c _ZNKSs8capacityEv
00009dd8  w    F .text	0000000c _ZNSs7_M_dataEPc
000093e4 g     F .text	00000030 _ZNSt15underflow_errorC1ERKSs
00019ab0 g     F .text	0000014c __lshift
00009e08  w    F .text	00000018 _ZNKSs8_M_limitEmm
0001ebbc  w    O .rodata	00000014 _ZTVSt9bad_alloc
0002288c g     O .bss	00000004 _alt_nticks
00014f3c g     F .text	0000001c signal
0001c0f8 g     F .text	00000120 read
0000cb40  w    F .text	000000cc _ZNSs14_M_replace_auxEmmmc
0001c548 g     F .text	0000023c alt_sys_init
0000fc08 g     F .text	00000098 __floatsisf
0000bc68  w    F .text	000000fc _ZNSsC2ERKSs
00009e9c  w    F .text	00000008 _ZNKSs13get_allocatorEv
00002afc  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorI6MyRectEC2Ev
0001eacc  w    O .rodata	0000000c _ZTISt10bad_typeid
0001404c g     F .text	00000078 _open_r
0001df20 g     F .text	00000134 __register_exitproc
0001ebd0  w    O .rodata	0000000d _ZTSSt9bad_alloc
0000372c  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorI6MyRectE10deallocateEPS1_m
0000a298  w    F .text	00000094 _ZNKSs4findEPKcmm
0000cdec  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_
00019bfc g     F .text	000001e8 __multiply
0001cc9c g     F .text	00000074 altera_avalon_jtag_uart_close
00006440  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_SaIT0_E
0001f260 g       *ABS*	00000000 __ram_rwdata_start
00010d54 g     F .text	000000f8 _Unwind_SjLj_RaiseException
0001e4f4 g       *ABS*	00000000 __ram_rodata_start
0000aa64  w    F .text	00000060 _ZNKSs7compareERKSs
000230a0 g     O .bss	00000028 __malloc_current_mallinfo
00010cf8 g     F .text	0000005c _Unwind_SjLj_Resume
0000d188  w    F .text	00000014 _ZNSs7_M_leakEv
000197a8 g     F .text	0000017c __d2b
0000f340 g     F .text	00000010 _ZNSt9type_infoD2Ev
000062ec  w    F .text	00000044 _ZSt24__uninitialized_fill_n_aIP6MyRectmS0_S0_EvT_T0_RKT1_SaIT2_E
00007128  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_
0000ec68 g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00008d18  w    F .text	00000010 _ZNSt16invalid_argumentD1Ev
00009e60  w    F .text	00000010 _ZNKSs3endEv
0000a184  w    F .text	0000002c _ZNSs9_M_assignEPcmc
000052a4 g     F .text	00000738 groupRectangles
0001c7bc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00000c7c g     F .text	000000c8 _Z8int_sqrtj
0001d790 g     F .text	000000b8 alt_get_fd
00002bcc  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorI6MyRectEC2ERKS2_
00000414 g     F .text	000000b0 itochar
00003610  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_
0000a4b4  w    F .text	00000064 _ZNKSs5rfindEcm
00005ad0  w    F .text	00000038 _ZNSaIiEC2ERKS_
000117a8 g     F .text	000000c8 __fpcmp_parts_d
0001e748  w    O .rodata	00000014 _ZTSSt15underflow_error
0000a968  w    F .text	00000010 _ZNKSs13find_first_ofEcm
000176e4 g     F .text	00000070 _close_r
00007238  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIPiS0_ET0_T_S2_S1_11__true_type
0002281c g     O .bss	00000004 n_features
00015190 g     F .text	00000018 strtok
00001a88 g     F .text	0000017c _Z15nearestNeighborP7MyImageS0_
00013dc0 g     F .text	00000074 memcmp
0001c86c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00023358 g       *ABS*	00000000 __alt_stack_base
0001c8b4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000f130 g     F .text	00000034 _ZNSt9bad_allocD0Ev
0000ed14 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00008c4c  w    F .text	00000010 _ZNSt11range_errorD1Ev
000175a8 g     F .text	0000013c __swsetup_r
0001e7b0  w    O .rodata	00000010 _ZTSSt11range_error
00010f1c g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
0001af44 g     F .text	00000258 __divdf3
00012058 g     F .text	000000f0 __sfp
00005b94  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv
0001960c g     F .text	00000058 __copybits
0001e874  w    O .rodata	0000000c _ZTISt12domain_error
0000f2f8 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0001eaec  w    O .rodata	0000000c _ZTSSt8bad_cast
00002674  w    F .text	000000a4 _Z7myRoundf
0000da8c  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_
0001e770  w    O .rodata	0000000c _ZTISt14overflow_error
00005b40  w    F .text	00000030 _ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev
0001f660 g     O .rwdata	00000408 __malloc_av_
00011eec g     F .text	00000004 __sinit_lock_release
00007504  w    F .text	00000048 _ZSt19__copy_backward_auxIPiS0_ET0_T_S2_S1_
00005cac  w    F .text	00000038 _ZNSt12_Vector_baseIiSaIiEEC2ERKS0_
0001028c g     F .text	000003c4 __muldf3
000150bc g     F .text	00000060 __sread
0001ec78 g     O .rodata	00000010 __thenan_sf
000043a0  w    F .text	00000084 _ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEENS3_IPS4_S9_EEEET0_T_SE_SD_
0001eb78  w    O .rodata	00000014 _ZTVSt9exception
0000716c  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_iET0_T_S8_S7_SaIT1_E
0001d670 g     F .text	00000120 alt_find_file
0000dbf0  w    F .text	00000030 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs
0000f3bc g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
0000d118  w    F .text	00000014 _ZNSs5clearEv
0001d400 g     F .text	000000b4 alt_dev_llist_insert
000064e8  w    F .text	00000048 _ZSt6fill_nIPimiET_S1_T0_RKT1_
0001bdf4 g     F .text	00000020 __malloc_lock
0001c2d8 g     F .text	000000bc sbrk
000083c0 g     F .text	00000190 _ZSt20__throw_domain_errorPKc
00007d80 g     F .text	00000190 _ZSt19__throw_logic_errorPKc
0001ec1c  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000dd64 g     F .text	00000074 __cxa_throw
000119c4 g     F .text	000001fc _fflush_r
00000bfc g     F .text	00000040 setImage
00010ab0 g     F .text	00000010 _Unwind_SetIP
0000a86c  w    F .text	00000088 _ZNKSs13find_first_ofEPKcmm
0001a304 g     F .text	000000b4 _calloc_r
00006eac  w    F .text	00000064 _ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIiEEPT_PKS3_S6_S4_
0000a518  w    F .text	00000010 _ZNKSs12find_last_ofEcm
0001e808  w    O .rodata	0000000c _ZTISt12length_error
00009ed0  w    F .text	0000000c _ZNSs4_Rep13_M_set_leakedEv
0000b908  w    F .text	00000034 _ZNSsC2EPKcmRKSaIcE
00008550 g     F .text	00000190 _ZSt19__throw_range_errorPKc
00009724 g     F .text	00000030 _ZNSt16invalid_argumentC1ERKSs
0001223c g     F .text	0000001c fopen
00022818 g       *ABS*	00000000 __bss_start
0000a8f4  w    F .text	0000000c _ZNKSs13find_first_ofERKSsm
00006740  w    F .text	00000078 _ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_
0000b0b0  w    F .text	000000a0 _ZNKSs7compareEmmRKSs
00013fb4 g     F .text	00000098 memset
00009ee4  w    F .text	00000014 _ZNSs4_Rep26_M_set_length_and_sharableEm
00009e3c  w    F .text	0000000c _ZNSs12_S_empty_repEv
00003c44 g     F .text	00000360 main
0001e908  w    O .rodata	00000012 _ZTSSt13runtime_error
00022880 g     O .bss	00000004 alt_envp
00022868 g     O .bss	00000004 __malloc_max_total_mem
00002ee4  w    F .text	0000003c _ZNSt6vectorI6MyRectSaIS0_EE3endEv
0001eaa8  w    O .rodata	00000014 _ZTVSt10bad_typeid
0001c814 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00012db0 g     F .text	00000014 ftell
000059fc  w    F .text	00000030 _ZNSaIiEC1Ev
00000314 g     F .text	00000100 myatoi
00017514 g     F .text	0000001c __swbuf
00007c44 g     F .text	00000034 _ZSt21__throw_bad_exceptionv
00002b1c  w    F .text	00000030 _ZNSaI6MyRectEC1Ev
0000ee30 g     F .text	00000008 __cxa_get_globals_fast
000061ec  w    F .text	0000004c _ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEpLERKl
0001e8bc  w    O .rodata	00000016 _ZTSNSt8ios_base7failureE
00002b6c  w    F .text	00000030 _ZNSaI6MyRectED1Ev
0001ead8  w    O .rodata	00000014 _ZTVSt8bad_cast
00014fd0 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000264c  w    F .text	00000028 _ZnwmPv
000119b0 g     F .text	00000014 fclose
00015254 g     F .text	00000244 _strtol_r
000231c8 g     O .bss	00000190 _atexit0
00008c90  w    F .text	00000010 _ZNSt12out_of_rangeD1Ev
00000b34 g     F .text	00000064 freeImage
0001796c g     F .text	000015b4 _dtoa_r
0001359c g     F .text	00000740 _malloc_r
0000b8a0  w    F .text	00000034 _ZNSsC2IPKcEET_S2_RKSaIcE
0000ae64  w    F .text	00000034 _ZNSsC2ERKSaIcE
00020d28 g     O .rwdata	00000004 alt_errno
0000dae0  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_
00009474 g     F .text	00000030 _ZNSt14overflow_errorC2ERKSs
00008c18  w    F .text	00000034 _ZNSt11range_errorD0Ev
00014dc4 g     F .text	00000010 _init_signal
0001ec6c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000030cc  w    F .text	00000020 _ZN6MyRectD1Ev
00013328 g     F .text	000000b8 _fwalk
00004474  w    F .text	0000005c _ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_
00002dbc  w    F .text	00000038 _ZNSt6vectorI6MyRectSaIS0_EEC1ERKS1_
00011d1c g     F .text	00000148 _fgets_r
0000a77c  w    F .text	000000e4 _ZNKSs12find_last_ofEPKcmm
0000f104 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
0001413c g     F .text	00000104 putc
0001095c g     F .text	00000060 __divsi3
0001ec88 g     O .rodata	00000014 __thenan_df
000123a4 g     F .text	0000012c _malloc_trim_r
000072c0  w    F .text	00000044 _ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_SaIT1_E
0001e4f4 g       *ABS*	00000000 __CTOR_END__
0000f7c4 g     F .text	000001e0 __mulsf3
00002cb4  w    F .text	00000080 _ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_
000060c0  w    F .text	00000058 _ZN9__gnu_cxxmiIPiS1_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS8_RKNS5_IT0_S7_EE
0000c3e0  w    F .text	000000bc _ZNSs6appendERKSs
0000c004  w    F .text	00000088 _ZNSs9push_backEc
0001a248 g     F .text	000000bc strcmp
0000b378  w    F .text	00000020 _ZNSs13_S_copy_charsEPcPKcS1_
00005bbc  w    F .text	00000050 _ZN9__gnu_cxxeqIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0001e4f4 g       *ABS*	00000000 __flash_rodata_start
00004b38 g     F .text	00000198 drawRectangle
000042c0  w    F .text	0000009c _ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_
00009018 g     F .text	00000104 _ZNSt8ios_base7failureD2Ev
000073f0  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_
0001e4f4 g       *ABS*	00000000 __DTOR_LIST__
00008e78 g     F .text	000000d0 _ZNSt8ios_base7failureC1ERKSs
00005a4c  w    F .text	00000030 _ZNSaIiED2Ev
00022820 g     O .bss	00000004 iter_counter
0000b970  w    F .text	00000060 _ZNSsC1EPKcRKSaIcE
0001b224 g     F .text	00000088 __nedf2
0000ec58 g     F .text	00000010 _ZNSt8bad_castD2Ev
00009664 g     F .text	00000030 _ZNSt12out_of_rangeC1ERKSs
000070e4  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_11__true_type
0001c514 g     F .text	00000034 alt_irq_init
0000b3b8  w    F .text	000000c4 _ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
0001c278 g     F .text	00000060 alt_release_fd
0000ece0 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0000d06c  w    F .text	00000050 _ZNSs6insertEmPKc
0000418c  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEdeEv
00000928 g     F .text	0000011c cpyPgm
00011bf4 g     F .text	00000098 fgetc
0001ec9c g     O .rodata	00000100 __clz_tab
00009bb0 g     F .text	00000104 _ZNSt11logic_errorD2Ev
00005ed4  w    F .text	00000038 _ZNSt6vectorIiSaIiEE5beginEv
0000d12c  w    F .text	0000005c _ZNSs12_M_leak_hardEv
00005fc0  w    F .text	0000003c _ZNSt6vectorIiSaIiEE3endEv
00022874 g     O .bss	00000004 _PathLocale
000071b0  w    F .text	00000040 _ZNSt13__copy_normalILb0ELb0EE6copy_nIPiS2_EET0_T_S4_S3_
00006c3c  w    F .text	00000050 _ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim
000062a8  w    F .text	00000044 _ZSt20uninitialized_fill_nIP6MyRectmS0_EvT_T0_RKT1_
00002e6c  w    F .text	00000044 _ZNKSt6vectorI6MyRectSaIS0_EE5beginEv
0001e928  w    O .rodata	00000010 _ZTSSt11logic_error
00009230 g     F .text	00000104 _ZNSt11logic_errorD1Ev
0001ded4 g     F .text	00000014 atexit
0000226c g     F .text	000003e0 detectObjects
0001e7a4  w    O .rodata	0000000c _ZTISt11range_error
0000fb18 g     F .text	00000078 __gesf2
000094a4 g     F .text	00000030 _ZNSt11range_errorC1ERKSs
00017530 g     F .text	00000078 _write_r
00004104  w    F .text	00000050 _ZN9__gnu_cxxneIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
000190d8 g     F .text	0000001c setlocale
00008c5c  w    F .text	00000034 _ZNSt12out_of_rangeD0Ev
00010ae4 g     F .text	00000008 _Unwind_GetTextRelBase
0000f04c g     F .text	00000044 __cxa_call_terminate
0000364c  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES2_EvT_S8_SaIT0_E
00020cfc g     O .rwdata	00000004 _impure_ptr
00022878 g     O .bss	00000004 alt_argc
0001d578 g     F .text	00000064 _do_dtors
000127e4 g     F .text	0000043c _fseek_r
00006800  w    F .text	00000044 _ZSt26__uninitialized_fill_n_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_11__true_type
000149d0 g     F .text	000001c4 __srefill_r
0000d518  w    F .text	00000114 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_
00002d34  w    F .text	00000050 _ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implC1ERKS1_
00000020 g       .exceptions	00000000 alt_irq_entry
0000a158  w    F .text	0000002c _ZNKSs8_M_checkEmPKc
0000abe0  w    F .text	00000050 _ZNKSs17find_first_not_ofEPKcm
00004054  w    F .text	00000058 _ZNSt6vectorI6MyRectSaIS0_EEixEm
00002b9c  w    F .text	00000030 _ZNSaI6MyRectED2Ev
0000a35c  w    F .text	00000010 _ZNKSs5emptyEv
00019328 g     F .text	00000080 __ulp
0001a1d8 g     F .text	00000040 __isinfd
00010ad4 g     F .text	00000008 _Unwind_FindEnclosingFunction
0000a04c  w    F .text	00000010 _ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_
00011fa4 g     F .text	00000018 __fp_unlock_all
00012258 g     F .text	00000064 fputc
0000ce8c  w    F .text	0000006c _ZNSs5eraseEmm
00020d14 g     O .rwdata	00000008 alt_fs_list
0000a488  w    F .text	0000000c _ZNKSs5rfindERKSsm
0000b69c  w    F .text	000000ec _ZNSsC2ERKSsmm
0000aa58  w    F .text	0000000c _ZNKSs16find_last_not_ofERKSsm
00010ac0 g     F .text	0000000c _Unwind_GetLanguageSpecificData
00008ce4  w    F .text	00000034 _ZNSt16invalid_argumentD0Ev
0000df04 g     F .text	00000118 __cxa_begin_catch
000035ac  w    F .text	00000064 _ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type
0000f420 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000ef24 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
0001e814  w    O .rodata	00000011 _ZTSSt12length_error
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006c8c  w    F .text	00000060 _ZNSt12_Vector_baseIiSaIiEED2Ev
00019044 g     F .text	00000010 localeconv
00007bdc g     F .text	00000034 _ZSt16__throw_bad_castv
00001c68 g     F .text	0000044c readTextClassifier
00005a2c  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIiED2Ev
0000f0d0 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
00020cdc g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00007360  w    F .text	0000004c _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_
00002bf0  w    F .text	00000038 _ZNSaI6MyRectEC1ERKS0_
0001e75c  w    O .rodata	00000014 _ZTVSt15underflow_error
000063b4  w    F .text	00000028 _ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv
0000435c  w    F .text	00000044 _ZSt10__copy_auxIPK6MyRectPS0_ET0_T_S5_S4_
0001d878 g     F .text	00000050 alt_ic_isr_register
0000f1c4 g     F .text	00000134 __cxa_allocate_exception
0001eb58  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0000f124 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
0000cd6c  w    F .text	00000048 _ZNSsaSEc
00020d3c g       *ABS*	00000000 _edata
00003fa4  w    F .text	00000058 _ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEplERKl
0000451c  w    F .text	00000078 _ZNSt6vectorI6MyRectSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_mT_SA_
00023358 g       *ABS*	00000000 _end
00020cec g     O .rwdata	00000001 _ZSt7nothrow
00009aa4 g     F .text	0000010c _ZNSt13runtime_errorD0Ev
0000e734 g     F .text	000004e0 __gxx_personality_sj0
0000b150  w    F .text	0000009c _ZNSs4_Rep8_M_cloneERKSaIcEm
00005dd8  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv
000001b4 g       *ABS*	00000000 __ram_exceptions_end
000071f0  w    F .text	00000048 _ZSt4copyIPiS0_ET0_T_S2_S1_
0001cd10 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00012314 g     F .text	00000074 _fputs_r
00005d50  w    F .text	00000044 _ZNKSt6vectorIiSaIiEE3endEv
00005a7c  w    F .text	00000030 _ZNSaIiED1Ev
000041b4  w    F .text	00000084 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type
00003440  w    F .text	00000050 _ZN9__gnu_cxxneIP6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
0000f4c0 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00002f48  w    F .text	00000028 _ZNKSt6vectorI6MyRectSaIS0_EE8max_sizeEv
0000f0b0 g     F .text	00000010 _ZNSt9exceptionD1Ev
0001d964 g     F .text	000000a0 alt_ic_irq_disable
00004154  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEppEv
00022844 g     O .bss	00000004 _ZN14__gnu_internal12atomic_mutexE
0001e8d4  w    O .rodata	0000000c _ZTINSt8ios_base7failureE
00015040 g     F .text	0000007c __swrite
00020d04 g     O .rwdata	00000004 __malloc_trim_threshold
0001de24 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a5e4  w    F .text	00000130 _ZNSs4_Rep9_S_createEmmRKSaIcE
0001dee8 g     F .text	00000038 exit
00010a74 g     F .text	00000018 _Unwind_SetGR
0000c49c  w    F .text	00000004 _ZNSspLERKSs
00013260 g     F .text	000000c8 _fwalk_reent
0001e894  w    O .rodata	00000014 _ZTVSt12domain_error
00019924 g     F .text	0000018c __mdiff
0000ee68 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
0000cc24  w    F .text	00000068 _ZNSs7replaceEmmmc
00004238  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_
000109bc g     F .text	00000060 __modsi3
0000154c g     F .text	0000034c runCascadeClassifier
0000f164 g     F .text	00000010 _ZNSt9bad_allocD1Ev
00000d44 g     F .text	00000808 setImageForCascadeClassifier
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002d84  w    F .text	00000038 _ZNSt12_Vector_baseI6MyRectSaIS0_EEC2ERKS1_
00011ee4 g     F .text	00000004 __sfp_lock_release
00003764  w    F .text	00000050 _ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m
000036ec  w    F .text	00000040 _ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm
0000ed68 g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0001eba0  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000044d0  w    F .text	0000004c _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_
00011894 g     F .text	0000000c atoi
0001ed9c g     O .rodata	00000101 _ctype_
00001898 g     F .text	000001f0 _Z14integralImagesP7MyImageP10MyIntImageS2_
00008d28  w    F .text	00000034 _ZNSt12domain_errorD0Ev
00006ac0  w    F .text	00000144 _ZNSt12_Vector_baseI6MyRectSaIS0_EEC2EmRKS1_
0000a1e0  w    F .text	00000008 _ZNKSs5c_strEv
000112b4 g     F .text	000000a8 __fpcmp_parts_f
00006978  w    F .text	00000148 _ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_
00012148 g     F .text	000000f4 _fopen_r
0001a218 g     F .text	00000030 __isnand
0001b718 g     F .text	00000020 _exit
00008f48 g     F .text	000000d0 _ZNSt8ios_base7failureC2ERKSs
0001d268 g     F .text	00000154 alt_alarm_start
00008870 g     F .text	00000190 _ZSt20__throw_out_of_rangePKc
0000ae98  w    F .text	00000090 _ZNKSs7compareEmmPKcm
0000cc8c  w    F .text	00000060 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc
00010f74 g     F .text	00000098 __muldi3
00010a48 g     F .text	00000018 _Unwind_GetGR
0000ee38 g     F .text	00000008 __cxa_get_globals
00003ffc  w    F .text	00000058 _ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEplERKl
000133e0 g     F .text	00000194 __smakebuf_r
00006404  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_
00020ce0 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0000c2b8  w    F .text	00000040 _ZNSspLEPKc
0000427c  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_SaIT1_E
0001511c g     F .text	00000074 strlen
00006888  w    F .text	00000044 _ZSt24__uninitialized_fill_n_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiiEvT_T0_RKT1_SaIT2_E
00007f10 g     F .text	00000190 _ZSt23__throw_underflow_errorPKc
00014d60 g     F .text	00000064 _init_signal_r
00020cf0  w    O .rwdata	00000008 _ZTISt9type_info
0001bf10 g     F .text	00000188 open
00009eac  w    F .text	0000000c _ZNSs4_Rep12_S_empty_repEv
00009ea4  w    F .text	00000008 _ZNSs12_Alloc_hiderC1EPcRKSaIcE
000004c4 g     F .text	000002d0 readPgm
0001b334 g     F .text	00000088 __gedf2
0001ebac  w    O .rodata	0000000d _ZTSSt9exception
0001e8e0  w    O .rodata	00000014 _ZTVSt13runtime_error
00006330  w    F .text	00000084 _ZNSt6vectorI6MyRectSaIS0_EE5clearEv
0001eabc  w    O .rodata	0000000f _ZTSSt10bad_typeid
0000a36c  w    F .text	0000000c _ZNKSs6lengthEv
0000b398  w    F .text	00000020 _ZNSs13_S_copy_charsEPcS_S_
000097e4 g     F .text	00000008 _ZNKSt11logic_error4whatEv
0000b7dc  w    F .text	000000c4 _ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag
0000f0a0 g     F .text	00000010 _ZNSt9exceptionD0Ev
00012cb8 g     F .text	000000f8 _ftell_r
0000d350  w    F .text	00000070 _ZNSs6resizeEmc
00003210  w    F .text	0000007c _ZSt10_ConstructI6MyRectS0_EvPT_RKT0_
0001d848 g     F .text	00000030 alt_icache_flush_all
0001e8a8  w    O .rodata	00000014 _ZTVNSt8ios_base7failureE
0000dcd0 g     F .text	00000010 _ZNSt10bad_typeidD1Ev
00012388 g     F .text	0000001c fputs
00010adc g     F .text	00000008 _Unwind_GetDataRelBase
0000dac4  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_
00020d30 g     O .rwdata	00000004 alt_priority_mask
0000cef8  w    F .text	00000174 _ZNSs6insertEmPKcm
0001d8c8 g     F .text	0000009c alt_ic_irq_enable
000173c0 g     F .text	00000024 __vfprintf_internal
00009e7c  w    F .text	0000000c _ZNKSs8max_sizeEv
00008d74 g     F .text	00000104 _ZNSt8ios_base7failureD1Ev
0000dce0 g     F .text	00000010 _ZNSt10bad_typeidD2Ev
000067b8  w    F .text	00000048 _ZSt6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiET_S7_T0_RKT1_
00010198 g     F .text	00000080 __subdf3
0000a714  w    F .text	00000004 _ZNSs4_Rep10_M_destroyERKSaIcE
0000aff0  w    F .text	000000c0 _ZNKSs7compareEmmRKSsmm
0000a860  w    F .text	0000000c _ZNKSs12find_last_ofERKSsm
00001c04 g     F .text	00000064 releaseTextClassifier
0000b9d0  w    F .text	00000060 _ZNSsC2EPKcRKSaIcE
00009ef8  w    F .text	00000008 _ZNSs4_Rep10_M_refdataEv
00019204 g     F .text	000000c4 __lo0bits
0000d2fc  w    F .text	00000054 _ZNSs6rbeginEv
0000ccec  w    F .text	00000048 _ZNSs6insertEmmc
00004424  w    F .text	00000050 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_
00002f94  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv
00020d34 g     O .rwdata	00000008 alt_alarm_list
0001d514 g     F .text	00000064 _do_ctors
00014e88 g     F .text	00000014 __sigtramp
0001e83c  w    O .rodata	0000000c _ZTISt16invalid_argument
0000bb04  w    F .text	00000034 _ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
00004834 g     F .text	00000048 _Z5myMaxii
00006174  w    F .text	00000028 _ZNKSt6vectorIiSaIiEE8max_sizeEv
00009e20  w    F .text	0000001c _ZNKSs11_M_disjunctEPKc
0001b550 g     F .text	000000fc close
0000d62c  w    F .text	00000034 _ZNSs4swapERSs
00005ea0  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_
0000f760 g     F .text	00000064 __addsf3
0000adb8  w    F .text	0000003c _ZNSsC1EmcRKSaIcE
00009504 g     F .text	000000b0 _ZNSt11logic_errorC1ERKSs
0001bb4c g     F .text	00000080 alt_load
0001135c g     F .text	00000314 __pack_d
00009e48  w    F .text	00000010 _ZNSsC1Ev
0000f308 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
00006cec  w    F .text	000000a4 _ZNSt6vectorIiSaIiEEC1EmRKiRKS0_
00006d90  w    F .text	0000007c _ZNSt6vectorIiSaIiEED1Ev
00014d4c g     F .text	00000014 raise
00009754 g     F .text	00000030 _ZNSt16invalid_argumentC2ERKSs
00013574 g     F .text	00000014 free
00011ee8 g     F .text	00000004 __sinit_lock_acquire
000096f4 g     F .text	00000030 _ZNSt12length_errorC2ERKSs
00019e20 g     F .text	00000100 __multadd
0000f3dc g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
0001916c g     F .text	00000028 _Bfree
0000c16c  w    F .text	0000010c _ZNSs6appendEPKcm
000097ec g     F .text	000000b0 _ZNSt13runtime_errorC1ERKSs
0000b570  w    F .text	000000ec _ZNSsC1ERKSsmm



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c000b4 	movhi	r3,2
 134:	18cc3204 	addi	r3,r3,12488
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c000b4 	movhi	r3,2
 14c:	18cc3204 	addi	r3,r3,12488
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     1d0:	d6a33414 	ori	gp,gp,36048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     1d8:	108a0614 	ori	r2,r2,10264

    movhi r3, %hi(__bss_end)
     1dc:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     1e0:	18ccd614 	ori	r3,r3,13144

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	001bb4c0 	call	1bb4c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	001bd880 	call	1bd88 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <strrev>:
#include <ctype.h>
#include "image.h"
#include "stdio-wrapper.h"

char* strrev(char* str)
{
     200:	defffa04 	addi	sp,sp,-24
     204:	dfc00515 	stw	ra,20(sp)
     208:	df000415 	stw	fp,16(sp)
     20c:	df000404 	addi	fp,sp,16
     210:	e13ffe15 	stw	r4,-8(fp)
	char *p1, *p2;
	if (!str || !*str)
     214:	e0bffe17 	ldw	r2,-8(fp)
     218:	1005003a 	cmpeq	r2,r2,zero
     21c:	1000071e 	bne	r2,zero,23c <strrev+0x3c>
     220:	e0bffe17 	ldw	r2,-8(fp)
     224:	10800003 	ldbu	r2,0(r2)
     228:	10803fcc 	andi	r2,r2,255
     22c:	1080201c 	xori	r2,r2,128
     230:	10bfe004 	addi	r2,r2,-128
     234:	1004c03a 	cmpne	r2,r2,zero
     238:	1000031e 	bne	r2,zero,248 <strrev+0x48>
		return str;
     23c:	e0bffe17 	ldw	r2,-8(fp)
     240:	e0bfff15 	stw	r2,-4(fp)
     244:	00002d06 	br	2fc <strrev+0xfc>
	for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2)
     248:	e0bffe17 	ldw	r2,-8(fp)
     24c:	e0bffd15 	stw	r2,-12(fp)
     250:	e13ffe17 	ldw	r4,-8(fp)
     254:	001511c0 	call	1511c <strlen>
     258:	1007883a 	mov	r3,r2
     25c:	e0bffe17 	ldw	r2,-8(fp)
     260:	1885883a 	add	r2,r3,r2
     264:	10bfffc4 	addi	r2,r2,-1
     268:	e0bffc15 	stw	r2,-16(fp)
     26c:	00001e06 	br	2e8 <strrev+0xe8>
	{
		*p1 ^= *p2;
     270:	e0bffd17 	ldw	r2,-12(fp)
     274:	10c00003 	ldbu	r3,0(r2)
     278:	e0bffc17 	ldw	r2,-16(fp)
     27c:	10800003 	ldbu	r2,0(r2)
     280:	1884f03a 	xor	r2,r3,r2
     284:	1007883a 	mov	r3,r2
     288:	e0bffd17 	ldw	r2,-12(fp)
     28c:	10c00005 	stb	r3,0(r2)
		*p2 ^= *p1;
     290:	e0bffc17 	ldw	r2,-16(fp)
     294:	10c00003 	ldbu	r3,0(r2)
     298:	e0bffd17 	ldw	r2,-12(fp)
     29c:	10800003 	ldbu	r2,0(r2)
     2a0:	1884f03a 	xor	r2,r3,r2
     2a4:	1007883a 	mov	r3,r2
     2a8:	e0bffc17 	ldw	r2,-16(fp)
     2ac:	10c00005 	stb	r3,0(r2)
		*p1 ^= *p2;
     2b0:	e0bffd17 	ldw	r2,-12(fp)
     2b4:	10c00003 	ldbu	r3,0(r2)
     2b8:	e0bffc17 	ldw	r2,-16(fp)
     2bc:	10800003 	ldbu	r2,0(r2)
     2c0:	1884f03a 	xor	r2,r3,r2
     2c4:	1007883a 	mov	r3,r2
     2c8:	e0bffd17 	ldw	r2,-12(fp)
     2cc:	10c00005 	stb	r3,0(r2)
char* strrev(char* str)
{
	char *p1, *p2;
	if (!str || !*str)
		return str;
	for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2)
     2d0:	e0bffd17 	ldw	r2,-12(fp)
     2d4:	10800044 	addi	r2,r2,1
     2d8:	e0bffd15 	stw	r2,-12(fp)
     2dc:	e0bffc17 	ldw	r2,-16(fp)
     2e0:	10bfffc4 	addi	r2,r2,-1
     2e4:	e0bffc15 	stw	r2,-16(fp)
     2e8:	e0fffc17 	ldw	r3,-16(fp)
     2ec:	e0bffd17 	ldw	r2,-12(fp)
     2f0:	10ffdf36 	bltu	r2,r3,270 <strrev+0x70>
	{
		*p1 ^= *p2;
		*p2 ^= *p1;
		*p1 ^= *p2;
	}
	return str;
     2f4:	e0bffe17 	ldw	r2,-8(fp)
     2f8:	e0bfff15 	stw	r2,-4(fp)
     2fc:	e0bfff17 	ldw	r2,-4(fp)
}
     300:	e037883a 	mov	sp,fp
     304:	dfc00117 	ldw	ra,4(sp)
     308:	df000017 	ldw	fp,0(sp)
     30c:	dec00204 	addi	sp,sp,8
     310:	f800283a 	ret

00000314 <myatoi>:
//	}
//	return(i);
//}

int myatoi (char* string)
{
     314:	defff904 	addi	sp,sp,-28
     318:	dfc00615 	stw	ra,24(sp)
     31c:	df000515 	stw	fp,20(sp)
     320:	df000504 	addi	fp,sp,20
     324:	e13fff15 	stw	r4,-4(fp)
	int sign = 1;
     328:	00800044 	movi	r2,1
     32c:	e0bffe15 	stw	r2,-8(fp)
	// how many characters in the string
	int length = strlen(string);
     330:	e13fff17 	ldw	r4,-4(fp)
     334:	001511c0 	call	1511c <strlen>
     338:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
     33c:	e03ffc15 	stw	zero,-16(fp)
	int number = 0;
     340:	e03ffb15 	stw	zero,-20(fp)

	// handle sign
	if (string[0] == '-')
     344:	e0bfff17 	ldw	r2,-4(fp)
     348:	10800003 	ldbu	r2,0(r2)
     34c:	10803fcc 	andi	r2,r2,255
     350:	1080201c 	xori	r2,r2,128
     354:	10bfe004 	addi	r2,r2,-128
     358:	10800b58 	cmpnei	r2,r2,45
     35c:	1000201e 	bne	r2,zero,3e0 <myatoi+0xcc>
	{
		sign = -1;
     360:	00bfffc4 	movi	r2,-1
     364:	e0bffe15 	stw	r2,-8(fp)
		i++;
     368:	e0bffc17 	ldw	r2,-16(fp)
     36c:	10800044 	addi	r2,r2,1
     370:	e0bffc15 	stw	r2,-16(fp)
	}

//	for (i; i < length; i++)
	while(i < length)
     374:	00001a06 	br	3e0 <myatoi+0xcc>
	{
		// handle the decimal place if there is one
		if (string[i] == '.')
     378:	e0bffc17 	ldw	r2,-16(fp)
     37c:	1007883a 	mov	r3,r2
     380:	e0bfff17 	ldw	r2,-4(fp)
     384:	1885883a 	add	r2,r3,r2
     388:	10800003 	ldbu	r2,0(r2)
     38c:	10803fcc 	andi	r2,r2,255
     390:	1080201c 	xori	r2,r2,128
     394:	10bfe004 	addi	r2,r2,-128
     398:	10800ba0 	cmpeqi	r2,r2,46
     39c:	1000131e 	bne	r2,zero,3ec <myatoi+0xd8>
			break;
		number = number * 10 + (string[i]- 48);
     3a0:	e0bffb17 	ldw	r2,-20(fp)
     3a4:	110002a4 	muli	r4,r2,10
     3a8:	e0bffc17 	ldw	r2,-16(fp)
     3ac:	1007883a 	mov	r3,r2
     3b0:	e0bfff17 	ldw	r2,-4(fp)
     3b4:	1885883a 	add	r2,r3,r2
     3b8:	10800003 	ldbu	r2,0(r2)
     3bc:	10803fcc 	andi	r2,r2,255
     3c0:	1080201c 	xori	r2,r2,128
     3c4:	10bfe004 	addi	r2,r2,-128
     3c8:	2085883a 	add	r2,r4,r2
     3cc:	10bff404 	addi	r2,r2,-48
     3d0:	e0bffb15 	stw	r2,-20(fp)
		i++;
     3d4:	e0bffc17 	ldw	r2,-16(fp)
     3d8:	10800044 	addi	r2,r2,1
     3dc:	e0bffc15 	stw	r2,-16(fp)
		sign = -1;
		i++;
	}

//	for (i; i < length; i++)
	while(i < length)
     3e0:	e0fffc17 	ldw	r3,-16(fp)
     3e4:	e0bffd17 	ldw	r2,-12(fp)
     3e8:	18bfe316 	blt	r3,r2,378 <myatoi+0x64>
			break;
		number = number * 10 + (string[i]- 48);
		i++;
	}

	number *= sign;
     3ec:	e0fffb17 	ldw	r3,-20(fp)
     3f0:	e0bffe17 	ldw	r2,-8(fp)
     3f4:	1885383a 	mul	r2,r3,r2
     3f8:	e0bffb15 	stw	r2,-20(fp)

	return number;
     3fc:	e0bffb17 	ldw	r2,-20(fp)
}
     400:	e037883a 	mov	sp,fp
     404:	dfc00117 	ldw	ra,4(sp)
     408:	df000017 	ldw	fp,0(sp)
     40c:	dec00204 	addi	sp,sp,8
     410:	f800283a 	ret

00000414 <itochar>:

void itochar(int x, char* szBuffer, int radix)
{
     414:	defff804 	addi	sp,sp,-32
     418:	dfc00715 	stw	ra,28(sp)
     41c:	df000615 	stw	fp,24(sp)
     420:	df000604 	addi	fp,sp,24
     424:	e13ffd15 	stw	r4,-12(fp)
     428:	e17ffe15 	stw	r5,-8(fp)
     42c:	e1bfff15 	stw	r6,-4(fp)
	int i = 0, n, xx;
     430:	e03ffc15 	stw	zero,-16(fp)
	n = x;
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	e0bffb15 	stw	r2,-20(fp)
	while (n > 0)
     43c:	00001206 	br	488 <itochar+0x74>
	{
		xx = n%radix;
     440:	e13ffb17 	ldw	r4,-20(fp)
     444:	e17fff17 	ldw	r5,-4(fp)
     448:	00109bc0 	call	109bc <__modsi3>
     44c:	e0bffa15 	stw	r2,-24(fp)
		n = n/radix;
     450:	e13ffb17 	ldw	r4,-20(fp)
     454:	e17fff17 	ldw	r5,-4(fp)
     458:	001095c0 	call	1095c <__divsi3>
     45c:	e0bffb15 	stw	r2,-20(fp)
		szBuffer[i++] = '0' + xx;
     460:	e0bffc17 	ldw	r2,-16(fp)
     464:	1007883a 	mov	r3,r2
     468:	e0bffe17 	ldw	r2,-8(fp)
     46c:	1887883a 	add	r3,r3,r2
     470:	e0bffa17 	ldw	r2,-24(fp)
     474:	10800c04 	addi	r2,r2,48
     478:	18800005 	stb	r2,0(r3)
     47c:	e0bffc17 	ldw	r2,-16(fp)
     480:	10800044 	addi	r2,r2,1
     484:	e0bffc15 	stw	r2,-16(fp)

void itochar(int x, char* szBuffer, int radix)
{
	int i = 0, n, xx;
	n = x;
	while (n > 0)
     488:	e0bffb17 	ldw	r2,-20(fp)
     48c:	10800048 	cmpgei	r2,r2,1
     490:	103feb1e 	bne	r2,zero,440 <itochar+0x2c>
	{
		xx = n%radix;
		n = n/radix;
		szBuffer[i++] = '0' + xx;
	}
	szBuffer[i] = '\0';
     494:	e0bffc17 	ldw	r2,-16(fp)
     498:	1007883a 	mov	r3,r2
     49c:	e0bffe17 	ldw	r2,-8(fp)
     4a0:	1885883a 	add	r2,r3,r2
     4a4:	10000005 	stb	zero,0(r2)
	strrev(szBuffer);
     4a8:	e13ffe17 	ldw	r4,-8(fp)
     4ac:	00002000 	call	200 <strrev>
}
     4b0:	e037883a 	mov	sp,fp
     4b4:	dfc00117 	ldw	ra,4(sp)
     4b8:	df000017 	ldw	fp,0(sp)
     4bc:	dec00204 	addi	sp,sp,8
     4c0:	f800283a 	ret

000004c4 <readPgm>:


int readPgm(char *fileName, MyImage *image)
{
     4c4:	deffd604 	addi	sp,sp,-168
     4c8:	dfc02915 	stw	ra,164(sp)
     4cc:	df002815 	stw	fp,160(sp)
     4d0:	df002804 	addi	fp,sp,160
     4d4:	e13ffd15 	stw	r4,-12(fp)
     4d8:	e17ffe15 	stw	r5,-8(fp)
	char mystring [20];
	char *pch;
	int i;
	long int position;

	in_file = fopen(fileName, "r");
     4dc:	e13ffd17 	ldw	r4,-12(fp)
     4e0:	014000b4 	movhi	r5,2
     4e4:	29793d04 	addi	r5,r5,-6924
     4e8:	001223c0 	call	1223c <fopen>
     4ec:	e0bfdd15 	stw	r2,-140(fp)
	if (in_file == NULL)
     4f0:	e0bfdd17 	ldw	r2,-140(fp)
     4f4:	1004c03a 	cmpne	r2,r2,zero
     4f8:	1000071e 	bne	r2,zero,518 <readPgm+0x54>
	{
		printf("ERROR: Unable to open file %s\n\n", fileName);
     4fc:	010000b4 	movhi	r4,2
     500:	21393e04 	addi	r4,r4,-6920
     504:	e17ffd17 	ldw	r5,-12(fp)
     508:	00140c40 	call	140c4 <printf>
		return -1;
     50c:	00bfffc4 	movi	r2,-1
     510:	e0bfff15 	stw	r2,-4(fp)
     514:	00009906 	br	77c <readPgm+0x2b8>
	}
	printf("\nReading image file: %s\n", fileName);
     518:	010000b4 	movhi	r4,2
     51c:	21394604 	addi	r4,r4,-6888
     520:	e17ffd17 	ldw	r5,-12(fp)
     524:	00140c40 	call	140c4 <printf>
	// Determine image type (only pgm format is allowed)*/
	ch = fgetc(in_file);
     528:	e13fdd17 	ldw	r4,-140(fp)
     52c:	0011bf40 	call	11bf4 <fgetc>
     530:	e0bfdc05 	stb	r2,-144(fp)
	if(ch != 'P')
     534:	e0bfdc07 	ldb	r2,-144(fp)
     538:	10801420 	cmpeqi	r2,r2,80
     53c:	1000061e 	bne	r2,zero,558 <readPgm+0x94>
	{
		printf("ERROR: Not valid pgm file type\n");
     540:	010000b4 	movhi	r4,2
     544:	21394d04 	addi	r4,r4,-6860
     548:	00143c80 	call	143c8 <puts>
		return -1;
     54c:	00bfffc4 	movi	r2,-1
     550:	e0bfff15 	stw	r2,-4(fp)
     554:	00008906 	br	77c <readPgm+0x2b8>
	}

	ch = fgetc(in_file);
     558:	e13fdd17 	ldw	r4,-140(fp)
     55c:	0011bf40 	call	11bf4 <fgetc>
     560:	e0bfdc05 	stb	r2,-144(fp)

	/*convert the one digit integer currently represented as a character to

         an integer(48 == '0')*/

	type = ch - 48;
     564:	e0bfdc07 	ldb	r2,-144(fp)
     568:	10bff404 	addi	r2,r2,-48
     56c:	e0bfdb15 	stw	r2,-148(fp)

	if(type != 5)
     570:	e0bfdb17 	ldw	r2,-148(fp)
     574:	10800160 	cmpeqi	r2,r2,5
     578:	1000061e 	bne	r2,zero,594 <readPgm+0xd0>
	{
		printf("ERROR: only pgm raw format is allowed\n");
     57c:	010000b4 	movhi	r4,2
     580:	21395504 	addi	r4,r4,-6828
     584:	00143c80 	call	143c8 <puts>
		return -1;
     588:	00bfffc4 	movi	r2,-1
     58c:	e0bfff15 	stw	r2,-4(fp)
     590:	00007a06 	br	77c <readPgm+0x2b8>
	}
	// Skip comments
//	char line[100];
	while ((ch = fgetc(in_file)) != EOF && isspace(ch));
     594:	e13fdd17 	ldw	r4,-140(fp)
     598:	0011bf40 	call	11bf4 <fgetc>
     59c:	e0bfdc05 	stb	r2,-144(fp)
     5a0:	e0bfdc07 	ldb	r2,-144(fp)
     5a4:	10bfffe0 	cmpeqi	r2,r2,-1
     5a8:	10000b1e 	bne	r2,zero,5d8 <readPgm+0x114>
     5ac:	e0bfdc07 	ldb	r2,-144(fp)
     5b0:	1007883a 	mov	r3,r2
     5b4:	008000b4 	movhi	r2,2
     5b8:	10833e04 	addi	r2,r2,3320
     5bc:	10800017 	ldw	r2,0(r2)
     5c0:	1885883a 	add	r2,r3,r2
     5c4:	10800003 	ldbu	r2,0(r2)
     5c8:	10803fcc 	andi	r2,r2,255
     5cc:	1080020c 	andi	r2,r2,8
     5d0:	1004c03a 	cmpne	r2,r2,zero
     5d4:	103fef1e 	bne	r2,zero,594 <readPgm+0xd0>
	position = ftell(in_file);
     5d8:	e13fdd17 	ldw	r4,-140(fp)
     5dc:	0012db00 	call	12db0 <ftell>
     5e0:	e0bfd815 	stw	r2,-160(fp)


	// skip comments
	if (ch == '#')
     5e4:	e0bfdc07 	ldb	r2,-144(fp)
     5e8:	108008d8 	cmpnei	r2,r2,35
     5ec:	1000181e 	bne	r2,zero,650 <readPgm+0x18c>
		{
			fgets(line, sizeof(line), in_file);
     5f0:	e13fdec4 	addi	r4,fp,-133
     5f4:	01401904 	movi	r5,100
     5f8:	e1bfdd17 	ldw	r6,-140(fp)
     5fc:	0011e640 	call	11e64 <fgets>
			while ((ch = fgetc(in_file)) != EOF && isspace(ch));
     600:	e13fdd17 	ldw	r4,-140(fp)
     604:	0011bf40 	call	11bf4 <fgetc>
     608:	e0bfdc05 	stb	r2,-144(fp)
     60c:	e0bfdc07 	ldb	r2,-144(fp)
     610:	10bfffe0 	cmpeqi	r2,r2,-1
     614:	10000b1e 	bne	r2,zero,644 <readPgm+0x180>
     618:	e0bfdc07 	ldb	r2,-144(fp)
     61c:	1007883a 	mov	r3,r2
     620:	008000b4 	movhi	r2,2
     624:	10833e04 	addi	r2,r2,3320
     628:	10800017 	ldw	r2,0(r2)
     62c:	1885883a 	add	r2,r3,r2
     630:	10800003 	ldbu	r2,0(r2)
     634:	10803fcc 	andi	r2,r2,255
     638:	1080020c 	andi	r2,r2,8
     63c:	1004c03a 	cmpne	r2,r2,zero
     640:	103fef1e 	bne	r2,zero,600 <readPgm+0x13c>
			position = ftell(in_file);
     644:	e13fdd17 	ldw	r4,-140(fp)
     648:	0012db00 	call	12db0 <ftell>
     64c:	e0bfd815 	stw	r2,-160(fp)
		}

	fseek(in_file, position-1, SEEK_SET);
     650:	e0bfd817 	ldw	r2,-160(fp)
     654:	117fffc4 	addi	r5,r2,-1
     658:	e13fdd17 	ldw	r4,-140(fp)
     65c:	000d883a 	mov	r6,zero
     660:	0012c200 	call	12c20 <fseek>

	fgets (mystring , 20, in_file);
     664:	e13ff7c4 	addi	r4,fp,-33
     668:	01400504 	movi	r5,20
     66c:	e1bfdd17 	ldw	r6,-140(fp)
     670:	0011e640 	call	11e64 <fgets>
	pch = (char *)strtok(mystring," ");
     674:	e13ff7c4 	addi	r4,fp,-33
     678:	014000b4 	movhi	r5,2
     67c:	29795f04 	addi	r5,r5,-6788
     680:	00151900 	call	15190 <strtok>
     684:	e0bfda15 	stw	r2,-152(fp)
	image->width = atoi(pch);
     688:	e13fda17 	ldw	r4,-152(fp)
     68c:	00118940 	call	11894 <atoi>
     690:	1007883a 	mov	r3,r2
     694:	e0bffe17 	ldw	r2,-8(fp)
     698:	10c00015 	stw	r3,0(r2)
	pch = (char *)strtok(NULL," ");
     69c:	0009883a 	mov	r4,zero
     6a0:	014000b4 	movhi	r5,2
     6a4:	29795f04 	addi	r5,r5,-6788
     6a8:	00151900 	call	15190 <strtok>
     6ac:	e0bfda15 	stw	r2,-152(fp)
	image->height = atoi(pch);
     6b0:	e13fda17 	ldw	r4,-152(fp)
     6b4:	00118940 	call	11894 <atoi>
     6b8:	1007883a 	mov	r3,r2
     6bc:	e0bffe17 	ldw	r2,-8(fp)
     6c0:	10c00115 	stw	r3,4(r2)
	fgets (mystring , 5, in_file);
     6c4:	e13ff7c4 	addi	r4,fp,-33
     6c8:	01400144 	movi	r5,5
     6cc:	e1bfdd17 	ldw	r6,-140(fp)
     6d0:	0011e640 	call	11e64 <fgets>
	image->maxgrey = atoi(mystring);
     6d4:	e13ff7c4 	addi	r4,fp,-33
     6d8:	00118940 	call	11894 <atoi>
     6dc:	1007883a 	mov	r3,r2
     6e0:	e0bffe17 	ldw	r2,-8(fp)
     6e4:	10c00215 	stw	r3,8(r2)
	image->data = (unsigned char*)malloc(sizeof(unsigned char)*(image->height*image->width));//new unsigned char[row*col];
     6e8:	e0bffe17 	ldw	r2,-8(fp)
     6ec:	10c00117 	ldw	r3,4(r2)
     6f0:	e0bffe17 	ldw	r2,-8(fp)
     6f4:	10800017 	ldw	r2,0(r2)
     6f8:	1885383a 	mul	r2,r3,r2
     6fc:	1009883a 	mov	r4,r2
     700:	00135880 	call	13588 <malloc>
     704:	1007883a 	mov	r3,r2
     708:	e0bffe17 	ldw	r2,-8(fp)
     70c:	10c00315 	stw	r3,12(r2)
	image->flag = 1;
     710:	e0fffe17 	ldw	r3,-8(fp)
     714:	00800044 	movi	r2,1
     718:	18800415 	stw	r2,16(r3)
	for(i=0;i<(image->height*image->width);i++)
     71c:	e03fd915 	stw	zero,-156(fp)
     720:	00000c06 	br	754 <readPgm+0x290>
	{	
		ch = fgetc(in_file);
     724:	e13fdd17 	ldw	r4,-140(fp)
     728:	0011bf40 	call	11bf4 <fgetc>
     72c:	e0bfdc05 	stb	r2,-144(fp)
		image->data[i] = (unsigned char)ch;
     730:	e0bffe17 	ldw	r2,-8(fp)
     734:	10c00317 	ldw	r3,12(r2)
     738:	e0bfd917 	ldw	r2,-156(fp)
     73c:	1887883a 	add	r3,r3,r2
     740:	e0bfdc03 	ldbu	r2,-144(fp)
     744:	18800005 	stb	r2,0(r3)
	image->height = atoi(pch);
	fgets (mystring , 5, in_file);
	image->maxgrey = atoi(mystring);
	image->data = (unsigned char*)malloc(sizeof(unsigned char)*(image->height*image->width));//new unsigned char[row*col];
	image->flag = 1;
	for(i=0;i<(image->height*image->width);i++)
     748:	e0bfd917 	ldw	r2,-156(fp)
     74c:	10800044 	addi	r2,r2,1
     750:	e0bfd915 	stw	r2,-156(fp)
     754:	e0bffe17 	ldw	r2,-8(fp)
     758:	10c00117 	ldw	r3,4(r2)
     75c:	e0bffe17 	ldw	r2,-8(fp)
     760:	10800017 	ldw	r2,0(r2)
     764:	1887383a 	mul	r3,r3,r2
     768:	e0bfd917 	ldw	r2,-156(fp)
     76c:	10ffed16 	blt	r2,r3,724 <readPgm+0x260>
	{	
		ch = fgetc(in_file);
		image->data[i] = (unsigned char)ch;
	}
	fclose(in_file);
     770:	e13fdd17 	ldw	r4,-140(fp)
     774:	00119b00 	call	119b0 <fclose>
	return 0;
     778:	e03fff15 	stw	zero,-4(fp)
     77c:	e0bfff17 	ldw	r2,-4(fp)
}
     780:	e037883a 	mov	sp,fp
     784:	dfc00117 	ldw	ra,4(sp)
     788:	df000017 	ldw	fp,0(sp)
     78c:	dec00204 	addi	sp,sp,8
     790:	f800283a 	ret

00000794 <writePgm>:

int writePgm(char *fileName, MyImage *image)
{
     794:	defff604 	addi	sp,sp,-40
     798:	dfc00915 	stw	ra,36(sp)
     79c:	df000815 	stw	fp,32(sp)
     7a0:	df000804 	addi	fp,sp,32
     7a4:	e13ffd15 	stw	r4,-12(fp)
     7a8:	e17ffe15 	stw	r5,-8(fp)
	char parameters_str[5];
	int i;
	const char *format = "P5";
     7ac:	008000b4 	movhi	r2,2
     7b0:	10b96004 	addi	r2,r2,-6784
     7b4:	e0bff915 	stw	r2,-28(fp)
	if (image->flag == 0)
     7b8:	e0bffe17 	ldw	r2,-8(fp)
     7bc:	10800417 	ldw	r2,16(r2)
     7c0:	1004c03a 	cmpne	r2,r2,zero
     7c4:	1000031e 	bne	r2,zero,7d4 <writePgm+0x40>
	{
		return -1;
     7c8:	00bfffc4 	movi	r2,-1
     7cc:	e0bfff15 	stw	r2,-4(fp)
     7d0:	00004f06 	br	910 <writePgm+0x17c>
	}
	FILE *fp = fopen(fileName, "w");
     7d4:	e13ffd17 	ldw	r4,-12(fp)
     7d8:	014000b4 	movhi	r5,2
     7dc:	29796104 	addi	r5,r5,-6780
     7e0:	001223c0 	call	1223c <fopen>
     7e4:	e0bff815 	stw	r2,-32(fp)
	if (!fp)
     7e8:	e0bff817 	ldw	r2,-32(fp)
     7ec:	1004c03a 	cmpne	r2,r2,zero
     7f0:	1000071e 	bne	r2,zero,810 <writePgm+0x7c>
	{
		printf("Unable to open file %s\n", fileName);
     7f4:	010000b4 	movhi	r4,2
     7f8:	21396204 	addi	r4,r4,-6776
     7fc:	e17ffd17 	ldw	r5,-12(fp)
     800:	00140c40 	call	140c4 <printf>
		return -1;
     804:	00bfffc4 	movi	r2,-1
     808:	e0bfff15 	stw	r2,-4(fp)
     80c:	00004006 	br	910 <writePgm+0x17c>
	}
	fputs(format, fp);
     810:	e13ff917 	ldw	r4,-28(fp)
     814:	e17ff817 	ldw	r5,-32(fp)
     818:	00123880 	call	12388 <fputs>
	fputc('\n', fp);
     81c:	01000284 	movi	r4,10
     820:	e17ff817 	ldw	r5,-32(fp)
     824:	00122580 	call	12258 <fputc>

	itochar(image->width, parameters_str, 10);
     828:	e0bffe17 	ldw	r2,-8(fp)
     82c:	11000017 	ldw	r4,0(r2)
     830:	e17ffb04 	addi	r5,fp,-20
     834:	01800284 	movi	r6,10
     838:	00004140 	call	414 <itochar>
	fputs(parameters_str, fp);
     83c:	e13ffb04 	addi	r4,fp,-20
     840:	e17ff817 	ldw	r5,-32(fp)
     844:	00123880 	call	12388 <fputs>
	parameters_str[0] = 0;
     848:	e03ffb05 	stb	zero,-20(fp)
	fputc(' ', fp);
     84c:	01000804 	movi	r4,32
     850:	e17ff817 	ldw	r5,-32(fp)
     854:	00122580 	call	12258 <fputc>

	itochar(image->height, parameters_str, 10);
     858:	e0bffe17 	ldw	r2,-8(fp)
     85c:	11000117 	ldw	r4,4(r2)
     860:	e17ffb04 	addi	r5,fp,-20
     864:	01800284 	movi	r6,10
     868:	00004140 	call	414 <itochar>
	fputs(parameters_str, fp);
     86c:	e13ffb04 	addi	r4,fp,-20
     870:	e17ff817 	ldw	r5,-32(fp)
     874:	00123880 	call	12388 <fputs>
	parameters_str[0] = 0;
     878:	e03ffb05 	stb	zero,-20(fp)
	fputc('\n', fp);
     87c:	01000284 	movi	r4,10
     880:	e17ff817 	ldw	r5,-32(fp)
     884:	00122580 	call	12258 <fputc>

	itochar(image->maxgrey, parameters_str, 10);
     888:	e0bffe17 	ldw	r2,-8(fp)
     88c:	11000217 	ldw	r4,8(r2)
     890:	e17ffb04 	addi	r5,fp,-20
     894:	01800284 	movi	r6,10
     898:	00004140 	call	414 <itochar>
	fputs(parameters_str, fp);
     89c:	e13ffb04 	addi	r4,fp,-20
     8a0:	e17ff817 	ldw	r5,-32(fp)
     8a4:	00123880 	call	12388 <fputs>
	fputc('\n', fp);
     8a8:	01000284 	movi	r4,10
     8ac:	e17ff817 	ldw	r5,-32(fp)
     8b0:	00122580 	call	12258 <fputc>

	for (i = 0; i < (image->width * image->height); i++)
     8b4:	e03ffa15 	stw	zero,-24(fp)
     8b8:	00000b06 	br	8e8 <writePgm+0x154>
	{
		fputc(image->data[i], fp);
     8bc:	e0bffe17 	ldw	r2,-8(fp)
     8c0:	10c00317 	ldw	r3,12(r2)
     8c4:	e0bffa17 	ldw	r2,-24(fp)
     8c8:	1885883a 	add	r2,r3,r2
     8cc:	10800003 	ldbu	r2,0(r2)
     8d0:	11003fcc 	andi	r4,r2,255
     8d4:	e17ff817 	ldw	r5,-32(fp)
     8d8:	00122580 	call	12258 <fputc>

	itochar(image->maxgrey, parameters_str, 10);
	fputs(parameters_str, fp);
	fputc('\n', fp);

	for (i = 0; i < (image->width * image->height); i++)
     8dc:	e0bffa17 	ldw	r2,-24(fp)
     8e0:	10800044 	addi	r2,r2,1
     8e4:	e0bffa15 	stw	r2,-24(fp)
     8e8:	e0bffe17 	ldw	r2,-8(fp)
     8ec:	10c00017 	ldw	r3,0(r2)
     8f0:	e0bffe17 	ldw	r2,-8(fp)
     8f4:	10800117 	ldw	r2,4(r2)
     8f8:	1887383a 	mul	r3,r3,r2
     8fc:	e0bffa17 	ldw	r2,-24(fp)
     900:	10ffee16 	blt	r2,r3,8bc <writePgm+0x128>
	{
		fputc(image->data[i], fp);
	}
	fclose(fp);
     904:	e13ff817 	ldw	r4,-32(fp)
     908:	00119b00 	call	119b0 <fclose>
	return 0;
     90c:	e03fff15 	stw	zero,-4(fp)
     910:	e0bfff17 	ldw	r2,-4(fp)
}
     914:	e037883a 	mov	sp,fp
     918:	dfc00117 	ldw	ra,4(sp)
     91c:	df000017 	ldw	fp,0(sp)
     920:	dec00204 	addi	sp,sp,8
     924:	f800283a 	ret

00000928 <cpyPgm>:

int cpyPgm(MyImage* src, MyImage* dst)
{
     928:	defffa04 	addi	sp,sp,-24
     92c:	dfc00515 	stw	ra,20(sp)
     930:	df000415 	stw	fp,16(sp)
     934:	df000404 	addi	fp,sp,16
     938:	e13ffd15 	stw	r4,-12(fp)
     93c:	e17ffe15 	stw	r5,-8(fp)
	int i = 0;
     940:	e03ffc15 	stw	zero,-16(fp)
	if (src->flag == 0)
     944:	e0bffd17 	ldw	r2,-12(fp)
     948:	10800417 	ldw	r2,16(r2)
     94c:	1004c03a 	cmpne	r2,r2,zero
     950:	1000061e 	bne	r2,zero,96c <cpyPgm+0x44>
	{
		printf("No data available in the specified source image\n");
     954:	010000b4 	movhi	r4,2
     958:	21396804 	addi	r4,r4,-6752
     95c:	00143c80 	call	143c8 <puts>
		return -1;
     960:	00bfffc4 	movi	r2,-1
     964:	e0bfff15 	stw	r2,-4(fp)
     968:	00003006 	br	a2c <cpyPgm+0x104>
	}
	dst->width = src->width;
     96c:	e0bffd17 	ldw	r2,-12(fp)
     970:	10c00017 	ldw	r3,0(r2)
     974:	e0bffe17 	ldw	r2,-8(fp)
     978:	10c00015 	stw	r3,0(r2)
	dst->height = src->height;
     97c:	e0bffd17 	ldw	r2,-12(fp)
     980:	10c00117 	ldw	r3,4(r2)
     984:	e0bffe17 	ldw	r2,-8(fp)
     988:	10c00115 	stw	r3,4(r2)
	dst->maxgrey = src->maxgrey;
     98c:	e0bffd17 	ldw	r2,-12(fp)
     990:	10c00217 	ldw	r3,8(r2)
     994:	e0bffe17 	ldw	r2,-8(fp)
     998:	10c00215 	stw	r3,8(r2)
	dst->data = (unsigned char*)malloc(sizeof(unsigned char)*(dst->height*dst->width));
     99c:	e0bffe17 	ldw	r2,-8(fp)
     9a0:	10c00117 	ldw	r3,4(r2)
     9a4:	e0bffe17 	ldw	r2,-8(fp)
     9a8:	10800017 	ldw	r2,0(r2)
     9ac:	1885383a 	mul	r2,r3,r2
     9b0:	1009883a 	mov	r4,r2
     9b4:	00135880 	call	13588 <malloc>
     9b8:	1007883a 	mov	r3,r2
     9bc:	e0bffe17 	ldw	r2,-8(fp)
     9c0:	10c00315 	stw	r3,12(r2)
	dst->flag = 1;
     9c4:	e0fffe17 	ldw	r3,-8(fp)
     9c8:	00800044 	movi	r2,1
     9cc:	18800415 	stw	r2,16(r3)
	for (i = 0; i < (dst->width * dst->height); i++)
     9d0:	e03ffc15 	stw	zero,-16(fp)
     9d4:	00000d06 	br	a0c <cpyPgm+0xe4>
	{
		dst->data[i] = src->data[i];
     9d8:	e0bffe17 	ldw	r2,-8(fp)
     9dc:	10c00317 	ldw	r3,12(r2)
     9e0:	e0bffc17 	ldw	r2,-16(fp)
     9e4:	1889883a 	add	r4,r3,r2
     9e8:	e0bffd17 	ldw	r2,-12(fp)
     9ec:	10c00317 	ldw	r3,12(r2)
     9f0:	e0bffc17 	ldw	r2,-16(fp)
     9f4:	1885883a 	add	r2,r3,r2
     9f8:	10800003 	ldbu	r2,0(r2)
     9fc:	20800005 	stb	r2,0(r4)
	dst->width = src->width;
	dst->height = src->height;
	dst->maxgrey = src->maxgrey;
	dst->data = (unsigned char*)malloc(sizeof(unsigned char)*(dst->height*dst->width));
	dst->flag = 1;
	for (i = 0; i < (dst->width * dst->height); i++)
     a00:	e0bffc17 	ldw	r2,-16(fp)
     a04:	10800044 	addi	r2,r2,1
     a08:	e0bffc15 	stw	r2,-16(fp)
     a0c:	e0bffe17 	ldw	r2,-8(fp)
     a10:	10c00017 	ldw	r3,0(r2)
     a14:	e0bffe17 	ldw	r2,-8(fp)
     a18:	10800117 	ldw	r2,4(r2)
     a1c:	1887383a 	mul	r3,r3,r2
     a20:	e0bffc17 	ldw	r2,-16(fp)
     a24:	10ffec16 	blt	r2,r3,9d8 <cpyPgm+0xb0>
	{
		dst->data[i] = src->data[i];
	}
}
     a28:	00000106 	br	a30 <cpyPgm+0x108>
     a2c:	e0bfff17 	ldw	r2,-4(fp)
     a30:	e037883a 	mov	sp,fp
     a34:	dfc00117 	ldw	ra,4(sp)
     a38:	df000017 	ldw	fp,0(sp)
     a3c:	dec00204 	addi	sp,sp,8
     a40:	f800283a 	ret

00000a44 <createImage>:


void createImage(int width, int height, MyImage *image)
{
     a44:	defffb04 	addi	sp,sp,-20
     a48:	dfc00415 	stw	ra,16(sp)
     a4c:	df000315 	stw	fp,12(sp)
     a50:	df000304 	addi	fp,sp,12
     a54:	e13ffd15 	stw	r4,-12(fp)
     a58:	e17ffe15 	stw	r5,-8(fp)
     a5c:	e1bfff15 	stw	r6,-4(fp)
	image->width = width;
     a60:	e0ffff17 	ldw	r3,-4(fp)
     a64:	e0bffd17 	ldw	r2,-12(fp)
     a68:	18800015 	stw	r2,0(r3)
	image->height = height;
     a6c:	e0ffff17 	ldw	r3,-4(fp)
     a70:	e0bffe17 	ldw	r2,-8(fp)
     a74:	18800115 	stw	r2,4(r3)
	image->flag = 1;
     a78:	e0ffff17 	ldw	r3,-4(fp)
     a7c:	00800044 	movi	r2,1
     a80:	18800415 	stw	r2,16(r3)
	image->data = (unsigned char *)malloc(sizeof(unsigned char)*(height*width));
     a84:	e0fffe17 	ldw	r3,-8(fp)
     a88:	e0bffd17 	ldw	r2,-12(fp)
     a8c:	1885383a 	mul	r2,r3,r2
     a90:	1009883a 	mov	r4,r2
     a94:	00135880 	call	13588 <malloc>
     a98:	1007883a 	mov	r3,r2
     a9c:	e0bfff17 	ldw	r2,-4(fp)
     aa0:	10c00315 	stw	r3,12(r2)
}
     aa4:	e037883a 	mov	sp,fp
     aa8:	dfc00117 	ldw	ra,4(sp)
     aac:	df000017 	ldw	fp,0(sp)
     ab0:	dec00204 	addi	sp,sp,8
     ab4:	f800283a 	ret

00000ab8 <createSumImage>:

void createSumImage(int width, int height, MyIntImage *image)
{
     ab8:	defffb04 	addi	sp,sp,-20
     abc:	dfc00415 	stw	ra,16(sp)
     ac0:	df000315 	stw	fp,12(sp)
     ac4:	df000304 	addi	fp,sp,12
     ac8:	e13ffd15 	stw	r4,-12(fp)
     acc:	e17ffe15 	stw	r5,-8(fp)
     ad0:	e1bfff15 	stw	r6,-4(fp)
	image->width = width;
     ad4:	e0ffff17 	ldw	r3,-4(fp)
     ad8:	e0bffd17 	ldw	r2,-12(fp)
     adc:	18800015 	stw	r2,0(r3)
	image->height = height;
     ae0:	e0ffff17 	ldw	r3,-4(fp)
     ae4:	e0bffe17 	ldw	r2,-8(fp)
     ae8:	18800115 	stw	r2,4(r3)
	image->flag = 1;
     aec:	e0ffff17 	ldw	r3,-4(fp)
     af0:	00800044 	movi	r2,1
     af4:	18800315 	stw	r2,12(r3)
	image->data = (int *)malloc(sizeof(int)*(height*width));
     af8:	e0fffe17 	ldw	r3,-8(fp)
     afc:	e0bffd17 	ldw	r2,-12(fp)
     b00:	1885383a 	mul	r2,r3,r2
     b04:	1085883a 	add	r2,r2,r2
     b08:	1085883a 	add	r2,r2,r2
     b0c:	1009883a 	mov	r4,r2
     b10:	00135880 	call	13588 <malloc>
     b14:	1007883a 	mov	r3,r2
     b18:	e0bfff17 	ldw	r2,-4(fp)
     b1c:	10c00215 	stw	r3,8(r2)
}
     b20:	e037883a 	mov	sp,fp
     b24:	dfc00117 	ldw	ra,4(sp)
     b28:	df000017 	ldw	fp,0(sp)
     b2c:	dec00204 	addi	sp,sp,8
     b30:	f800283a 	ret

00000b34 <freeImage>:

int freeImage(MyImage* image)
{
     b34:	defffc04 	addi	sp,sp,-16
     b38:	dfc00315 	stw	ra,12(sp)
     b3c:	df000215 	stw	fp,8(sp)
     b40:	df000204 	addi	fp,sp,8
     b44:	e13ffe15 	stw	r4,-8(fp)
	if (image->flag == 0)
     b48:	e0bffe17 	ldw	r2,-8(fp)
     b4c:	10800417 	ldw	r2,16(r2)
     b50:	1004c03a 	cmpne	r2,r2,zero
     b54:	1000061e 	bne	r2,zero,b70 <freeImage+0x3c>
	{
		printf("no image to delete\n");
     b58:	010000b4 	movhi	r4,2
     b5c:	21397404 	addi	r4,r4,-6704
     b60:	00143c80 	call	143c8 <puts>
		return -1;
     b64:	00bfffc4 	movi	r2,-1
     b68:	e0bfff15 	stw	r2,-4(fp)
     b6c:	00000406 	br	b80 <freeImage+0x4c>
	}
	else
	{
//		printf("image deleted\n");
		free(image->data); 
     b70:	e0bffe17 	ldw	r2,-8(fp)
     b74:	11000317 	ldw	r4,12(r2)
     b78:	00135740 	call	13574 <free>
		return 0;
     b7c:	e03fff15 	stw	zero,-4(fp)
     b80:	e0bfff17 	ldw	r2,-4(fp)
	}
}
     b84:	e037883a 	mov	sp,fp
     b88:	dfc00117 	ldw	ra,4(sp)
     b8c:	df000017 	ldw	fp,0(sp)
     b90:	dec00204 	addi	sp,sp,8
     b94:	f800283a 	ret

00000b98 <freeSumImage>:

int freeSumImage(MyIntImage* image)
{
     b98:	defffc04 	addi	sp,sp,-16
     b9c:	dfc00315 	stw	ra,12(sp)
     ba0:	df000215 	stw	fp,8(sp)
     ba4:	df000204 	addi	fp,sp,8
     ba8:	e13ffe15 	stw	r4,-8(fp)
	if (image->flag == 0)
     bac:	e0bffe17 	ldw	r2,-8(fp)
     bb0:	10800317 	ldw	r2,12(r2)
     bb4:	1004c03a 	cmpne	r2,r2,zero
     bb8:	1000061e 	bne	r2,zero,bd4 <freeSumImage+0x3c>
	{
		printf("no image to delete\n");
     bbc:	010000b4 	movhi	r4,2
     bc0:	21397404 	addi	r4,r4,-6704
     bc4:	00143c80 	call	143c8 <puts>
		return -1;
     bc8:	00bfffc4 	movi	r2,-1
     bcc:	e0bfff15 	stw	r2,-4(fp)
     bd0:	00000406 	br	be4 <freeSumImage+0x4c>
	}
	else
	{
//		printf("image deleted\n");
		free(image->data); 
     bd4:	e0bffe17 	ldw	r2,-8(fp)
     bd8:	11000217 	ldw	r4,8(r2)
     bdc:	00135740 	call	13574 <free>
		return 0;
     be0:	e03fff15 	stw	zero,-4(fp)
     be4:	e0bfff17 	ldw	r2,-4(fp)
	}
}
     be8:	e037883a 	mov	sp,fp
     bec:	dfc00117 	ldw	ra,4(sp)
     bf0:	df000017 	ldw	fp,0(sp)
     bf4:	dec00204 	addi	sp,sp,8
     bf8:	f800283a 	ret

00000bfc <setImage>:

void setImage(int width, int height, MyImage *image)
{
     bfc:	defffc04 	addi	sp,sp,-16
     c00:	df000315 	stw	fp,12(sp)
     c04:	df000304 	addi	fp,sp,12
     c08:	e13ffd15 	stw	r4,-12(fp)
     c0c:	e17ffe15 	stw	r5,-8(fp)
     c10:	e1bfff15 	stw	r6,-4(fp)
	image->width = width;
     c14:	e0ffff17 	ldw	r3,-4(fp)
     c18:	e0bffd17 	ldw	r2,-12(fp)
     c1c:	18800015 	stw	r2,0(r3)
	image->height = height;
     c20:	e0ffff17 	ldw	r3,-4(fp)
     c24:	e0bffe17 	ldw	r2,-8(fp)
     c28:	18800115 	stw	r2,4(r3)
}
     c2c:	e037883a 	mov	sp,fp
     c30:	df000017 	ldw	fp,0(sp)
     c34:	dec00104 	addi	sp,sp,4
     c38:	f800283a 	ret

00000c3c <setSumImage>:

void setSumImage(int width, int height, MyIntImage *image)
{
     c3c:	defffc04 	addi	sp,sp,-16
     c40:	df000315 	stw	fp,12(sp)
     c44:	df000304 	addi	fp,sp,12
     c48:	e13ffd15 	stw	r4,-12(fp)
     c4c:	e17ffe15 	stw	r5,-8(fp)
     c50:	e1bfff15 	stw	r6,-4(fp)
	image->width = width;
     c54:	e0ffff17 	ldw	r3,-4(fp)
     c58:	e0bffd17 	ldw	r2,-12(fp)
     c5c:	18800015 	stw	r2,0(r3)
	image->height = height;
     c60:	e0ffff17 	ldw	r3,-4(fp)
     c64:	e0bffe17 	ldw	r2,-8(fp)
     c68:	18800115 	stw	r2,4(r3)
}
     c6c:	e037883a 	mov	sp,fp
     c70:	df000017 	ldw	fp,0(sp)
     c74:	dec00104 	addi	sp,sp,4
     c78:	f800283a 	ret

00000c7c <_Z8int_sqrtj>:
/*****************************************************
 * The int_sqrt is only used in runCascadeClassifier
 * If you want to replace int_sqrt with HW sqrtf in GPU,
 * simple look into the runCascadeClassifier function.
 *****************************************************/
unsigned int int_sqrt (unsigned int value)
     c7c:	defffa04 	addi	sp,sp,-24
     c80:	df000515 	stw	fp,20(sp)
     c84:	df000504 	addi	fp,sp,20
     c88:	e13fff15 	stw	r4,-4(fp)
{
  int i;
  unsigned int a = 0, b = 0, c = 0;
     c8c:	e03ffd15 	stw	zero,-12(fp)
     c90:	e03ffc15 	stw	zero,-16(fp)
     c94:	e03ffb15 	stw	zero,-20(fp)
  for (i=0; i < (32 >> 1); i++)
     c98:	e03ffe15 	stw	zero,-8(fp)
     c9c:	00002106 	br	d24 <_Z8int_sqrtj+0xa8>
    {
      c<<= 2;
     ca0:	e0bffb17 	ldw	r2,-20(fp)
     ca4:	1085883a 	add	r2,r2,r2
     ca8:	1085883a 	add	r2,r2,r2
     cac:	e0bffb15 	stw	r2,-20(fp)
#define UPPERBITS(value) (value>>30)
      c += UPPERBITS(value);
     cb0:	e0bfff17 	ldw	r2,-4(fp)
     cb4:	1006d7ba 	srli	r3,r2,30
     cb8:	e0bffb17 	ldw	r2,-20(fp)
     cbc:	10c5883a 	add	r2,r2,r3
     cc0:	e0bffb15 	stw	r2,-20(fp)
#undef UPPERBITS
      value <<= 2;
     cc4:	e0bfff17 	ldw	r2,-4(fp)
     cc8:	1085883a 	add	r2,r2,r2
     ccc:	1085883a 	add	r2,r2,r2
     cd0:	e0bfff15 	stw	r2,-4(fp)
      a <<= 1;
     cd4:	e0bffd17 	ldw	r2,-12(fp)
     cd8:	1085883a 	add	r2,r2,r2
     cdc:	e0bffd15 	stw	r2,-12(fp)
      b = (a<<1) | 1;
     ce0:	e0bffd17 	ldw	r2,-12(fp)
     ce4:	1085883a 	add	r2,r2,r2
     ce8:	10800054 	ori	r2,r2,1
     cec:	e0bffc15 	stw	r2,-16(fp)
      if (c >= b)
     cf0:	e0fffb17 	ldw	r3,-20(fp)
     cf4:	e0bffc17 	ldw	r2,-16(fp)
     cf8:	18800736 	bltu	r3,r2,d18 <_Z8int_sqrtj+0x9c>
	{
	  c -= b;
     cfc:	e0fffb17 	ldw	r3,-20(fp)
     d00:	e0bffc17 	ldw	r2,-16(fp)
     d04:	1885c83a 	sub	r2,r3,r2
     d08:	e0bffb15 	stw	r2,-20(fp)
	  a++;
     d0c:	e0bffd17 	ldw	r2,-12(fp)
     d10:	10800044 	addi	r2,r2,1
     d14:	e0bffd15 	stw	r2,-12(fp)
 *****************************************************/
unsigned int int_sqrt (unsigned int value)
{
  int i;
  unsigned int a = 0, b = 0, c = 0;
  for (i=0; i < (32 >> 1); i++)
     d18:	e0bffe17 	ldw	r2,-8(fp)
     d1c:	10800044 	addi	r2,r2,1
     d20:	e0bffe15 	stw	r2,-8(fp)
     d24:	e0bffe17 	ldw	r2,-8(fp)
     d28:	10800410 	cmplti	r2,r2,16
     d2c:	103fdc1e 	bne	r2,zero,ca0 <_Z8int_sqrtj+0x24>
	{
	  c -= b;
	  a++;
	}
    }
  return a;
     d30:	e0bffd17 	ldw	r2,-12(fp)
}
     d34:	e037883a 	mov	sp,fp
     d38:	df000017 	ldw	fp,0(sp)
     d3c:	dec00104 	addi	sp,sp,4
     d40:	f800283a 	ret

00000d44 <setImageForCascadeClassifier>:


void setImageForCascadeClassifier( myCascade* _cascade, MyIntImage* _sum, MyIntImage* _sqsum)
     d44:	deffeb04 	addi	sp,sp,-84
     d48:	df001415 	stw	fp,80(sp)
     d4c:	df001404 	addi	fp,sp,80
     d50:	e13ffd15 	stw	r4,-12(fp)
     d54:	e17ffe15 	stw	r5,-8(fp)
     d58:	e1bfff15 	stw	r6,-4(fp)
{
  MyIntImage *sum = _sum;
     d5c:	e0bffe17 	ldw	r2,-8(fp)
     d60:	e0bff415 	stw	r2,-48(fp)
  MyIntImage *sqsum = _sqsum;
     d64:	e0bfff17 	ldw	r2,-4(fp)
     d68:	e0bff315 	stw	r2,-52(fp)
  myCascade* cascade = _cascade;
     d6c:	e0bffd17 	ldw	r2,-12(fp)
     d70:	e0bff215 	stw	r2,-56(fp)
  int i, j, k;
  MyRect equRect;
  int r_index = 0;
     d74:	e03fee15 	stw	zero,-72(fp)
  int w_index = 0;
     d78:	e03fed15 	stw	zero,-76(fp)
  MyRect tr;

  cascade->sum = *sum;
     d7c:	e13ff217 	ldw	r4,-56(fp)
     d80:	e0fff417 	ldw	r3,-48(fp)
     d84:	18800017 	ldw	r2,0(r3)
     d88:	20800615 	stw	r2,24(r4)
     d8c:	18800117 	ldw	r2,4(r3)
     d90:	20800715 	stw	r2,28(r4)
     d94:	18800217 	ldw	r2,8(r3)
     d98:	20800815 	stw	r2,32(r4)
     d9c:	18800317 	ldw	r2,12(r3)
     da0:	20800915 	stw	r2,36(r4)
  cascade->sqsum = *sqsum;
     da4:	e13ff217 	ldw	r4,-56(fp)
     da8:	e0fff317 	ldw	r3,-52(fp)
     dac:	18800017 	ldw	r2,0(r3)
     db0:	20800a15 	stw	r2,40(r4)
     db4:	18800117 	ldw	r2,4(r3)
     db8:	20800b15 	stw	r2,44(r4)
     dbc:	18800217 	ldw	r2,8(r3)
     dc0:	20800c15 	stw	r2,48(r4)
     dc4:	18800317 	ldw	r2,12(r3)
     dc8:	20800d15 	stw	r2,52(r4)

  equRect.x = equRect.y = 0;
     dcc:	e03ff615 	stw	zero,-40(fp)
     dd0:	e0bff617 	ldw	r2,-40(fp)
     dd4:	e0bff515 	stw	r2,-44(fp)
  equRect.width = cascade->orig_window_size.width;
     dd8:	e0bff217 	ldw	r2,-56(fp)
     ddc:	10800317 	ldw	r2,12(r2)
     de0:	e0bff715 	stw	r2,-36(fp)
  equRect.height = cascade->orig_window_size.height;
     de4:	e0bff217 	ldw	r2,-56(fp)
     de8:	10800417 	ldw	r2,16(r2)
     dec:	e0bff815 	stw	r2,-32(fp)

  cascade->inv_window_area = equRect.width*equRect.height;
     df0:	e0fff717 	ldw	r3,-36(fp)
     df4:	e0bff817 	ldw	r2,-32(fp)
     df8:	1887383a 	mul	r3,r3,r2
     dfc:	e0bff217 	ldw	r2,-56(fp)
     e00:	10c00515 	stw	r3,20(r2)

  cascade->p0 = (sum->data) ;
     e04:	e0bff417 	ldw	r2,-48(fp)
     e08:	10c00217 	ldw	r3,8(r2)
     e0c:	e0bff217 	ldw	r2,-56(fp)
     e10:	10c01215 	stw	r3,72(r2)
  cascade->p1 = (sum->data +  equRect.width - 1) ;
     e14:	e0bff417 	ldw	r2,-48(fp)
     e18:	10c00217 	ldw	r3,8(r2)
     e1c:	e0bff717 	ldw	r2,-36(fp)
     e20:	1085883a 	add	r2,r2,r2
     e24:	1085883a 	add	r2,r2,r2
     e28:	1885883a 	add	r2,r3,r2
     e2c:	10ffff04 	addi	r3,r2,-4
     e30:	e0bff217 	ldw	r2,-56(fp)
     e34:	10c01315 	stw	r3,76(r2)
  cascade->p2 = (sum->data + sum->width*(equRect.height - 1));
     e38:	e0bff417 	ldw	r2,-48(fp)
     e3c:	11000217 	ldw	r4,8(r2)
     e40:	e0bff417 	ldw	r2,-48(fp)
     e44:	10c00017 	ldw	r3,0(r2)
     e48:	e0bff817 	ldw	r2,-32(fp)
     e4c:	1085883a 	add	r2,r2,r2
     e50:	1085883a 	add	r2,r2,r2
     e54:	10bfff04 	addi	r2,r2,-4
     e58:	1885383a 	mul	r2,r3,r2
     e5c:	2087883a 	add	r3,r4,r2
     e60:	e0bff217 	ldw	r2,-56(fp)
     e64:	10c01415 	stw	r3,80(r2)
  cascade->p3 = (sum->data + sum->width*(equRect.height - 1) + equRect.width - 1);
     e68:	e0bff417 	ldw	r2,-48(fp)
     e6c:	11400217 	ldw	r5,8(r2)
     e70:	e0bff717 	ldw	r2,-36(fp)
     e74:	1085883a 	add	r2,r2,r2
     e78:	1085883a 	add	r2,r2,r2
     e7c:	1007883a 	mov	r3,r2
     e80:	e0bff417 	ldw	r2,-48(fp)
     e84:	11000017 	ldw	r4,0(r2)
     e88:	e0bff817 	ldw	r2,-32(fp)
     e8c:	1085883a 	add	r2,r2,r2
     e90:	1085883a 	add	r2,r2,r2
     e94:	10bfff04 	addi	r2,r2,-4
     e98:	2085383a 	mul	r2,r4,r2
     e9c:	1885883a 	add	r2,r3,r2
     ea0:	2885883a 	add	r2,r5,r2
     ea4:	10ffff04 	addi	r3,r2,-4
     ea8:	e0bff217 	ldw	r2,-56(fp)
     eac:	10c01515 	stw	r3,84(r2)
  cascade->pq0 = (sqsum->data);
     eb0:	e0bff317 	ldw	r2,-52(fp)
     eb4:	10c00217 	ldw	r3,8(r2)
     eb8:	e0bff217 	ldw	r2,-56(fp)
     ebc:	10c00e15 	stw	r3,56(r2)
  cascade->pq1 = (sqsum->data +  equRect.width - 1) ;
     ec0:	e0bff317 	ldw	r2,-52(fp)
     ec4:	10c00217 	ldw	r3,8(r2)
     ec8:	e0bff717 	ldw	r2,-36(fp)
     ecc:	1085883a 	add	r2,r2,r2
     ed0:	1085883a 	add	r2,r2,r2
     ed4:	1885883a 	add	r2,r3,r2
     ed8:	10ffff04 	addi	r3,r2,-4
     edc:	e0bff217 	ldw	r2,-56(fp)
     ee0:	10c00f15 	stw	r3,60(r2)
  cascade->pq2 = (sqsum->data + sqsum->width*(equRect.height - 1));
     ee4:	e0bff317 	ldw	r2,-52(fp)
     ee8:	11000217 	ldw	r4,8(r2)
     eec:	e0bff317 	ldw	r2,-52(fp)
     ef0:	10c00017 	ldw	r3,0(r2)
     ef4:	e0bff817 	ldw	r2,-32(fp)
     ef8:	1085883a 	add	r2,r2,r2
     efc:	1085883a 	add	r2,r2,r2
     f00:	10bfff04 	addi	r2,r2,-4
     f04:	1885383a 	mul	r2,r3,r2
     f08:	2087883a 	add	r3,r4,r2
     f0c:	e0bff217 	ldw	r2,-56(fp)
     f10:	10c01015 	stw	r3,64(r2)
  cascade->pq3 = (sqsum->data + sqsum->width*(equRect.height - 1) + equRect.width - 1);
     f14:	e0bff317 	ldw	r2,-52(fp)
     f18:	11400217 	ldw	r5,8(r2)
     f1c:	e0bff717 	ldw	r2,-36(fp)
     f20:	1085883a 	add	r2,r2,r2
     f24:	1085883a 	add	r2,r2,r2
     f28:	1007883a 	mov	r3,r2
     f2c:	e0bff317 	ldw	r2,-52(fp)
     f30:	11000017 	ldw	r4,0(r2)
     f34:	e0bff817 	ldw	r2,-32(fp)
     f38:	1085883a 	add	r2,r2,r2
     f3c:	1085883a 	add	r2,r2,r2
     f40:	10bfff04 	addi	r2,r2,-4
     f44:	2085383a 	mul	r2,r4,r2
     f48:	1885883a 	add	r2,r3,r2
     f4c:	2885883a 	add	r2,r5,r2
     f50:	10ffff04 	addi	r3,r2,-4
     f54:	e0bff217 	ldw	r2,-56(fp)
     f58:	10c01115 	stw	r3,68(r2)
   * Load the index of the four corners 
   * of the filter rectangle
   **************************************/

  /* loop over the number of stages */
  for( i = 0; i < cascade->n_stages; i++ )
     f5c:	e03ff115 	stw	zero,-60(fp)
     f60:	00017206 	br	152c <setImageForCascadeClassifier+0x7e8>
    {
      /* loop over the number of haar features */
      for( j = 0; j < stages_array[i]; j++ )
     f64:	e03ff015 	stw	zero,-64(fp)
     f68:	00016406 	br	14fc <setImageForCascadeClassifier+0x7b8>
	{
	  int nr = 3;
     f6c:	008000c4 	movi	r2,3
     f70:	e0bfec15 	stw	r2,-80(fp)
	  /* loop over the number of rectangles */
	  for( k = 0; k < nr; k++ )
     f74:	e03fef15 	stw	zero,-68(fp)
     f78:	00015406 	br	14cc <setImageForCascadeClassifier+0x788>
	    {
	      tr.x = rectangles_array[r_index + k*4];
     f7c:	e0bfef17 	ldw	r2,-68(fp)
     f80:	1085883a 	add	r2,r2,r2
     f84:	1085883a 	add	r2,r2,r2
     f88:	1007883a 	mov	r3,r2
     f8c:	e0bfee17 	ldw	r2,-72(fp)
     f90:	1885883a 	add	r2,r3,r2
     f94:	1085883a 	add	r2,r2,r2
     f98:	1085883a 	add	r2,r2,r2
     f9c:	1007883a 	mov	r3,r2
     fa0:	d0a6d617 	ldw	r2,-25768(gp)
     fa4:	1885883a 	add	r2,r3,r2
     fa8:	10800017 	ldw	r2,0(r2)
     fac:	e0bff915 	stw	r2,-28(fp)
	      tr.width = rectangles_array[r_index + 2 + k*4];
     fb0:	e0bfef17 	ldw	r2,-68(fp)
     fb4:	1085883a 	add	r2,r2,r2
     fb8:	1085883a 	add	r2,r2,r2
     fbc:	1007883a 	mov	r3,r2
     fc0:	e0bfee17 	ldw	r2,-72(fp)
     fc4:	1885883a 	add	r2,r3,r2
     fc8:	1085883a 	add	r2,r2,r2
     fcc:	1085883a 	add	r2,r2,r2
     fd0:	1007883a 	mov	r3,r2
     fd4:	d0a6d617 	ldw	r2,-25768(gp)
     fd8:	1885883a 	add	r2,r3,r2
     fdc:	10800204 	addi	r2,r2,8
     fe0:	10800017 	ldw	r2,0(r2)
     fe4:	e0bffb15 	stw	r2,-20(fp)
	      tr.y = rectangles_array[r_index + 1 + k*4];
     fe8:	e0bfef17 	ldw	r2,-68(fp)
     fec:	1085883a 	add	r2,r2,r2
     ff0:	1085883a 	add	r2,r2,r2
     ff4:	1007883a 	mov	r3,r2
     ff8:	e0bfee17 	ldw	r2,-72(fp)
     ffc:	1885883a 	add	r2,r3,r2
    1000:	1085883a 	add	r2,r2,r2
    1004:	1085883a 	add	r2,r2,r2
    1008:	1007883a 	mov	r3,r2
    100c:	d0a6d617 	ldw	r2,-25768(gp)
    1010:	1885883a 	add	r2,r3,r2
    1014:	10800104 	addi	r2,r2,4
    1018:	10800017 	ldw	r2,0(r2)
    101c:	e0bffa15 	stw	r2,-24(fp)
	      tr.height = rectangles_array[r_index + 3 + k*4];
    1020:	e0bfef17 	ldw	r2,-68(fp)
    1024:	1085883a 	add	r2,r2,r2
    1028:	1085883a 	add	r2,r2,r2
    102c:	1007883a 	mov	r3,r2
    1030:	e0bfee17 	ldw	r2,-72(fp)
    1034:	1885883a 	add	r2,r3,r2
    1038:	1085883a 	add	r2,r2,r2
    103c:	1085883a 	add	r2,r2,r2
    1040:	1007883a 	mov	r3,r2
    1044:	d0a6d617 	ldw	r2,-25768(gp)
    1048:	1885883a 	add	r2,r3,r2
    104c:	10800304 	addi	r2,r2,12
    1050:	10800017 	ldw	r2,0(r2)
    1054:	e0bffc15 	stw	r2,-16(fp)
	      if (k < 2)
    1058:	e0bfef17 	ldw	r2,-68(fp)
    105c:	10800088 	cmpgei	r2,r2,2
    1060:	10006c1e 	bne	r2,zero,1214 <setImageForCascadeClassifier+0x4d0>
		{
		  scaled_rectangles_array[r_index + k*4] = (sum->data + sum->width*(tr.y ) + (tr.x )) ;
    1064:	e0bfef17 	ldw	r2,-68(fp)
    1068:	1085883a 	add	r2,r2,r2
    106c:	1085883a 	add	r2,r2,r2
    1070:	1007883a 	mov	r3,r2
    1074:	e0bfee17 	ldw	r2,-72(fp)
    1078:	1885883a 	add	r2,r3,r2
    107c:	1085883a 	add	r2,r2,r2
    1080:	1085883a 	add	r2,r2,r2
    1084:	1007883a 	mov	r3,r2
    1088:	d0a6d717 	ldw	r2,-25764(gp)
    108c:	188b883a 	add	r5,r3,r2
    1090:	e0bff417 	ldw	r2,-48(fp)
    1094:	11800217 	ldw	r6,8(r2)
    1098:	e0bff917 	ldw	r2,-28(fp)
    109c:	1009883a 	mov	r4,r2
    10a0:	e0bff417 	ldw	r2,-48(fp)
    10a4:	10c00017 	ldw	r3,0(r2)
    10a8:	e0bffa17 	ldw	r2,-24(fp)
    10ac:	1885383a 	mul	r2,r3,r2
    10b0:	2085883a 	add	r2,r4,r2
    10b4:	1085883a 	add	r2,r2,r2
    10b8:	1085883a 	add	r2,r2,r2
    10bc:	3085883a 	add	r2,r6,r2
    10c0:	28800015 	stw	r2,0(r5)
		  scaled_rectangles_array[r_index + k*4 + 1] = (sum->data + sum->width*(tr.y ) + (tr.x  + tr.width)) ;
    10c4:	e0bfef17 	ldw	r2,-68(fp)
    10c8:	1085883a 	add	r2,r2,r2
    10cc:	1085883a 	add	r2,r2,r2
    10d0:	1007883a 	mov	r3,r2
    10d4:	e0bfee17 	ldw	r2,-72(fp)
    10d8:	1885883a 	add	r2,r3,r2
    10dc:	1085883a 	add	r2,r2,r2
    10e0:	1085883a 	add	r2,r2,r2
    10e4:	1007883a 	mov	r3,r2
    10e8:	d0a6d717 	ldw	r2,-25764(gp)
    10ec:	1885883a 	add	r2,r3,r2
    10f0:	11400104 	addi	r5,r2,4
    10f4:	e0bff417 	ldw	r2,-48(fp)
    10f8:	11800217 	ldw	r6,8(r2)
    10fc:	e0fff917 	ldw	r3,-28(fp)
    1100:	e0bffb17 	ldw	r2,-20(fp)
    1104:	1885883a 	add	r2,r3,r2
    1108:	1009883a 	mov	r4,r2
    110c:	e0bff417 	ldw	r2,-48(fp)
    1110:	10c00017 	ldw	r3,0(r2)
    1114:	e0bffa17 	ldw	r2,-24(fp)
    1118:	1885383a 	mul	r2,r3,r2
    111c:	2085883a 	add	r2,r4,r2
    1120:	1085883a 	add	r2,r2,r2
    1124:	1085883a 	add	r2,r2,r2
    1128:	3085883a 	add	r2,r6,r2
    112c:	28800015 	stw	r2,0(r5)
		  scaled_rectangles_array[r_index + k*4 + 2] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x ));
    1130:	e0bfef17 	ldw	r2,-68(fp)
    1134:	1085883a 	add	r2,r2,r2
    1138:	1085883a 	add	r2,r2,r2
    113c:	1007883a 	mov	r3,r2
    1140:	e0bfee17 	ldw	r2,-72(fp)
    1144:	1885883a 	add	r2,r3,r2
    1148:	1085883a 	add	r2,r2,r2
    114c:	1085883a 	add	r2,r2,r2
    1150:	1007883a 	mov	r3,r2
    1154:	d0a6d717 	ldw	r2,-25764(gp)
    1158:	1885883a 	add	r2,r3,r2
    115c:	11800204 	addi	r6,r2,8
    1160:	e0bff417 	ldw	r2,-48(fp)
    1164:	11c00217 	ldw	r7,8(r2)
    1168:	e0bff917 	ldw	r2,-28(fp)
    116c:	100b883a 	mov	r5,r2
    1170:	e0bff417 	ldw	r2,-48(fp)
    1174:	11000017 	ldw	r4,0(r2)
    1178:	e0fffa17 	ldw	r3,-24(fp)
    117c:	e0bffc17 	ldw	r2,-16(fp)
    1180:	1885883a 	add	r2,r3,r2
    1184:	2085383a 	mul	r2,r4,r2
    1188:	2885883a 	add	r2,r5,r2
    118c:	1085883a 	add	r2,r2,r2
    1190:	1085883a 	add	r2,r2,r2
    1194:	3885883a 	add	r2,r7,r2
    1198:	30800015 	stw	r2,0(r6)
		  scaled_rectangles_array[r_index + k*4 + 3] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x  + tr.width));
    119c:	e0bfef17 	ldw	r2,-68(fp)
    11a0:	1085883a 	add	r2,r2,r2
    11a4:	1085883a 	add	r2,r2,r2
    11a8:	1007883a 	mov	r3,r2
    11ac:	e0bfee17 	ldw	r2,-72(fp)
    11b0:	1885883a 	add	r2,r3,r2
    11b4:	1085883a 	add	r2,r2,r2
    11b8:	1085883a 	add	r2,r2,r2
    11bc:	1007883a 	mov	r3,r2
    11c0:	d0a6d717 	ldw	r2,-25764(gp)
    11c4:	1885883a 	add	r2,r3,r2
    11c8:	11800304 	addi	r6,r2,12
    11cc:	e0bff417 	ldw	r2,-48(fp)
    11d0:	11c00217 	ldw	r7,8(r2)
    11d4:	e0fff917 	ldw	r3,-28(fp)
    11d8:	e0bffb17 	ldw	r2,-20(fp)
    11dc:	1885883a 	add	r2,r3,r2
    11e0:	100b883a 	mov	r5,r2
    11e4:	e0bff417 	ldw	r2,-48(fp)
    11e8:	11000017 	ldw	r4,0(r2)
    11ec:	e0fffa17 	ldw	r3,-24(fp)
    11f0:	e0bffc17 	ldw	r2,-16(fp)
    11f4:	1885883a 	add	r2,r3,r2
    11f8:	2085383a 	mul	r2,r4,r2
    11fc:	2885883a 	add	r2,r5,r2
    1200:	1085883a 	add	r2,r2,r2
    1204:	1085883a 	add	r2,r2,r2
    1208:	3885883a 	add	r2,r7,r2
    120c:	30800015 	stw	r2,0(r6)
    1210:	0000ab06 	br	14c0 <setImageForCascadeClassifier+0x77c>
		}
	      else
		{
		  if ((tr.x == 0)&& (tr.y == 0) &&(tr.width == 0) &&(tr.height == 0))
    1214:	e0bff917 	ldw	r2,-28(fp)
    1218:	1004c03a 	cmpne	r2,r2,zero
    121c:	10003d1e 	bne	r2,zero,1314 <setImageForCascadeClassifier+0x5d0>
    1220:	e0bffa17 	ldw	r2,-24(fp)
    1224:	1004c03a 	cmpne	r2,r2,zero
    1228:	10003a1e 	bne	r2,zero,1314 <setImageForCascadeClassifier+0x5d0>
    122c:	e0bffb17 	ldw	r2,-20(fp)
    1230:	1004c03a 	cmpne	r2,r2,zero
    1234:	1000371e 	bne	r2,zero,1314 <setImageForCascadeClassifier+0x5d0>
    1238:	e0bffc17 	ldw	r2,-16(fp)
    123c:	1004c03a 	cmpne	r2,r2,zero
    1240:	1000341e 	bne	r2,zero,1314 <setImageForCascadeClassifier+0x5d0>
		    {
		      scaled_rectangles_array[r_index + k*4] = NULL ;
    1244:	e0bfef17 	ldw	r2,-68(fp)
    1248:	1085883a 	add	r2,r2,r2
    124c:	1085883a 	add	r2,r2,r2
    1250:	1007883a 	mov	r3,r2
    1254:	e0bfee17 	ldw	r2,-72(fp)
    1258:	1885883a 	add	r2,r3,r2
    125c:	1085883a 	add	r2,r2,r2
    1260:	1085883a 	add	r2,r2,r2
    1264:	1007883a 	mov	r3,r2
    1268:	d0a6d717 	ldw	r2,-25764(gp)
    126c:	1885883a 	add	r2,r3,r2
    1270:	10000015 	stw	zero,0(r2)
		      scaled_rectangles_array[r_index + k*4 + 1] = NULL ;
    1274:	e0bfef17 	ldw	r2,-68(fp)
    1278:	1085883a 	add	r2,r2,r2
    127c:	1085883a 	add	r2,r2,r2
    1280:	1007883a 	mov	r3,r2
    1284:	e0bfee17 	ldw	r2,-72(fp)
    1288:	1885883a 	add	r2,r3,r2
    128c:	1085883a 	add	r2,r2,r2
    1290:	1085883a 	add	r2,r2,r2
    1294:	1007883a 	mov	r3,r2
    1298:	d0a6d717 	ldw	r2,-25764(gp)
    129c:	1885883a 	add	r2,r3,r2
    12a0:	10800104 	addi	r2,r2,4
    12a4:	10000015 	stw	zero,0(r2)
		      scaled_rectangles_array[r_index + k*4 + 2] = NULL;
    12a8:	e0bfef17 	ldw	r2,-68(fp)
    12ac:	1085883a 	add	r2,r2,r2
    12b0:	1085883a 	add	r2,r2,r2
    12b4:	1007883a 	mov	r3,r2
    12b8:	e0bfee17 	ldw	r2,-72(fp)
    12bc:	1885883a 	add	r2,r3,r2
    12c0:	1085883a 	add	r2,r2,r2
    12c4:	1085883a 	add	r2,r2,r2
    12c8:	1007883a 	mov	r3,r2
    12cc:	d0a6d717 	ldw	r2,-25764(gp)
    12d0:	1885883a 	add	r2,r3,r2
    12d4:	10800204 	addi	r2,r2,8
    12d8:	10000015 	stw	zero,0(r2)
		      scaled_rectangles_array[r_index + k*4 + 3] = NULL;
    12dc:	e0bfef17 	ldw	r2,-68(fp)
    12e0:	1085883a 	add	r2,r2,r2
    12e4:	1085883a 	add	r2,r2,r2
    12e8:	1007883a 	mov	r3,r2
    12ec:	e0bfee17 	ldw	r2,-72(fp)
    12f0:	1885883a 	add	r2,r3,r2
    12f4:	1085883a 	add	r2,r2,r2
    12f8:	1085883a 	add	r2,r2,r2
    12fc:	1007883a 	mov	r3,r2
    1300:	d0a6d717 	ldw	r2,-25764(gp)
    1304:	1885883a 	add	r2,r3,r2
    1308:	10800304 	addi	r2,r2,12
    130c:	10000015 	stw	zero,0(r2)
		  scaled_rectangles_array[r_index + k*4 + 2] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x ));
		  scaled_rectangles_array[r_index + k*4 + 3] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x  + tr.width));
		}
	      else
		{
		  if ((tr.x == 0)&& (tr.y == 0) &&(tr.width == 0) &&(tr.height == 0))
    1310:	00006b06 	br	14c0 <setImageForCascadeClassifier+0x77c>
		      scaled_rectangles_array[r_index + k*4 + 2] = NULL;
		      scaled_rectangles_array[r_index + k*4 + 3] = NULL;
		    }
		  else
		    {
		      scaled_rectangles_array[r_index + k*4] = (sum->data + sum->width*(tr.y ) + (tr.x )) ;
    1314:	e0bfef17 	ldw	r2,-68(fp)
    1318:	1085883a 	add	r2,r2,r2
    131c:	1085883a 	add	r2,r2,r2
    1320:	1007883a 	mov	r3,r2
    1324:	e0bfee17 	ldw	r2,-72(fp)
    1328:	1885883a 	add	r2,r3,r2
    132c:	1085883a 	add	r2,r2,r2
    1330:	1085883a 	add	r2,r2,r2
    1334:	1007883a 	mov	r3,r2
    1338:	d0a6d717 	ldw	r2,-25764(gp)
    133c:	188b883a 	add	r5,r3,r2
    1340:	e0bff417 	ldw	r2,-48(fp)
    1344:	11800217 	ldw	r6,8(r2)
    1348:	e0bff917 	ldw	r2,-28(fp)
    134c:	1009883a 	mov	r4,r2
    1350:	e0bff417 	ldw	r2,-48(fp)
    1354:	10c00017 	ldw	r3,0(r2)
    1358:	e0bffa17 	ldw	r2,-24(fp)
    135c:	1885383a 	mul	r2,r3,r2
    1360:	2085883a 	add	r2,r4,r2
    1364:	1085883a 	add	r2,r2,r2
    1368:	1085883a 	add	r2,r2,r2
    136c:	3085883a 	add	r2,r6,r2
    1370:	28800015 	stw	r2,0(r5)
		      scaled_rectangles_array[r_index + k*4 + 1] = (sum->data + sum->width*(tr.y ) + (tr.x  + tr.width)) ;
    1374:	e0bfef17 	ldw	r2,-68(fp)
    1378:	1085883a 	add	r2,r2,r2
    137c:	1085883a 	add	r2,r2,r2
    1380:	1007883a 	mov	r3,r2
    1384:	e0bfee17 	ldw	r2,-72(fp)
    1388:	1885883a 	add	r2,r3,r2
    138c:	1085883a 	add	r2,r2,r2
    1390:	1085883a 	add	r2,r2,r2
    1394:	1007883a 	mov	r3,r2
    1398:	d0a6d717 	ldw	r2,-25764(gp)
    139c:	1885883a 	add	r2,r3,r2
    13a0:	11400104 	addi	r5,r2,4
    13a4:	e0bff417 	ldw	r2,-48(fp)
    13a8:	11800217 	ldw	r6,8(r2)
    13ac:	e0fff917 	ldw	r3,-28(fp)
    13b0:	e0bffb17 	ldw	r2,-20(fp)
    13b4:	1885883a 	add	r2,r3,r2
    13b8:	1009883a 	mov	r4,r2
    13bc:	e0bff417 	ldw	r2,-48(fp)
    13c0:	10c00017 	ldw	r3,0(r2)
    13c4:	e0bffa17 	ldw	r2,-24(fp)
    13c8:	1885383a 	mul	r2,r3,r2
    13cc:	2085883a 	add	r2,r4,r2
    13d0:	1085883a 	add	r2,r2,r2
    13d4:	1085883a 	add	r2,r2,r2
    13d8:	3085883a 	add	r2,r6,r2
    13dc:	28800015 	stw	r2,0(r5)
		      scaled_rectangles_array[r_index + k*4 + 2] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x ));
    13e0:	e0bfef17 	ldw	r2,-68(fp)
    13e4:	1085883a 	add	r2,r2,r2
    13e8:	1085883a 	add	r2,r2,r2
    13ec:	1007883a 	mov	r3,r2
    13f0:	e0bfee17 	ldw	r2,-72(fp)
    13f4:	1885883a 	add	r2,r3,r2
    13f8:	1085883a 	add	r2,r2,r2
    13fc:	1085883a 	add	r2,r2,r2
    1400:	1007883a 	mov	r3,r2
    1404:	d0a6d717 	ldw	r2,-25764(gp)
    1408:	1885883a 	add	r2,r3,r2
    140c:	11800204 	addi	r6,r2,8
    1410:	e0bff417 	ldw	r2,-48(fp)
    1414:	11c00217 	ldw	r7,8(r2)
    1418:	e0bff917 	ldw	r2,-28(fp)
    141c:	100b883a 	mov	r5,r2
    1420:	e0bff417 	ldw	r2,-48(fp)
    1424:	11000017 	ldw	r4,0(r2)
    1428:	e0fffa17 	ldw	r3,-24(fp)
    142c:	e0bffc17 	ldw	r2,-16(fp)
    1430:	1885883a 	add	r2,r3,r2
    1434:	2085383a 	mul	r2,r4,r2
    1438:	2885883a 	add	r2,r5,r2
    143c:	1085883a 	add	r2,r2,r2
    1440:	1085883a 	add	r2,r2,r2
    1444:	3885883a 	add	r2,r7,r2
    1448:	30800015 	stw	r2,0(r6)
		      scaled_rectangles_array[r_index + k*4 + 3] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x  + tr.width));
    144c:	e0bfef17 	ldw	r2,-68(fp)
    1450:	1085883a 	add	r2,r2,r2
    1454:	1085883a 	add	r2,r2,r2
    1458:	1007883a 	mov	r3,r2
    145c:	e0bfee17 	ldw	r2,-72(fp)
    1460:	1885883a 	add	r2,r3,r2
    1464:	1085883a 	add	r2,r2,r2
    1468:	1085883a 	add	r2,r2,r2
    146c:	1007883a 	mov	r3,r2
    1470:	d0a6d717 	ldw	r2,-25764(gp)
    1474:	1885883a 	add	r2,r3,r2
    1478:	11800304 	addi	r6,r2,12
    147c:	e0bff417 	ldw	r2,-48(fp)
    1480:	11c00217 	ldw	r7,8(r2)
    1484:	e0fff917 	ldw	r3,-28(fp)
    1488:	e0bffb17 	ldw	r2,-20(fp)
    148c:	1885883a 	add	r2,r3,r2
    1490:	100b883a 	mov	r5,r2
    1494:	e0bff417 	ldw	r2,-48(fp)
    1498:	11000017 	ldw	r4,0(r2)
    149c:	e0fffa17 	ldw	r3,-24(fp)
    14a0:	e0bffc17 	ldw	r2,-16(fp)
    14a4:	1885883a 	add	r2,r3,r2
    14a8:	2085383a 	mul	r2,r4,r2
    14ac:	2885883a 	add	r2,r5,r2
    14b0:	1085883a 	add	r2,r2,r2
    14b4:	1085883a 	add	r2,r2,r2
    14b8:	3885883a 	add	r2,r7,r2
    14bc:	30800015 	stw	r2,0(r6)
      /* loop over the number of haar features */
      for( j = 0; j < stages_array[i]; j++ )
	{
	  int nr = 3;
	  /* loop over the number of rectangles */
	  for( k = 0; k < nr; k++ )
    14c0:	e0bfef17 	ldw	r2,-68(fp)
    14c4:	10800044 	addi	r2,r2,1
    14c8:	e0bfef15 	stw	r2,-68(fp)
    14cc:	e0ffef17 	ldw	r3,-68(fp)
    14d0:	e0bfec17 	ldw	r2,-80(fp)
    14d4:	18bea916 	blt	r3,r2,f7c <setImageForCascadeClassifier+0x238>
		      scaled_rectangles_array[r_index + k*4 + 2] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x ));
		      scaled_rectangles_array[r_index + k*4 + 3] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x  + tr.width));
		    }
		} /* end of branch if(k<2) */
	    } /* end of k loop*/
	  r_index+=12;
    14d8:	e0bfee17 	ldw	r2,-72(fp)
    14dc:	10800304 	addi	r2,r2,12
    14e0:	e0bfee15 	stw	r2,-72(fp)
	  w_index+=3;
    14e4:	e0bfed17 	ldw	r2,-76(fp)
    14e8:	108000c4 	addi	r2,r2,3
    14ec:	e0bfed15 	stw	r2,-76(fp)

  /* loop over the number of stages */
  for( i = 0; i < cascade->n_stages; i++ )
    {
      /* loop over the number of haar features */
      for( j = 0; j < stages_array[i]; j++ )
    14f0:	e0bff017 	ldw	r2,-64(fp)
    14f4:	10800044 	addi	r2,r2,1
    14f8:	e0bff015 	stw	r2,-64(fp)
    14fc:	e0bff117 	ldw	r2,-60(fp)
    1500:	1085883a 	add	r2,r2,r2
    1504:	1085883a 	add	r2,r2,r2
    1508:	1007883a 	mov	r3,r2
    150c:	d0a6d517 	ldw	r2,-25772(gp)
    1510:	1885883a 	add	r2,r3,r2
    1514:	10c00017 	ldw	r3,0(r2)
    1518:	e0bff017 	ldw	r2,-64(fp)
    151c:	10fe9316 	blt	r2,r3,f6c <setImageForCascadeClassifier+0x228>
   * Load the index of the four corners 
   * of the filter rectangle
   **************************************/

  /* loop over the number of stages */
  for( i = 0; i < cascade->n_stages; i++ )
    1520:	e0bff117 	ldw	r2,-60(fp)
    1524:	10800044 	addi	r2,r2,1
    1528:	e0bff115 	stw	r2,-60(fp)
    152c:	e0bff217 	ldw	r2,-56(fp)
    1530:	10c00017 	ldw	r3,0(r2)
    1534:	e0bff117 	ldw	r2,-60(fp)
    1538:	10fe8a16 	blt	r2,r3,f64 <setImageForCascadeClassifier+0x220>
	    } /* end of k loop*/
	  r_index+=12;
	  w_index+=3;
	} /* end of j loop */
    } /* end i loop */
}
    153c:	e037883a 	mov	sp,fp
    1540:	df000017 	ldw	fp,0(sp)
    1544:	dec00104 	addi	sp,sp,4
    1548:	f800283a 	ret

0000154c <runCascadeClassifier>:

}



int runCascadeClassifier( myCascade* _cascade, MyPoint pt, int start_stage )
    154c:	deffeb04 	addi	sp,sp,-84
    1550:	dfc01415 	stw	ra,80(sp)
    1554:	df001315 	stw	fp,76(sp)
    1558:	dc401215 	stw	r17,72(sp)
    155c:	dc001115 	stw	r16,68(sp)
    1560:	df001104 	addi	fp,sp,68
    1564:	e13ffb15 	stw	r4,-20(fp)
    1568:	e17ffc15 	stw	r5,-16(fp)
    156c:	e1bffd15 	stw	r6,-12(fp)
    1570:	e1fffe15 	stw	r7,-8(fp)

  int p_offset, pq_offset;
  int i, j;
  unsigned int mean;
  unsigned int variance_norm_factor;
  int haar_counter = 0;
    1574:	e03ff415 	stw	zero,-48(fp)
  int w_index = 0;
    1578:	e03ff315 	stw	zero,-52(fp)
  int r_index = 0;
    157c:	e03ff215 	stw	zero,-56(fp)
  int stage_sum;
  myCascade* cascade;
  cascade = _cascade;
    1580:	e0bffb17 	ldw	r2,-20(fp)
    1584:	e0bff015 	stw	r2,-64(fp)
	
  p_offset = pt.y * (cascade->sum.width) + pt.x;
    1588:	e0fffd17 	ldw	r3,-12(fp)
    158c:	e0bff017 	ldw	r2,-64(fp)
    1590:	10800617 	ldw	r2,24(r2)
    1594:	1887383a 	mul	r3,r3,r2
    1598:	e0bffc17 	ldw	r2,-16(fp)
    159c:	1885883a 	add	r2,r3,r2
    15a0:	e0bffa15 	stw	r2,-24(fp)
  pq_offset = pt.y * (cascade->sqsum.width) + pt.x;
    15a4:	e0fffd17 	ldw	r3,-12(fp)
    15a8:	e0bff017 	ldw	r2,-64(fp)
    15ac:	10800a17 	ldw	r2,40(r2)
    15b0:	1887383a 	mul	r3,r3,r2
    15b4:	e0bffc17 	ldw	r2,-16(fp)
    15b8:	1885883a 	add	r2,r3,r2
    15bc:	e0bff915 	stw	r2,-28(fp)
   * mean is the mean of the pixels in the detection window
   * cascade->pqi[pq_offset] are the squared pixel values (using the squared integral image)
   * inv_window_area is 1 over the total number of pixels in the detection window
   *************************************************************************/

  variance_norm_factor =  (cascade->pq0[pq_offset] - cascade->pq1[pq_offset] - cascade->pq2[pq_offset] + cascade->pq3[pq_offset]);
    15c0:	e0bff017 	ldw	r2,-64(fp)
    15c4:	10c00e17 	ldw	r3,56(r2)
    15c8:	e0bff917 	ldw	r2,-28(fp)
    15cc:	1085883a 	add	r2,r2,r2
    15d0:	1085883a 	add	r2,r2,r2
    15d4:	1885883a 	add	r2,r3,r2
    15d8:	10c00017 	ldw	r3,0(r2)
    15dc:	e0bff017 	ldw	r2,-64(fp)
    15e0:	11000f17 	ldw	r4,60(r2)
    15e4:	e0bff917 	ldw	r2,-28(fp)
    15e8:	1085883a 	add	r2,r2,r2
    15ec:	1085883a 	add	r2,r2,r2
    15f0:	2085883a 	add	r2,r4,r2
    15f4:	10800017 	ldw	r2,0(r2)
    15f8:	1887c83a 	sub	r3,r3,r2
    15fc:	e0bff017 	ldw	r2,-64(fp)
    1600:	11001017 	ldw	r4,64(r2)
    1604:	e0bff917 	ldw	r2,-28(fp)
    1608:	1085883a 	add	r2,r2,r2
    160c:	1085883a 	add	r2,r2,r2
    1610:	2085883a 	add	r2,r4,r2
    1614:	10800017 	ldw	r2,0(r2)
    1618:	1887c83a 	sub	r3,r3,r2
    161c:	e0bff017 	ldw	r2,-64(fp)
    1620:	11001117 	ldw	r4,68(r2)
    1624:	e0bff917 	ldw	r2,-28(fp)
    1628:	1085883a 	add	r2,r2,r2
    162c:	1085883a 	add	r2,r2,r2
    1630:	2085883a 	add	r2,r4,r2
    1634:	10800017 	ldw	r2,0(r2)
    1638:	1885883a 	add	r2,r3,r2
    163c:	e0bff515 	stw	r2,-44(fp)
  mean = (cascade->p0[p_offset] - cascade->p1[p_offset] - cascade->p2[p_offset] + cascade->p3[p_offset]);
    1640:	e0bff017 	ldw	r2,-64(fp)
    1644:	10c01217 	ldw	r3,72(r2)
    1648:	e0bffa17 	ldw	r2,-24(fp)
    164c:	1085883a 	add	r2,r2,r2
    1650:	1085883a 	add	r2,r2,r2
    1654:	1885883a 	add	r2,r3,r2
    1658:	10c00017 	ldw	r3,0(r2)
    165c:	e0bff017 	ldw	r2,-64(fp)
    1660:	11001317 	ldw	r4,76(r2)
    1664:	e0bffa17 	ldw	r2,-24(fp)
    1668:	1085883a 	add	r2,r2,r2
    166c:	1085883a 	add	r2,r2,r2
    1670:	2085883a 	add	r2,r4,r2
    1674:	10800017 	ldw	r2,0(r2)
    1678:	1887c83a 	sub	r3,r3,r2
    167c:	e0bff017 	ldw	r2,-64(fp)
    1680:	11001417 	ldw	r4,80(r2)
    1684:	e0bffa17 	ldw	r2,-24(fp)
    1688:	1085883a 	add	r2,r2,r2
    168c:	1085883a 	add	r2,r2,r2
    1690:	2085883a 	add	r2,r4,r2
    1694:	10800017 	ldw	r2,0(r2)
    1698:	1887c83a 	sub	r3,r3,r2
    169c:	e0bff017 	ldw	r2,-64(fp)
    16a0:	11001517 	ldw	r4,84(r2)
    16a4:	e0bffa17 	ldw	r2,-24(fp)
    16a8:	1085883a 	add	r2,r2,r2
    16ac:	1085883a 	add	r2,r2,r2
    16b0:	2085883a 	add	r2,r4,r2
    16b4:	10800017 	ldw	r2,0(r2)
    16b8:	1885883a 	add	r2,r3,r2
    16bc:	e0bff615 	stw	r2,-40(fp)

  variance_norm_factor = (variance_norm_factor*cascade->inv_window_area);
    16c0:	e0bff017 	ldw	r2,-64(fp)
    16c4:	10800517 	ldw	r2,20(r2)
    16c8:	1007883a 	mov	r3,r2
    16cc:	e0bff517 	ldw	r2,-44(fp)
    16d0:	10c5383a 	mul	r2,r2,r3
    16d4:	e0bff515 	stw	r2,-44(fp)
  variance_norm_factor =  variance_norm_factor - mean*mean;
    16d8:	e0fff617 	ldw	r3,-40(fp)
    16dc:	e0bff617 	ldw	r2,-40(fp)
    16e0:	1887383a 	mul	r3,r3,r2
    16e4:	e0bff517 	ldw	r2,-44(fp)
    16e8:	10c5c83a 	sub	r2,r2,r3
    16ec:	e0bff515 	stw	r2,-44(fp)
   * In GPU, it is wise to convert the variance norm
   * into floating point, and use HW sqrtf function.
   * More info:
   * http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#standard-functions
   **********************************************/
  if( variance_norm_factor > 0 )
    16f0:	e0bff517 	ldw	r2,-44(fp)
    16f4:	1005003a 	cmpeq	r2,r2,zero
    16f8:	1000041e 	bne	r2,zero,170c <runCascadeClassifier+0x1c0>
    variance_norm_factor = int_sqrt(variance_norm_factor);
    16fc:	e13ff517 	ldw	r4,-44(fp)
    1700:	0000c7c0 	call	c7c <_Z8int_sqrtj>
    1704:	e0bff515 	stw	r2,-44(fp)
    1708:	00000206 	br	1714 <runCascadeClassifier+0x1c8>
  else
    variance_norm_factor = 1;
    170c:	00800044 	movi	r2,1
    1710:	e0bff515 	stw	r2,-44(fp)
   *
   * Filters in the same stage are also independent,
   * except that filter results need to be merged,
   * and compared with a per-stage threshold.
   *************************************************/
  for( i = start_stage; i < cascade->n_stages; i++ )
    1714:	e0bffe17 	ldw	r2,-8(fp)
    1718:	e0bff815 	stw	r2,-32(fp)
    171c:	00005006 	br	1860 <runCascadeClassifier+0x314>
       * To avoid it from limiting parallelism,
       * we can duplicate it multiple times,
       * e.g., using stage_sum_array[number_of_threads].
       * Then threads only need to sync at the end
       ***************************************************/
      stage_sum = 0;
    1720:	e03ff115 	stw	zero,-60(fp)

      for( j = 0; j < stages_array[i]; j++ )
    1724:	e03ff715 	stw	zero,-36(fp)
    1728:	00001c06 	br	179c <runCascadeClassifier+0x250>
	{
	  /**************************************************
	   * Send the shifted window to a haar filter.
	   **************************************************/
	  stage_sum += evalWeakClassifier(variance_norm_factor, p_offset, haar_counter, w_index, r_index);
    172c:	e13ff517 	ldw	r4,-44(fp)
    1730:	e0bff217 	ldw	r2,-56(fp)
    1734:	d8800015 	stw	r2,0(sp)
    1738:	e17ffa17 	ldw	r5,-24(fp)
    173c:	e1bff417 	ldw	r6,-48(fp)
    1740:	e1fff317 	ldw	r7,-52(fp)
    1744:	00027180 	call	2718 <_Z18evalWeakClassifieriiiii>
    1748:	1007883a 	mov	r3,r2
    174c:	e0bff117 	ldw	r2,-60(fp)
    1750:	10c5883a 	add	r2,r2,r3
    1754:	e0bff115 	stw	r2,-60(fp)
	  n_features++;
    1758:	d0a6d317 	ldw	r2,-25780(gp)
    175c:	1009883a 	mov	r4,r2
    1760:	014fe034 	movhi	r5,16256
    1764:	000f7600 	call	f760 <__addsf3>
    1768:	d0a6d315 	stw	r2,-25780(gp)
	  haar_counter++;
    176c:	e0bff417 	ldw	r2,-48(fp)
    1770:	10800044 	addi	r2,r2,1
    1774:	e0bff415 	stw	r2,-48(fp)
	  w_index+=3;
    1778:	e0bff317 	ldw	r2,-52(fp)
    177c:	108000c4 	addi	r2,r2,3
    1780:	e0bff315 	stw	r2,-52(fp)
	  r_index+=12;
    1784:	e0bff217 	ldw	r2,-56(fp)
    1788:	10800304 	addi	r2,r2,12
    178c:	e0bff215 	stw	r2,-56(fp)
       * e.g., using stage_sum_array[number_of_threads].
       * Then threads only need to sync at the end
       ***************************************************/
      stage_sum = 0;

      for( j = 0; j < stages_array[i]; j++ )
    1790:	e0bff717 	ldw	r2,-36(fp)
    1794:	10800044 	addi	r2,r2,1
    1798:	e0bff715 	stw	r2,-36(fp)
    179c:	e0bff817 	ldw	r2,-32(fp)
    17a0:	1085883a 	add	r2,r2,r2
    17a4:	1085883a 	add	r2,r2,r2
    17a8:	1007883a 	mov	r3,r2
    17ac:	d0a6d517 	ldw	r2,-25772(gp)
    17b0:	1885883a 	add	r2,r3,r2
    17b4:	10c00017 	ldw	r3,0(r2)
    17b8:	e0bff717 	ldw	r2,-36(fp)
    17bc:	10ffdb16 	blt	r2,r3,172c <runCascadeClassifier+0x1e0>
       * and the search is abandoned at the i-th stage (-i).
       * Otherwise, a face is detected (1)
       **************************************************************/

      /* the number "0.4" is empirically chosen for 5kk73 */
      if( stage_sum < 0.4*stages_thresh_array[i] ){
    17c0:	e13ff117 	ldw	r4,-60(fp)
    17c4:	00106d80 	call	106d8 <__floatsidf>
    17c8:	1021883a 	mov	r16,r2
    17cc:	1823883a 	mov	r17,r3
    17d0:	e0bff817 	ldw	r2,-32(fp)
    17d4:	1085883a 	add	r2,r2,r2
    17d8:	1085883a 	add	r2,r2,r2
    17dc:	1007883a 	mov	r3,r2
    17e0:	d0a6dc17 	ldw	r2,-25744(gp)
    17e4:	1885883a 	add	r2,r3,r2
    17e8:	11000017 	ldw	r4,0(r2)
    17ec:	00106d80 	call	106d8 <__floatsidf>
    17f0:	100b883a 	mov	r5,r2
    17f4:	180d883a 	mov	r6,r3
    17f8:	2809883a 	mov	r4,r5
    17fc:	300b883a 	mov	r5,r6
    1800:	01a666b4 	movhi	r6,39322
    1804:	31a66684 	addi	r6,r6,-26214
    1808:	01cff6b4 	movhi	r7,16346
    180c:	39e66644 	addi	r7,r7,-26215
    1810:	001028c0 	call	1028c <__muldf3>
    1814:	1009883a 	mov	r4,r2
    1818:	180b883a 	mov	r5,r3
    181c:	2005883a 	mov	r2,r4
    1820:	2807883a 	mov	r3,r5
    1824:	8009883a 	mov	r4,r16
    1828:	880b883a 	mov	r5,r17
    182c:	100d883a 	mov	r6,r2
    1830:	180f883a 	mov	r7,r3
    1834:	00106500 	call	10650 <__ltdf2>
    1838:	1004803a 	cmplt	r2,r2,zero
    183c:	1000011e 	bne	r2,zero,1844 <runCascadeClassifier+0x2f8>
    1840:	00000406 	br	1854 <runCascadeClassifier+0x308>
	return -i;
    1844:	e0bff817 	ldw	r2,-32(fp)
    1848:	0085c83a 	sub	r2,zero,r2
    184c:	e0bfff15 	stw	r2,-4(fp)
    1850:	00000906 	br	1878 <runCascadeClassifier+0x32c>
   *
   * Filters in the same stage are also independent,
   * except that filter results need to be merged,
   * and compared with a per-stage threshold.
   *************************************************/
  for( i = start_stage; i < cascade->n_stages; i++ )
    1854:	e0bff817 	ldw	r2,-32(fp)
    1858:	10800044 	addi	r2,r2,1
    185c:	e0bff815 	stw	r2,-32(fp)
    1860:	e0bff017 	ldw	r2,-64(fp)
    1864:	10c00017 	ldw	r3,0(r2)
    1868:	e0bff817 	ldw	r2,-32(fp)
    186c:	10ffac16 	blt	r2,r3,1720 <runCascadeClassifier+0x1d4>
      /* the number "0.4" is empirically chosen for 5kk73 */
      if( stage_sum < 0.4*stages_thresh_array[i] ){
	return -i;
      } /* end of the per-stage thresholding */
    } /* end of i loop */
  return 1;
    1870:	00800044 	movi	r2,1
    1874:	e0bfff15 	stw	r2,-4(fp)
    1878:	e0bfff17 	ldw	r2,-4(fp)
}
    187c:	e037883a 	mov	sp,fp
    1880:	dfc00317 	ldw	ra,12(sp)
    1884:	df000217 	ldw	fp,8(sp)
    1888:	dc400117 	ldw	r17,4(sp)
    188c:	dc000017 	ldw	r16,0(sp)
    1890:	dec00404 	addi	sp,sp,16
    1894:	f800283a 	ret

00001898 <_Z14integralImagesP7MyImageP10MyIntImageS2_>:
 * Compute the integral image (and squared integral)
 * Integral image helps quickly sum up an area.
 * More info:
 * http://en.wikipedia.org/wiki/Summed_area_table
 ****************************************************/
void integralImages( MyImage *src, MyIntImage *sum, MyIntImage *sqsum )
    1898:	defff004 	addi	sp,sp,-64
    189c:	df000f15 	stw	fp,60(sp)
    18a0:	df000f04 	addi	fp,sp,60
    18a4:	e13ffd15 	stw	r4,-12(fp)
    18a8:	e17ffe15 	stw	r5,-8(fp)
    18ac:	e1bfff15 	stw	r6,-4(fp)
{
  int x, y, s, sq, t, tq;
  unsigned char it;
  int height = src->height;
    18b0:	e0bffd17 	ldw	r2,-12(fp)
    18b4:	10800117 	ldw	r2,4(r2)
    18b8:	e0bff515 	stw	r2,-44(fp)
  int width = src->width;
    18bc:	e0bffd17 	ldw	r2,-12(fp)
    18c0:	10800017 	ldw	r2,0(r2)
    18c4:	e0bff415 	stw	r2,-48(fp)
  unsigned char *data = src->data;
    18c8:	e0bffd17 	ldw	r2,-12(fp)
    18cc:	10800317 	ldw	r2,12(r2)
    18d0:	e0bff315 	stw	r2,-52(fp)
  int * sumData = sum->data;
    18d4:	e0bffe17 	ldw	r2,-8(fp)
    18d8:	10800217 	ldw	r2,8(r2)
    18dc:	e0bff215 	stw	r2,-56(fp)
  int * sqsumData = sqsum->data;
    18e0:	e0bfff17 	ldw	r2,-4(fp)
    18e4:	10800217 	ldw	r2,8(r2)
    18e8:	e0bff115 	stw	r2,-60(fp)
  for( y = 0; y < height; y++)
    18ec:	e03ffb15 	stw	zero,-20(fp)
    18f0:	00005e06 	br	1a6c <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x1d4>
    {
      s = 0;
    18f4:	e03ffa15 	stw	zero,-24(fp)
      sq = 0;
    18f8:	e03ff915 	stw	zero,-28(fp)
      /* loop over the number of columns */
      for( x = 0; x < width; x ++)
    18fc:	e03ffc15 	stw	zero,-16(fp)
    1900:	00005406 	br	1a54 <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x1bc>
	{
	  it = data[y*width+x];
    1904:	e0fffb17 	ldw	r3,-20(fp)
    1908:	e0bff417 	ldw	r2,-48(fp)
    190c:	1887383a 	mul	r3,r3,r2
    1910:	e0bffc17 	ldw	r2,-16(fp)
    1914:	1885883a 	add	r2,r3,r2
    1918:	1007883a 	mov	r3,r2
    191c:	e0bff317 	ldw	r2,-52(fp)
    1920:	1885883a 	add	r2,r3,r2
    1924:	10800003 	ldbu	r2,0(r2)
    1928:	e0bff605 	stb	r2,-40(fp)
	  /* sum of the current row (integer)*/
	  s += it; 
    192c:	e0fff603 	ldbu	r3,-40(fp)
    1930:	e0bffa17 	ldw	r2,-24(fp)
    1934:	10c5883a 	add	r2,r2,r3
    1938:	e0bffa15 	stw	r2,-24(fp)
	  sq += it*it;
    193c:	e0fff603 	ldbu	r3,-40(fp)
    1940:	e0bff603 	ldbu	r2,-40(fp)
    1944:	1887383a 	mul	r3,r3,r2
    1948:	e0bff917 	ldw	r2,-28(fp)
    194c:	10c5883a 	add	r2,r2,r3
    1950:	e0bff915 	stw	r2,-28(fp)

	  t = s;
    1954:	e0bffa17 	ldw	r2,-24(fp)
    1958:	e0bff815 	stw	r2,-32(fp)
	  tq = sq;
    195c:	e0bff917 	ldw	r2,-28(fp)
    1960:	e0bff715 	stw	r2,-36(fp)
	  if (y != 0)
    1964:	e0bffb17 	ldw	r2,-20(fp)
    1968:	1005003a 	cmpeq	r2,r2,zero
    196c:	10001e1e 	bne	r2,zero,19e8 <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x150>
	    {
	      t += sumData[(y-1)*width+x];
    1970:	e0bffb17 	ldw	r2,-20(fp)
    1974:	10ffffc4 	addi	r3,r2,-1
    1978:	e0bff417 	ldw	r2,-48(fp)
    197c:	1887383a 	mul	r3,r3,r2
    1980:	e0bffc17 	ldw	r2,-16(fp)
    1984:	1885883a 	add	r2,r3,r2
    1988:	1085883a 	add	r2,r2,r2
    198c:	1085883a 	add	r2,r2,r2
    1990:	1007883a 	mov	r3,r2
    1994:	e0bff217 	ldw	r2,-56(fp)
    1998:	1885883a 	add	r2,r3,r2
    199c:	10c00017 	ldw	r3,0(r2)
    19a0:	e0bff817 	ldw	r2,-32(fp)
    19a4:	10c5883a 	add	r2,r2,r3
    19a8:	e0bff815 	stw	r2,-32(fp)
	      tq += sqsumData[(y-1)*width+x];
    19ac:	e0bffb17 	ldw	r2,-20(fp)
    19b0:	10ffffc4 	addi	r3,r2,-1
    19b4:	e0bff417 	ldw	r2,-48(fp)
    19b8:	1887383a 	mul	r3,r3,r2
    19bc:	e0bffc17 	ldw	r2,-16(fp)
    19c0:	1885883a 	add	r2,r3,r2
    19c4:	1085883a 	add	r2,r2,r2
    19c8:	1085883a 	add	r2,r2,r2
    19cc:	1007883a 	mov	r3,r2
    19d0:	e0bff117 	ldw	r2,-60(fp)
    19d4:	1885883a 	add	r2,r3,r2
    19d8:	10c00017 	ldw	r3,0(r2)
    19dc:	e0bff717 	ldw	r2,-36(fp)
    19e0:	10c5883a 	add	r2,r2,r3
    19e4:	e0bff715 	stw	r2,-36(fp)
	    }
	  sumData[y*width+x]=t;
    19e8:	e0fffb17 	ldw	r3,-20(fp)
    19ec:	e0bff417 	ldw	r2,-48(fp)
    19f0:	1887383a 	mul	r3,r3,r2
    19f4:	e0bffc17 	ldw	r2,-16(fp)
    19f8:	1885883a 	add	r2,r3,r2
    19fc:	1085883a 	add	r2,r2,r2
    1a00:	1085883a 	add	r2,r2,r2
    1a04:	1007883a 	mov	r3,r2
    1a08:	e0bff217 	ldw	r2,-56(fp)
    1a0c:	1887883a 	add	r3,r3,r2
    1a10:	e0bff817 	ldw	r2,-32(fp)
    1a14:	18800015 	stw	r2,0(r3)
	  sqsumData[y*width+x]=tq;
    1a18:	e0fffb17 	ldw	r3,-20(fp)
    1a1c:	e0bff417 	ldw	r2,-48(fp)
    1a20:	1887383a 	mul	r3,r3,r2
    1a24:	e0bffc17 	ldw	r2,-16(fp)
    1a28:	1885883a 	add	r2,r3,r2
    1a2c:	1085883a 	add	r2,r2,r2
    1a30:	1085883a 	add	r2,r2,r2
    1a34:	1007883a 	mov	r3,r2
    1a38:	e0bff117 	ldw	r2,-60(fp)
    1a3c:	1887883a 	add	r3,r3,r2
    1a40:	e0bff717 	ldw	r2,-36(fp)
    1a44:	18800015 	stw	r2,0(r3)
  for( y = 0; y < height; y++)
    {
      s = 0;
      sq = 0;
      /* loop over the number of columns */
      for( x = 0; x < width; x ++)
    1a48:	e0bffc17 	ldw	r2,-16(fp)
    1a4c:	10800044 	addi	r2,r2,1
    1a50:	e0bffc15 	stw	r2,-16(fp)
    1a54:	e0fffc17 	ldw	r3,-16(fp)
    1a58:	e0bff417 	ldw	r2,-48(fp)
    1a5c:	18bfa916 	blt	r3,r2,1904 <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x6c>
  int height = src->height;
  int width = src->width;
  unsigned char *data = src->data;
  int * sumData = sum->data;
  int * sqsumData = sqsum->data;
  for( y = 0; y < height; y++)
    1a60:	e0bffb17 	ldw	r2,-20(fp)
    1a64:	10800044 	addi	r2,r2,1
    1a68:	e0bffb15 	stw	r2,-20(fp)
    1a6c:	e0fffb17 	ldw	r3,-20(fp)
    1a70:	e0bff517 	ldw	r2,-44(fp)
    1a74:	18bf9f16 	blt	r3,r2,18f4 <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x5c>
	    }
	  sumData[y*width+x]=t;
	  sqsumData[y*width+x]=tq;
	}
    }
}
    1a78:	e037883a 	mov	sp,fp
    1a7c:	df000017 	ldw	fp,0(sp)
    1a80:	dec00104 	addi	sp,sp,4
    1a84:	f800283a 	ret

00001a88 <_Z15nearestNeighborP7MyImageS0_>:

/***********************************************************
 * This function downsample an image using nearest neighbor
 * It is used to build the image pyramid
 **********************************************************/
void nearestNeighbor (MyImage *src, MyImage *dst)
    1a88:	deffed04 	addi	sp,sp,-76
    1a8c:	dfc01215 	stw	ra,72(sp)
    1a90:	df001115 	stw	fp,68(sp)
    1a94:	df001104 	addi	fp,sp,68
    1a98:	e13ffe15 	stw	r4,-8(fp)
    1a9c:	e17fff15 	stw	r5,-4(fp)
  int j;
  int x;
  int i;
  unsigned char* t;
  unsigned char* p;
  int w1 = src->width;
    1aa0:	e0bffe17 	ldw	r2,-8(fp)
    1aa4:	10800017 	ldw	r2,0(r2)
    1aa8:	e0bff715 	stw	r2,-36(fp)
  int h1 = src->height;
    1aac:	e0bffe17 	ldw	r2,-8(fp)
    1ab0:	10800117 	ldw	r2,4(r2)
    1ab4:	e0bff615 	stw	r2,-40(fp)
  int w2 = dst->width;
    1ab8:	e0bfff17 	ldw	r2,-4(fp)
    1abc:	10800017 	ldw	r2,0(r2)
    1ac0:	e0bff515 	stw	r2,-44(fp)
  int h2 = dst->height;
    1ac4:	e0bfff17 	ldw	r2,-4(fp)
    1ac8:	10800117 	ldw	r2,4(r2)
    1acc:	e0bff415 	stw	r2,-48(fp)

  int rat = 0;
    1ad0:	e03ff315 	stw	zero,-52(fp)

  unsigned char* src_data = src->data;
    1ad4:	e0bffe17 	ldw	r2,-8(fp)
    1ad8:	10800317 	ldw	r2,12(r2)
    1adc:	e0bff215 	stw	r2,-56(fp)
  unsigned char* dst_data = dst->data;
    1ae0:	e0bfff17 	ldw	r2,-4(fp)
    1ae4:	10800317 	ldw	r2,12(r2)
    1ae8:	e0bff115 	stw	r2,-60(fp)


  int x_ratio = (int)((w1<<16)/w2) +1;
    1aec:	e0bff717 	ldw	r2,-36(fp)
    1af0:	1008943a 	slli	r4,r2,16
    1af4:	e17ff517 	ldw	r5,-44(fp)
    1af8:	001095c0 	call	1095c <__divsi3>
    1afc:	10800044 	addi	r2,r2,1
    1b00:	e0bff015 	stw	r2,-64(fp)
  int y_ratio = (int)((h1<<16)/h2) +1;
    1b04:	e0bff617 	ldw	r2,-40(fp)
    1b08:	1008943a 	slli	r4,r2,16
    1b0c:	e17ff417 	ldw	r5,-48(fp)
    1b10:	001095c0 	call	1095c <__divsi3>
    1b14:	10800044 	addi	r2,r2,1
    1b18:	e0bfef15 	stw	r2,-68(fp)

  for (i=0;i<h2;i++)
    1b1c:	e03ffa15 	stw	zero,-24(fp)
    1b20:	00003006 	br	1be4 <_Z15nearestNeighborP7MyImageS0_+0x15c>
    {
      t = dst_data + i*w2;
    1b24:	e0fffa17 	ldw	r3,-24(fp)
    1b28:	e0bff517 	ldw	r2,-44(fp)
    1b2c:	1885383a 	mul	r2,r3,r2
    1b30:	1007883a 	mov	r3,r2
    1b34:	e0bff117 	ldw	r2,-60(fp)
    1b38:	1885883a 	add	r2,r3,r2
    1b3c:	e0bff915 	stw	r2,-28(fp)
      y = ((i*y_ratio)>>16);
    1b40:	e0fffa17 	ldw	r3,-24(fp)
    1b44:	e0bfef17 	ldw	r2,-68(fp)
    1b48:	1885383a 	mul	r2,r3,r2
    1b4c:	1005d43a 	srai	r2,r2,16
    1b50:	e0bffd15 	stw	r2,-12(fp)
      p = src_data + y*w1;
    1b54:	e0fffd17 	ldw	r3,-12(fp)
    1b58:	e0bff717 	ldw	r2,-36(fp)
    1b5c:	1885383a 	mul	r2,r3,r2
    1b60:	1007883a 	mov	r3,r2
    1b64:	e0bff217 	ldw	r2,-56(fp)
    1b68:	1885883a 	add	r2,r3,r2
    1b6c:	e0bff815 	stw	r2,-32(fp)
      rat = 0;
    1b70:	e03ff315 	stw	zero,-52(fp)
      for (j=0;j<w2;j++)
    1b74:	e03ffc15 	stw	zero,-16(fp)
    1b78:	00001406 	br	1bcc <_Z15nearestNeighborP7MyImageS0_+0x144>
	{
	  x = (rat>>16);
    1b7c:	e0bff317 	ldw	r2,-52(fp)
    1b80:	1005d43a 	srai	r2,r2,16
    1b84:	e0bffb15 	stw	r2,-20(fp)
	  *t++ = p[x];
    1b88:	e0bffb17 	ldw	r2,-20(fp)
    1b8c:	1007883a 	mov	r3,r2
    1b90:	e0bff817 	ldw	r2,-32(fp)
    1b94:	1885883a 	add	r2,r3,r2
    1b98:	10c00003 	ldbu	r3,0(r2)
    1b9c:	e0bff917 	ldw	r2,-28(fp)
    1ba0:	10c00005 	stb	r3,0(r2)
    1ba4:	e0bff917 	ldw	r2,-28(fp)
    1ba8:	10800044 	addi	r2,r2,1
    1bac:	e0bff915 	stw	r2,-28(fp)
	  rat += x_ratio;
    1bb0:	e0fff317 	ldw	r3,-52(fp)
    1bb4:	e0bff017 	ldw	r2,-64(fp)
    1bb8:	1885883a 	add	r2,r3,r2
    1bbc:	e0bff315 	stw	r2,-52(fp)
    {
      t = dst_data + i*w2;
      y = ((i*y_ratio)>>16);
      p = src_data + y*w1;
      rat = 0;
      for (j=0;j<w2;j++)
    1bc0:	e0bffc17 	ldw	r2,-16(fp)
    1bc4:	10800044 	addi	r2,r2,1
    1bc8:	e0bffc15 	stw	r2,-16(fp)
    1bcc:	e0fffc17 	ldw	r3,-16(fp)
    1bd0:	e0bff517 	ldw	r2,-44(fp)
    1bd4:	18bfe916 	blt	r3,r2,1b7c <_Z15nearestNeighborP7MyImageS0_+0xf4>


  int x_ratio = (int)((w1<<16)/w2) +1;
  int y_ratio = (int)((h1<<16)/h2) +1;

  for (i=0;i<h2;i++)
    1bd8:	e0bffa17 	ldw	r2,-24(fp)
    1bdc:	10800044 	addi	r2,r2,1
    1be0:	e0bffa15 	stw	r2,-24(fp)
    1be4:	e0fffa17 	ldw	r3,-24(fp)
    1be8:	e0bff417 	ldw	r2,-48(fp)
    1bec:	18bfcd16 	blt	r3,r2,1b24 <_Z15nearestNeighborP7MyImageS0_+0x9c>
	  x = (rat>>16);
	  *t++ = p[x];
	  rat += x_ratio;
	}
    }
}
    1bf0:	e037883a 	mov	sp,fp
    1bf4:	dfc00117 	ldw	ra,4(sp)
    1bf8:	df000017 	ldw	fp,0(sp)
    1bfc:	dec00204 	addi	sp,sp,8
    1c00:	f800283a 	ret

00001c04 <releaseTextClassifier>:
    } /* end of i loop */
  fclose(fp);
}


void releaseTextClassifier()
    1c04:	defffe04 	addi	sp,sp,-8
    1c08:	dfc00115 	stw	ra,4(sp)
    1c0c:	df000015 	stw	fp,0(sp)
    1c10:	d839883a 	mov	fp,sp
{
  free(stages_array);
    1c14:	d126d517 	ldw	r4,-25772(gp)
    1c18:	00135740 	call	13574 <free>
  free(rectangles_array);
    1c1c:	d126d617 	ldw	r4,-25768(gp)
    1c20:	00135740 	call	13574 <free>
  free(scaled_rectangles_array);
    1c24:	d126d717 	ldw	r4,-25764(gp)
    1c28:	00135740 	call	13574 <free>
  free(weights_array);
    1c2c:	d126d817 	ldw	r4,-25760(gp)
    1c30:	00135740 	call	13574 <free>
  free(tree_thresh_array);
    1c34:	d126d917 	ldw	r4,-25756(gp)
    1c38:	00135740 	call	13574 <free>
  free(alpha1_array);
    1c3c:	d126da17 	ldw	r4,-25752(gp)
    1c40:	00135740 	call	13574 <free>
  free(alpha2_array);
    1c44:	d126db17 	ldw	r4,-25748(gp)
    1c48:	00135740 	call	13574 <free>
  free(stages_thresh_array);
    1c4c:	d126dc17 	ldw	r4,-25744(gp)
    1c50:	00135740 	call	13574 <free>
}
    1c54:	e037883a 	mov	sp,fp
    1c58:	dfc00117 	ldw	ra,4(sp)
    1c5c:	df000017 	ldw	fp,0(sp)
    1c60:	dec00204 	addi	sp,sp,8
    1c64:	f800283a 	ret

00001c68 <readTextClassifier>:
	  rat += x_ratio;
	}
    }
}

void readTextClassifier()//(myCascade * cascade)
    1c68:	deffef04 	addi	sp,sp,-68
    1c6c:	dfc01015 	stw	ra,64(sp)
    1c70:	df000f15 	stw	fp,60(sp)
    1c74:	dc000e15 	stw	r16,56(sp)
    1c78:	df000e04 	addi	fp,sp,56
{
  /*number of stages of the cascade classifier*/
  int stages;
  /*total number of weak classifiers (one node each)*/
  int total_nodes = 0;
    1c7c:	e03ffb15 	stw	zero,-20(fp)
  int i, j, k, l;
  char mystring [12];
  int r_index = 0;
    1c80:	e03ff615 	stw	zero,-40(fp)
  int w_index = 0;
    1c84:	e03ff515 	stw	zero,-44(fp)
  int tree_index = 0;
    1c88:	e03ff415 	stw	zero,-48(fp)
  FILE *finfo = fopen("info.txt", "r");
    1c8c:	010000b4 	movhi	r4,2
    1c90:	21397904 	addi	r4,r4,-6684
    1c94:	014000b4 	movhi	r5,2
    1c98:	29797c04 	addi	r5,r5,-6672
    1c9c:	001223c0 	call	1223c <fopen>
    1ca0:	e0bff315 	stw	r2,-52(fp)
  /**************************************************
  /* how many stages are in the cascaded filter? 
  /* the first line of info.txt is the number of stages 
  /* (in the 5kk73 example, there are 25 stages)
  **************************************************/
  if ( fgets (mystring , 12 , finfo) != NULL )
    1ca4:	e13ffd04 	addi	r4,fp,-12
    1ca8:	01400304 	movi	r5,12
    1cac:	e1bff317 	ldw	r6,-52(fp)
    1cb0:	0011e640 	call	11e64 <fgets>
    1cb4:	1004c03a 	cmpne	r2,r2,zero
    1cb8:	10803fcc 	andi	r2,r2,255
    1cbc:	1005003a 	cmpeq	r2,r2,zero
    1cc0:	1000031e 	bne	r2,zero,1cd0 <readTextClassifier+0x68>
    {
      stages = atoi(mystring);
    1cc4:	e13ffd04 	addi	r4,fp,-12
    1cc8:	00118940 	call	11894 <atoi>
    1ccc:	e0bffc15 	stw	r2,-16(fp)
    }
  i = 0;
    1cd0:	e03ffa15 	stw	zero,-24(fp)

  stages_array = (int *)malloc(sizeof(int)*stages);
    1cd4:	e0bffc17 	ldw	r2,-16(fp)
    1cd8:	1085883a 	add	r2,r2,r2
    1cdc:	1085883a 	add	r2,r2,r2
    1ce0:	1009883a 	mov	r4,r2
    1ce4:	00135880 	call	13588 <malloc>
    1ce8:	d0a6d515 	stw	r2,-25772(gp)
   * how many filters in each stage? 
   * They are specified in info.txt,
   * starting from second line.
   * (in the 5kk73 example, from line 2 to line 26)
   *************************************************/
  while ( fgets (mystring , 12 , finfo) != NULL )
    1cec:	00001606 	br	1d48 <readTextClassifier+0xe0>
    {
      stages_array[i] = atoi(mystring);
    1cf0:	e0bffa17 	ldw	r2,-24(fp)
    1cf4:	1085883a 	add	r2,r2,r2
    1cf8:	1085883a 	add	r2,r2,r2
    1cfc:	1007883a 	mov	r3,r2
    1d00:	d0a6d517 	ldw	r2,-25772(gp)
    1d04:	18a1883a 	add	r16,r3,r2
    1d08:	e13ffd04 	addi	r4,fp,-12
    1d0c:	00118940 	call	11894 <atoi>
    1d10:	80800015 	stw	r2,0(r16)
      total_nodes += stages_array[i];
    1d14:	e0bffa17 	ldw	r2,-24(fp)
    1d18:	1085883a 	add	r2,r2,r2
    1d1c:	1085883a 	add	r2,r2,r2
    1d20:	1007883a 	mov	r3,r2
    1d24:	d0a6d517 	ldw	r2,-25772(gp)
    1d28:	1885883a 	add	r2,r3,r2
    1d2c:	10c00017 	ldw	r3,0(r2)
    1d30:	e0bffb17 	ldw	r2,-20(fp)
    1d34:	10c5883a 	add	r2,r2,r3
    1d38:	e0bffb15 	stw	r2,-20(fp)
      i++;
    1d3c:	e0bffa17 	ldw	r2,-24(fp)
    1d40:	10800044 	addi	r2,r2,1
    1d44:	e0bffa15 	stw	r2,-24(fp)
   * how many filters in each stage? 
   * They are specified in info.txt,
   * starting from second line.
   * (in the 5kk73 example, from line 2 to line 26)
   *************************************************/
  while ( fgets (mystring , 12 , finfo) != NULL )
    1d48:	e13ffd04 	addi	r4,fp,-12
    1d4c:	01400304 	movi	r5,12
    1d50:	e1bff317 	ldw	r6,-52(fp)
    1d54:	0011e640 	call	11e64 <fgets>
    1d58:	1004c03a 	cmpne	r2,r2,zero
    1d5c:	10803fcc 	andi	r2,r2,255
    1d60:	1004c03a 	cmpne	r2,r2,zero
    1d64:	103fe21e 	bne	r2,zero,1cf0 <readTextClassifier+0x88>
    {
      stages_array[i] = atoi(mystring);
      total_nodes += stages_array[i];
      i++;
    }
  fclose(finfo);
    1d68:	e13ff317 	ldw	r4,-52(fp)
    1d6c:	00119b00 	call	119b0 <fclose>
  /***********************************************
   * Allocate a lot of array structures
   * Note that, to increase parallelism,
   * some arrays need to be splitted or duplicated
   **********************************************/
  rectangles_array = (int *)malloc(sizeof(int)*total_nodes*12);
    1d70:	e0bffb17 	ldw	r2,-20(fp)
    1d74:	11000c24 	muli	r4,r2,48
    1d78:	00135880 	call	13588 <malloc>
    1d7c:	d0a6d615 	stw	r2,-25768(gp)
  scaled_rectangles_array = (int **)malloc(sizeof(int*)*total_nodes*12);
    1d80:	e0bffb17 	ldw	r2,-20(fp)
    1d84:	11000c24 	muli	r4,r2,48
    1d88:	00135880 	call	13588 <malloc>
    1d8c:	d0a6d715 	stw	r2,-25764(gp)
  weights_array = (int *)malloc(sizeof(int)*total_nodes*3);
    1d90:	e0bffb17 	ldw	r2,-20(fp)
    1d94:	11000324 	muli	r4,r2,12
    1d98:	00135880 	call	13588 <malloc>
    1d9c:	d0a6d815 	stw	r2,-25760(gp)
  alpha1_array = (int*)malloc(sizeof(int)*total_nodes);
    1da0:	e0bffb17 	ldw	r2,-20(fp)
    1da4:	1085883a 	add	r2,r2,r2
    1da8:	1085883a 	add	r2,r2,r2
    1dac:	1009883a 	mov	r4,r2
    1db0:	00135880 	call	13588 <malloc>
    1db4:	d0a6da15 	stw	r2,-25752(gp)
  alpha2_array = (int*)malloc(sizeof(int)*total_nodes);
    1db8:	e0bffb17 	ldw	r2,-20(fp)
    1dbc:	1085883a 	add	r2,r2,r2
    1dc0:	1085883a 	add	r2,r2,r2
    1dc4:	1009883a 	mov	r4,r2
    1dc8:	00135880 	call	13588 <malloc>
    1dcc:	d0a6db15 	stw	r2,-25748(gp)
  tree_thresh_array = (int*)malloc(sizeof(int)*total_nodes);
    1dd0:	e0bffb17 	ldw	r2,-20(fp)
    1dd4:	1085883a 	add	r2,r2,r2
    1dd8:	1085883a 	add	r2,r2,r2
    1ddc:	1009883a 	mov	r4,r2
    1de0:	00135880 	call	13588 <malloc>
    1de4:	d0a6d915 	stw	r2,-25756(gp)
  stages_thresh_array = (int*)malloc(sizeof(int)*stages);
    1de8:	e0bffc17 	ldw	r2,-16(fp)
    1dec:	1085883a 	add	r2,r2,r2
    1df0:	1085883a 	add	r2,r2,r2
    1df4:	1009883a 	mov	r4,r2
    1df8:	00135880 	call	13588 <malloc>
    1dfc:	d0a6dc15 	stw	r2,-25744(gp)
  FILE *fp = fopen("class.txt", "r");
    1e00:	010000b4 	movhi	r4,2
    1e04:	21397d04 	addi	r4,r4,-6668
    1e08:	014000b4 	movhi	r5,2
    1e0c:	29797c04 	addi	r5,r5,-6672
    1e10:	001223c0 	call	1223c <fopen>
    1e14:	e0bff215 	stw	r2,-56(fp)
   * 17: alpha 1 of the filter
   * 18: alpha 2 of the filter
   ******************************************/

  /* loop over n of stages */
  for (i = 0; i < stages; i++)
    1e18:	e03ffa15 	stw	zero,-24(fp)
    1e1c:	00009a06 	br	2088 <readTextClassifier+0x420>
    {    /* loop over n of trees */
      for (j = 0; j < stages_array[i]; j++)
    1e20:	e03ff915 	stw	zero,-28(fp)
    1e24:	00008c06 	br	2058 <readTextClassifier+0x3f0>
	{	/* loop over n of rectangular features */
	  for(k = 0; k < 3; k++)
    1e28:	e03ff815 	stw	zero,-32(fp)
    1e2c:	00003306 	br	1efc <readTextClassifier+0x294>
	    {	/* loop over the n of vertices */
	      for (l = 0; l <4; l++)
    1e30:	e03ff715 	stw	zero,-36(fp)
    1e34:	00001706 	br	1e94 <readTextClassifier+0x22c>
		{
		  if (fgets (mystring , 12 , fp) != NULL)
    1e38:	e13ffd04 	addi	r4,fp,-12
    1e3c:	01400304 	movi	r5,12
    1e40:	e1bff217 	ldw	r6,-56(fp)
    1e44:	0011e640 	call	11e64 <fgets>
    1e48:	1004c03a 	cmpne	r2,r2,zero
    1e4c:	10803fcc 	andi	r2,r2,255
    1e50:	1005003a 	cmpeq	r2,r2,zero
    1e54:	1000121e 	bne	r2,zero,1ea0 <readTextClassifier+0x238>
		    rectangles_array[r_index] = atoi(mystring);
    1e58:	e0bff617 	ldw	r2,-40(fp)
    1e5c:	1085883a 	add	r2,r2,r2
    1e60:	1085883a 	add	r2,r2,r2
    1e64:	1007883a 	mov	r3,r2
    1e68:	d0a6d617 	ldw	r2,-25768(gp)
    1e6c:	18a1883a 	add	r16,r3,r2
    1e70:	e13ffd04 	addi	r4,fp,-12
    1e74:	00118940 	call	11894 <atoi>
    1e78:	80800015 	stw	r2,0(r16)
		  else
		    break;
		  r_index++;
    1e7c:	e0bff617 	ldw	r2,-40(fp)
    1e80:	10800044 	addi	r2,r2,1
    1e84:	e0bff615 	stw	r2,-40(fp)
    {    /* loop over n of trees */
      for (j = 0; j < stages_array[i]; j++)
	{	/* loop over n of rectangular features */
	  for(k = 0; k < 3; k++)
	    {	/* loop over the n of vertices */
	      for (l = 0; l <4; l++)
    1e88:	e0bff717 	ldw	r2,-36(fp)
    1e8c:	10800044 	addi	r2,r2,1
    1e90:	e0bff715 	stw	r2,-36(fp)
    1e94:	e0bff717 	ldw	r2,-36(fp)
    1e98:	10800110 	cmplti	r2,r2,4
    1e9c:	103fe61e 	bne	r2,zero,1e38 <readTextClassifier+0x1d0>
		    rectangles_array[r_index] = atoi(mystring);
		  else
		    break;
		  r_index++;
		} /* end of l loop */
	      if (fgets (mystring , 12 , fp) != NULL)
    1ea0:	e13ffd04 	addi	r4,fp,-12
    1ea4:	01400304 	movi	r5,12
    1ea8:	e1bff217 	ldw	r6,-56(fp)
    1eac:	0011e640 	call	11e64 <fgets>
    1eb0:	1004c03a 	cmpne	r2,r2,zero
    1eb4:	10803fcc 	andi	r2,r2,255
    1eb8:	1005003a 	cmpeq	r2,r2,zero
    1ebc:	1000121e 	bne	r2,zero,1f08 <readTextClassifier+0x2a0>
		{
		  weights_array[w_index] = atoi(mystring);
    1ec0:	e0bff517 	ldw	r2,-44(fp)
    1ec4:	1085883a 	add	r2,r2,r2
    1ec8:	1085883a 	add	r2,r2,r2
    1ecc:	1007883a 	mov	r3,r2
    1ed0:	d0a6d817 	ldw	r2,-25760(gp)
    1ed4:	18a1883a 	add	r16,r3,r2
    1ed8:	e13ffd04 	addi	r4,fp,-12
    1edc:	00118940 	call	11894 <atoi>
    1ee0:	80800015 	stw	r2,0(r16)
		  /*TODO: make more general */
		  /*weights_array[w_index]>>=8; */
		}
	      else
		break;
	      w_index++;
    1ee4:	e0bff517 	ldw	r2,-44(fp)
    1ee8:	10800044 	addi	r2,r2,1
    1eec:	e0bff515 	stw	r2,-44(fp)
  /* loop over n of stages */
  for (i = 0; i < stages; i++)
    {    /* loop over n of trees */
      for (j = 0; j < stages_array[i]; j++)
	{	/* loop over n of rectangular features */
	  for(k = 0; k < 3; k++)
    1ef0:	e0bff817 	ldw	r2,-32(fp)
    1ef4:	10800044 	addi	r2,r2,1
    1ef8:	e0bff815 	stw	r2,-32(fp)
    1efc:	e0bff817 	ldw	r2,-32(fp)
    1f00:	108000d0 	cmplti	r2,r2,3
    1f04:	103fca1e 	bne	r2,zero,1e30 <readTextClassifier+0x1c8>
		}
	      else
		break;
	      w_index++;
	    } /* end of k loop */
	  if (fgets (mystring , 12 , fp) != NULL)
    1f08:	e13ffd04 	addi	r4,fp,-12
    1f0c:	01400304 	movi	r5,12
    1f10:	e1bff217 	ldw	r6,-56(fp)
    1f14:	0011e640 	call	11e64 <fgets>
    1f18:	1004c03a 	cmpne	r2,r2,zero
    1f1c:	10803fcc 	andi	r2,r2,255
    1f20:	1005003a 	cmpeq	r2,r2,zero
    1f24:	1000551e 	bne	r2,zero,207c <readTextClassifier+0x414>
	    tree_thresh_array[tree_index]= atoi(mystring);
    1f28:	e0bff417 	ldw	r2,-48(fp)
    1f2c:	1085883a 	add	r2,r2,r2
    1f30:	1085883a 	add	r2,r2,r2
    1f34:	1007883a 	mov	r3,r2
    1f38:	d0a6d917 	ldw	r2,-25756(gp)
    1f3c:	18a1883a 	add	r16,r3,r2
    1f40:	e13ffd04 	addi	r4,fp,-12
    1f44:	00118940 	call	11894 <atoi>
    1f48:	80800015 	stw	r2,0(r16)
	  else
	    break;
	  if (fgets (mystring , 12 , fp) != NULL)
    1f4c:	e13ffd04 	addi	r4,fp,-12
    1f50:	01400304 	movi	r5,12
    1f54:	e1bff217 	ldw	r6,-56(fp)
    1f58:	0011e640 	call	11e64 <fgets>
    1f5c:	1004c03a 	cmpne	r2,r2,zero
    1f60:	10803fcc 	andi	r2,r2,255
    1f64:	1005003a 	cmpeq	r2,r2,zero
    1f68:	1000441e 	bne	r2,zero,207c <readTextClassifier+0x414>
	    alpha1_array[tree_index]= atoi(mystring);
    1f6c:	e0bff417 	ldw	r2,-48(fp)
    1f70:	1085883a 	add	r2,r2,r2
    1f74:	1085883a 	add	r2,r2,r2
    1f78:	1007883a 	mov	r3,r2
    1f7c:	d0a6da17 	ldw	r2,-25752(gp)
    1f80:	18a1883a 	add	r16,r3,r2
    1f84:	e13ffd04 	addi	r4,fp,-12
    1f88:	00118940 	call	11894 <atoi>
    1f8c:	80800015 	stw	r2,0(r16)
	  else
	    break;
	  if (fgets (mystring , 12 , fp) != NULL)
    1f90:	e13ffd04 	addi	r4,fp,-12
    1f94:	01400304 	movi	r5,12
    1f98:	e1bff217 	ldw	r6,-56(fp)
    1f9c:	0011e640 	call	11e64 <fgets>
    1fa0:	1004c03a 	cmpne	r2,r2,zero
    1fa4:	10803fcc 	andi	r2,r2,255
    1fa8:	1005003a 	cmpeq	r2,r2,zero
    1fac:	1000331e 	bne	r2,zero,207c <readTextClassifier+0x414>
	    alpha2_array[tree_index]= atoi(mystring);
    1fb0:	e0bff417 	ldw	r2,-48(fp)
    1fb4:	1085883a 	add	r2,r2,r2
    1fb8:	1085883a 	add	r2,r2,r2
    1fbc:	1007883a 	mov	r3,r2
    1fc0:	d0a6db17 	ldw	r2,-25748(gp)
    1fc4:	18a1883a 	add	r16,r3,r2
    1fc8:	e13ffd04 	addi	r4,fp,-12
    1fcc:	00118940 	call	11894 <atoi>
    1fd0:	80800015 	stw	r2,0(r16)
	  else
	    break;
	  tree_index++;
    1fd4:	e0bff417 	ldw	r2,-48(fp)
    1fd8:	10800044 	addi	r2,r2,1
    1fdc:	e0bff415 	stw	r2,-48(fp)
	  if (j == stages_array[i]-1)
    1fe0:	e0bffa17 	ldw	r2,-24(fp)
    1fe4:	1085883a 	add	r2,r2,r2
    1fe8:	1085883a 	add	r2,r2,r2
    1fec:	1007883a 	mov	r3,r2
    1ff0:	d0a6d517 	ldw	r2,-25772(gp)
    1ff4:	1885883a 	add	r2,r3,r2
    1ff8:	10800017 	ldw	r2,0(r2)
    1ffc:	10ffffc4 	addi	r3,r2,-1
    2000:	e0bff917 	ldw	r2,-28(fp)
    2004:	1880111e 	bne	r3,r2,204c <readTextClassifier+0x3e4>
	    {
	      if (fgets (mystring , 12 , fp) != NULL)
    2008:	e13ffd04 	addi	r4,fp,-12
    200c:	01400304 	movi	r5,12
    2010:	e1bff217 	ldw	r6,-56(fp)
    2014:	0011e640 	call	11e64 <fgets>
    2018:	1004c03a 	cmpne	r2,r2,zero
    201c:	10803fcc 	andi	r2,r2,255
    2020:	1005003a 	cmpeq	r2,r2,zero
    2024:	1000151e 	bne	r2,zero,207c <readTextClassifier+0x414>
		stages_thresh_array[i] = atoi(mystring);
    2028:	e0bffa17 	ldw	r2,-24(fp)
    202c:	1085883a 	add	r2,r2,r2
    2030:	1085883a 	add	r2,r2,r2
    2034:	1007883a 	mov	r3,r2
    2038:	d0a6dc17 	ldw	r2,-25744(gp)
    203c:	18a1883a 	add	r16,r3,r2
    2040:	e13ffd04 	addi	r4,fp,-12
    2044:	00118940 	call	11894 <atoi>
    2048:	80800015 	stw	r2,0(r16)
   ******************************************/

  /* loop over n of stages */
  for (i = 0; i < stages; i++)
    {    /* loop over n of trees */
      for (j = 0; j < stages_array[i]; j++)
    204c:	e0bff917 	ldw	r2,-28(fp)
    2050:	10800044 	addi	r2,r2,1
    2054:	e0bff915 	stw	r2,-28(fp)
    2058:	e0bffa17 	ldw	r2,-24(fp)
    205c:	1085883a 	add	r2,r2,r2
    2060:	1085883a 	add	r2,r2,r2
    2064:	1007883a 	mov	r3,r2
    2068:	d0a6d517 	ldw	r2,-25772(gp)
    206c:	1885883a 	add	r2,r3,r2
    2070:	10c00017 	ldw	r3,0(r2)
    2074:	e0bff917 	ldw	r2,-28(fp)
    2078:	10ff6b16 	blt	r2,r3,1e28 <readTextClassifier+0x1c0>
   * 17: alpha 1 of the filter
   * 18: alpha 2 of the filter
   ******************************************/

  /* loop over n of stages */
  for (i = 0; i < stages; i++)
    207c:	e0bffa17 	ldw	r2,-24(fp)
    2080:	10800044 	addi	r2,r2,1
    2084:	e0bffa15 	stw	r2,-24(fp)
    2088:	e0fffa17 	ldw	r3,-24(fp)
    208c:	e0bffc17 	ldw	r2,-16(fp)
    2090:	18bf6316 	blt	r3,r2,1e20 <readTextClassifier+0x1b8>
	      else
		break;
	    }
	} /* end of j loop */
    } /* end of i loop */
  fclose(fp);
    2094:	e13ff217 	ldw	r4,-56(fp)
    2098:	00119b00 	call	119b0 <fclose>
}
    209c:	e037883a 	mov	sp,fp
    20a0:	dfc00217 	ldw	ra,8(sp)
    20a4:	df000117 	ldw	fp,4(sp)
    20a8:	dc000017 	ldw	r16,0(sp)
    20ac:	dec00304 	addi	sp,sp,12
    20b0:	f800283a 	ret

000020b4 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE>:
    } /* end of i loop */
  return 1;
}


void ScaleImage_Invoker( myCascade* _cascade, float _factor, int sum_row, int sum_col, std::vector<MyRect>& _vec)
    20b4:	deffe604 	addi	sp,sp,-104
    20b8:	dfc01915 	stw	ra,100(sp)
    20bc:	df001815 	stw	fp,96(sp)
    20c0:	df001804 	addi	fp,sp,96
    20c4:	e13ffc15 	stw	r4,-16(fp)
    20c8:	e17ffd15 	stw	r5,-12(fp)
    20cc:	e1bffe15 	stw	r6,-8(fp)
    20d0:	e1ffff15 	stw	r7,-4(fp)
{

  myCascade* cascade = _cascade;
    20d4:	e0bffc17 	ldw	r2,-16(fp)
    20d8:	e0bff115 	stw	r2,-60(fp)

  float factor = _factor;
    20dc:	e0bffd17 	ldw	r2,-12(fp)
    20e0:	e0bff015 	stw	r2,-64(fp)
  MyPoint p;
  int result;
  int y1, y2, x2, x, y, step;
  std::vector<MyRect> *vec = &_vec;
    20e4:	e0800217 	ldw	r2,8(fp)
    20e8:	e0bfe815 	stw	r2,-96(fp)

  MySize winSize0 = cascade->orig_window_size;
    20ec:	e13ff117 	ldw	r4,-60(fp)
    20f0:	20800317 	ldw	r2,12(r4)
    20f4:	20c00417 	ldw	r3,16(r4)
    20f8:	e0bff415 	stw	r2,-48(fp)
    20fc:	e0fff515 	stw	r3,-44(fp)
  MySize winSize;

  winSize.width =  myRound(winSize0.width*factor);
    2100:	e13ff417 	ldw	r4,-48(fp)
    2104:	000fc080 	call	fc08 <__floatsisf>
    2108:	1009883a 	mov	r4,r2
    210c:	e17ff017 	ldw	r5,-64(fp)
    2110:	000f7c40 	call	f7c4 <__mulsf3>
    2114:	1009883a 	mov	r4,r2
    2118:	00026740 	call	2674 <_Z7myRoundf>
    211c:	e0bff615 	stw	r2,-40(fp)
  winSize.height =  myRound(winSize0.height*factor);
    2120:	e13ff517 	ldw	r4,-44(fp)
    2124:	000fc080 	call	fc08 <__floatsisf>
    2128:	1009883a 	mov	r4,r2
    212c:	e17ff017 	ldw	r5,-64(fp)
    2130:	000f7c40 	call	f7c4 <__mulsf3>
    2134:	1009883a 	mov	r4,r2
    2138:	00026740 	call	2674 <_Z7myRoundf>
    213c:	e0bff715 	stw	r2,-36(fp)
  y1 = 0;
    2140:	e03fee15 	stw	zero,-72(fp)

  /********************************************
  * When filter window shifts to image boarder,
  * some margin need to be kept
  *********************************************/
  y2 = sum_row - winSize0.height;
    2144:	e0fff517 	ldw	r3,-44(fp)
    2148:	e0bffe17 	ldw	r2,-8(fp)
    214c:	10c5c83a 	sub	r2,r2,r3
    2150:	e0bfed15 	stw	r2,-76(fp)
  x2 = sum_col - winSize0.width;
    2154:	e0fff417 	ldw	r3,-48(fp)
    2158:	e0bfff17 	ldw	r2,-4(fp)
    215c:	10c5c83a 	sub	r2,r2,r3
    2160:	e0bfec15 	stw	r2,-80(fp)
   * unless you want to change input image.
   *
   * The step size is set to 1 for 5kk73,
   * i.e., shift the filter window by 1 pixel.
   *******************************************/	
  step = 1;
    2164:	00800044 	movi	r2,1
    2168:	e0bfe915 	stw	r2,-92(fp)
   * Some random hints (may or may not work):
   * Split or duplicate data structure.
   * Merge functions/loops to increase locality
   * Tiling to increase computation-to-memory ratio
   *********************************************/
  for( x = 0; x <= x2; x += step )
    216c:	e03feb15 	stw	zero,-84(fp)
    2170:	00003606 	br	224c <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0x198>
    for( y = y1; y <= y2; y += step )
    2174:	e0bfee17 	ldw	r2,-72(fp)
    2178:	e0bfea15 	stw	r2,-88(fp)
    217c:	00002c06 	br	2230 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0x17c>
      {
	p.x = x;
    2180:	e0bfeb17 	ldw	r2,-84(fp)
    2184:	e0bff215 	stw	r2,-56(fp)
	p.y = y;
    2188:	e0bfea17 	ldw	r2,-88(fp)
    218c:	e0bff315 	stw	r2,-52(fp)

	/*********************************************
	 * Optimization Oppotunity:
	 * The same cascade filter is used each time
	 ********************************************/
	result = runCascadeClassifier( cascade, p, 0 );
    2190:	e13ff117 	ldw	r4,-60(fp)
    2194:	e17ff217 	ldw	r5,-56(fp)
    2198:	e1bff317 	ldw	r6,-52(fp)
    219c:	000f883a 	mov	r7,zero
    21a0:	000154c0 	call	154c <runCascadeClassifier>
    21a4:	e0bfef15 	stw	r2,-68(fp)
	 * the push_back operation is not possible on GPUs.
	 * The GPU may need to use a simpler data structure,
	 * e.g., an array, to store the coordinates of face,
	 * which can be later memcpy from GPU to CPU to do push_back
	 *******************************************************/
	if( result > 0 )
    21a8:	e0bfef17 	ldw	r2,-68(fp)
    21ac:	10800050 	cmplti	r2,r2,1
    21b0:	10001b1e 	bne	r2,zero,2220 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0x16c>
	  {
	    MyRect r = {myRound(x*factor), myRound(y*factor), winSize.width, winSize.height};
    21b4:	e03ff815 	stw	zero,-32(fp)
    21b8:	e03ff915 	stw	zero,-28(fp)
    21bc:	e03ffa15 	stw	zero,-24(fp)
    21c0:	e03ffb15 	stw	zero,-20(fp)
    21c4:	e13feb17 	ldw	r4,-84(fp)
    21c8:	000fc080 	call	fc08 <__floatsisf>
    21cc:	1009883a 	mov	r4,r2
    21d0:	e17ff017 	ldw	r5,-64(fp)
    21d4:	000f7c40 	call	f7c4 <__mulsf3>
    21d8:	1009883a 	mov	r4,r2
    21dc:	00026740 	call	2674 <_Z7myRoundf>
    21e0:	e0bff815 	stw	r2,-32(fp)
    21e4:	e13fea17 	ldw	r4,-88(fp)
    21e8:	000fc080 	call	fc08 <__floatsisf>
    21ec:	1009883a 	mov	r4,r2
    21f0:	e17ff017 	ldw	r5,-64(fp)
    21f4:	000f7c40 	call	f7c4 <__mulsf3>
    21f8:	1009883a 	mov	r4,r2
    21fc:	00026740 	call	2674 <_Z7myRoundf>
    2200:	e0bff915 	stw	r2,-28(fp)
    2204:	e0bff617 	ldw	r2,-40(fp)
    2208:	e0bffa15 	stw	r2,-24(fp)
    220c:	e0bff717 	ldw	r2,-36(fp)
    2210:	e0bffb15 	stw	r2,-20(fp)
	    vec->push_back(r);
    2214:	e17ff804 	addi	r5,fp,-32
    2218:	e13fe817 	ldw	r4,-96(fp)
    221c:	0003ae00 	call	3ae0 <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_>
   * Split or duplicate data structure.
   * Merge functions/loops to increase locality
   * Tiling to increase computation-to-memory ratio
   *********************************************/
  for( x = 0; x <= x2; x += step )
    for( y = y1; y <= y2; y += step )
    2220:	e0bfea17 	ldw	r2,-88(fp)
    2224:	e0ffe917 	ldw	r3,-92(fp)
    2228:	10c5883a 	add	r2,r2,r3
    222c:	e0bfea15 	stw	r2,-88(fp)
    2230:	e0ffea17 	ldw	r3,-88(fp)
    2234:	e0bfed17 	ldw	r2,-76(fp)
    2238:	10ffd10e 	bge	r2,r3,2180 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0xcc>
   * Some random hints (may or may not work):
   * Split or duplicate data structure.
   * Merge functions/loops to increase locality
   * Tiling to increase computation-to-memory ratio
   *********************************************/
  for( x = 0; x <= x2; x += step )
    223c:	e0bfeb17 	ldw	r2,-84(fp)
    2240:	e0ffe917 	ldw	r3,-92(fp)
    2244:	10c5883a 	add	r2,r2,r3
    2248:	e0bfeb15 	stw	r2,-84(fp)
    224c:	e0ffeb17 	ldw	r3,-84(fp)
    2250:	e0bfec17 	ldw	r2,-80(fp)
    2254:	10ffc70e 	bge	r2,r3,2174 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0xc0>
	  {
	    MyRect r = {myRound(x*factor), myRound(y*factor), winSize.width, winSize.height};
	    vec->push_back(r);
	  }
      }
}
    2258:	e037883a 	mov	sp,fp
    225c:	dfc00117 	ldw	ra,4(sp)
    2260:	df000017 	ldw	fp,0(sp)
    2264:	dec00204 	addi	sp,sp,8
    2268:	f800283a 	ret

0000226c <detectObjects>:
 * Function: detectObjects
 * Description: It calls all the major steps
 ******************************************************/

std::vector<MyRect> detectObjects( MyImage* _img, MySize minSize, MySize maxSize, myCascade* cascade,
				   float scaleFactor, int minNeighbors)
    226c:	deffc204 	addi	sp,sp,-248
    2270:	dfc03d15 	stw	ra,244(sp)
    2274:	df003c15 	stw	fp,240(sp)
    2278:	ddc03b15 	stw	r23,236(sp)
    227c:	dd803a15 	stw	r22,232(sp)
    2280:	dd403915 	stw	r21,228(sp)
    2284:	dd003815 	stw	r20,224(sp)
    2288:	dcc03715 	stw	r19,220(sp)
    228c:	dc803615 	stw	r18,216(sp)
    2290:	dc403515 	stw	r17,212(sp)
    2294:	dc003415 	stw	r16,208(sp)
    2298:	df003404 	addi	fp,sp,208
    229c:	e13ffe15 	stw	r4,-8(fp)
    22a0:	e17fec15 	stw	r5,-80(fp)
    22a4:	e1bfed15 	stw	r6,-76(fp)
    22a8:	e1ffee15 	stw	r7,-72(fp)
    22ac:	00800074 	movhi	r2,1
    22b0:	10b9cd04 	addi	r2,r2,-6348
    22b4:	e0bff515 	stw	r2,-44(fp)
    22b8:	008000b4 	movhi	r2,2
    22bc:	10b88204 	addi	r2,r2,-7672
    22c0:	e0bff615 	stw	r2,-40(fp)
    22c4:	e0bff704 	addi	r2,fp,-36
    22c8:	e0ffcd04 	addi	r3,fp,-204
    22cc:	10c00015 	stw	r3,0(r2)
    22d0:	00c00034 	movhi	r3,0
    22d4:	18c97604 	addi	r3,r3,9688
    22d8:	10c00115 	stw	r3,4(r2)
    22dc:	16c00215 	stw	sp,8(r2)
    22e0:	e13fef04 	addi	r4,fp,-68
    22e4:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
{

  /* group overlaping windows */
  const float GROUP_EPS = 0.4f;
    22e8:	008fb374 	movhi	r2,16077
    22ec:	10b33344 	addi	r2,r2,-13107
    22f0:	e0bfd215 	stw	r2,-184(fp)
  /* pointer to input image */
  MyImage *img = _img;
    22f4:	e0bfec17 	ldw	r2,-80(fp)
    22f8:	e0bfd115 	stw	r2,-188(fp)
   **********************************/
  MyImage image1Obj;
  MyIntImage sum1Obj;
  MyIntImage sqsum1Obj;
  /* pointers for the created structs */
  MyImage *img1 = &image1Obj;
    22fc:	e0bfd404 	addi	r2,fp,-176
    2300:	e0bfd015 	stw	r2,-192(fp)
  MyIntImage *sum1 = &sum1Obj;
    2304:	e0bfd904 	addi	r2,fp,-156
    2308:	e0bfcf15 	stw	r2,-196(fp)
  MyIntImage *sqsum1 = &sqsum1Obj;
    230c:	e0bfdd04 	addi	r2,fp,-140
    2310:	e0bfce15 	stw	r2,-200(fp)
   *
   * Each element of the std::vector is a "MyRect" struct 
   * MyRect struct keeps the info of a rectangle (see haar.h)
   * The rectangle contains one face candidate 
   *****************************************************/
  std::vector<MyRect> allCandidates;
    2314:	e0bffe17 	ldw	r2,-8(fp)
    2318:	e0bffd15 	stw	r2,-12(fp)
    231c:	e13fd304 	addi	r4,fp,-180
    2320:	0002b1c0 	call	2b1c <_ZNSaI6MyRectEC1Ev>
    2324:	e17fd304 	addi	r5,fp,-180
    2328:	e13ffd17 	ldw	r4,-12(fp)
    232c:	0002dbc0 	call	2dbc <_ZNSt6vectorI6MyRectSaIS0_EEC1ERKS1_>
    2330:	e13fd304 	addi	r4,fp,-180
    2334:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>

  /* scaling factor */
  float factor;

  /* maxSize */
  if( maxSize.height == 0 || maxSize.width == 0 )
    2338:	e0800b17 	ldw	r2,44(fp)
    233c:	1005003a 	cmpeq	r2,r2,zero
    2340:	1000031e 	bne	r2,zero,2350 <detectObjects+0xe4>
    2344:	e0800a17 	ldw	r2,40(fp)
    2348:	1004c03a 	cmpne	r2,r2,zero
    234c:	1000061e 	bne	r2,zero,2368 <detectObjects+0xfc>
    {
      maxSize.height = img->height;
    2350:	e0bfd117 	ldw	r2,-188(fp)
    2354:	10800117 	ldw	r2,4(r2)
    2358:	e0800b15 	stw	r2,44(fp)
      maxSize.width = img->width;
    235c:	e0bfd117 	ldw	r2,-188(fp)
    2360:	10800017 	ldw	r2,0(r2)
    2364:	e0800a15 	stw	r2,40(fp)
    }

  /* window size of the training set */
  MySize winSize0 = cascade->orig_window_size;
    2368:	e1000c17 	ldw	r4,48(fp)
    236c:	20800317 	ldw	r2,12(r4)
    2370:	20c00417 	ldw	r3,16(r4)
    2374:	e0bfe415 	stw	r2,-112(fp)
    2378:	e0ffe515 	stw	r3,-108(fp)

  /* malloc for img1: unsigned char */
  createImage(img->width, img->height, img1);
    237c:	e0bfd117 	ldw	r2,-188(fp)
    2380:	11000017 	ldw	r4,0(r2)
    2384:	e0bfd117 	ldw	r2,-188(fp)
    2388:	11400117 	ldw	r5,4(r2)
    238c:	00800044 	movi	r2,1
    2390:	e0bff015 	stw	r2,-64(fp)
    2394:	e1bfd017 	ldw	r6,-192(fp)
    2398:	0000a440 	call	a44 <createImage>
  /* malloc for sum1: unsigned char */
  createSumImage(img->width, img->height, sum1);
    239c:	e0bfd117 	ldw	r2,-188(fp)
    23a0:	11000017 	ldw	r4,0(r2)
    23a4:	e0bfd117 	ldw	r2,-188(fp)
    23a8:	11400117 	ldw	r5,4(r2)
    23ac:	e1bfcf17 	ldw	r6,-196(fp)
    23b0:	0000ab80 	call	ab8 <createSumImage>
  /* malloc for sqsum1: unsigned char */
  createSumImage(img->width, img->height, sqsum1);
    23b4:	e0bfd117 	ldw	r2,-188(fp)
    23b8:	11000017 	ldw	r4,0(r2)
    23bc:	e0bfd117 	ldw	r2,-188(fp)
    23c0:	11400117 	ldw	r5,4(r2)
    23c4:	e1bfce17 	ldw	r6,-200(fp)
    23c8:	0000ab80 	call	ab8 <createSumImage>

  /* initial scaling factor */
  factor = 1;
    23cc:	008fe034 	movhi	r2,16256
    23d0:	e0bfcd15 	stw	r2,-204(fp)

  /* iterate over the image pyramid */
  for( factor = 1; ; factor *= scaleFactor )
    23d4:	008fe034 	movhi	r2,16256
    23d8:	e0bfcd15 	stw	r2,-204(fp)
    {
      /* iteration counter */
      iter_counter++;
    23dc:	d0a6d417 	ldw	r2,-25776(gp)
    23e0:	10800044 	addi	r2,r2,1
    23e4:	d0a6d415 	stw	r2,-25776(gp)

      /* size of the image scaled up */
      MySize winSize = { myRound(winSize0.width*factor), myRound(winSize0.height*factor) };
    23e8:	e03fe615 	stw	zero,-104(fp)
    23ec:	e03fe715 	stw	zero,-100(fp)
    23f0:	e13fe417 	ldw	r4,-112(fp)
    23f4:	000fc080 	call	fc08 <__floatsisf>
    23f8:	1009883a 	mov	r4,r2
    23fc:	e17fcd17 	ldw	r5,-204(fp)
    2400:	000f7c40 	call	f7c4 <__mulsf3>
    2404:	1009883a 	mov	r4,r2
    2408:	00026740 	call	2674 <_Z7myRoundf>
    240c:	e0bfe615 	stw	r2,-104(fp)
    2410:	e13fe517 	ldw	r4,-108(fp)
    2414:	000fc080 	call	fc08 <__floatsisf>
    2418:	1009883a 	mov	r4,r2
    241c:	e17fcd17 	ldw	r5,-204(fp)
    2420:	000f7c40 	call	f7c4 <__mulsf3>
    2424:	1009883a 	mov	r4,r2
    2428:	00026740 	call	2674 <_Z7myRoundf>
    242c:	e0bfe715 	stw	r2,-100(fp)

      /* size of the image scaled down (from bigger to smaller) */
      MySize sz = { ( img->width/factor ), ( img->height/factor ) };
    2430:	e03fe815 	stw	zero,-96(fp)
    2434:	e03fe915 	stw	zero,-92(fp)
    2438:	e0bfd117 	ldw	r2,-188(fp)
    243c:	11000017 	ldw	r4,0(r2)
    2440:	000fc080 	call	fc08 <__floatsisf>
    2444:	1009883a 	mov	r4,r2
    2448:	e17fcd17 	ldw	r5,-204(fp)
    244c:	000f9a40 	call	f9a4 <__divsf3>
    2450:	1009883a 	mov	r4,r2
    2454:	000fca00 	call	fca0 <__fixsfsi>
    2458:	e0bfe815 	stw	r2,-96(fp)
    245c:	e0bfd117 	ldw	r2,-188(fp)
    2460:	11000117 	ldw	r4,4(r2)
    2464:	000fc080 	call	fc08 <__floatsisf>
    2468:	1009883a 	mov	r4,r2
    246c:	e17fcd17 	ldw	r5,-204(fp)
    2470:	000f9a40 	call	f9a4 <__divsf3>
    2474:	1009883a 	mov	r4,r2
    2478:	000fca00 	call	fca0 <__fixsfsi>
    247c:	e0bfe915 	stw	r2,-92(fp)

      /* difference between sizes of the scaled image and the original detection window */
      MySize sz1 = { sz.width - winSize0.width, sz.height - winSize0.height };
    2480:	e03fea15 	stw	zero,-88(fp)
    2484:	e03feb15 	stw	zero,-84(fp)
    2488:	e0ffe817 	ldw	r3,-96(fp)
    248c:	e0bfe417 	ldw	r2,-112(fp)
    2490:	1885c83a 	sub	r2,r3,r2
    2494:	e0bfea15 	stw	r2,-88(fp)
    2498:	e0ffe917 	ldw	r3,-92(fp)
    249c:	e0bfe517 	ldw	r2,-108(fp)
    24a0:	1885c83a 	sub	r2,r3,r2
    24a4:	e0bfeb15 	stw	r2,-84(fp)

      /* if the actual scaled image is smaller than the original detection window, break */
      if( sz1.width < 0 || sz1.height < 0 )
    24a8:	e0bfea17 	ldw	r2,-88(fp)
    24ac:	1004803a 	cmplt	r2,r2,zero
    24b0:	1000031e 	bne	r2,zero,24c0 <detectObjects+0x254>
    24b4:	e0bfeb17 	ldw	r2,-84(fp)
    24b8:	1004403a 	cmpge	r2,r2,zero
    24bc:	1000041e 	bne	r2,zero,24d0 <detectObjects+0x264>
       ***************************************************/
      ScaleImage_Invoker(cascade, factor, sum1->height, sum1->width,
			 allCandidates);
    } /* end of the factor loop, finish all scales in pyramid*/

  if( minNeighbors != 0)
    24c0:	e0800e17 	ldw	r2,56(fp)
    24c4:	1004c03a 	cmpne	r2,r2,zero
    24c8:	1000331e 	bne	r2,zero,2598 <detectObjects+0x32c>
    24cc:	00003906 	br	25b4 <detectObjects+0x348>
      /* if the actual scaled image is smaller than the original detection window, break */
      if( sz1.width < 0 || sz1.height < 0 )
	break;

      /* if a minSize different from the original detection window is specified, continue to the next scaling */
      if( winSize.width < minSize.width || winSize.height < minSize.height )
    24d0:	e0ffe617 	ldw	r3,-104(fp)
    24d4:	e0bfed17 	ldw	r2,-76(fp)
    24d8:	18802a16 	blt	r3,r2,2584 <detectObjects+0x318>
    24dc:	e0ffe717 	ldw	r3,-100(fp)
    24e0:	e0bfee17 	ldw	r2,-72(fp)
    24e4:	1880010e 	bge	r3,r2,24ec <detectObjects+0x280>
	continue;
    24e8:	00002606 	br	2584 <detectObjects+0x318>
       * img1: normal image (unsigned char)
       * sum1: integral image (int)
       * sqsum1: squared integral image (int)
       * see image.c for details
       ************************************/
      setImage(sz.width, sz.height, img1);
    24ec:	e13fe817 	ldw	r4,-96(fp)
    24f0:	e17fe917 	ldw	r5,-92(fp)
    24f4:	00800044 	movi	r2,1
    24f8:	e0bff015 	stw	r2,-64(fp)
    24fc:	e1bfd017 	ldw	r6,-192(fp)
    2500:	0000bfc0 	call	bfc <setImage>
      setSumImage(sz.width, sz.height, sum1);
    2504:	e13fe817 	ldw	r4,-96(fp)
    2508:	e17fe917 	ldw	r5,-92(fp)
    250c:	e1bfcf17 	ldw	r6,-196(fp)
    2510:	0000c3c0 	call	c3c <setSumImage>
      setSumImage(sz.width, sz.height, sqsum1);
    2514:	e13fe817 	ldw	r4,-96(fp)
    2518:	e17fe917 	ldw	r5,-92(fp)
    251c:	e1bfce17 	ldw	r6,-200(fp)
    2520:	0000c3c0 	call	c3c <setSumImage>
      /***************************************
       * Compute-intensive step:
       * building image pyramid by downsampling
       * downsampling using nearest neighbor
       **************************************/
      nearestNeighbor(img, img1);
    2524:	e13fd117 	ldw	r4,-188(fp)
    2528:	e17fd017 	ldw	r5,-192(fp)
    252c:	0001a880 	call	1a88 <_Z15nearestNeighborP7MyImageS0_>
      /***************************************************
       * Compute-intensive step:
       * At each scale of the image pyramid,
       * compute a new integral and squared integral image
       ***************************************************/
      integralImages(img1, sum1, sqsum1);
    2530:	e13fd017 	ldw	r4,-192(fp)
    2534:	e17fcf17 	ldw	r5,-196(fp)
    2538:	e1bfce17 	ldw	r6,-200(fp)
    253c:	00018980 	call	1898 <_Z14integralImagesP7MyImageP10MyIntImageS2_>
       * 
       * This function loads the four corners,
       * but does not do compuation based on four coners.
       * The computation is done next in ScaleImage_Invoker
       *************************************************/
      setImageForCascadeClassifier( cascade, sum1, sqsum1);
    2540:	e1000c17 	ldw	r4,48(fp)
    2544:	e17fcf17 	ldw	r5,-196(fp)
    2548:	e1bfce17 	ldw	r6,-200(fp)
    254c:	0000d440 	call	d44 <setImageForCascadeClassifier>

      /* print out for each scale of the image pyramid */
      printf("detecting faces, iter := %d\n", iter_counter);
    2550:	d166d417 	ldw	r5,-25776(gp)
    2554:	010000b4 	movhi	r4,2
    2558:	21398604 	addi	r4,r4,-6632
    255c:	00140c40 	call	140c4 <printf>
       * The main computations are invoked by this function.
       * Optimization oppurtunity:
       * the same cascade filter is invoked each time
       ***************************************************/
      ScaleImage_Invoker(cascade, factor, sum1->height, sum1->width,
			 allCandidates);
    2560:	e0bfcf17 	ldw	r2,-196(fp)
    2564:	11800117 	ldw	r6,4(r2)
    2568:	e0bfcf17 	ldw	r2,-196(fp)
    256c:	11c00017 	ldw	r7,0(r2)
    2570:	e0bffe17 	ldw	r2,-8(fp)
    2574:	d8800015 	stw	r2,0(sp)
    2578:	e1000c17 	ldw	r4,48(fp)
    257c:	e17fcd17 	ldw	r5,-204(fp)
    2580:	00020b40 	call	20b4 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE>

  /* initial scaling factor */
  factor = 1;

  /* iterate over the image pyramid */
  for( factor = 1; ; factor *= scaleFactor )
    2584:	e13fcd17 	ldw	r4,-204(fp)
    2588:	e1400d17 	ldw	r5,52(fp)
    258c:	000f7c40 	call	f7c4 <__mulsf3>
    2590:	e0bfcd15 	stw	r2,-204(fp)
    2594:	003f9106 	br	23dc <detectObjects+0x170>
			 allCandidates);
    } /* end of the factor loop, finish all scales in pyramid*/

  if( minNeighbors != 0)
    {
      groupRectangles(allCandidates, minNeighbors, GROUP_EPS);
    2598:	e13ffe17 	ldw	r4,-8(fp)
    259c:	00800044 	movi	r2,1
    25a0:	e0bff015 	stw	r2,-64(fp)
    25a4:	e1400e17 	ldw	r5,56(fp)
    25a8:	018fb374 	movhi	r6,16077
    25ac:	31b33344 	addi	r6,r6,-13107
    25b0:	00052a40 	call	52a4 <groupRectangles>
    }

  freeImage(img1);
    25b4:	00800044 	movi	r2,1
    25b8:	e0bff015 	stw	r2,-64(fp)
    25bc:	e13fd017 	ldw	r4,-192(fp)
    25c0:	0000b340 	call	b34 <freeImage>
  freeSumImage(sum1);
    25c4:	e13fcf17 	ldw	r4,-196(fp)
    25c8:	0000b980 	call	b98 <freeSumImage>
  freeSumImage(sqsum1);
    25cc:	e13fce17 	ldw	r4,-200(fp)
    25d0:	0000b980 	call	b98 <freeSumImage>
    25d4:	00000d06 	br	260c <detectObjects+0x3a0>
    25d8:	e7003304 	addi	fp,fp,204
    25dc:	e0fff117 	ldw	r3,-60(fp)
    25e0:	e0ffff15 	stw	r3,-4(fp)
    25e4:	e0bfff17 	ldw	r2,-4(fp)
    25e8:	e0bffc15 	stw	r2,-16(fp)
  return allCandidates;
    25ec:	e13ffe17 	ldw	r4,-8(fp)
    25f0:	0003bc80 	call	3bc8 <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    25f4:	e0fffc17 	ldw	r3,-16(fp)
    25f8:	e0ffff15 	stw	r3,-4(fp)
    25fc:	00bfffc4 	movi	r2,-1
    2600:	e0bff015 	stw	r2,-64(fp)
    2604:	e13fff17 	ldw	r4,-4(fp)
    2608:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    260c:	e13fef04 	addi	r4,fp,-68
    2610:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>

}
    2614:	e0bffe17 	ldw	r2,-8(fp)
    2618:	e037883a 	mov	sp,fp
    261c:	dfc00917 	ldw	ra,36(sp)
    2620:	df000817 	ldw	fp,32(sp)
    2624:	ddc00717 	ldw	r23,28(sp)
    2628:	dd800617 	ldw	r22,24(sp)
    262c:	dd400517 	ldw	r21,20(sp)
    2630:	dd000417 	ldw	r20,16(sp)
    2634:	dcc00317 	ldw	r19,12(sp)
    2638:	dc800217 	ldw	r18,8(sp)
    263c:	dc400117 	ldw	r17,4(sp)
    2640:	dc000017 	ldw	r16,0(sp)
    2644:	dec00a04 	addi	sp,sp,40
    2648:	f800283a 	ret

0000264c <_ZnwmPv>:
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) throw() { return __p; }
    264c:	defffd04 	addi	sp,sp,-12
    2650:	df000215 	stw	fp,8(sp)
    2654:	df000204 	addi	fp,sp,8
    2658:	e13ffe15 	stw	r4,-8(fp)
    265c:	e17fff15 	stw	r5,-4(fp)
    2660:	e0bfff17 	ldw	r2,-4(fp)
    2664:	e037883a 	mov	sp,fp
    2668:	df000017 	ldw	fp,0(sp)
    266c:	dec00104 	addi	sp,sp,4
    2670:	f800283a 	ret

00002674 <_Z7myRoundf>:
    return a;
  else
    return b;
}

inline  int  myRound( float value )
    2674:	defff904 	addi	sp,sp,-28
    2678:	dfc00615 	stw	ra,24(sp)
    267c:	df000515 	stw	fp,20(sp)
    2680:	df000504 	addi	fp,sp,20
    2684:	e13ffb15 	stw	r4,-20(fp)
{
  return (int)(value + (value >= 0 ? 0.5 : -0.5));
    2688:	e13ffb17 	ldw	r4,-20(fp)
    268c:	000fd340 	call	fd34 <__extendsfdf2>
    2690:	e0bffe15 	stw	r2,-8(fp)
    2694:	e0ffff15 	stw	r3,-4(fp)
    2698:	e13ffb17 	ldw	r4,-20(fp)
    269c:	000b883a 	mov	r5,zero
    26a0:	000fb180 	call	fb18 <__gesf2>
    26a4:	1004403a 	cmpge	r2,r2,zero
    26a8:	1000011e 	bne	r2,zero,26b0 <_Z7myRoundf+0x3c>
    26ac:	00000506 	br	26c4 <_Z7myRoundf+0x50>
    26b0:	0005883a 	mov	r2,zero
    26b4:	e0bffc15 	stw	r2,-16(fp)
    26b8:	008ff834 	movhi	r2,16352
    26bc:	e0bffd15 	stw	r2,-12(fp)
    26c0:	00000406 	br	26d4 <_Z7myRoundf+0x60>
    26c4:	0005883a 	mov	r2,zero
    26c8:	e0bffc15 	stw	r2,-16(fp)
    26cc:	00aff834 	movhi	r2,49120
    26d0:	e0bffd15 	stw	r2,-12(fp)
    26d4:	e13ffe17 	ldw	r4,-8(fp)
    26d8:	e17fff17 	ldw	r5,-4(fp)
    26dc:	e1bffc17 	ldw	r6,-16(fp)
    26e0:	e1fffd17 	ldw	r7,-12(fp)
    26e4:	00102180 	call	10218 <__adddf3>
    26e8:	1009883a 	mov	r4,r2
    26ec:	180b883a 	mov	r5,r3
    26f0:	2005883a 	mov	r2,r4
    26f4:	2807883a 	mov	r3,r5
    26f8:	1009883a 	mov	r4,r2
    26fc:	180b883a 	mov	r5,r3
    2700:	00107d00 	call	107d0 <__fixdfsi>
}
    2704:	e037883a 	mov	sp,fp
    2708:	dfc00117 	ldw	ra,4(sp)
    270c:	df000017 	ldw	fp,0(sp)
    2710:	dec00204 	addi	sp,sp,8
    2714:	f800283a 	ret

00002718 <_Z18evalWeakClassifieriiiii>:
 * evalWeakClassifier:
 * the actual computation of a haar filter.
 * More info:
 * http://en.wikipedia.org/wiki/Haar-like_features
 ***************************************************/
inline int evalWeakClassifier(int variance_norm_factor, int p_offset, int tree_index, int w_index, int r_index )
    2718:	defff804 	addi	sp,sp,-32
    271c:	df000715 	stw	fp,28(sp)
    2720:	df000704 	addi	fp,sp,28
    2724:	e13ffb15 	stw	r4,-20(fp)
    2728:	e17ffc15 	stw	r5,-16(fp)
    272c:	e1bffd15 	stw	r6,-12(fp)
    2730:	e1fffe15 	stw	r7,-8(fp)
{

  /* the node threshold is multiplied by the standard deviation of the image */
  int t = tree_thresh_array[tree_index] * variance_norm_factor;
    2734:	e0bffd17 	ldw	r2,-12(fp)
    2738:	1085883a 	add	r2,r2,r2
    273c:	1085883a 	add	r2,r2,r2
    2740:	1007883a 	mov	r3,r2
    2744:	d0a6d917 	ldw	r2,-25756(gp)
    2748:	1885883a 	add	r2,r3,r2
    274c:	10c00017 	ldw	r3,0(r2)
    2750:	e0bffb17 	ldw	r2,-20(fp)
    2754:	1885383a 	mul	r2,r3,r2
    2758:	e0bffa15 	stw	r2,-24(fp)

  int sum = (*(scaled_rectangles_array[r_index] + p_offset)
	     - *(scaled_rectangles_array[r_index + 1] + p_offset)
	     - *(scaled_rectangles_array[r_index + 2] + p_offset)
	     + *(scaled_rectangles_array[r_index + 3] + p_offset))
    * weights_array[w_index];
    275c:	e0800117 	ldw	r2,4(fp)
    2760:	1085883a 	add	r2,r2,r2
    2764:	1085883a 	add	r2,r2,r2
    2768:	1007883a 	mov	r3,r2
    276c:	d0a6d717 	ldw	r2,-25764(gp)
    2770:	1885883a 	add	r2,r3,r2
    2774:	10c00017 	ldw	r3,0(r2)
    2778:	e0bffc17 	ldw	r2,-16(fp)
    277c:	1085883a 	add	r2,r2,r2
    2780:	1085883a 	add	r2,r2,r2
    2784:	1885883a 	add	r2,r3,r2
    2788:	11000017 	ldw	r4,0(r2)
    278c:	e0800117 	ldw	r2,4(fp)
    2790:	1085883a 	add	r2,r2,r2
    2794:	1085883a 	add	r2,r2,r2
    2798:	1007883a 	mov	r3,r2
    279c:	d0a6d717 	ldw	r2,-25764(gp)
    27a0:	1885883a 	add	r2,r3,r2
    27a4:	10800104 	addi	r2,r2,4
    27a8:	10c00017 	ldw	r3,0(r2)
    27ac:	e0bffc17 	ldw	r2,-16(fp)
    27b0:	1085883a 	add	r2,r2,r2
    27b4:	1085883a 	add	r2,r2,r2
    27b8:	1885883a 	add	r2,r3,r2
    27bc:	10800017 	ldw	r2,0(r2)
    27c0:	2089c83a 	sub	r4,r4,r2
    27c4:	e0800117 	ldw	r2,4(fp)
    27c8:	1085883a 	add	r2,r2,r2
    27cc:	1085883a 	add	r2,r2,r2
    27d0:	1007883a 	mov	r3,r2
    27d4:	d0a6d717 	ldw	r2,-25764(gp)
    27d8:	1885883a 	add	r2,r3,r2
    27dc:	10800204 	addi	r2,r2,8
    27e0:	10c00017 	ldw	r3,0(r2)
    27e4:	e0bffc17 	ldw	r2,-16(fp)
    27e8:	1085883a 	add	r2,r2,r2
    27ec:	1085883a 	add	r2,r2,r2
    27f0:	1885883a 	add	r2,r3,r2
    27f4:	10800017 	ldw	r2,0(r2)
    27f8:	2089c83a 	sub	r4,r4,r2
    27fc:	e0800117 	ldw	r2,4(fp)
    2800:	1085883a 	add	r2,r2,r2
    2804:	1085883a 	add	r2,r2,r2
    2808:	1007883a 	mov	r3,r2
    280c:	d0a6d717 	ldw	r2,-25764(gp)
    2810:	1885883a 	add	r2,r3,r2
    2814:	10800304 	addi	r2,r2,12
    2818:	10c00017 	ldw	r3,0(r2)
    281c:	e0bffc17 	ldw	r2,-16(fp)
    2820:	1085883a 	add	r2,r2,r2
    2824:	1085883a 	add	r2,r2,r2
    2828:	1885883a 	add	r2,r3,r2
    282c:	10800017 	ldw	r2,0(r2)
    2830:	2089883a 	add	r4,r4,r2
    2834:	e0bffe17 	ldw	r2,-8(fp)
    2838:	1085883a 	add	r2,r2,r2
    283c:	1085883a 	add	r2,r2,r2
    2840:	1007883a 	mov	r3,r2
    2844:	d0a6d817 	ldw	r2,-25760(gp)
    2848:	1885883a 	add	r2,r3,r2
    284c:	10800017 	ldw	r2,0(r2)
    2850:	2085383a 	mul	r2,r4,r2
    2854:	e0bff915 	stw	r2,-28(fp)

  sum += (*(scaled_rectangles_array[r_index+4] + p_offset)
	  - *(scaled_rectangles_array[r_index + 5] + p_offset)
	  - *(scaled_rectangles_array[r_index + 6] + p_offset)
	  + *(scaled_rectangles_array[r_index + 7] + p_offset))
    * weights_array[w_index + 1];
    2858:	e0800117 	ldw	r2,4(fp)
    285c:	1085883a 	add	r2,r2,r2
    2860:	1085883a 	add	r2,r2,r2
    2864:	1007883a 	mov	r3,r2
    2868:	d0a6d717 	ldw	r2,-25764(gp)
    286c:	1885883a 	add	r2,r3,r2
    2870:	10800404 	addi	r2,r2,16
    2874:	10c00017 	ldw	r3,0(r2)
    2878:	e0bffc17 	ldw	r2,-16(fp)
    287c:	1085883a 	add	r2,r2,r2
    2880:	1085883a 	add	r2,r2,r2
    2884:	1885883a 	add	r2,r3,r2
    2888:	11000017 	ldw	r4,0(r2)
    288c:	e0800117 	ldw	r2,4(fp)
    2890:	1085883a 	add	r2,r2,r2
    2894:	1085883a 	add	r2,r2,r2
    2898:	1007883a 	mov	r3,r2
    289c:	d0a6d717 	ldw	r2,-25764(gp)
    28a0:	1885883a 	add	r2,r3,r2
    28a4:	10800504 	addi	r2,r2,20
    28a8:	10c00017 	ldw	r3,0(r2)
    28ac:	e0bffc17 	ldw	r2,-16(fp)
    28b0:	1085883a 	add	r2,r2,r2
    28b4:	1085883a 	add	r2,r2,r2
    28b8:	1885883a 	add	r2,r3,r2
    28bc:	10800017 	ldw	r2,0(r2)
    28c0:	2089c83a 	sub	r4,r4,r2
    28c4:	e0800117 	ldw	r2,4(fp)
    28c8:	1085883a 	add	r2,r2,r2
    28cc:	1085883a 	add	r2,r2,r2
    28d0:	1007883a 	mov	r3,r2
    28d4:	d0a6d717 	ldw	r2,-25764(gp)
    28d8:	1885883a 	add	r2,r3,r2
    28dc:	10800604 	addi	r2,r2,24
    28e0:	10c00017 	ldw	r3,0(r2)
    28e4:	e0bffc17 	ldw	r2,-16(fp)
    28e8:	1085883a 	add	r2,r2,r2
    28ec:	1085883a 	add	r2,r2,r2
    28f0:	1885883a 	add	r2,r3,r2
    28f4:	10800017 	ldw	r2,0(r2)
    28f8:	2089c83a 	sub	r4,r4,r2
    28fc:	e0800117 	ldw	r2,4(fp)
    2900:	1085883a 	add	r2,r2,r2
    2904:	1085883a 	add	r2,r2,r2
    2908:	1007883a 	mov	r3,r2
    290c:	d0a6d717 	ldw	r2,-25764(gp)
    2910:	1885883a 	add	r2,r3,r2
    2914:	10800704 	addi	r2,r2,28
    2918:	10c00017 	ldw	r3,0(r2)
    291c:	e0bffc17 	ldw	r2,-16(fp)
    2920:	1085883a 	add	r2,r2,r2
    2924:	1085883a 	add	r2,r2,r2
    2928:	1885883a 	add	r2,r3,r2
    292c:	10800017 	ldw	r2,0(r2)
    2930:	2089883a 	add	r4,r4,r2
    2934:	e0bffe17 	ldw	r2,-8(fp)
    2938:	1085883a 	add	r2,r2,r2
    293c:	1085883a 	add	r2,r2,r2
    2940:	1007883a 	mov	r3,r2
    2944:	d0a6d817 	ldw	r2,-25760(gp)
    2948:	1885883a 	add	r2,r3,r2
    294c:	10800104 	addi	r2,r2,4
    2950:	10800017 	ldw	r2,0(r2)
    2954:	2087383a 	mul	r3,r4,r2
    2958:	e0bff917 	ldw	r2,-28(fp)
    295c:	10c5883a 	add	r2,r2,r3
    2960:	e0bff915 	stw	r2,-28(fp)

  if ((scaled_rectangles_array[r_index+8] != NULL))
    2964:	e0800117 	ldw	r2,4(fp)
    2968:	1085883a 	add	r2,r2,r2
    296c:	1085883a 	add	r2,r2,r2
    2970:	1007883a 	mov	r3,r2
    2974:	d0a6d717 	ldw	r2,-25764(gp)
    2978:	1885883a 	add	r2,r3,r2
    297c:	10800804 	addi	r2,r2,32
    2980:	10800017 	ldw	r2,0(r2)
    2984:	1005003a 	cmpeq	r2,r2,zero
    2988:	1000431e 	bne	r2,zero,2a98 <_Z18evalWeakClassifieriiiii+0x380>
    sum += (*(scaled_rectangles_array[r_index+8] + p_offset)
	    - *(scaled_rectangles_array[r_index + 9] + p_offset)
	    - *(scaled_rectangles_array[r_index + 10] + p_offset)
	    + *(scaled_rectangles_array[r_index + 11] + p_offset))
      * weights_array[w_index + 2];
    298c:	e0800117 	ldw	r2,4(fp)
    2990:	1085883a 	add	r2,r2,r2
    2994:	1085883a 	add	r2,r2,r2
    2998:	1007883a 	mov	r3,r2
    299c:	d0a6d717 	ldw	r2,-25764(gp)
    29a0:	1885883a 	add	r2,r3,r2
    29a4:	10800804 	addi	r2,r2,32
    29a8:	10c00017 	ldw	r3,0(r2)
    29ac:	e0bffc17 	ldw	r2,-16(fp)
    29b0:	1085883a 	add	r2,r2,r2
    29b4:	1085883a 	add	r2,r2,r2
    29b8:	1885883a 	add	r2,r3,r2
    29bc:	11000017 	ldw	r4,0(r2)
    29c0:	e0800117 	ldw	r2,4(fp)
    29c4:	1085883a 	add	r2,r2,r2
    29c8:	1085883a 	add	r2,r2,r2
    29cc:	1007883a 	mov	r3,r2
    29d0:	d0a6d717 	ldw	r2,-25764(gp)
    29d4:	1885883a 	add	r2,r3,r2
    29d8:	10800904 	addi	r2,r2,36
    29dc:	10c00017 	ldw	r3,0(r2)
    29e0:	e0bffc17 	ldw	r2,-16(fp)
    29e4:	1085883a 	add	r2,r2,r2
    29e8:	1085883a 	add	r2,r2,r2
    29ec:	1885883a 	add	r2,r3,r2
    29f0:	10800017 	ldw	r2,0(r2)
    29f4:	2089c83a 	sub	r4,r4,r2
    29f8:	e0800117 	ldw	r2,4(fp)
    29fc:	1085883a 	add	r2,r2,r2
    2a00:	1085883a 	add	r2,r2,r2
    2a04:	1007883a 	mov	r3,r2
    2a08:	d0a6d717 	ldw	r2,-25764(gp)
    2a0c:	1885883a 	add	r2,r3,r2
    2a10:	10800a04 	addi	r2,r2,40
    2a14:	10c00017 	ldw	r3,0(r2)
    2a18:	e0bffc17 	ldw	r2,-16(fp)
    2a1c:	1085883a 	add	r2,r2,r2
    2a20:	1085883a 	add	r2,r2,r2
    2a24:	1885883a 	add	r2,r3,r2
    2a28:	10800017 	ldw	r2,0(r2)
    2a2c:	2089c83a 	sub	r4,r4,r2
    2a30:	e0800117 	ldw	r2,4(fp)
    2a34:	1085883a 	add	r2,r2,r2
    2a38:	1085883a 	add	r2,r2,r2
    2a3c:	1007883a 	mov	r3,r2
    2a40:	d0a6d717 	ldw	r2,-25764(gp)
    2a44:	1885883a 	add	r2,r3,r2
    2a48:	10800b04 	addi	r2,r2,44
    2a4c:	10c00017 	ldw	r3,0(r2)
    2a50:	e0bffc17 	ldw	r2,-16(fp)
    2a54:	1085883a 	add	r2,r2,r2
    2a58:	1085883a 	add	r2,r2,r2
    2a5c:	1885883a 	add	r2,r3,r2
    2a60:	10800017 	ldw	r2,0(r2)
    2a64:	2089883a 	add	r4,r4,r2
    2a68:	e0bffe17 	ldw	r2,-8(fp)
    2a6c:	1085883a 	add	r2,r2,r2
    2a70:	1085883a 	add	r2,r2,r2
    2a74:	1007883a 	mov	r3,r2
    2a78:	d0a6d817 	ldw	r2,-25760(gp)
    2a7c:	1885883a 	add	r2,r3,r2
    2a80:	10800204 	addi	r2,r2,8
    2a84:	10800017 	ldw	r2,0(r2)
    2a88:	2087383a 	mul	r3,r4,r2
    2a8c:	e0bff917 	ldw	r2,-28(fp)
    2a90:	10c5883a 	add	r2,r2,r3
    2a94:	e0bff915 	stw	r2,-28(fp)

  if(sum >= t)
    2a98:	e0fff917 	ldw	r3,-28(fp)
    2a9c:	e0bffa17 	ldw	r2,-24(fp)
    2aa0:	18800916 	blt	r3,r2,2ac8 <_Z18evalWeakClassifieriiiii+0x3b0>
    return alpha2_array[tree_index];
    2aa4:	e0bffd17 	ldw	r2,-12(fp)
    2aa8:	1085883a 	add	r2,r2,r2
    2aac:	1085883a 	add	r2,r2,r2
    2ab0:	1007883a 	mov	r3,r2
    2ab4:	d0a6db17 	ldw	r2,-25748(gp)
    2ab8:	1885883a 	add	r2,r3,r2
    2abc:	10800017 	ldw	r2,0(r2)
    2ac0:	e0bfff15 	stw	r2,-4(fp)
    2ac4:	00000806 	br	2ae8 <_Z18evalWeakClassifieriiiii+0x3d0>
  else
    return alpha1_array[tree_index];
    2ac8:	e0bffd17 	ldw	r2,-12(fp)
    2acc:	1085883a 	add	r2,r2,r2
    2ad0:	1085883a 	add	r2,r2,r2
    2ad4:	1007883a 	mov	r3,r2
    2ad8:	d0a6da17 	ldw	r2,-25752(gp)
    2adc:	1885883a 	add	r2,r3,r2
    2ae0:	10800017 	ldw	r2,0(r2)
    2ae4:	e0bfff15 	stw	r2,-4(fp)
    2ae8:	e0bfff17 	ldw	r2,-4(fp)

}
    2aec:	e037883a 	mov	sp,fp
    2af0:	df000017 	ldw	fp,0(sp)
    2af4:	dec00104 	addi	sp,sp,4
    2af8:	f800283a 	ret

00002afc <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
    2afc:	defffe04 	addi	sp,sp,-8
    2b00:	df000115 	stw	fp,4(sp)
    2b04:	df000104 	addi	fp,sp,4
    2b08:	e13fff15 	stw	r4,-4(fp)
    2b0c:	e037883a 	mov	sp,fp
    2b10:	df000017 	ldw	fp,0(sp)
    2b14:	dec00104 	addi	sp,sp,4
    2b18:	f800283a 	ret

00002b1c <_ZNSaI6MyRectEC1Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }
    2b1c:	defffd04 	addi	sp,sp,-12
    2b20:	dfc00215 	stw	ra,8(sp)
    2b24:	df000115 	stw	fp,4(sp)
    2b28:	df000104 	addi	fp,sp,4
    2b2c:	e13fff15 	stw	r4,-4(fp)
    2b30:	e13fff17 	ldw	r4,-4(fp)
    2b34:	0002afc0 	call	2afc <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2Ev>
    2b38:	e037883a 	mov	sp,fp
    2b3c:	dfc00117 	ldw	ra,4(sp)
    2b40:	df000017 	ldw	fp,0(sp)
    2b44:	dec00204 	addi	sp,sp,8
    2b48:	f800283a 	ret

00002b4c <_ZN9__gnu_cxx13new_allocatorI6MyRectED2Ev>:
      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }
    2b4c:	defffe04 	addi	sp,sp,-8
    2b50:	df000115 	stw	fp,4(sp)
    2b54:	df000104 	addi	fp,sp,4
    2b58:	e13fff15 	stw	r4,-4(fp)
    2b5c:	e037883a 	mov	sp,fp
    2b60:	df000017 	ldw	fp,0(sp)
    2b64:	dec00104 	addi	sp,sp,4
    2b68:	f800283a 	ret

00002b6c <_ZNSaI6MyRectED1Ev>:
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
    2b6c:	defffd04 	addi	sp,sp,-12
    2b70:	dfc00215 	stw	ra,8(sp)
    2b74:	df000115 	stw	fp,4(sp)
    2b78:	df000104 	addi	fp,sp,4
    2b7c:	e13fff15 	stw	r4,-4(fp)
    2b80:	e13fff17 	ldw	r4,-4(fp)
    2b84:	0002b4c0 	call	2b4c <_ZN9__gnu_cxx13new_allocatorI6MyRectED2Ev>
    2b88:	e037883a 	mov	sp,fp
    2b8c:	dfc00117 	ldw	ra,4(sp)
    2b90:	df000017 	ldw	fp,0(sp)
    2b94:	dec00204 	addi	sp,sp,8
    2b98:	f800283a 	ret

00002b9c <_ZNSaI6MyRectED2Ev>:
    2b9c:	defffd04 	addi	sp,sp,-12
    2ba0:	dfc00215 	stw	ra,8(sp)
    2ba4:	df000115 	stw	fp,4(sp)
    2ba8:	df000104 	addi	fp,sp,4
    2bac:	e13fff15 	stw	r4,-4(fp)
    2bb0:	e13fff17 	ldw	r4,-4(fp)
    2bb4:	0002b4c0 	call	2b4c <_ZN9__gnu_cxx13new_allocatorI6MyRectED2Ev>
    2bb8:	e037883a 	mov	sp,fp
    2bbc:	dfc00117 	ldw	ra,4(sp)
    2bc0:	df000017 	ldw	fp,0(sp)
    2bc4:	dec00204 	addi	sp,sp,8
    2bc8:	f800283a 	ret

00002bcc <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2ERKS2_>:
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }
    2bcc:	defffd04 	addi	sp,sp,-12
    2bd0:	df000215 	stw	fp,8(sp)
    2bd4:	df000204 	addi	fp,sp,8
    2bd8:	e13ffe15 	stw	r4,-8(fp)
    2bdc:	e17fff15 	stw	r5,-4(fp)
    2be0:	e037883a 	mov	sp,fp
    2be4:	df000017 	ldw	fp,0(sp)
    2be8:	dec00104 	addi	sp,sp,4
    2bec:	f800283a 	ret

00002bf0 <_ZNSaI6MyRectEC1ERKS0_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    2bf0:	defffc04 	addi	sp,sp,-16
    2bf4:	dfc00315 	stw	ra,12(sp)
    2bf8:	df000215 	stw	fp,8(sp)
    2bfc:	df000204 	addi	fp,sp,8
    2c00:	e13ffe15 	stw	r4,-8(fp)
    2c04:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
    2c08:	e13ffe17 	ldw	r4,-8(fp)
    2c0c:	e17fff17 	ldw	r5,-4(fp)
    2c10:	0002bcc0 	call	2bcc <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2ERKS2_>
    2c14:	e037883a 	mov	sp,fp
    2c18:	dfc00117 	ldw	ra,4(sp)
    2c1c:	df000017 	ldw	fp,0(sp)
    2c20:	dec00204 	addi	sp,sp,8
    2c24:	f800283a 	ret

00002c28 <_ZNSaI6MyRectEC2ERKS0_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    2c28:	defffc04 	addi	sp,sp,-16
    2c2c:	dfc00315 	stw	ra,12(sp)
    2c30:	df000215 	stw	fp,8(sp)
    2c34:	df000204 	addi	fp,sp,8
    2c38:	e13ffe15 	stw	r4,-8(fp)
    2c3c:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
    2c40:	e13ffe17 	ldw	r4,-8(fp)
    2c44:	e17fff17 	ldw	r5,-4(fp)
    2c48:	0002bcc0 	call	2bcc <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2ERKS2_>
    2c4c:	e037883a 	mov	sp,fp
    2c50:	dfc00117 	ldw	ra,4(sp)
    2c54:	df000017 	ldw	fp,0(sp)
    2c58:	dec00204 	addi	sp,sp,8
    2c5c:	f800283a 	ret

00002c60 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implD1Ev>:
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl 
      : public _Tp_alloc_type
      {
    2c60:	defffd04 	addi	sp,sp,-12
    2c64:	dfc00215 	stw	ra,8(sp)
    2c68:	df000115 	stw	fp,4(sp)
    2c6c:	df000104 	addi	fp,sp,4
    2c70:	e13fff15 	stw	r4,-4(fp)
    2c74:	e13fff17 	ldw	r4,-4(fp)
    2c78:	0002b9c0 	call	2b9c <_ZNSaI6MyRectED2Ev>
    2c7c:	e037883a 	mov	sp,fp
    2c80:	dfc00117 	ldw	ra,4(sp)
    2c84:	df000017 	ldw	fp,0(sp)
    2c88:	dec00204 	addi	sp,sp,8
    2c8c:	f800283a 	ret

00002c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
    2c90:	defffe04 	addi	sp,sp,-8
    2c94:	df000115 	stw	fp,4(sp)
    2c98:	df000104 	addi	fp,sp,4
    2c9c:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    2ca0:	e0bfff17 	ldw	r2,-4(fp)
    2ca4:	e037883a 	mov	sp,fp
    2ca8:	df000017 	ldw	fp,0(sp)
    2cac:	dec00104 	addi	sp,sp,4
    2cb0:	f800283a 	ret

00002cb4 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_>:
      { return size_t(-1) / sizeof(_Tp); }

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
    2cb4:	defffa04 	addi	sp,sp,-24
    2cb8:	dfc00515 	stw	ra,20(sp)
    2cbc:	df000415 	stw	fp,16(sp)
    2cc0:	df000404 	addi	fp,sp,16
    2cc4:	e13ffc15 	stw	r4,-16(fp)
    2cc8:	e17ffd15 	stw	r5,-12(fp)
    2ccc:	e1bffe15 	stw	r6,-8(fp)
      { ::new(__p) _Tp(__val); }
    2cd0:	01000404 	movi	r4,16
    2cd4:	e17ffd17 	ldw	r5,-12(fp)
    2cd8:	000264c0 	call	264c <_ZnwmPv>
    2cdc:	e0bfff15 	stw	r2,-4(fp)
    2ce0:	e0ffff17 	ldw	r3,-4(fp)
    2ce4:	1805003a 	cmpeq	r2,r3,zero
    2ce8:	10000d1e 	bne	r2,zero,2d20 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_+0x6c>
    2cec:	e0fffe17 	ldw	r3,-8(fp)
    2cf0:	18800017 	ldw	r2,0(r3)
    2cf4:	e13fff17 	ldw	r4,-4(fp)
    2cf8:	20800015 	stw	r2,0(r4)
    2cfc:	18800117 	ldw	r2,4(r3)
    2d00:	e13fff17 	ldw	r4,-4(fp)
    2d04:	20800115 	stw	r2,4(r4)
    2d08:	18800217 	ldw	r2,8(r3)
    2d0c:	e13fff17 	ldw	r4,-4(fp)
    2d10:	20800215 	stw	r2,8(r4)
    2d14:	18800317 	ldw	r2,12(r3)
    2d18:	e0ffff17 	ldw	r3,-4(fp)
    2d1c:	18800315 	stw	r2,12(r3)
    2d20:	e037883a 	mov	sp,fp
    2d24:	dfc00117 	ldw	ra,4(sp)
    2d28:	df000017 	ldw	fp,0(sp)
    2d2c:	dec00204 	addi	sp,sp,8
    2d30:	f800283a 	ret

00002d34 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implC1ERKS1_>:
      : public _Tp_alloc_type
      {
	_Tp*           _M_start;
	_Tp*           _M_finish;
	_Tp*           _M_end_of_storage;
	_Vector_impl(_Tp_alloc_type const& __a)
    2d34:	defffc04 	addi	sp,sp,-16
    2d38:	dfc00315 	stw	ra,12(sp)
    2d3c:	df000215 	stw	fp,8(sp)
    2d40:	df000204 	addi	fp,sp,8
    2d44:	e13ffe15 	stw	r4,-8(fp)
    2d48:	e17fff15 	stw	r5,-4(fp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    2d4c:	e13ffe17 	ldw	r4,-8(fp)
    2d50:	e17fff17 	ldw	r5,-4(fp)
    2d54:	0002c280 	call	2c28 <_ZNSaI6MyRectEC2ERKS0_>
    2d58:	e0bffe17 	ldw	r2,-8(fp)
    2d5c:	10000015 	stw	zero,0(r2)
    2d60:	e0bffe17 	ldw	r2,-8(fp)
    2d64:	10000115 	stw	zero,4(r2)
    2d68:	e0bffe17 	ldw	r2,-8(fp)
    2d6c:	10000215 	stw	zero,8(r2)
	{ }
    2d70:	e037883a 	mov	sp,fp
    2d74:	dfc00117 	ldw	ra,4(sp)
    2d78:	df000017 	ldw	fp,0(sp)
    2d7c:	dec00204 	addi	sp,sp,8
    2d80:	f800283a 	ret

00002d84 <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2ERKS1_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _Vector_base(const allocator_type& __a)
    2d84:	defffc04 	addi	sp,sp,-16
    2d88:	dfc00315 	stw	ra,12(sp)
    2d8c:	df000215 	stw	fp,8(sp)
    2d90:	df000204 	addi	fp,sp,8
    2d94:	e13ffe15 	stw	r4,-8(fp)
    2d98:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
    2d9c:	e13ffe17 	ldw	r4,-8(fp)
    2da0:	e17fff17 	ldw	r5,-4(fp)
    2da4:	0002d340 	call	2d34 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implC1ERKS1_>
      { }
    2da8:	e037883a 	mov	sp,fp
    2dac:	dfc00117 	ldw	ra,4(sp)
    2db0:	df000017 	ldw	fp,0(sp)
    2db4:	dec00204 	addi	sp,sp,8
    2db8:	f800283a 	ret

00002dbc <_ZNSt6vectorI6MyRectSaIS0_EEC1ERKS1_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      vector(const allocator_type& __a = allocator_type())
    2dbc:	defffc04 	addi	sp,sp,-16
    2dc0:	dfc00315 	stw	ra,12(sp)
    2dc4:	df000215 	stw	fp,8(sp)
    2dc8:	df000204 	addi	fp,sp,8
    2dcc:	e13ffe15 	stw	r4,-8(fp)
    2dd0:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a)
    2dd4:	e13ffe17 	ldw	r4,-8(fp)
    2dd8:	e17fff17 	ldw	r5,-4(fp)
    2ddc:	0002d840 	call	2d84 <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2ERKS1_>
      { }
    2de0:	e037883a 	mov	sp,fp
    2de4:	dfc00117 	ldw	ra,4(sp)
    2de8:	df000017 	ldw	fp,0(sp)
    2dec:	dec00204 	addi	sp,sp,8
    2df0:	f800283a 	ret

00002df4 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    2df4:	defffd04 	addi	sp,sp,-12
    2df8:	df000215 	stw	fp,8(sp)
    2dfc:	df000204 	addi	fp,sp,8
    2e00:	e13ffe15 	stw	r4,-8(fp)
    2e04:	e17fff15 	stw	r5,-4(fp)
    2e08:	e0bfff17 	ldw	r2,-4(fp)
    2e0c:	10c00017 	ldw	r3,0(r2)
    2e10:	e0bffe17 	ldw	r2,-8(fp)
    2e14:	10c00015 	stw	r3,0(r2)
    2e18:	e037883a 	mov	sp,fp
    2e1c:	df000017 	ldw	fp,0(sp)
    2e20:	dec00104 	addi	sp,sp,4
    2e24:	f800283a 	ret

00002e28 <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const
    2e28:	defffb04 	addi	sp,sp,-20
    2e2c:	dfc00415 	stw	ra,16(sp)
    2e30:	df000315 	stw	fp,12(sp)
    2e34:	df000304 	addi	fp,sp,12
    2e38:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_finish); }
    2e3c:	e0bfff17 	ldw	r2,-4(fp)
    2e40:	10800117 	ldw	r2,4(r2)
    2e44:	e0bffd15 	stw	r2,-12(fp)
    2e48:	e13ffe04 	addi	r4,fp,-8
    2e4c:	e17ffd04 	addi	r5,fp,-12
    2e50:	0002df40 	call	2df4 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    2e54:	e0bffe17 	ldw	r2,-8(fp)
    2e58:	e037883a 	mov	sp,fp
    2e5c:	dfc00117 	ldw	ra,4(sp)
    2e60:	df000017 	ldw	fp,0(sp)
    2e64:	dec00204 	addi	sp,sp,8
    2e68:	f800283a 	ret

00002e6c <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const
    2e6c:	defffb04 	addi	sp,sp,-20
    2e70:	dfc00415 	stw	ra,16(sp)
    2e74:	df000315 	stw	fp,12(sp)
    2e78:	df000304 	addi	fp,sp,12
    2e7c:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_start); }
    2e80:	e0bfff17 	ldw	r2,-4(fp)
    2e84:	10800017 	ldw	r2,0(r2)
    2e88:	e0bffd15 	stw	r2,-12(fp)
    2e8c:	e13ffe04 	addi	r4,fp,-8
    2e90:	e17ffd04 	addi	r5,fp,-12
    2e94:	0002df40 	call	2df4 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    2e98:	e0bffe17 	ldw	r2,-8(fp)
    2e9c:	e037883a 	mov	sp,fp
    2ea0:	dfc00117 	ldw	ra,4(sp)
    2ea4:	df000017 	ldw	fp,0(sp)
    2ea8:	dec00204 	addi	sp,sp,8
    2eac:	f800283a 	ret

00002eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
    2eb0:	defffd04 	addi	sp,sp,-12
    2eb4:	df000215 	stw	fp,8(sp)
    2eb8:	df000204 	addi	fp,sp,8
    2ebc:	e13ffe15 	stw	r4,-8(fp)
    2ec0:	e17fff15 	stw	r5,-4(fp)
    2ec4:	e0bfff17 	ldw	r2,-4(fp)
    2ec8:	10c00017 	ldw	r3,0(r2)
    2ecc:	e0bffe17 	ldw	r2,-8(fp)
    2ed0:	10c00015 	stw	r3,0(r2)
    2ed4:	e037883a 	mov	sp,fp
    2ed8:	df000017 	ldw	fp,0(sp)
    2edc:	dec00104 	addi	sp,sp,4
    2ee0:	f800283a 	ret

00002ee4 <_ZNSt6vectorI6MyRectSaIS0_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end()
    2ee4:	defffc04 	addi	sp,sp,-16
    2ee8:	dfc00315 	stw	ra,12(sp)
    2eec:	df000215 	stw	fp,8(sp)
    2ef0:	df000204 	addi	fp,sp,8
    2ef4:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_finish); }
    2ef8:	e0bfff17 	ldw	r2,-4(fp)
    2efc:	11400104 	addi	r5,r2,4
    2f00:	e13ffe04 	addi	r4,fp,-8
    2f04:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    2f08:	e0bffe17 	ldw	r2,-8(fp)
    2f0c:	e037883a 	mov	sp,fp
    2f10:	dfc00117 	ldw	ra,4(sp)
    2f14:	df000017 	ldw	fp,0(sp)
    2f18:	dec00204 	addi	sp,sp,8
    2f1c:	f800283a 	ret

00002f20 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
    2f20:	defffe04 	addi	sp,sp,-8
    2f24:	df000115 	stw	fp,4(sp)
    2f28:	df000104 	addi	fp,sp,4
    2f2c:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
    2f30:	e0bfff17 	ldw	r2,-4(fp)
    2f34:	10800017 	ldw	r2,0(r2)
    2f38:	e037883a 	mov	sp,fp
    2f3c:	df000017 	ldw	fp,0(sp)
    2f40:	dec00104 	addi	sp,sp,4
    2f44:	f800283a 	ret

00002f48 <_ZNKSt6vectorI6MyRectSaIS0_EE8max_sizeEv>:
      size() const
      { return size_type(end() - begin()); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const
    2f48:	defffe04 	addi	sp,sp,-8
    2f4c:	df000115 	stw	fp,4(sp)
    2f50:	df000104 	addi	fp,sp,4
    2f54:	e13fff15 	stw	r4,-4(fp)
      { return size_type(-1) / sizeof(value_type); }
    2f58:	00840034 	movhi	r2,4096
    2f5c:	10bfffc4 	addi	r2,r2,-1
    2f60:	e037883a 	mov	sp,fp
    2f64:	df000017 	ldw	fp,0(sp)
    2f68:	dec00104 	addi	sp,sp,4
    2f6c:	f800283a 	ret

00002f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
    2f70:	defffe04 	addi	sp,sp,-8
    2f74:	df000115 	stw	fp,4(sp)
    2f78:	df000104 	addi	fp,sp,4
    2f7c:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
    2f80:	e0bfff17 	ldw	r2,-4(fp)
    2f84:	e037883a 	mov	sp,fp
    2f88:	df000017 	ldw	fp,0(sp)
    2f8c:	dec00104 	addi	sp,sp,4
    2f90:	f800283a 	ret

00002f94 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
    2f94:	defffe04 	addi	sp,sp,-8
    2f98:	df000115 	stw	fp,4(sp)
    2f9c:	df000104 	addi	fp,sp,4
    2fa0:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
    2fa4:	e0bfff17 	ldw	r2,-4(fp)
    2fa8:	10800017 	ldw	r2,0(r2)
    2fac:	10c00404 	addi	r3,r2,16
    2fb0:	e0bfff17 	ldw	r2,-4(fp)
    2fb4:	10c00015 	stw	r3,0(r2)
	return *this;
    2fb8:	e0bfff17 	ldw	r2,-4(fp)
    2fbc:	e037883a 	mov	sp,fp
    2fc0:	df000017 	ldw	fp,0(sp)
    2fc4:	dec00104 	addi	sp,sp,4
    2fc8:	f800283a 	ret

00002fcc <_ZNSt6vectorI6MyRectSaIS0_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin()
    2fcc:	defffc04 	addi	sp,sp,-16
    2fd0:	dfc00315 	stw	ra,12(sp)
    2fd4:	df000215 	stw	fp,8(sp)
    2fd8:	df000204 	addi	fp,sp,8
    2fdc:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_start); }
    2fe0:	e17fff17 	ldw	r5,-4(fp)
    2fe4:	e13ffe04 	addi	r4,fp,-8
    2fe8:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    2fec:	e0bffe17 	ldw	r2,-8(fp)
    2ff0:	e037883a 	mov	sp,fp
    2ff4:	dfc00117 	ldw	ra,4(sp)
    2ff8:	df000017 	ldw	fp,0(sp)
    2ffc:	dec00204 	addi	sp,sp,8
    3000:	f800283a 	ret

00003004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
    3004:	defffe04 	addi	sp,sp,-8
    3008:	df000115 	stw	fp,4(sp)
    300c:	df000104 	addi	fp,sp,4
    3010:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
    3014:	e0bfff17 	ldw	r2,-4(fp)
    3018:	e037883a 	mov	sp,fp
    301c:	df000017 	ldw	fp,0(sp)
    3020:	dec00104 	addi	sp,sp,4
    3024:	f800283a 	ret

00003028 <_ZN9__gnu_cxxmiIPK6MyRectS3_St6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
    3028:	defffb04 	addi	sp,sp,-20
    302c:	dfc00415 	stw	ra,16(sp)
    3030:	df000315 	stw	fp,12(sp)
    3034:	dc000215 	stw	r16,8(sp)
    3038:	df000204 	addi	fp,sp,8
    303c:	e13ffe15 	stw	r4,-8(fp)
    3040:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
    3044:	e13ffe17 	ldw	r4,-8(fp)
    3048:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    304c:	10800017 	ldw	r2,0(r2)
    3050:	1021883a 	mov	r16,r2
    3054:	e13fff17 	ldw	r4,-4(fp)
    3058:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    305c:	10800017 	ldw	r2,0(r2)
    3060:	8085c83a 	sub	r2,r16,r2
    3064:	1005d13a 	srai	r2,r2,4
    3068:	e037883a 	mov	sp,fp
    306c:	dfc00217 	ldw	ra,8(sp)
    3070:	df000117 	ldw	fp,4(sp)
    3074:	dc000017 	ldw	r16,0(sp)
    3078:	dec00304 	addi	sp,sp,12
    307c:	f800283a 	ret

00003080 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const
    3080:	defffb04 	addi	sp,sp,-20
    3084:	dfc00415 	stw	ra,16(sp)
    3088:	df000315 	stw	fp,12(sp)
    308c:	df000304 	addi	fp,sp,12
    3090:	e13fff15 	stw	r4,-4(fp)
      { return size_type(end() - begin()); }
    3094:	e13fff17 	ldw	r4,-4(fp)
    3098:	0002e280 	call	2e28 <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    309c:	e0bffe15 	stw	r2,-8(fp)
    30a0:	e13fff17 	ldw	r4,-4(fp)
    30a4:	0002e6c0 	call	2e6c <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    30a8:	e0bffd15 	stw	r2,-12(fp)
    30ac:	e13ffe04 	addi	r4,fp,-8
    30b0:	e17ffd04 	addi	r5,fp,-12
    30b4:	00030280 	call	3028 <_ZN9__gnu_cxxmiIPK6MyRectS3_St6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE>
    30b8:	e037883a 	mov	sp,fp
    30bc:	dfc00117 	ldw	ra,4(sp)
    30c0:	df000017 	ldw	fp,0(sp)
    30c4:	dec00204 	addi	sp,sp,8
    30c8:	f800283a 	ret

000030cc <_ZN6MyRectD1Ev>:
    int x;
    int y;
    int width;
    int height;
}
MyRect;
    30cc:	defffe04 	addi	sp,sp,-8
    30d0:	df000115 	stw	fp,4(sp)
    30d4:	df000104 	addi	fp,sp,4
    30d8:	e13fff15 	stw	r4,-4(fp)
    30dc:	e037883a 	mov	sp,fp
    30e0:	df000017 	ldw	fp,0(sp)
    30e4:	dec00104 	addi	sp,sp,4
    30e8:	f800283a 	ret

000030ec <_ZSt8_DestroyI6MyRectEvPT_>:
   * Destroy the object pointed to by a pointer type.
   * @endif
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    30ec:	defffd04 	addi	sp,sp,-12
    30f0:	dfc00215 	stw	ra,8(sp)
    30f4:	df000115 	stw	fp,4(sp)
    30f8:	df000104 	addi	fp,sp,4
    30fc:	e13fff15 	stw	r4,-4(fp)
    { __pointer->~_Tp(); }
    3100:	e13fff17 	ldw	r4,-4(fp)
    3104:	00030cc0 	call	30cc <_ZN6MyRectD1Ev>
    3108:	e037883a 	mov	sp,fp
    310c:	dfc00117 	ldw	ra,4(sp)
    3110:	df000017 	ldw	fp,0(sp)
    3114:	dec00204 	addi	sp,sp,8
    3118:	f800283a 	ret

0000311c <_ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type>:
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
		  __false_type)
    311c:	defffb04 	addi	sp,sp,-20
    3120:	dfc00415 	stw	ra,16(sp)
    3124:	df000315 	stw	fp,12(sp)
    3128:	df000304 	addi	fp,sp,12
    312c:	e13ffd15 	stw	r4,-12(fp)
    3130:	e17ffe15 	stw	r5,-8(fp)
    3134:	e1bfff05 	stb	r6,-4(fp)
    {
      for (; __first != __last; ++__first)
    3138:	00000506 	br	3150 <_ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type+0x34>
	std::_Destroy(&*__first);
    313c:	e13ffd17 	ldw	r4,-12(fp)
    3140:	00030ec0 	call	30ec <_ZSt8_DestroyI6MyRectEvPT_>
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
		  __false_type)
    {
      for (; __first != __last; ++__first)
    3144:	e0bffd17 	ldw	r2,-12(fp)
    3148:	10800404 	addi	r2,r2,16
    314c:	e0bffd15 	stw	r2,-12(fp)
    3150:	e0fffd17 	ldw	r3,-12(fp)
    3154:	e0bffe17 	ldw	r2,-8(fp)
    3158:	18bff81e 	bne	r3,r2,313c <_ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type+0x20>
	std::_Destroy(&*__first);
    315c:	e037883a 	mov	sp,fp
    3160:	dfc00117 	ldw	ra,4(sp)
    3164:	df000017 	ldw	fp,0(sp)
    3168:	dec00204 	addi	sp,sp,8
    316c:	f800283a 	ret

00003170 <_ZSt8_DestroyIP6MyRectEvT_S2_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    3170:	defffb04 	addi	sp,sp,-20
    3174:	dfc00415 	stw	ra,16(sp)
    3178:	df000315 	stw	fp,12(sp)
    317c:	df000304 	addi	fp,sp,12
    3180:	e13ffd15 	stw	r4,-12(fp)
    3184:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
    3188:	e13ffd17 	ldw	r4,-12(fp)
    318c:	e17ffe17 	ldw	r5,-8(fp)
    3190:	e1bfff03 	ldbu	r6,-4(fp)
    3194:	000311c0 	call	311c <_ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type>
    3198:	e037883a 	mov	sp,fp
    319c:	dfc00117 	ldw	ra,4(sp)
    31a0:	df000017 	ldw	fp,0(sp)
    31a4:	dec00204 	addi	sp,sp,8
    31a8:	f800283a 	ret

000031ac <_ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
    31ac:	defffb04 	addi	sp,sp,-20
    31b0:	dfc00415 	stw	ra,16(sp)
    31b4:	df000315 	stw	fp,12(sp)
    31b8:	df000304 	addi	fp,sp,12
    31bc:	e13ffd15 	stw	r4,-12(fp)
    31c0:	e17ffe15 	stw	r5,-8(fp)
    31c4:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
    31c8:	e13ffd17 	ldw	r4,-12(fp)
    31cc:	e17ffe17 	ldw	r5,-8(fp)
    31d0:	00031700 	call	3170 <_ZSt8_DestroyIP6MyRectEvT_S2_>
    31d4:	e037883a 	mov	sp,fp
    31d8:	dfc00117 	ldw	ra,4(sp)
    31dc:	df000017 	ldw	fp,0(sp)
    31e0:	dec00204 	addi	sp,sp,8
    31e4:	f800283a 	ret

000031e8 <_ZNK9__gnu_cxx13new_allocatorI6MyRectE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
    31e8:	defffe04 	addi	sp,sp,-8
    31ec:	df000115 	stw	fp,4(sp)
    31f0:	df000104 	addi	fp,sp,4
    31f4:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
    31f8:	00840034 	movhi	r2,4096
    31fc:	10bfffc4 	addi	r2,r2,-1
    3200:	e037883a 	mov	sp,fp
    3204:	df000017 	ldw	fp,0(sp)
    3208:	dec00104 	addi	sp,sp,4
    320c:	f800283a 	ret

00003210 <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_>:
   * object's constructor with an initializer.
   * @endif
   */
  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    3210:	defffb04 	addi	sp,sp,-20
    3214:	dfc00415 	stw	ra,16(sp)
    3218:	df000315 	stw	fp,12(sp)
    321c:	df000304 	addi	fp,sp,12
    3220:	e13ffd15 	stw	r4,-12(fp)
    3224:	e17ffe15 	stw	r5,-8(fp)
    {
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_]allocator::construct
      ::new(static_cast<void*>(__p)) _T1(__value);
    3228:	01000404 	movi	r4,16
    322c:	e17ffd17 	ldw	r5,-12(fp)
    3230:	000264c0 	call	264c <_ZnwmPv>
    3234:	e0bfff15 	stw	r2,-4(fp)
    3238:	e0ffff17 	ldw	r3,-4(fp)
    323c:	1805003a 	cmpeq	r2,r3,zero
    3240:	10000d1e 	bne	r2,zero,3278 <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_+0x68>
    3244:	e0fffe17 	ldw	r3,-8(fp)
    3248:	18800017 	ldw	r2,0(r3)
    324c:	e13fff17 	ldw	r4,-4(fp)
    3250:	20800015 	stw	r2,0(r4)
    3254:	18800117 	ldw	r2,4(r3)
    3258:	e13fff17 	ldw	r4,-4(fp)
    325c:	20800115 	stw	r2,4(r4)
    3260:	18800217 	ldw	r2,8(r3)
    3264:	e13fff17 	ldw	r4,-4(fp)
    3268:	20800215 	stw	r2,8(r4)
    326c:	18800317 	ldw	r2,12(r3)
    3270:	e0ffff17 	ldw	r3,-4(fp)
    3274:	18800315 	stw	r2,12(r3)
    3278:	e037883a 	mov	sp,fp
    327c:	dfc00117 	ldw	ra,4(sp)
    3280:	df000017 	ldw	fp,0(sp)
    3284:	dec00204 	addi	sp,sp,8
    3288:	f800283a 	ret

0000328c <_ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_>:
  template<bool _BoolType>
    struct __copy_backward<_BoolType, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b(_BI1 __first, _BI1 __last, _BI2 __result)
    328c:	defffb04 	addi	sp,sp,-20
    3290:	df000415 	stw	fp,16(sp)
    3294:	df000404 	addi	fp,sp,16
    3298:	e13ffd15 	stw	r4,-12(fp)
    329c:	e17ffe15 	stw	r5,-8(fp)
    32a0:	e1bfff15 	stw	r6,-4(fp)
        { 
	  typename iterator_traits<_BI1>::difference_type __n;
	  for (__n = __last - __first; __n > 0; --__n)
    32a4:	e0fffe17 	ldw	r3,-8(fp)
    32a8:	e0bffd17 	ldw	r2,-12(fp)
    32ac:	1885c83a 	sub	r2,r3,r2
    32b0:	1005d13a 	srai	r2,r2,4
    32b4:	e0bffc15 	stw	r2,-16(fp)
    32b8:	00001306 	br	3308 <_ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_+0x7c>
	    *--__result = *--__last;
    32bc:	e0bfff17 	ldw	r2,-4(fp)
    32c0:	10bffc04 	addi	r2,r2,-16
    32c4:	e0bfff15 	stw	r2,-4(fp)
    32c8:	e13fff17 	ldw	r4,-4(fp)
    32cc:	e0bffe17 	ldw	r2,-8(fp)
    32d0:	10bffc04 	addi	r2,r2,-16
    32d4:	e0bffe15 	stw	r2,-8(fp)
    32d8:	e0fffe17 	ldw	r3,-8(fp)
    32dc:	18800017 	ldw	r2,0(r3)
    32e0:	20800015 	stw	r2,0(r4)
    32e4:	18800117 	ldw	r2,4(r3)
    32e8:	20800115 	stw	r2,4(r4)
    32ec:	18800217 	ldw	r2,8(r3)
    32f0:	20800215 	stw	r2,8(r4)
    32f4:	18800317 	ldw	r2,12(r3)
    32f8:	20800315 	stw	r2,12(r4)
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b(_BI1 __first, _BI1 __last, _BI2 __result)
        { 
	  typename iterator_traits<_BI1>::difference_type __n;
	  for (__n = __last - __first; __n > 0; --__n)
    32fc:	e0bffc17 	ldw	r2,-16(fp)
    3300:	10bfffc4 	addi	r2,r2,-1
    3304:	e0bffc15 	stw	r2,-16(fp)
    3308:	e0bffc17 	ldw	r2,-16(fp)
    330c:	10800048 	cmpgei	r2,r2,1
    3310:	103fea1e 	bne	r2,zero,32bc <_ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_+0x30>
	    *--__result = *--__last;
	  return __result;
    3314:	e0bfff17 	ldw	r2,-4(fp)
    3318:	e037883a 	mov	sp,fp
    331c:	df000017 	ldw	fp,0(sp)
    3320:	dec00104 	addi	sp,sp,4
    3324:	f800283a 	ret

00003328 <_ZSt19__copy_backward_auxIP6MyRectS1_ET0_T_S3_S2_>:
	}
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
    3328:	defffa04 	addi	sp,sp,-24
    332c:	dfc00515 	stw	ra,20(sp)
    3330:	df000415 	stw	fp,16(sp)
    3334:	df000404 	addi	fp,sp,16
    3338:	e13ffd15 	stw	r4,-12(fp)
    333c:	e17ffe15 	stw	r5,-8(fp)
    3340:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueType1>::__value
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
    3344:	e03ffc05 	stb	zero,-16(fp)

      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,
							       __result);
    3348:	e13ffd17 	ldw	r4,-12(fp)
    334c:	e17ffe17 	ldw	r5,-8(fp)
    3350:	e1bfff17 	ldw	r6,-4(fp)
    3354:	000328c0 	call	328c <_ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_>
    3358:	e037883a 	mov	sp,fp
    335c:	dfc00117 	ldw	ra,4(sp)
    3360:	df000017 	ldw	fp,0(sp)
    3364:	dec00204 	addi	sp,sp,8
    3368:	f800283a 	ret

0000336c <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS4_SaIS4_EEEES9_EET0_T_SB_SA_>:
  template<>
    struct __copy_backward_normal<true, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
    336c:	defff704 	addi	sp,sp,-36
    3370:	dfc00815 	stw	ra,32(sp)
    3374:	df000715 	stw	fp,28(sp)
    3378:	dc400615 	stw	r17,24(sp)
    337c:	dc000515 	stw	r16,20(sp)
    3380:	df000504 	addi	fp,sp,20
    3384:	e13ffd15 	stw	r4,-12(fp)
    3388:	e17ffe15 	stw	r5,-8(fp)
    338c:	e1bfff15 	stw	r6,-4(fp)
        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),
					       __result.base())); }
    3390:	e13ffd04 	addi	r4,fp,-12
    3394:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    3398:	14400017 	ldw	r17,0(r2)
    339c:	e13ffe04 	addi	r4,fp,-8
    33a0:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    33a4:	14000017 	ldw	r16,0(r2)
    33a8:	e13fff04 	addi	r4,fp,-4
    33ac:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    33b0:	11800017 	ldw	r6,0(r2)
    33b4:	8809883a 	mov	r4,r17
    33b8:	800b883a 	mov	r5,r16
    33bc:	00033280 	call	3328 <_ZSt19__copy_backward_auxIP6MyRectS1_ET0_T_S3_S2_>
    33c0:	e0bffb15 	stw	r2,-20(fp)
    33c4:	e13ffc04 	addi	r4,fp,-16
    33c8:	e17ffb04 	addi	r5,fp,-20
    33cc:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    33d0:	e0bffc17 	ldw	r2,-16(fp)
    33d4:	e037883a 	mov	sp,fp
    33d8:	dfc00317 	ldw	ra,12(sp)
    33dc:	df000217 	ldw	fp,8(sp)
    33e0:	dc400117 	ldw	r17,4(sp)
    33e4:	dc000017 	ldw	r16,0(sp)
    33e8:	dec00404 	addi	sp,sp,16
    33ec:	f800283a 	ret

000033f0 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  Result may not be in the range [first,last).  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    33f0:	defffa04 	addi	sp,sp,-24
    33f4:	dfc00515 	stw	ra,20(sp)
    33f8:	df000415 	stw	fp,16(sp)
    33fc:	df000404 	addi	fp,sp,16
    3400:	e13ffd15 	stw	r4,-12(fp)
    3404:	e17ffe15 	stw	r5,-8(fp)
    3408:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __bi1 = __is_normal_iterator<_BI1>::__value;
    340c:	00800044 	movi	r2,1
    3410:	e0bffc45 	stb	r2,-15(fp)
      const bool __bi2 = __is_normal_iterator<_BI2>::__value;
    3414:	00800044 	movi	r2,1
    3418:	e0bffc05 	stb	r2,-16(fp)
      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,
								 __result);
    341c:	e13ffd17 	ldw	r4,-12(fp)
    3420:	e17ffe17 	ldw	r5,-8(fp)
    3424:	e1bfff17 	ldw	r6,-4(fp)
    3428:	000336c0 	call	336c <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS4_SaIS4_EEEES9_EET0_T_SB_SA_>
    342c:	e037883a 	mov	sp,fp
    3430:	dfc00117 	ldw	ra,4(sp)
    3434:	df000017 	ldw	fp,0(sp)
    3438:	dec00204 	addi	sp,sp,8
    343c:	f800283a 	ret

00003440 <_ZN9__gnu_cxxneIP6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    3440:	defffb04 	addi	sp,sp,-20
    3444:	dfc00415 	stw	ra,16(sp)
    3448:	df000315 	stw	fp,12(sp)
    344c:	dc000215 	stw	r16,8(sp)
    3450:	df000204 	addi	fp,sp,8
    3454:	e13ffe15 	stw	r4,-8(fp)
    3458:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() != __rhs.base(); }
    345c:	e13ffe17 	ldw	r4,-8(fp)
    3460:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    3464:	14000017 	ldw	r16,0(r2)
    3468:	e13fff17 	ldw	r4,-4(fp)
    346c:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    3470:	10800017 	ldw	r2,0(r2)
    3474:	8084c03a 	cmpne	r2,r16,r2
    3478:	e037883a 	mov	sp,fp
    347c:	dfc00217 	ldw	ra,8(sp)
    3480:	df000117 	ldw	fp,4(sp)
    3484:	dc000017 	ldw	r16,0(sp)
    3488:	dec00304 	addi	sp,sp,12
    348c:	f800283a 	ret

00003490 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type>:

  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __false_type)
    3490:	defff804 	addi	sp,sp,-32
    3494:	dfc00715 	stw	ra,28(sp)
    3498:	df000615 	stw	fp,24(sp)
    349c:	dc000515 	stw	r16,20(sp)
    34a0:	df000504 	addi	fp,sp,20
    34a4:	e13ffc15 	stw	r4,-16(fp)
    34a8:	e17ffd15 	stw	r5,-12(fp)
    34ac:	e1bffe15 	stw	r6,-8(fp)
    34b0:	e1ffff05 	stb	r7,-4(fp)
    {
      _ForwardIterator __cur = __result;
    34b4:	e0bffe17 	ldw	r2,-8(fp)
    34b8:	e0bffb15 	stw	r2,-20(fp)
      try
	{
	  for (; __first != __last; ++__first, ++__cur)
    34bc:	00000c06 	br	34f0 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type+0x60>
	    std::_Construct(&*__cur, *__first);
    34c0:	e13ffb04 	addi	r4,fp,-20
    34c4:	0002f200 	call	2f20 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    34c8:	1021883a 	mov	r16,r2
    34cc:	e13ffc04 	addi	r4,fp,-16
    34d0:	0002f200 	call	2f20 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    34d4:	100b883a 	mov	r5,r2
    34d8:	8009883a 	mov	r4,r16
    34dc:	00032100 	call	3210 <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_>
			     __false_type)
    {
      _ForwardIterator __cur = __result;
      try
	{
	  for (; __first != __last; ++__first, ++__cur)
    34e0:	e13ffc04 	addi	r4,fp,-16
    34e4:	0002f940 	call	2f94 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>
    34e8:	e13ffb04 	addi	r4,fp,-20
    34ec:	0002f940 	call	2f94 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>
    34f0:	e13ffc04 	addi	r4,fp,-16
    34f4:	e17ffd04 	addi	r5,fp,-12
    34f8:	00034400 	call	3440 <_ZN9__gnu_cxxneIP6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    34fc:	10803fcc 	andi	r2,r2,255
    3500:	1004c03a 	cmpne	r2,r2,zero
    3504:	103fee1e 	bne	r2,zero,34c0 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type+0x30>
	    std::_Construct(&*__cur, *__first);
	  return __cur;
    3508:	e0bffb17 	ldw	r2,-20(fp)
	}
      catch(...)
	{
	  std::_Destroy(__result, __cur);
	  __throw_exception_again;
    350c:	e037883a 	mov	sp,fp
    3510:	dfc00217 	ldw	ra,8(sp)
    3514:	df000117 	ldw	fp,4(sp)
    3518:	dc000017 	ldw	r16,0(sp)
    351c:	dec00304 	addi	sp,sp,12
    3520:	f800283a 	ret

00003524 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    3524:	defffa04 	addi	sp,sp,-24
    3528:	dfc00515 	stw	ra,20(sp)
    352c:	df000415 	stw	fp,16(sp)
    3530:	df000404 	addi	fp,sp,16
    3534:	e13ffc15 	stw	r4,-16(fp)
    3538:	e17ffd15 	stw	r5,-12(fp)
    353c:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    3540:	e13ffc17 	ldw	r4,-16(fp)
    3544:	e17ffd17 	ldw	r5,-12(fp)
    3548:	e1bffe17 	ldw	r6,-8(fp)
    354c:	e1ffff03 	ldbu	r7,-4(fp)
    3550:	00034900 	call	3490 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type>
    3554:	e037883a 	mov	sp,fp
    3558:	dfc00117 	ldw	ra,4(sp)
    355c:	df000017 	ldw	fp,0(sp)
    3560:	dec00204 	addi	sp,sp,8
    3564:	f800283a 	ret

00003568 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_S2_ET0_T_S9_S8_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    3568:	defffa04 	addi	sp,sp,-24
    356c:	dfc00515 	stw	ra,20(sp)
    3570:	df000415 	stw	fp,16(sp)
    3574:	df000404 	addi	fp,sp,16
    3578:	e13ffc15 	stw	r4,-16(fp)
    357c:	e17ffd15 	stw	r5,-12(fp)
    3580:	e1bffe15 	stw	r6,-8(fp)
    3584:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    3588:	e13ffc17 	ldw	r4,-16(fp)
    358c:	e17ffd17 	ldw	r5,-12(fp)
    3590:	e1bffe17 	ldw	r6,-8(fp)
    3594:	00035240 	call	3524 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
    3598:	e037883a 	mov	sp,fp
    359c:	dfc00117 	ldw	ra,4(sp)
    35a0:	df000017 	ldw	fp,0(sp)
    35a4:	dec00204 	addi	sp,sp,8
    35a8:	f800283a 	ret

000035ac <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type>:
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
		  __false_type)
    35ac:	defffb04 	addi	sp,sp,-20
    35b0:	dfc00415 	stw	ra,16(sp)
    35b4:	df000315 	stw	fp,12(sp)
    35b8:	df000304 	addi	fp,sp,12
    35bc:	e13ffd15 	stw	r4,-12(fp)
    35c0:	e17ffe15 	stw	r5,-8(fp)
    35c4:	e1bfff05 	stb	r6,-4(fp)
    {
      for (; __first != __last; ++__first)
    35c8:	00000606 	br	35e4 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type+0x38>
	std::_Destroy(&*__first);
    35cc:	e13ffd04 	addi	r4,fp,-12
    35d0:	0002f200 	call	2f20 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    35d4:	1009883a 	mov	r4,r2
    35d8:	00030ec0 	call	30ec <_ZSt8_DestroyI6MyRectEvPT_>
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
		  __false_type)
    {
      for (; __first != __last; ++__first)
    35dc:	e13ffd04 	addi	r4,fp,-12
    35e0:	0002f940 	call	2f94 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>
    35e4:	e17ffe04 	addi	r5,fp,-8
    35e8:	e13ffd04 	addi	r4,fp,-12
    35ec:	00034400 	call	3440 <_ZN9__gnu_cxxneIP6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    35f0:	10803fcc 	andi	r2,r2,255
    35f4:	1004c03a 	cmpne	r2,r2,zero
    35f8:	103ff41e 	bne	r2,zero,35cc <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type+0x20>
	std::_Destroy(&*__first);
    35fc:	e037883a 	mov	sp,fp
    3600:	dfc00117 	ldw	ra,4(sp)
    3604:	df000017 	ldw	fp,0(sp)
    3608:	dec00204 	addi	sp,sp,8
    360c:	f800283a 	ret

00003610 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    3610:	defffb04 	addi	sp,sp,-20
    3614:	dfc00415 	stw	ra,16(sp)
    3618:	df000315 	stw	fp,12(sp)
    361c:	df000304 	addi	fp,sp,12
    3620:	e13ffd15 	stw	r4,-12(fp)
    3624:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
    3628:	e13ffd17 	ldw	r4,-12(fp)
    362c:	e17ffe17 	ldw	r5,-8(fp)
    3630:	e1bfff03 	ldbu	r6,-4(fp)
    3634:	00035ac0 	call	35ac <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type>
    3638:	e037883a 	mov	sp,fp
    363c:	dfc00117 	ldw	ra,4(sp)
    3640:	df000017 	ldw	fp,0(sp)
    3644:	dec00204 	addi	sp,sp,8
    3648:	f800283a 	ret

0000364c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES2_EvT_S8_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
    364c:	defffb04 	addi	sp,sp,-20
    3650:	dfc00415 	stw	ra,16(sp)
    3654:	df000315 	stw	fp,12(sp)
    3658:	df000304 	addi	fp,sp,12
    365c:	e13ffd15 	stw	r4,-12(fp)
    3660:	e17ffe15 	stw	r5,-8(fp)
    3664:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
    3668:	e13ffd17 	ldw	r4,-12(fp)
    366c:	e17ffe17 	ldw	r5,-8(fp)
    3670:	00036100 	call	3610 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_>
    3674:	e037883a 	mov	sp,fp
    3678:	dfc00117 	ldw	ra,4(sp)
    367c:	df000017 	ldw	fp,0(sp)
    3680:	dec00204 	addi	sp,sp,8
    3684:	f800283a 	ret

00003688 <_ZN9__gnu_cxx13new_allocatorI6MyRectE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
    3688:	defffb04 	addi	sp,sp,-20
    368c:	dfc00415 	stw	ra,16(sp)
    3690:	df000315 	stw	fp,12(sp)
    3694:	df000304 	addi	fp,sp,12
    3698:	e13ffd15 	stw	r4,-12(fp)
    369c:	e17ffe15 	stw	r5,-8(fp)
    36a0:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
    36a4:	e13ffd17 	ldw	r4,-12(fp)
    36a8:	00031e80 	call	31e8 <_ZNK9__gnu_cxx13new_allocatorI6MyRectE8max_sizeEv>
    36ac:	1007883a 	mov	r3,r2
    36b0:	e0bffe17 	ldw	r2,-8(fp)
    36b4:	1885803a 	cmpltu	r2,r3,r2
    36b8:	1004c03a 	cmpne	r2,r2,zero
    36bc:	10803fcc 	andi	r2,r2,255
    36c0:	1005003a 	cmpeq	r2,r2,zero
    36c4:	1000011e 	bne	r2,zero,36cc <_ZN9__gnu_cxx13new_allocatorI6MyRectE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
    36c8:	0007c100 	call	7c10 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    36cc:	e0bffe17 	ldw	r2,-8(fp)
    36d0:	1008913a 	slli	r4,r2,4
    36d4:	000ef4c0 	call	ef4c <_Znwm>
    36d8:	e037883a 	mov	sp,fp
    36dc:	dfc00117 	ldw	ra,4(sp)
    36e0:	df000017 	ldw	fp,0(sp)
    36e4:	dec00204 	addi	sp,sp,8
    36e8:	f800283a 	ret

000036ec <_ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      _Tp*
      _M_allocate(size_t __n)
    36ec:	defffc04 	addi	sp,sp,-16
    36f0:	dfc00315 	stw	ra,12(sp)
    36f4:	df000215 	stw	fp,8(sp)
    36f8:	df000204 	addi	fp,sp,8
    36fc:	e13ffe15 	stw	r4,-8(fp)
    3700:	e17fff15 	stw	r5,-4(fp)
      { return _M_impl.allocate(__n); }
    3704:	e0bffe17 	ldw	r2,-8(fp)
    3708:	1009883a 	mov	r4,r2
    370c:	e17fff17 	ldw	r5,-4(fp)
    3710:	000d883a 	mov	r6,zero
    3714:	00036880 	call	3688 <_ZN9__gnu_cxx13new_allocatorI6MyRectE8allocateEmPKv>
    3718:	e037883a 	mov	sp,fp
    371c:	dfc00117 	ldw	ra,4(sp)
    3720:	df000017 	ldw	fp,0(sp)
    3724:	dec00204 	addi	sp,sp,8
    3728:	f800283a 	ret

0000372c <_ZN9__gnu_cxx13new_allocatorI6MyRectE10deallocateEPS1_m>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
    372c:	defffb04 	addi	sp,sp,-20
    3730:	dfc00415 	stw	ra,16(sp)
    3734:	df000315 	stw	fp,12(sp)
    3738:	df000304 	addi	fp,sp,12
    373c:	e13ffd15 	stw	r4,-12(fp)
    3740:	e17ffe15 	stw	r5,-8(fp)
    3744:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
    3748:	e13ffe17 	ldw	r4,-8(fp)
    374c:	000e01c0 	call	e01c <_ZdlPv>
    3750:	e037883a 	mov	sp,fp
    3754:	dfc00117 	ldw	ra,4(sp)
    3758:	df000017 	ldw	fp,0(sp)
    375c:	dec00204 	addi	sp,sp,8
    3760:	f800283a 	ret

00003764 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m>:

      void
      _M_deallocate(_Tp* __p, size_t __n)
    3764:	defffb04 	addi	sp,sp,-20
    3768:	dfc00415 	stw	ra,16(sp)
    376c:	df000315 	stw	fp,12(sp)
    3770:	df000304 	addi	fp,sp,12
    3774:	e13ffd15 	stw	r4,-12(fp)
    3778:	e17ffe15 	stw	r5,-8(fp)
    377c:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__p)
    3780:	e0bffe17 	ldw	r2,-8(fp)
    3784:	1005003a 	cmpeq	r2,r2,zero
    3788:	1000051e 	bne	r2,zero,37a0 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m+0x3c>
	  _M_impl.deallocate(__p, __n);
    378c:	e0bffd17 	ldw	r2,-12(fp)
    3790:	1009883a 	mov	r4,r2
    3794:	e17ffe17 	ldw	r5,-8(fp)
    3798:	e1bfff17 	ldw	r6,-4(fp)
    379c:	000372c0 	call	372c <_ZN9__gnu_cxx13new_allocatorI6MyRectE10deallocateEPS1_m>
    37a0:	e037883a 	mov	sp,fp
    37a4:	dfc00117 	ldw	ra,4(sp)
    37a8:	df000017 	ldw	fp,0(sp)
    37ac:	dec00204 	addi	sp,sp,8
    37b0:	f800283a 	ret

000037b4 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_>:
      }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)
    37b4:	deffe704 	addi	sp,sp,-100
    37b8:	dfc01815 	stw	ra,96(sp)
    37bc:	df001715 	stw	fp,92(sp)
    37c0:	dc401615 	stw	r17,88(sp)
    37c4:	dc001515 	stw	r16,84(sp)
    37c8:	df001504 	addi	fp,sp,84
    37cc:	e13ffc15 	stw	r4,-16(fp)
    37d0:	e17ffd15 	stw	r5,-12(fp)
    37d4:	e1bffe15 	stw	r6,-8(fp)
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    37d8:	e0bffc17 	ldw	r2,-16(fp)
    37dc:	10c00117 	ldw	r3,4(r2)
    37e0:	e0bffc17 	ldw	r2,-16(fp)
    37e4:	10800217 	ldw	r2,8(r2)
    37e8:	18803426 	beq	r3,r2,38bc <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x108>
	{
	  this->_M_impl.construct(this->_M_impl._M_finish,
    37ec:	e0bffc17 	ldw	r2,-16(fp)
    37f0:	1009883a 	mov	r4,r2
    37f4:	e0bffc17 	ldw	r2,-16(fp)
    37f8:	11400117 	ldw	r5,4(r2)
    37fc:	e0bffc17 	ldw	r2,-16(fp)
    3800:	10800117 	ldw	r2,4(r2)
    3804:	11bffc04 	addi	r6,r2,-16
    3808:	0002cb40 	call	2cb4 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_>
				  *(this->_M_impl._M_finish - 1));
	  ++this->_M_impl._M_finish;
    380c:	e0bffc17 	ldw	r2,-16(fp)
    3810:	10800117 	ldw	r2,4(r2)
    3814:	10c00404 	addi	r3,r2,16
    3818:	e0bffc17 	ldw	r2,-16(fp)
    381c:	10c00115 	stw	r3,4(r2)
	  _Tp __x_copy = __x;
    3820:	e0fffe17 	ldw	r3,-8(fp)
    3824:	18800017 	ldw	r2,0(r3)
    3828:	e0bff615 	stw	r2,-40(fp)
    382c:	18800117 	ldw	r2,4(r3)
    3830:	e0bff715 	stw	r2,-36(fp)
    3834:	18800217 	ldw	r2,8(r3)
    3838:	e0bff815 	stw	r2,-32(fp)
    383c:	18800317 	ldw	r2,12(r3)
    3840:	e0bff915 	stw	r2,-28(fp)
	  std::copy_backward(__position,
    3844:	e0bffc17 	ldw	r2,-16(fp)
    3848:	10800117 	ldw	r2,4(r2)
    384c:	10bff804 	addi	r2,r2,-32
    3850:	e0bff415 	stw	r2,-48(fp)
    3854:	e13ff504 	addi	r4,fp,-44
    3858:	e17ff404 	addi	r5,fp,-48
    385c:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    3860:	e0bffc17 	ldw	r2,-16(fp)
    3864:	10800117 	ldw	r2,4(r2)
    3868:	10bffc04 	addi	r2,r2,-16
    386c:	e0bff215 	stw	r2,-56(fp)
    3870:	e13ff304 	addi	r4,fp,-52
    3874:	e17ff204 	addi	r5,fp,-56
    3878:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    387c:	e13ffd17 	ldw	r4,-12(fp)
    3880:	e17ff517 	ldw	r5,-44(fp)
    3884:	e1bff317 	ldw	r6,-52(fp)
    3888:	00033f00 	call	33f0 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
			     iterator(this->_M_impl._M_finish-2),
			     iterator(this->_M_impl._M_finish-1));
	  *__position = __x_copy;
    388c:	e13ffd04 	addi	r4,fp,-12
    3890:	0002f200 	call	2f20 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    3894:	1007883a 	mov	r3,r2
    3898:	e0bff617 	ldw	r2,-40(fp)
    389c:	18800015 	stw	r2,0(r3)
    38a0:	e0bff717 	ldw	r2,-36(fp)
    38a4:	18800115 	stw	r2,4(r3)
    38a8:	e0bff817 	ldw	r2,-32(fp)
    38ac:	18800215 	stw	r2,8(r3)
    38b0:	e0bff917 	ldw	r2,-28(fp)
    38b4:	18800315 	stw	r2,12(r3)
    38b8:	00008206 	br	3ac4 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x310>
	}
      else
	{
	  const size_type __old_size = size();
    38bc:	e13ffc17 	ldw	r4,-16(fp)
    38c0:	00030800 	call	3080 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    38c4:	e0bfec15 	stw	r2,-80(fp)
	  if (__old_size == this->max_size())
    38c8:	e13ffc17 	ldw	r4,-16(fp)
    38cc:	0002f480 	call	2f48 <_ZNKSt6vectorI6MyRectSaIS0_EE8max_sizeEv>
    38d0:	1007883a 	mov	r3,r2
    38d4:	e0bfec17 	ldw	r2,-80(fp)
    38d8:	1885003a 	cmpeq	r2,r3,r2
    38dc:	10803fcc 	andi	r2,r2,255
    38e0:	1005003a 	cmpeq	r2,r2,zero
    38e4:	1000031e 	bne	r2,zero,38f4 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x140>
	    __throw_length_error(__N("vector::_M_insert_aux"));
    38e8:	010000b4 	movhi	r4,2
    38ec:	21398004 	addi	r4,r4,-6656
    38f0:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>

	  // When sizeof(value_type) == 1 and __old_size > size_type(-1)/2
	  // __len overflows: if we don't notice and _M_allocate doesn't
	  // throw we crash badly later.
	  size_type __len = __old_size != 0 ? 2 * __old_size : 1;	  
    38f4:	e0bfec17 	ldw	r2,-80(fp)
    38f8:	1005003a 	cmpeq	r2,r2,zero
    38fc:	1000041e 	bne	r2,zero,3910 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x15c>
    3900:	e0bfec17 	ldw	r2,-80(fp)
    3904:	1085883a 	add	r2,r2,r2
    3908:	e0bfff15 	stw	r2,-4(fp)
    390c:	00000206 	br	3918 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x164>
    3910:	00800044 	movi	r2,1
    3914:	e0bfff15 	stw	r2,-4(fp)
    3918:	e0bfff17 	ldw	r2,-4(fp)
    391c:	e0bfeb15 	stw	r2,-84(fp)
	  if (__len < __old_size)
    3920:	e0ffeb17 	ldw	r3,-84(fp)
    3924:	e0bfec17 	ldw	r2,-80(fp)
    3928:	1880032e 	bgeu	r3,r2,3938 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x184>
	    __len = this->max_size();
    392c:	e13ffc17 	ldw	r4,-16(fp)
    3930:	0002f480 	call	2f48 <_ZNKSt6vectorI6MyRectSaIS0_EE8max_sizeEv>
    3934:	e0bfeb15 	stw	r2,-84(fp)

	  iterator __new_start(this->_M_allocate(__len));
    3938:	e13ffc17 	ldw	r4,-16(fp)
    393c:	e17feb17 	ldw	r5,-84(fp)
    3940:	00036ec0 	call	36ec <_ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm>
    3944:	e0bff115 	stw	r2,-60(fp)
    3948:	e13ffa04 	addi	r4,fp,-24
    394c:	e17ff104 	addi	r5,fp,-60
    3950:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
	  iterator __new_finish(__new_start);
    3954:	e0bffa17 	ldw	r2,-24(fp)
    3958:	e0bffb15 	stw	r2,-20(fp)
	  try
	    {
	      __new_finish =
    395c:	e17ffc17 	ldw	r5,-16(fp)
    3960:	e13ff004 	addi	r4,fp,-64
    3964:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    3968:	e13ffc17 	ldw	r4,-16(fp)
    396c:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    3970:	100b883a 	mov	r5,r2
    3974:	e13fef04 	addi	r4,fp,-68
    3978:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    397c:	e1ffef04 	addi	r7,fp,-68
    3980:	e13ff017 	ldw	r4,-64(fp)
    3984:	e17ffd17 	ldw	r5,-12(fp)
    3988:	e1bffa17 	ldw	r6,-24(fp)
    398c:	00035680 	call	3568 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_S2_ET0_T_S9_S8_SaIT1_E>
    3990:	e0bffb15 	stw	r2,-20(fp)
    3994:	e13fef04 	addi	r4,fp,-68
    3998:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
		std::__uninitialized_copy_a(iterator(this->_M_impl._M_start),
					    __position,
					    __new_start,
					    _M_get_Tp_allocator());
	      this->_M_impl.construct(__new_finish.base(), __x);
    399c:	e0bffc17 	ldw	r2,-16(fp)
    39a0:	1021883a 	mov	r16,r2
    39a4:	e13ffb04 	addi	r4,fp,-20
    39a8:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    39ac:	11400017 	ldw	r5,0(r2)
    39b0:	8009883a 	mov	r4,r16
    39b4:	e1bffe17 	ldw	r6,-8(fp)
    39b8:	0002cb40 	call	2cb4 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_>
	      ++__new_finish;
    39bc:	e13ffb04 	addi	r4,fp,-20
    39c0:	0002f940 	call	2f94 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>
	      __new_finish =
    39c4:	e0bffc17 	ldw	r2,-16(fp)
    39c8:	11400104 	addi	r5,r2,4
    39cc:	e13fee04 	addi	r4,fp,-72
    39d0:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    39d4:	e13ffc17 	ldw	r4,-16(fp)
    39d8:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    39dc:	100b883a 	mov	r5,r2
    39e0:	e13fed84 	addi	r4,fp,-74
    39e4:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    39e8:	e1ffed84 	addi	r7,fp,-74
    39ec:	e13ffd17 	ldw	r4,-12(fp)
    39f0:	e17fee17 	ldw	r5,-72(fp)
    39f4:	e1bffb17 	ldw	r6,-20(fp)
    39f8:	00035680 	call	3568 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_S2_ET0_T_S9_S8_SaIT1_E>
    39fc:	e0bffb15 	stw	r2,-20(fp)
    3a00:	e13fed84 	addi	r4,fp,-74
    3a04:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
	    {
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	      _M_deallocate(__new_start.base(),__len);
	      __throw_exception_again;
	    }
	  std::_Destroy(begin(), end(), _M_get_Tp_allocator());
    3a08:	e13ffc17 	ldw	r4,-16(fp)
    3a0c:	0002fcc0 	call	2fcc <_ZNSt6vectorI6MyRectSaIS0_EE5beginEv>
    3a10:	1021883a 	mov	r16,r2
    3a14:	e13ffc17 	ldw	r4,-16(fp)
    3a18:	0002ee40 	call	2ee4 <_ZNSt6vectorI6MyRectSaIS0_EE3endEv>
    3a1c:	1023883a 	mov	r17,r2
    3a20:	e13ffc17 	ldw	r4,-16(fp)
    3a24:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    3a28:	100b883a 	mov	r5,r2
    3a2c:	e13fed04 	addi	r4,fp,-76
    3a30:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    3a34:	e1bfed04 	addi	r6,fp,-76
    3a38:	8009883a 	mov	r4,r16
    3a3c:	880b883a 	mov	r5,r17
    3a40:	000364c0 	call	364c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES2_EvT_S8_SaIT0_E>
    3a44:	e13fed04 	addi	r4,fp,-76
    3a48:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
	  _M_deallocate(this->_M_impl._M_start,
    3a4c:	e13ffc17 	ldw	r4,-16(fp)
    3a50:	e0bffc17 	ldw	r2,-16(fp)
    3a54:	11400017 	ldw	r5,0(r2)
    3a58:	e0bffc17 	ldw	r2,-16(fp)
    3a5c:	10800217 	ldw	r2,8(r2)
    3a60:	1007883a 	mov	r3,r2
    3a64:	e0bffc17 	ldw	r2,-16(fp)
    3a68:	10800017 	ldw	r2,0(r2)
    3a6c:	1885c83a 	sub	r2,r3,r2
    3a70:	1005d13a 	srai	r2,r2,4
    3a74:	100d883a 	mov	r6,r2
    3a78:	00037640 	call	3764 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m>
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __new_start.base();
    3a7c:	e13ffa04 	addi	r4,fp,-24
    3a80:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    3a84:	10c00017 	ldw	r3,0(r2)
    3a88:	e0bffc17 	ldw	r2,-16(fp)
    3a8c:	10c00015 	stw	r3,0(r2)
	  this->_M_impl._M_finish = __new_finish.base();
    3a90:	e13ffb04 	addi	r4,fp,-20
    3a94:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    3a98:	10c00017 	ldw	r3,0(r2)
    3a9c:	e0bffc17 	ldw	r2,-16(fp)
    3aa0:	10c00115 	stw	r3,4(r2)
	  this->_M_impl._M_end_of_storage = __new_start.base() + __len;
    3aa4:	e13ffa04 	addi	r4,fp,-24
    3aa8:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    3aac:	10c00017 	ldw	r3,0(r2)
    3ab0:	e0bfeb17 	ldw	r2,-84(fp)
    3ab4:	1004913a 	slli	r2,r2,4
    3ab8:	1887883a 	add	r3,r3,r2
    3abc:	e0bffc17 	ldw	r2,-16(fp)
    3ac0:	10c00215 	stw	r3,8(r2)
    3ac4:	e037883a 	mov	sp,fp
    3ac8:	dfc00317 	ldw	ra,12(sp)
    3acc:	df000217 	ldw	fp,8(sp)
    3ad0:	dc400117 	ldw	r17,4(sp)
    3ad4:	dc000017 	ldw	r16,0(sp)
    3ad8:	dec00404 	addi	sp,sp,16
    3adc:	f800283a 	ret

00003ae0 <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
    3ae0:	defffc04 	addi	sp,sp,-16
    3ae4:	dfc00315 	stw	ra,12(sp)
    3ae8:	df000215 	stw	fp,8(sp)
    3aec:	df000204 	addi	fp,sp,8
    3af0:	e13ffe15 	stw	r4,-8(fp)
    3af4:	e17fff15 	stw	r5,-4(fp)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    3af8:	e0bffe17 	ldw	r2,-8(fp)
    3afc:	10c00117 	ldw	r3,4(r2)
    3b00:	e0bffe17 	ldw	r2,-8(fp)
    3b04:	10800217 	ldw	r2,8(r2)
    3b08:	18800c26 	beq	r3,r2,3b3c <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_+0x5c>
	  {
	    this->_M_impl.construct(this->_M_impl._M_finish, __x);
    3b0c:	e0bffe17 	ldw	r2,-8(fp)
    3b10:	1009883a 	mov	r4,r2
    3b14:	e0bffe17 	ldw	r2,-8(fp)
    3b18:	11400117 	ldw	r5,4(r2)
    3b1c:	e1bfff17 	ldw	r6,-4(fp)
    3b20:	0002cb40 	call	2cb4 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_>
	    ++this->_M_impl._M_finish;
    3b24:	e0bffe17 	ldw	r2,-8(fp)
    3b28:	10800117 	ldw	r2,4(r2)
    3b2c:	10c00404 	addi	r3,r2,16
    3b30:	e0bffe17 	ldw	r2,-8(fp)
    3b34:	10c00115 	stw	r3,4(r2)
    3b38:	00000606 	br	3b54 <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_+0x74>
	  }
	else
	  _M_insert_aux(end(), __x);
    3b3c:	e13ffe17 	ldw	r4,-8(fp)
    3b40:	0002ee40 	call	2ee4 <_ZNSt6vectorI6MyRectSaIS0_EE3endEv>
    3b44:	100b883a 	mov	r5,r2
    3b48:	e13ffe17 	ldw	r4,-8(fp)
    3b4c:	e1bfff17 	ldw	r6,-4(fp)
    3b50:	00037b40 	call	37b4 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_>
    3b54:	e037883a 	mov	sp,fp
    3b58:	dfc00117 	ldw	ra,4(sp)
    3b5c:	df000017 	ldw	fp,0(sp)
    3b60:	dec00204 	addi	sp,sp,8
    3b64:	f800283a 	ret

00003b68 <_ZNSt12_Vector_baseI6MyRectSaIS0_EED2Ev>:
	this->_M_impl._M_start = this->_M_allocate(__n);
	this->_M_impl._M_finish = this->_M_impl._M_start;
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      ~_Vector_base()
    3b68:	defffd04 	addi	sp,sp,-12
    3b6c:	dfc00215 	stw	ra,8(sp)
    3b70:	df000115 	stw	fp,4(sp)
    3b74:	df000104 	addi	fp,sp,4
    3b78:	e13fff15 	stw	r4,-4(fp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    3b7c:	e0bfff17 	ldw	r2,-4(fp)
    3b80:	11400017 	ldw	r5,0(r2)
    3b84:	e0bfff17 	ldw	r2,-4(fp)
    3b88:	10800217 	ldw	r2,8(r2)
    3b8c:	1007883a 	mov	r3,r2
    3b90:	e0bfff17 	ldw	r2,-4(fp)
    3b94:	10800017 	ldw	r2,0(r2)
    3b98:	1885c83a 	sub	r2,r3,r2
    3b9c:	1005d13a 	srai	r2,r2,4
    3ba0:	100d883a 	mov	r6,r2
    3ba4:	e13fff17 	ldw	r4,-4(fp)
    3ba8:	00037640 	call	3764 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m>
    3bac:	e13fff17 	ldw	r4,-4(fp)
    3bb0:	0002c600 	call	2c60 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implD1Ev>
    3bb4:	e037883a 	mov	sp,fp
    3bb8:	dfc00117 	ldw	ra,4(sp)
    3bbc:	df000017 	ldw	fp,0(sp)
    3bc0:	dec00204 	addi	sp,sp,8
    3bc4:	f800283a 	ret

00003bc8 <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibilty.
       */
      ~vector()
    3bc8:	defffa04 	addi	sp,sp,-24
    3bcc:	dfc00515 	stw	ra,20(sp)
    3bd0:	df000415 	stw	fp,16(sp)
    3bd4:	dc400315 	stw	r17,12(sp)
    3bd8:	dc000215 	stw	r16,8(sp)
    3bdc:	df000204 	addi	fp,sp,8
    3be0:	e13fff15 	stw	r4,-4(fp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    3be4:	e0bfff17 	ldw	r2,-4(fp)
    3be8:	14000017 	ldw	r16,0(r2)
    3bec:	e0bfff17 	ldw	r2,-4(fp)
    3bf0:	14400117 	ldw	r17,4(r2)
    3bf4:	e13fff17 	ldw	r4,-4(fp)
    3bf8:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    3bfc:	100b883a 	mov	r5,r2
    3c00:	e13ffe04 	addi	r4,fp,-8
    3c04:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    3c08:	8009883a 	mov	r4,r16
    3c0c:	880b883a 	mov	r5,r17
    3c10:	e1bffe04 	addi	r6,fp,-8
    3c14:	00031ac0 	call	31ac <_ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E>
    3c18:	e13ffe04 	addi	r4,fp,-8
    3c1c:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
    3c20:	e13fff17 	ldw	r4,-4(fp)
    3c24:	0003b680 	call	3b68 <_ZNSt12_Vector_baseI6MyRectSaIS0_EED2Ev>
    3c28:	e037883a 	mov	sp,fp
    3c2c:	dfc00317 	ldw	ra,12(sp)
    3c30:	df000217 	ldw	fp,8(sp)
    3c34:	dc400117 	ldw	r17,4(sp)
    3c38:	dc000017 	ldw	r16,0(sp)
    3c3c:	dec00404 	addi	sp,sp,16
    3c40:	f800283a 	ret

00003c44 <main>:
#define OUTPUT_FILENAME "Output.pgm"

using namespace std;


int main (int argc, char *argv[]){
    3c44:	deffab04 	addi	sp,sp,-340
    3c48:	dfc05415 	stw	ra,336(sp)
    3c4c:	df005315 	stw	fp,332(sp)
    3c50:	ddc05215 	stw	r23,328(sp)
    3c54:	dd805115 	stw	r22,324(sp)
    3c58:	dd405015 	stw	r21,320(sp)
    3c5c:	dd004f15 	stw	r20,316(sp)
    3c60:	dcc04e15 	stw	r19,312(sp)
    3c64:	dc804d15 	stw	r18,308(sp)
    3c68:	dc404c15 	stw	r17,304(sp)
    3c6c:	dc004b15 	stw	r16,300(sp)
    3c70:	df004b04 	addi	fp,sp,300
    3c74:	e13feb15 	stw	r4,-84(fp)
    3c78:	e17fec15 	stw	r5,-80(fp)
    3c7c:	00800074 	movhi	r2,1
    3c80:	10b9cd04 	addi	r2,r2,-6348
    3c84:	e0bff315 	stw	r2,-52(fp)
    3c88:	008000b4 	movhi	r2,2
    3c8c:	10b88384 	addi	r2,r2,-7666
    3c90:	e0bff415 	stw	r2,-48(fp)
    3c94:	e0bff504 	addi	r2,fp,-44
    3c98:	e0ffba04 	addi	r3,fp,-280
    3c9c:	10c00015 	stw	r3,0(r2)
    3ca0:	00c00034 	movhi	r3,0
    3ca4:	18cf8b04 	addi	r3,r3,15916
    3ca8:	10c00115 	stw	r3,4(r2)
    3cac:	16c00215 	stw	sp,8(r2)
    3cb0:	e13fed04 	addi	r4,fp,-76
    3cb4:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>

	int flag;
	
	int mode = 1;
    3cb8:	00800044 	movi	r2,1
    3cbc:	e0bfbf15 	stw	r2,-260(fp)
	int i;

	/* detection parameters */
	float scaleFactor = 1.2;
    3cc0:	008fe6b4 	movhi	r2,16282
    3cc4:	10a66684 	addi	r2,r2,-26214
    3cc8:	e0bfbd15 	stw	r2,-268(fp)
	int minNeighbours = 1;
    3ccc:	00800044 	movi	r2,1
    3cd0:	e0bfbc15 	stw	r2,-272(fp)


	printf("-- entering main function --\r\n");
    3cd4:	00bfffc4 	movi	r2,-1
    3cd8:	e0bfee15 	stw	r2,-72(fp)
    3cdc:	010000b4 	movhi	r4,2
    3ce0:	21398e04 	addi	r4,r4,-6600
    3ce4:	00143c80 	call	143c8 <puts>

	printf("-- loading image --\r\n");
    3ce8:	010000b4 	movhi	r4,2
    3cec:	21399604 	addi	r4,r4,-6568
    3cf0:	00143c80 	call	143c8 <puts>

	MyImage imageObj;
	MyImage *image = &imageObj;
    3cf4:	e0bfc504 	addi	r2,fp,-236
    3cf8:	e0bfbb15 	stw	r2,-276(fp)

	flag = readPgm((char *)"Face.pgm", image);
    3cfc:	010000b4 	movhi	r4,2
    3d00:	21399c04 	addi	r4,r4,-6544
    3d04:	e17fbb17 	ldw	r5,-276(fp)
    3d08:	00004c40 	call	4c4 <readPgm>
    3d0c:	e0bfc015 	stw	r2,-256(fp)
	if (flag == -1)
    3d10:	e0bfc017 	ldw	r2,-256(fp)
    3d14:	10bfffd8 	cmpnei	r2,r2,-1
    3d18:	1000061e 	bne	r2,zero,3d34 <main+0xf0>
	{
		printf( "Unable to open input image\n");
    3d1c:	010000b4 	movhi	r4,2
    3d20:	21399f04 	addi	r4,r4,-6532
    3d24:	00143c80 	call	143c8 <puts>
		return 1;
    3d28:	00800044 	movi	r2,1
    3d2c:	e0bffd15 	stw	r2,-12(fp)
    3d30:	00008a06 	br	3f5c <main+0x318>
	}

	printf("-- loading cascade classifier --\r\n");
    3d34:	00bfffc4 	movi	r2,-1
    3d38:	e0bfee15 	stw	r2,-72(fp)
    3d3c:	010000b4 	movhi	r4,2
    3d40:	2139a604 	addi	r4,r4,-6504
    3d44:	00143c80 	call	143c8 <puts>

	myCascade cascadeObj;
	myCascade *cascade = &cascadeObj;
    3d48:	e0bfd504 	addi	r2,fp,-172
    3d4c:	e0bfba15 	stw	r2,-280(fp)
	MySize minSize = {20, 20};
    3d50:	00800504 	movi	r2,20
    3d54:	e0bfca15 	stw	r2,-216(fp)
    3d58:	00800504 	movi	r2,20
    3d5c:	e0bfcb15 	stw	r2,-212(fp)
	MySize maxSize = {0, 0};
    3d60:	e03fcc15 	stw	zero,-208(fp)
    3d64:	e03fcd15 	stw	zero,-204(fp)

	/* classifier properties */
	cascade->n_stages=25;
    3d68:	e0ffba17 	ldw	r3,-280(fp)
    3d6c:	00800644 	movi	r2,25
    3d70:	18800015 	stw	r2,0(r3)
	cascade->total_nodes=2913;
    3d74:	e0ffba17 	ldw	r3,-280(fp)
    3d78:	0082d844 	movi	r2,2913
    3d7c:	18800115 	stw	r2,4(r3)
	cascade->orig_window_size.height = 24;
    3d80:	e0ffba17 	ldw	r3,-280(fp)
    3d84:	00800604 	movi	r2,24
    3d88:	18800415 	stw	r2,16(r3)
	cascade->orig_window_size.width = 24;
    3d8c:	e0ffba17 	ldw	r3,-280(fp)
    3d90:	00800604 	movi	r2,24
    3d94:	18800315 	stw	r2,12(r3)


	readTextClassifier();
    3d98:	0001c680 	call	1c68 <readTextClassifier>

	std::vector<MyRect> result;
    3d9c:	e13fc404 	addi	r4,fp,-240
    3da0:	0002b1c0 	call	2b1c <_ZNSaI6MyRectEC1Ev>
    3da4:	e13fce04 	addi	r4,fp,-200
    3da8:	e17fc404 	addi	r5,fp,-240
    3dac:	0002dbc0 	call	2dbc <_ZNSt6vectorI6MyRectSaIS0_EEC1ERKS1_>
    3db0:	e13fc404 	addi	r4,fp,-240
    3db4:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>

	printf("-- detecting faces --\r\n");
    3db8:	00800084 	movi	r2,2
    3dbc:	e0bfee15 	stw	r2,-72(fp)
    3dc0:	010000b4 	movhi	r4,2
    3dc4:	2139af04 	addi	r4,r4,-6468
    3dc8:	00143c80 	call	143c8 <puts>

	result = detectObjects(image, minSize, maxSize, cascade, scaleFactor, minNeighbours);
    3dcc:	e13fc104 	addi	r4,fp,-252
    3dd0:	e0bfcc17 	ldw	r2,-208(fp)
    3dd4:	d8800015 	stw	r2,0(sp)
    3dd8:	e0bfcd17 	ldw	r2,-204(fp)
    3ddc:	d8800115 	stw	r2,4(sp)
    3de0:	e0bfba17 	ldw	r2,-280(fp)
    3de4:	d8800215 	stw	r2,8(sp)
    3de8:	e0bfbd17 	ldw	r2,-268(fp)
    3dec:	d8800315 	stw	r2,12(sp)
    3df0:	e0bfbc17 	ldw	r2,-272(fp)
    3df4:	d8800415 	stw	r2,16(sp)
    3df8:	e17fbb17 	ldw	r5,-276(fp)
    3dfc:	e1bfca17 	ldw	r6,-216(fp)
    3e00:	e1ffcb17 	ldw	r7,-212(fp)
    3e04:	000226c0 	call	226c <detectObjects>
    3e08:	e13fce04 	addi	r4,fp,-200
    3e0c:	e17fc104 	addi	r5,fp,-252
    3e10:	00800044 	movi	r2,1
    3e14:	e0bfee15 	stw	r2,-72(fp)
    3e18:	00045940 	call	4594 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_>
    3e1c:	e13fc104 	addi	r4,fp,-252
    3e20:	0003bc80 	call	3bc8 <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>

	for(i = 0; i < result.size(); i++ )
    3e24:	e03fbe15 	stw	zero,-264(fp)
    3e28:	00002506 	br	3ec0 <main+0x27c>
    3e2c:	e7004604 	addi	fp,fp,280
    3e30:	e0bfee17 	ldw	r2,-72(fp)
    3e34:	e0ffef17 	ldw	r3,-68(fp)
    3e38:	e0ffff15 	stw	r3,-4(fp)
    3e3c:	10800060 	cmpeqi	r2,r2,1
    3e40:	10003c1e 	bne	r2,zero,3f34 <main+0x2f0>
    3e44:	e0bfff17 	ldw	r2,-4(fp)
    3e48:	e0bffb15 	stw	r2,-20(fp)

	std::vector<MyRect> result;

	printf("-- detecting faces --\r\n");

	result = detectObjects(image, minSize, maxSize, cascade, scaleFactor, minNeighbours);
    3e4c:	e13fc104 	addi	r4,fp,-252
    3e50:	0003bc80 	call	3bc8 <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    3e54:	e0fffb17 	ldw	r3,-20(fp)
    3e58:	e0ffff15 	stw	r3,-4(fp)
    3e5c:	00003506 	br	3f34 <main+0x2f0>

	for(i = 0; i < result.size(); i++ )
	{
		MyRect r = result[i];
    3e60:	e17fbe17 	ldw	r5,-264(fp)
    3e64:	e13fce04 	addi	r4,fp,-200
    3e68:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    3e6c:	1007883a 	mov	r3,r2
    3e70:	18800017 	ldw	r2,0(r3)
    3e74:	e0bfd115 	stw	r2,-188(fp)
    3e78:	18800117 	ldw	r2,4(r3)
    3e7c:	e0bfd215 	stw	r2,-184(fp)
    3e80:	18800217 	ldw	r2,8(r3)
    3e84:	e0bfd315 	stw	r2,-180(fp)
    3e88:	18800317 	ldw	r2,12(r3)
    3e8c:	e0bfd415 	stw	r2,-176(fp)
		drawRectangle(image, r);
    3e90:	e0bfd417 	ldw	r2,-176(fp)
    3e94:	d8800015 	stw	r2,0(sp)
    3e98:	00800084 	movi	r2,2
    3e9c:	e0bfee15 	stw	r2,-72(fp)
    3ea0:	e17fd117 	ldw	r5,-188(fp)
    3ea4:	e1bfd217 	ldw	r6,-184(fp)
    3ea8:	e1ffd317 	ldw	r7,-180(fp)
    3eac:	e13fbb17 	ldw	r4,-276(fp)
    3eb0:	0004b380 	call	4b38 <drawRectangle>

	printf("-- detecting faces --\r\n");

	result = detectObjects(image, minSize, maxSize, cascade, scaleFactor, minNeighbours);

	for(i = 0; i < result.size(); i++ )
    3eb4:	e0bfbe17 	ldw	r2,-264(fp)
    3eb8:	10800044 	addi	r2,r2,1
    3ebc:	e0bfbe15 	stw	r2,-264(fp)
    3ec0:	e0bfbe17 	ldw	r2,-264(fp)
    3ec4:	e0bffc15 	stw	r2,-16(fp)
    3ec8:	e13fce04 	addi	r4,fp,-200
    3ecc:	00030800 	call	3080 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    3ed0:	e0fffc17 	ldw	r3,-16(fp)
    3ed4:	1885803a 	cmpltu	r2,r3,r2
    3ed8:	10803fcc 	andi	r2,r2,255
    3edc:	1004c03a 	cmpne	r2,r2,zero
    3ee0:	103fdf1e 	bne	r2,zero,3e60 <main+0x21c>
	{
		MyRect r = result[i];
		drawRectangle(image, r);
	}

	printf("-- saving output --\r\n"); 
    3ee4:	00800084 	movi	r2,2
    3ee8:	e0bfee15 	stw	r2,-72(fp)
    3eec:	010000b4 	movhi	r4,2
    3ef0:	2139b504 	addi	r4,r4,-6444
    3ef4:	00143c80 	call	143c8 <puts>
	flag = writePgm((char *)OUTPUT_FILENAME, image); 
    3ef8:	010000b4 	movhi	r4,2
    3efc:	2139bb04 	addi	r4,r4,-6420
    3f00:	e17fbb17 	ldw	r5,-276(fp)
    3f04:	00007940 	call	794 <writePgm>
    3f08:	e0bfc015 	stw	r2,-256(fp)

	printf("-- image saved --\r\n");
    3f0c:	010000b4 	movhi	r4,2
    3f10:	2139be04 	addi	r4,r4,-6408
    3f14:	00143c80 	call	143c8 <puts>

	/* delete image and free classifier */
	releaseTextClassifier();
    3f18:	0001c040 	call	1c04 <releaseTextClassifier>
	freeImage(image);
    3f1c:	e13fbb17 	ldw	r4,-276(fp)
    3f20:	0000b340 	call	b34 <freeImage>

	return 0;
    3f24:	e03ffd15 	stw	zero,-12(fp)
    3f28:	e13fce04 	addi	r4,fp,-200
    3f2c:	0003bc80 	call	3bc8 <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    3f30:	00000a06 	br	3f5c <main+0x318>
    3f34:	e0bfff17 	ldw	r2,-4(fp)
    3f38:	e0bffa15 	stw	r2,-24(fp)
    3f3c:	e13fce04 	addi	r4,fp,-200
    3f40:	0003bc80 	call	3bc8 <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    3f44:	e0fffa17 	ldw	r3,-24(fp)
    3f48:	e0ffff15 	stw	r3,-4(fp)
    3f4c:	00bfffc4 	movi	r2,-1
    3f50:	e0bfee15 	stw	r2,-72(fp)
    3f54:	e13fff17 	ldw	r4,-4(fp)
    3f58:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    3f5c:	e0bffd17 	ldw	r2,-12(fp)
    3f60:	e0bffe15 	stw	r2,-8(fp)
    3f64:	e13fed04 	addi	r4,fp,-76
    3f68:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
}
    3f6c:	e0bffe17 	ldw	r2,-8(fp)
    3f70:	e037883a 	mov	sp,fp
    3f74:	dfc00917 	ldw	ra,36(sp)
    3f78:	df000817 	ldw	fp,32(sp)
    3f7c:	ddc00717 	ldw	r23,28(sp)
    3f80:	dd800617 	ldw	r22,24(sp)
    3f84:	dd400517 	ldw	r21,20(sp)
    3f88:	dd000417 	ldw	r20,16(sp)
    3f8c:	dcc00317 	ldw	r19,12(sp)
    3f90:	dc800217 	ldw	r18,8(sp)
    3f94:	dc400117 	ldw	r17,4(sp)
    3f98:	dc000017 	ldw	r16,0(sp)
    3f9c:	dec00a04 	addi	sp,sp,40
    3fa0:	f800283a 	ret

00003fa4 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEplERKl>:
      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
    3fa4:	defffa04 	addi	sp,sp,-24
    3fa8:	dfc00515 	stw	ra,20(sp)
    3fac:	df000415 	stw	fp,16(sp)
    3fb0:	df000404 	addi	fp,sp,16
    3fb4:	e13ffe15 	stw	r4,-8(fp)
    3fb8:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current + __n); }
    3fbc:	e0bffe17 	ldw	r2,-8(fp)
    3fc0:	10c00017 	ldw	r3,0(r2)
    3fc4:	e0bfff17 	ldw	r2,-4(fp)
    3fc8:	10800017 	ldw	r2,0(r2)
    3fcc:	1004913a 	slli	r2,r2,4
    3fd0:	1885883a 	add	r2,r3,r2
    3fd4:	e0bffc15 	stw	r2,-16(fp)
    3fd8:	e13ffd04 	addi	r4,fp,-12
    3fdc:	e17ffc04 	addi	r5,fp,-16
    3fe0:	0002df40 	call	2df4 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    3fe4:	e0bffd17 	ldw	r2,-12(fp)
    3fe8:	e037883a 	mov	sp,fp
    3fec:	dfc00117 	ldw	ra,4(sp)
    3ff0:	df000017 	ldw	fp,0(sp)
    3ff4:	dec00204 	addi	sp,sp,8
    3ff8:	f800283a 	ret

00003ffc <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEplERKl>:
      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
    3ffc:	defffa04 	addi	sp,sp,-24
    4000:	dfc00515 	stw	ra,20(sp)
    4004:	df000415 	stw	fp,16(sp)
    4008:	df000404 	addi	fp,sp,16
    400c:	e13ffe15 	stw	r4,-8(fp)
    4010:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current + __n); }
    4014:	e0bffe17 	ldw	r2,-8(fp)
    4018:	10c00017 	ldw	r3,0(r2)
    401c:	e0bfff17 	ldw	r2,-4(fp)
    4020:	10800017 	ldw	r2,0(r2)
    4024:	1004913a 	slli	r2,r2,4
    4028:	1885883a 	add	r2,r3,r2
    402c:	e0bffc15 	stw	r2,-16(fp)
    4030:	e13ffd04 	addi	r4,fp,-12
    4034:	e17ffc04 	addi	r5,fp,-16
    4038:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    403c:	e0bffd17 	ldw	r2,-12(fp)
    4040:	e037883a 	mov	sp,fp
    4044:	dfc00117 	ldw	ra,4(sp)
    4048:	df000017 	ldw	fp,0(sp)
    404c:	dec00204 	addi	sp,sp,8
    4050:	f800283a 	ret

00004054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
    4054:	defff904 	addi	sp,sp,-28
    4058:	dfc00615 	stw	ra,24(sp)
    405c:	df000515 	stw	fp,20(sp)
    4060:	df000504 	addi	fp,sp,20
    4064:	e13ffe15 	stw	r4,-8(fp)
    4068:	e17fff15 	stw	r5,-4(fp)
      { return *(begin() + __n); }
    406c:	e13ffe17 	ldw	r4,-8(fp)
    4070:	0002fcc0 	call	2fcc <_ZNSt6vectorI6MyRectSaIS0_EE5beginEv>
    4074:	e0bffc15 	stw	r2,-16(fp)
    4078:	e0bfff17 	ldw	r2,-4(fp)
    407c:	e0bffb15 	stw	r2,-20(fp)
    4080:	e13ffc04 	addi	r4,fp,-16
    4084:	e17ffb04 	addi	r5,fp,-20
    4088:	0003ffc0 	call	3ffc <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEplERKl>
    408c:	e0bffd15 	stw	r2,-12(fp)
    4090:	e13ffd04 	addi	r4,fp,-12
    4094:	0002f200 	call	2f20 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    4098:	e037883a 	mov	sp,fp
    409c:	dfc00117 	ldw	ra,4(sp)
    40a0:	df000017 	ldw	fp,0(sp)
    40a4:	dec00204 	addi	sp,sp,8
    40a8:	f800283a 	ret

000040ac <_ZNKSt6vectorI6MyRectSaIS0_EE8capacityEv>:
      /**
       *  Returns the total number of elements that the %vector can
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const
    40ac:	defffa04 	addi	sp,sp,-24
    40b0:	dfc00515 	stw	ra,20(sp)
    40b4:	df000415 	stw	fp,16(sp)
    40b8:	df000404 	addi	fp,sp,16
    40bc:	e13fff15 	stw	r4,-4(fp)
      { return size_type(const_iterator(this->_M_impl._M_end_of_storage)
			 - begin()); }
    40c0:	e0bfff17 	ldw	r2,-4(fp)
    40c4:	10800217 	ldw	r2,8(r2)
    40c8:	e0bffd15 	stw	r2,-12(fp)
    40cc:	e13ffe04 	addi	r4,fp,-8
    40d0:	e17ffd04 	addi	r5,fp,-12
    40d4:	0002df40 	call	2df4 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    40d8:	e13fff17 	ldw	r4,-4(fp)
    40dc:	0002e6c0 	call	2e6c <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    40e0:	e0bffc15 	stw	r2,-16(fp)
    40e4:	e13ffe04 	addi	r4,fp,-8
    40e8:	e17ffc04 	addi	r5,fp,-16
    40ec:	00030280 	call	3028 <_ZN9__gnu_cxxmiIPK6MyRectS3_St6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE>
    40f0:	e037883a 	mov	sp,fp
    40f4:	dfc00117 	ldw	ra,4(sp)
    40f8:	df000017 	ldw	fp,0(sp)
    40fc:	dec00204 	addi	sp,sp,8
    4100:	f800283a 	ret

00004104 <_ZN9__gnu_cxxneIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    4104:	defffb04 	addi	sp,sp,-20
    4108:	dfc00415 	stw	ra,16(sp)
    410c:	df000315 	stw	fp,12(sp)
    4110:	dc000215 	stw	r16,8(sp)
    4114:	df000204 	addi	fp,sp,8
    4118:	e13ffe15 	stw	r4,-8(fp)
    411c:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() != __rhs.base(); }
    4120:	e13ffe17 	ldw	r4,-8(fp)
    4124:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    4128:	14000017 	ldw	r16,0(r2)
    412c:	e13fff17 	ldw	r4,-4(fp)
    4130:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    4134:	10800017 	ldw	r2,0(r2)
    4138:	8084c03a 	cmpne	r2,r16,r2
    413c:	e037883a 	mov	sp,fp
    4140:	dfc00217 	ldw	ra,8(sp)
    4144:	df000117 	ldw	fp,4(sp)
    4148:	dc000017 	ldw	r16,0(sp)
    414c:	dec00304 	addi	sp,sp,12
    4150:	f800283a 	ret

00004154 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
    4154:	defffe04 	addi	sp,sp,-8
    4158:	df000115 	stw	fp,4(sp)
    415c:	df000104 	addi	fp,sp,4
    4160:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
    4164:	e0bfff17 	ldw	r2,-4(fp)
    4168:	10800017 	ldw	r2,0(r2)
    416c:	10c00404 	addi	r3,r2,16
    4170:	e0bfff17 	ldw	r2,-4(fp)
    4174:	10c00015 	stw	r3,0(r2)
	return *this;
    4178:	e0bfff17 	ldw	r2,-4(fp)
    417c:	e037883a 	mov	sp,fp
    4180:	df000017 	ldw	fp,0(sp)
    4184:	dec00104 	addi	sp,sp,4
    4188:	f800283a 	ret

0000418c <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
    418c:	defffe04 	addi	sp,sp,-8
    4190:	df000115 	stw	fp,4(sp)
    4194:	df000104 	addi	fp,sp,4
    4198:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
    419c:	e0bfff17 	ldw	r2,-4(fp)
    41a0:	10800017 	ldw	r2,0(r2)
    41a4:	e037883a 	mov	sp,fp
    41a8:	df000017 	ldw	fp,0(sp)
    41ac:	dec00104 	addi	sp,sp,4
    41b0:	f800283a 	ret

000041b4 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type>:

  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __false_type)
    41b4:	defff904 	addi	sp,sp,-28
    41b8:	dfc00615 	stw	ra,24(sp)
    41bc:	df000515 	stw	fp,20(sp)
    41c0:	df000504 	addi	fp,sp,20
    41c4:	e13ffc15 	stw	r4,-16(fp)
    41c8:	e17ffd15 	stw	r5,-12(fp)
    41cc:	e1bffe15 	stw	r6,-8(fp)
    41d0:	e1ffff05 	stb	r7,-4(fp)
    {
      _ForwardIterator __cur = __result;
    41d4:	e0bffe17 	ldw	r2,-8(fp)
    41d8:	e0bffb15 	stw	r2,-20(fp)
      try
	{
	  for (; __first != __last; ++__first, ++__cur)
    41dc:	00000a06 	br	4208 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type+0x54>
	    std::_Construct(&*__cur, *__first);
    41e0:	e13ffc04 	addi	r4,fp,-16
    41e4:	000418c0 	call	418c <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    41e8:	100b883a 	mov	r5,r2
    41ec:	e13ffb17 	ldw	r4,-20(fp)
    41f0:	00032100 	call	3210 <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_>
			     __false_type)
    {
      _ForwardIterator __cur = __result;
      try
	{
	  for (; __first != __last; ++__first, ++__cur)
    41f4:	e13ffc04 	addi	r4,fp,-16
    41f8:	00041540 	call	4154 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEppEv>
    41fc:	e0bffb17 	ldw	r2,-20(fp)
    4200:	10800404 	addi	r2,r2,16
    4204:	e0bffb15 	stw	r2,-20(fp)
    4208:	e13ffc04 	addi	r4,fp,-16
    420c:	e17ffd04 	addi	r5,fp,-12
    4210:	00041040 	call	4104 <_ZN9__gnu_cxxneIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    4214:	10803fcc 	andi	r2,r2,255
    4218:	1004c03a 	cmpne	r2,r2,zero
    421c:	103ff01e 	bne	r2,zero,41e0 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type+0x2c>
	    std::_Construct(&*__cur, *__first);
	  return __cur;
    4220:	e0bffb17 	ldw	r2,-20(fp)
	}
      catch(...)
	{
	  std::_Destroy(__result, __cur);
	  __throw_exception_again;
    4224:	e037883a 	mov	sp,fp
    4228:	dfc00117 	ldw	ra,4(sp)
    422c:	df000017 	ldw	fp,0(sp)
    4230:	dec00204 	addi	sp,sp,8
    4234:	f800283a 	ret

00004238 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    4238:	defffa04 	addi	sp,sp,-24
    423c:	dfc00515 	stw	ra,20(sp)
    4240:	df000415 	stw	fp,16(sp)
    4244:	df000404 	addi	fp,sp,16
    4248:	e13ffc15 	stw	r4,-16(fp)
    424c:	e17ffd15 	stw	r5,-12(fp)
    4250:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    4254:	e13ffc17 	ldw	r4,-16(fp)
    4258:	e17ffd17 	ldw	r5,-12(fp)
    425c:	e1bffe17 	ldw	r6,-8(fp)
    4260:	e1ffff03 	ldbu	r7,-4(fp)
    4264:	00041b40 	call	41b4 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type>
    4268:	e037883a 	mov	sp,fp
    426c:	dfc00117 	ldw	ra,4(sp)
    4270:	df000017 	ldw	fp,0(sp)
    4274:	dec00204 	addi	sp,sp,8
    4278:	f800283a 	ret

0000427c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    427c:	defffa04 	addi	sp,sp,-24
    4280:	dfc00515 	stw	ra,20(sp)
    4284:	df000415 	stw	fp,16(sp)
    4288:	df000404 	addi	fp,sp,16
    428c:	e13ffc15 	stw	r4,-16(fp)
    4290:	e17ffd15 	stw	r5,-12(fp)
    4294:	e1bffe15 	stw	r6,-8(fp)
    4298:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    429c:	e13ffc17 	ldw	r4,-16(fp)
    42a0:	e17ffd17 	ldw	r5,-12(fp)
    42a4:	e1bffe17 	ldw	r6,-8(fp)
    42a8:	00042380 	call	4238 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
    42ac:	e037883a 	mov	sp,fp
    42b0:	dfc00117 	ldw	ra,4(sp)
    42b4:	df000017 	ldw	fp,0(sp)
    42b8:	dec00204 	addi	sp,sp,8
    42bc:	f800283a 	ret

000042c0 <_ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_>:
  template<bool _BoolType>
    struct __copy<_BoolType, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        copy(_II __first, _II __last, _OI __result)
    42c0:	defffb04 	addi	sp,sp,-20
    42c4:	df000415 	stw	fp,16(sp)
    42c8:	df000404 	addi	fp,sp,16
    42cc:	e13ffd15 	stw	r4,-12(fp)
    42d0:	e17ffe15 	stw	r5,-8(fp)
    42d4:	e1bfff15 	stw	r6,-4(fp)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    42d8:	e0fffe17 	ldw	r3,-8(fp)
    42dc:	e0bffd17 	ldw	r2,-12(fp)
    42e0:	1885c83a 	sub	r2,r3,r2
    42e4:	1005d13a 	srai	r2,r2,4
    42e8:	e0bffc15 	stw	r2,-16(fp)
    42ec:	00001306 	br	433c <_ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_+0x7c>
	    {
	      *__result = *__first;
    42f0:	e13fff17 	ldw	r4,-4(fp)
    42f4:	e0fffd17 	ldw	r3,-12(fp)
    42f8:	18800017 	ldw	r2,0(r3)
    42fc:	20800015 	stw	r2,0(r4)
    4300:	18800117 	ldw	r2,4(r3)
    4304:	20800115 	stw	r2,4(r4)
    4308:	18800217 	ldw	r2,8(r3)
    430c:	20800215 	stw	r2,8(r4)
    4310:	18800317 	ldw	r2,12(r3)
    4314:	20800315 	stw	r2,12(r4)
	      ++__first;
    4318:	e0bffd17 	ldw	r2,-12(fp)
    431c:	10800404 	addi	r2,r2,16
    4320:	e0bffd15 	stw	r2,-12(fp)
	      ++__result;
    4324:	e0bfff17 	ldw	r2,-4(fp)
    4328:	10800404 	addi	r2,r2,16
    432c:	e0bfff15 	stw	r2,-4(fp)
      template<typename _II, typename _OI>
        static _OI
        copy(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    4330:	e0bffc17 	ldw	r2,-16(fp)
    4334:	10bfffc4 	addi	r2,r2,-1
    4338:	e0bffc15 	stw	r2,-16(fp)
    433c:	e0bffc17 	ldw	r2,-16(fp)
    4340:	10800048 	cmpgei	r2,r2,1
    4344:	103fea1e 	bne	r2,zero,42f0 <_ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_+0x30>
	    {
	      *__result = *__first;
	      ++__first;
	      ++__result;
	    }
	  return __result;
    4348:	e0bfff17 	ldw	r2,-4(fp)
    434c:	e037883a 	mov	sp,fp
    4350:	df000017 	ldw	fp,0(sp)
    4354:	dec00104 	addi	sp,sp,4
    4358:	f800283a 	ret

0000435c <_ZSt10__copy_auxIPK6MyRectPS0_ET0_T_S5_S4_>:
	}
    };

  template<typename _II, typename _OI>
    inline _OI
    __copy_aux(_II __first, _II __last, _OI __result)
    435c:	defffa04 	addi	sp,sp,-24
    4360:	dfc00515 	stw	ra,20(sp)
    4364:	df000415 	stw	fp,16(sp)
    4368:	df000404 	addi	fp,sp,16
    436c:	e13ffd15 	stw	r4,-12(fp)
    4370:	e17ffe15 	stw	r5,-8(fp)
    4374:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueTypeI>::__value
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
    4378:	e03ffc05 	stb	zero,-16(fp)

      return std::__copy<__simple, _Category>::copy(__first, __last, __result);
    437c:	e13ffd17 	ldw	r4,-12(fp)
    4380:	e17ffe17 	ldw	r5,-8(fp)
    4384:	e1bfff17 	ldw	r6,-4(fp)
    4388:	00042c00 	call	42c0 <_ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_>
    438c:	e037883a 	mov	sp,fp
    4390:	dfc00117 	ldw	ra,4(sp)
    4394:	df000017 	ldw	fp,0(sp)
    4398:	dec00204 	addi	sp,sp,8
    439c:	f800283a 	ret

000043a0 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEENS3_IPS4_S9_EEEET0_T_SE_SD_>:
  template<>
    struct __copy_normal<true, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    43a0:	defff704 	addi	sp,sp,-36
    43a4:	dfc00815 	stw	ra,32(sp)
    43a8:	df000715 	stw	fp,28(sp)
    43ac:	dc400615 	stw	r17,24(sp)
    43b0:	dc000515 	stw	r16,20(sp)
    43b4:	df000504 	addi	fp,sp,20
    43b8:	e13ffd15 	stw	r4,-12(fp)
    43bc:	e17ffe15 	stw	r5,-8(fp)
    43c0:	e1bfff15 	stw	r6,-4(fp)
        { return _OI(std::__copy_aux(__first.base(), __last.base(),
				     __result.base())); }
    43c4:	e13ffd04 	addi	r4,fp,-12
    43c8:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    43cc:	14400017 	ldw	r17,0(r2)
    43d0:	e13ffe04 	addi	r4,fp,-8
    43d4:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    43d8:	14000017 	ldw	r16,0(r2)
    43dc:	e13fff04 	addi	r4,fp,-4
    43e0:	0002f700 	call	2f70 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    43e4:	11800017 	ldw	r6,0(r2)
    43e8:	8809883a 	mov	r4,r17
    43ec:	800b883a 	mov	r5,r16
    43f0:	000435c0 	call	435c <_ZSt10__copy_auxIPK6MyRectPS0_ET0_T_S5_S4_>
    43f4:	e0bffb15 	stw	r2,-20(fp)
    43f8:	e13ffc04 	addi	r4,fp,-16
    43fc:	e17ffb04 	addi	r5,fp,-20
    4400:	0002eb00 	call	2eb0 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    4404:	e0bffc17 	ldw	r2,-16(fp)
    4408:	e037883a 	mov	sp,fp
    440c:	dfc00317 	ldw	ra,12(sp)
    4410:	df000217 	ldw	fp,8(sp)
    4414:	dc400117 	ldw	r17,4(sp)
    4418:	dc000017 	ldw	r16,0(sp)
    441c:	dec00404 	addi	sp,sp,16
    4420:	f800283a 	ret

00004424 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    4424:	defffa04 	addi	sp,sp,-24
    4428:	dfc00515 	stw	ra,20(sp)
    442c:	df000415 	stw	fp,16(sp)
    4430:	df000404 	addi	fp,sp,16
    4434:	e13ffd15 	stw	r4,-12(fp)
    4438:	e17ffe15 	stw	r5,-8(fp)
    443c:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    4440:	00800044 	movi	r2,1
    4444:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    4448:	00800044 	movi	r2,1
    444c:	e0bffc05 	stb	r2,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    4450:	e13ffd17 	ldw	r4,-12(fp)
    4454:	e17ffe17 	ldw	r5,-8(fp)
    4458:	e1bfff17 	ldw	r6,-4(fp)
    445c:	00043a00 	call	43a0 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEENS3_IPS4_S9_EEEET0_T_SE_SD_>
    4460:	e037883a 	mov	sp,fp
    4464:	dfc00117 	ldw	ra,4(sp)
    4468:	df000017 	ldw	fp,0(sp)
    446c:	dec00204 	addi	sp,sp,8
    4470:	f800283a 	ret

00004474 <_ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>:
  template<>
    struct __copy_normal<true, false>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    4474:	defffa04 	addi	sp,sp,-24
    4478:	dfc00515 	stw	ra,20(sp)
    447c:	df000415 	stw	fp,16(sp)
    4480:	dc000315 	stw	r16,12(sp)
    4484:	df000304 	addi	fp,sp,12
    4488:	e13ffd15 	stw	r4,-12(fp)
    448c:	e17ffe15 	stw	r5,-8(fp)
    4490:	e1bfff15 	stw	r6,-4(fp)
        { return std::__copy_aux(__first.base(), __last.base(), __result); }
    4494:	e13ffd04 	addi	r4,fp,-12
    4498:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    449c:	14000017 	ldw	r16,0(r2)
    44a0:	e13ffe04 	addi	r4,fp,-8
    44a4:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    44a8:	11400017 	ldw	r5,0(r2)
    44ac:	8009883a 	mov	r4,r16
    44b0:	e1bfff17 	ldw	r6,-4(fp)
    44b4:	000435c0 	call	435c <_ZSt10__copy_auxIPK6MyRectPS0_ET0_T_S5_S4_>
    44b8:	e037883a 	mov	sp,fp
    44bc:	dfc00217 	ldw	ra,8(sp)
    44c0:	df000117 	ldw	fp,4(sp)
    44c4:	dc000017 	ldw	r16,0(sp)
    44c8:	dec00304 	addi	sp,sp,12
    44cc:	f800283a 	ret

000044d0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    44d0:	defffa04 	addi	sp,sp,-24
    44d4:	dfc00515 	stw	ra,20(sp)
    44d8:	df000415 	stw	fp,16(sp)
    44dc:	df000404 	addi	fp,sp,16
    44e0:	e13ffd15 	stw	r4,-12(fp)
    44e4:	e17ffe15 	stw	r5,-8(fp)
    44e8:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    44ec:	00800044 	movi	r2,1
    44f0:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    44f4:	e03ffc05 	stb	zero,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    44f8:	e13ffd17 	ldw	r4,-12(fp)
    44fc:	e17ffe17 	ldw	r5,-8(fp)
    4500:	e1bfff17 	ldw	r6,-4(fp)
    4504:	00044740 	call	4474 <_ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>
    4508:	e037883a 	mov	sp,fp
    450c:	dfc00117 	ldw	ra,4(sp)
    4510:	df000017 	ldw	fp,0(sp)
    4514:	dec00204 	addi	sp,sp,8
    4518:	f800283a 	ret

0000451c <_ZNSt6vectorI6MyRectSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_mT_SA_>:
       *  @endif
       */
      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
    451c:	defff804 	addi	sp,sp,-32
    4520:	dfc00715 	stw	ra,28(sp)
    4524:	df000615 	stw	fp,24(sp)
    4528:	df000604 	addi	fp,sp,24
    452c:	e13ffc15 	stw	r4,-16(fp)
    4530:	e17ffd15 	stw	r5,-12(fp)
    4534:	e1bffe15 	stw	r6,-8(fp)
    4538:	e1ffff15 	stw	r7,-4(fp)
        {
	  pointer __result = this->_M_allocate(__n);
    453c:	e13ffc17 	ldw	r4,-16(fp)
    4540:	e17ffd17 	ldw	r5,-12(fp)
    4544:	00036ec0 	call	36ec <_ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm>
    4548:	e0bffa15 	stw	r2,-24(fp)
	  try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
    454c:	e13ffc17 	ldw	r4,-16(fp)
    4550:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    4554:	100b883a 	mov	r5,r2
    4558:	e13ffb04 	addi	r4,fp,-20
    455c:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    4560:	e1fffb04 	addi	r7,fp,-20
    4564:	e13ffe17 	ldw	r4,-8(fp)
    4568:	e17fff17 	ldw	r5,-4(fp)
    456c:	e1bffa17 	ldw	r6,-24(fp)
    4570:	000427c0 	call	427c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_SaIT1_E>
    4574:	e13ffb04 	addi	r4,fp,-20
    4578:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
					  _M_get_Tp_allocator());
	      return __result;
    457c:	e0bffa17 	ldw	r2,-24(fp)
	    }
	  catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
    4580:	e037883a 	mov	sp,fp
    4584:	dfc00117 	ldw	ra,4(sp)
    4588:	df000017 	ldw	fp,0(sp)
    458c:	dec00204 	addi	sp,sp,8
    4590:	f800283a 	ret

00004594 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_>:
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    4594:	defff004 	addi	sp,sp,-64
    4598:	dfc00f15 	stw	ra,60(sp)
    459c:	df000e15 	stw	fp,56(sp)
    45a0:	dc800d15 	stw	r18,52(sp)
    45a4:	dc400c15 	stw	r17,48(sp)
    45a8:	dc000b15 	stw	r16,44(sp)
    45ac:	df000b04 	addi	fp,sp,44
    45b0:	e13ffe15 	stw	r4,-8(fp)
    45b4:	e17fff15 	stw	r5,-4(fp)
    {
      if (&__x != this)
    45b8:	e0ffff17 	ldw	r3,-4(fp)
    45bc:	e0bffe17 	ldw	r2,-8(fp)
    45c0:	18809326 	beq	r3,r2,4810 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x27c>
	{
	  const size_type __xlen = __x.size();
    45c4:	e13fff17 	ldw	r4,-4(fp)
    45c8:	00030800 	call	3080 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    45cc:	e0bff615 	stw	r2,-40(fp)
	  if (__xlen > capacity())
    45d0:	e13ffe17 	ldw	r4,-8(fp)
    45d4:	00040ac0 	call	40ac <_ZNKSt6vectorI6MyRectSaIS0_EE8capacityEv>
    45d8:	1007883a 	mov	r3,r2
    45dc:	e0bff617 	ldw	r2,-40(fp)
    45e0:	1885803a 	cmpltu	r2,r3,r2
    45e4:	10803fcc 	andi	r2,r2,255
    45e8:	1005003a 	cmpeq	r2,r2,zero
    45ec:	1000311e 	bne	r2,zero,46b4 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x120>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
    45f0:	e13fff17 	ldw	r4,-4(fp)
    45f4:	0002e6c0 	call	2e6c <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    45f8:	1021883a 	mov	r16,r2
    45fc:	e13fff17 	ldw	r4,-4(fp)
    4600:	0002e280 	call	2e28 <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    4604:	100f883a 	mov	r7,r2
    4608:	e13ffe17 	ldw	r4,-8(fp)
    460c:	e17ff617 	ldw	r5,-40(fp)
    4610:	800d883a 	mov	r6,r16
    4614:	000451c0 	call	451c <_ZNSt6vectorI6MyRectSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_mT_SA_>
    4618:	e0bff515 	stw	r2,-44(fp)
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    461c:	e0bffe17 	ldw	r2,-8(fp)
    4620:	14000017 	ldw	r16,0(r2)
    4624:	e0bffe17 	ldw	r2,-8(fp)
    4628:	14400117 	ldw	r17,4(r2)
    462c:	e13ffe17 	ldw	r4,-8(fp)
    4630:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    4634:	100b883a 	mov	r5,r2
    4638:	e13ffc44 	addi	r4,fp,-15
    463c:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    4640:	e1bffc44 	addi	r6,fp,-15
    4644:	8009883a 	mov	r4,r16
    4648:	880b883a 	mov	r5,r17
    464c:	00031ac0 	call	31ac <_ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E>
    4650:	e13ffc44 	addi	r4,fp,-15
    4654:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
    4658:	e13ffe17 	ldw	r4,-8(fp)
    465c:	e0bffe17 	ldw	r2,-8(fp)
    4660:	11400017 	ldw	r5,0(r2)
    4664:	e0bffe17 	ldw	r2,-8(fp)
    4668:	10800217 	ldw	r2,8(r2)
    466c:	1007883a 	mov	r3,r2
    4670:	e0bffe17 	ldw	r2,-8(fp)
    4674:	10800017 	ldw	r2,0(r2)
    4678:	1885c83a 	sub	r2,r3,r2
    467c:	1005d13a 	srai	r2,r2,4
    4680:	100d883a 	mov	r6,r2
    4684:	00037640 	call	3764 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
    4688:	e0fffe17 	ldw	r3,-8(fp)
    468c:	e0bff517 	ldw	r2,-44(fp)
    4690:	18800015 	stw	r2,0(r3)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
    4694:	e0bffe17 	ldw	r2,-8(fp)
    4698:	10c00017 	ldw	r3,0(r2)
    469c:	e0bff617 	ldw	r2,-40(fp)
    46a0:	1004913a 	slli	r2,r2,4
    46a4:	1887883a 	add	r3,r3,r2
    46a8:	e0bffe17 	ldw	r2,-8(fp)
    46ac:	10c00215 	stw	r3,8(r2)
    46b0:	00005006 	br	47f4 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x260>
	    }
	  else if (size() >= __xlen)
    46b4:	e13ffe17 	ldw	r4,-8(fp)
    46b8:	00030800 	call	3080 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    46bc:	1007883a 	mov	r3,r2
    46c0:	e0bff617 	ldw	r2,-40(fp)
    46c4:	1885403a 	cmpgeu	r2,r3,r2
    46c8:	10803fcc 	andi	r2,r2,255
    46cc:	1005003a 	cmpeq	r2,r2,zero
    46d0:	10001c1e 	bne	r2,zero,4744 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x1b0>
	    {
	      iterator __i(std::copy(__x.begin(), __x.end(), begin()));
    46d4:	e13fff17 	ldw	r4,-4(fp)
    46d8:	0002e6c0 	call	2e6c <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    46dc:	1021883a 	mov	r16,r2
    46e0:	e13fff17 	ldw	r4,-4(fp)
    46e4:	0002e280 	call	2e28 <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    46e8:	1023883a 	mov	r17,r2
    46ec:	e13ffe17 	ldw	r4,-8(fp)
    46f0:	0002fcc0 	call	2fcc <_ZNSt6vectorI6MyRectSaIS0_EE5beginEv>
    46f4:	100d883a 	mov	r6,r2
    46f8:	8009883a 	mov	r4,r16
    46fc:	880b883a 	mov	r5,r17
    4700:	00044240 	call	4424 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_>
    4704:	e0bffd15 	stw	r2,-12(fp)
	      std::_Destroy(__i, end(), _M_get_Tp_allocator());
    4708:	e13ffe17 	ldw	r4,-8(fp)
    470c:	0002ee40 	call	2ee4 <_ZNSt6vectorI6MyRectSaIS0_EE3endEv>
    4710:	1021883a 	mov	r16,r2
    4714:	e13ffe17 	ldw	r4,-8(fp)
    4718:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    471c:	100b883a 	mov	r5,r2
    4720:	e13ffc04 	addi	r4,fp,-16
    4724:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    4728:	e1bffc04 	addi	r6,fp,-16
    472c:	e13ffd17 	ldw	r4,-12(fp)
    4730:	800b883a 	mov	r5,r16
    4734:	000364c0 	call	364c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES2_EvT_S8_SaIT0_E>
    4738:	e13ffc04 	addi	r4,fp,-16
    473c:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
    4740:	00002c06 	br	47f4 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x260>
	    }
	  else
	    {
	      std::copy(__x.begin(), __x.begin() + size(),
    4744:	e13fff17 	ldw	r4,-4(fp)
    4748:	0002e6c0 	call	2e6c <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    474c:	1021883a 	mov	r16,r2
    4750:	e13fff17 	ldw	r4,-4(fp)
    4754:	0002e6c0 	call	2e6c <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    4758:	e0bffb15 	stw	r2,-20(fp)
    475c:	e13ffe17 	ldw	r4,-8(fp)
    4760:	00030800 	call	3080 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    4764:	e0bffa15 	stw	r2,-24(fp)
    4768:	e13ffb04 	addi	r4,fp,-20
    476c:	e17ffa04 	addi	r5,fp,-24
    4770:	0003fa40 	call	3fa4 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEplERKl>
    4774:	100b883a 	mov	r5,r2
    4778:	e0bffe17 	ldw	r2,-8(fp)
    477c:	11800017 	ldw	r6,0(r2)
    4780:	8009883a 	mov	r4,r16
    4784:	00044d00 	call	44d0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x.begin() + size(),
    4788:	e13fff17 	ldw	r4,-4(fp)
    478c:	0002e6c0 	call	2e6c <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    4790:	e0bff915 	stw	r2,-28(fp)
    4794:	e13ffe17 	ldw	r4,-8(fp)
    4798:	00030800 	call	3080 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    479c:	e0bff815 	stw	r2,-32(fp)
    47a0:	e13ff904 	addi	r4,fp,-28
    47a4:	e17ff804 	addi	r5,fp,-32
    47a8:	0003fa40 	call	3fa4 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEplERKl>
    47ac:	1021883a 	mov	r16,r2
    47b0:	e13fff17 	ldw	r4,-4(fp)
    47b4:	0002e280 	call	2e28 <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    47b8:	1023883a 	mov	r17,r2
    47bc:	e0bffe17 	ldw	r2,-8(fp)
    47c0:	14800117 	ldw	r18,4(r2)
    47c4:	e13ffe17 	ldw	r4,-8(fp)
    47c8:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    47cc:	100b883a 	mov	r5,r2
    47d0:	e13ff704 	addi	r4,fp,-36
    47d4:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    47d8:	e1fff704 	addi	r7,fp,-36
    47dc:	8009883a 	mov	r4,r16
    47e0:	880b883a 	mov	r5,r17
    47e4:	900d883a 	mov	r6,r18
    47e8:	000427c0 	call	427c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_SaIT1_E>
    47ec:	e13ff704 	addi	r4,fp,-36
    47f0:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
					  __x.end(), this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
    47f4:	e0bffe17 	ldw	r2,-8(fp)
    47f8:	10c00017 	ldw	r3,0(r2)
    47fc:	e0bff617 	ldw	r2,-40(fp)
    4800:	1004913a 	slli	r2,r2,4
    4804:	1887883a 	add	r3,r3,r2
    4808:	e0bffe17 	ldw	r2,-8(fp)
    480c:	10c00115 	stw	r3,4(r2)
	}
      return *this;
    4810:	e0bffe17 	ldw	r2,-8(fp)
    4814:	e037883a 	mov	sp,fp
    4818:	dfc00417 	ldw	ra,16(sp)
    481c:	df000317 	ldw	fp,12(sp)
    4820:	dc800217 	ldw	r18,8(sp)
    4824:	dc400117 	ldw	r17,4(sp)
    4828:	dc000017 	ldw	r16,0(sp)
    482c:	dec00504 	addi	sp,sp,20
    4830:	f800283a 	ret

00004834 <_Z5myMaxii>:
#include "haar.h"

int partition(std::vector<MyRect>& _vec, std::vector<int>& labels, float eps);

int myMax(int a, int b)
    4834:	defffc04 	addi	sp,sp,-16
    4838:	df000315 	stw	fp,12(sp)
    483c:	df000304 	addi	fp,sp,12
    4840:	e13ffd15 	stw	r4,-12(fp)
    4844:	e17ffe15 	stw	r5,-8(fp)
{
  if (a >= b)
    4848:	e0fffd17 	ldw	r3,-12(fp)
    484c:	e0bffe17 	ldw	r2,-8(fp)
    4850:	18800316 	blt	r3,r2,4860 <_Z5myMaxii+0x2c>
    return a;
    4854:	e0bffd17 	ldw	r2,-12(fp)
    4858:	e0bfff15 	stw	r2,-4(fp)
    485c:	00000206 	br	4868 <_Z5myMaxii+0x34>
  else
    return b;
    4860:	e0bffe17 	ldw	r2,-8(fp)
    4864:	e0bfff15 	stw	r2,-4(fp)
    4868:	e0bfff17 	ldw	r2,-4(fp)
}
    486c:	e037883a 	mov	sp,fp
    4870:	df000017 	ldw	fp,0(sp)
    4874:	dec00104 	addi	sp,sp,4
    4878:	f800283a 	ret

0000487c <_Z5myMinii>:

int myMin(int a, int b)
    487c:	defffc04 	addi	sp,sp,-16
    4880:	df000315 	stw	fp,12(sp)
    4884:	df000304 	addi	fp,sp,12
    4888:	e13ffd15 	stw	r4,-12(fp)
    488c:	e17ffe15 	stw	r5,-8(fp)
{
  if (a <= b)
    4890:	e0fffd17 	ldw	r3,-12(fp)
    4894:	e0bffe17 	ldw	r2,-8(fp)
    4898:	10c00316 	blt	r2,r3,48a8 <_Z5myMinii+0x2c>
    return a;
    489c:	e0bffd17 	ldw	r2,-12(fp)
    48a0:	e0bfff15 	stw	r2,-4(fp)
    48a4:	00000206 	br	48b0 <_Z5myMinii+0x34>
  else
    return b;
    48a8:	e0bffe17 	ldw	r2,-8(fp)
    48ac:	e0bfff15 	stw	r2,-4(fp)
    48b0:	e0bfff17 	ldw	r2,-4(fp)
}
    48b4:	e037883a 	mov	sp,fp
    48b8:	df000017 	ldw	fp,0(sp)
    48bc:	dec00104 	addi	sp,sp,4
    48c0:	f800283a 	ret

000048c4 <_Z5myAbsi>:
inline  int  myRound( float value )
{
  return (int)(value + (value >= 0 ? 0.5 : -0.5));
}

int myAbs(int n)
    48c4:	defffd04 	addi	sp,sp,-12
    48c8:	df000215 	stw	fp,8(sp)
    48cc:	df000204 	addi	fp,sp,8
    48d0:	e13ffe15 	stw	r4,-8(fp)
{
  if (n >= 0)
    48d4:	e0bffe17 	ldw	r2,-8(fp)
    48d8:	1004803a 	cmplt	r2,r2,zero
    48dc:	1000031e 	bne	r2,zero,48ec <_Z5myAbsi+0x28>
    return n;
    48e0:	e0bffe17 	ldw	r2,-8(fp)
    48e4:	e0bfff15 	stw	r2,-4(fp)
    48e8:	00000306 	br	48f8 <_Z5myAbsi+0x34>
  else
    return -n;
    48ec:	e0bffe17 	ldw	r2,-8(fp)
    48f0:	0085c83a 	sub	r2,zero,r2
    48f4:	e0bfff15 	stw	r2,-4(fp)
    48f8:	e0bfff17 	ldw	r2,-4(fp)
}
    48fc:	e037883a 	mov	sp,fp
    4900:	df000017 	ldw	fp,0(sp)
    4904:	dec00104 	addi	sp,sp,4
    4908:	f800283a 	ret

0000490c <_Z9predicatefR6MyRectS0_>:

int predicate(float eps, MyRect& r1, MyRect& r2)
    490c:	defff404 	addi	sp,sp,-48
    4910:	dfc00b15 	stw	ra,44(sp)
    4914:	df000a15 	stw	fp,40(sp)
    4918:	dc000915 	stw	r16,36(sp)
    491c:	df000904 	addi	fp,sp,36
    4920:	e13ff815 	stw	r4,-32(fp)
    4924:	e17ff915 	stw	r5,-28(fp)
    4928:	e1bffa15 	stw	r6,-24(fp)
{
  float delta = eps*(myMin(r1.width, r2.width) + myMin(r1.height, r2.height))*0.5;
    492c:	e0bff917 	ldw	r2,-28(fp)
    4930:	11000217 	ldw	r4,8(r2)
    4934:	e0bffa17 	ldw	r2,-24(fp)
    4938:	11400217 	ldw	r5,8(r2)
    493c:	000487c0 	call	487c <_Z5myMinii>
    4940:	1021883a 	mov	r16,r2
    4944:	e0bff917 	ldw	r2,-28(fp)
    4948:	11000317 	ldw	r4,12(r2)
    494c:	e0bffa17 	ldw	r2,-24(fp)
    4950:	11400317 	ldw	r5,12(r2)
    4954:	000487c0 	call	487c <_Z5myMinii>
    4958:	8089883a 	add	r4,r16,r2
    495c:	000fc080 	call	fc08 <__floatsisf>
    4960:	1009883a 	mov	r4,r2
    4964:	e17ff817 	ldw	r5,-32(fp)
    4968:	000f7c40 	call	f7c4 <__mulsf3>
    496c:	1009883a 	mov	r4,r2
    4970:	014fc034 	movhi	r5,16128
    4974:	000f7c40 	call	f7c4 <__mulsf3>
    4978:	e0bff715 	stw	r2,-36(fp)
  return myAbs(r1.x - r2.x) <= delta &&
    myAbs(r1.y - r2.y) <= delta &&
    myAbs(r1.x + r1.width - r2.x - r2.width) <= delta &&
    myAbs(r1.y + r1.height - r2.y - r2.height) <= delta;
    497c:	e0bff917 	ldw	r2,-28(fp)
    4980:	10c00017 	ldw	r3,0(r2)
    4984:	e0bffa17 	ldw	r2,-24(fp)
    4988:	10800017 	ldw	r2,0(r2)
    498c:	1889c83a 	sub	r4,r3,r2
    4990:	00048c40 	call	48c4 <_Z5myAbsi>
    4994:	1009883a 	mov	r4,r2
    4998:	000fc080 	call	fc08 <__floatsisf>
    499c:	e03ffe05 	stb	zero,-8(fp)
    49a0:	1009883a 	mov	r4,r2
    49a4:	e17ff717 	ldw	r5,-36(fp)
    49a8:	000fb900 	call	fb90 <__lesf2>
    49ac:	10800050 	cmplti	r2,r2,1
    49b0:	1000011e 	bne	r2,zero,49b8 <_Z9predicatefR6MyRectS0_+0xac>
    49b4:	00000206 	br	49c0 <_Z9predicatefR6MyRectS0_+0xb4>
    49b8:	00800044 	movi	r2,1
    49bc:	e0bffe05 	stb	r2,-8(fp)
    49c0:	e0fffe03 	ldbu	r3,-8(fp)
    49c4:	1880005c 	xori	r2,r3,1
    49c8:	10803fcc 	andi	r2,r2,255
    49cc:	1004c03a 	cmpne	r2,r2,zero
    49d0:	1000511e 	bne	r2,zero,4b18 <_Z9predicatefR6MyRectS0_+0x20c>
    49d4:	e0bff917 	ldw	r2,-28(fp)
    49d8:	10c00117 	ldw	r3,4(r2)
    49dc:	e0bffa17 	ldw	r2,-24(fp)
    49e0:	10800117 	ldw	r2,4(r2)
    49e4:	1889c83a 	sub	r4,r3,r2
    49e8:	00048c40 	call	48c4 <_Z5myAbsi>
    49ec:	1009883a 	mov	r4,r2
    49f0:	000fc080 	call	fc08 <__floatsisf>
    49f4:	e03ffd05 	stb	zero,-12(fp)
    49f8:	1009883a 	mov	r4,r2
    49fc:	e17ff717 	ldw	r5,-36(fp)
    4a00:	000fb900 	call	fb90 <__lesf2>
    4a04:	10800050 	cmplti	r2,r2,1
    4a08:	1000011e 	bne	r2,zero,4a10 <_Z9predicatefR6MyRectS0_+0x104>
    4a0c:	00000206 	br	4a18 <_Z9predicatefR6MyRectS0_+0x10c>
    4a10:	00800044 	movi	r2,1
    4a14:	e0bffd05 	stb	r2,-12(fp)
    4a18:	e0fffd03 	ldbu	r3,-12(fp)
    4a1c:	1880005c 	xori	r2,r3,1
    4a20:	10803fcc 	andi	r2,r2,255
    4a24:	1004c03a 	cmpne	r2,r2,zero
    4a28:	10003b1e 	bne	r2,zero,4b18 <_Z9predicatefR6MyRectS0_+0x20c>
    4a2c:	e0bff917 	ldw	r2,-28(fp)
    4a30:	10c00017 	ldw	r3,0(r2)
    4a34:	e0bff917 	ldw	r2,-28(fp)
    4a38:	10800217 	ldw	r2,8(r2)
    4a3c:	1887883a 	add	r3,r3,r2
    4a40:	e0bffa17 	ldw	r2,-24(fp)
    4a44:	10800017 	ldw	r2,0(r2)
    4a48:	1887c83a 	sub	r3,r3,r2
    4a4c:	e0bffa17 	ldw	r2,-24(fp)
    4a50:	10800217 	ldw	r2,8(r2)
    4a54:	1889c83a 	sub	r4,r3,r2
    4a58:	00048c40 	call	48c4 <_Z5myAbsi>
    4a5c:	1009883a 	mov	r4,r2
    4a60:	000fc080 	call	fc08 <__floatsisf>
    4a64:	e03ffc05 	stb	zero,-16(fp)
    4a68:	1009883a 	mov	r4,r2
    4a6c:	e17ff717 	ldw	r5,-36(fp)
    4a70:	000fb900 	call	fb90 <__lesf2>
    4a74:	10800050 	cmplti	r2,r2,1
    4a78:	1000011e 	bne	r2,zero,4a80 <_Z9predicatefR6MyRectS0_+0x174>
    4a7c:	00000206 	br	4a88 <_Z9predicatefR6MyRectS0_+0x17c>
    4a80:	00800044 	movi	r2,1
    4a84:	e0bffc05 	stb	r2,-16(fp)
    4a88:	e0fffc03 	ldbu	r3,-16(fp)
    4a8c:	1880005c 	xori	r2,r3,1
    4a90:	10803fcc 	andi	r2,r2,255
    4a94:	1004c03a 	cmpne	r2,r2,zero
    4a98:	10001f1e 	bne	r2,zero,4b18 <_Z9predicatefR6MyRectS0_+0x20c>
    4a9c:	e0bff917 	ldw	r2,-28(fp)
    4aa0:	10c00117 	ldw	r3,4(r2)
    4aa4:	e0bff917 	ldw	r2,-28(fp)
    4aa8:	10800317 	ldw	r2,12(r2)
    4aac:	1887883a 	add	r3,r3,r2
    4ab0:	e0bffa17 	ldw	r2,-24(fp)
    4ab4:	10800117 	ldw	r2,4(r2)
    4ab8:	1887c83a 	sub	r3,r3,r2
    4abc:	e0bffa17 	ldw	r2,-24(fp)
    4ac0:	10800317 	ldw	r2,12(r2)
    4ac4:	1889c83a 	sub	r4,r3,r2
    4ac8:	00048c40 	call	48c4 <_Z5myAbsi>
    4acc:	1009883a 	mov	r4,r2
    4ad0:	000fc080 	call	fc08 <__floatsisf>
    4ad4:	e03ffb05 	stb	zero,-20(fp)
    4ad8:	1009883a 	mov	r4,r2
    4adc:	e17ff717 	ldw	r5,-36(fp)
    4ae0:	000fb900 	call	fb90 <__lesf2>
    4ae4:	10800050 	cmplti	r2,r2,1
    4ae8:	1000011e 	bne	r2,zero,4af0 <_Z9predicatefR6MyRectS0_+0x1e4>
    4aec:	00000206 	br	4af8 <_Z9predicatefR6MyRectS0_+0x1ec>
    4af0:	00800044 	movi	r2,1
    4af4:	e0bffb05 	stb	r2,-20(fp)
    4af8:	e0fffb03 	ldbu	r3,-20(fp)
    4afc:	1880005c 	xori	r2,r3,1
    4b00:	10803fcc 	andi	r2,r2,255
    4b04:	1004c03a 	cmpne	r2,r2,zero
    4b08:	1000031e 	bne	r2,zero,4b18 <_Z9predicatefR6MyRectS0_+0x20c>
    4b0c:	00800044 	movi	r2,1
    4b10:	e0bfff05 	stb	r2,-4(fp)
    4b14:	00000106 	br	4b1c <_Z9predicatefR6MyRectS0_+0x210>
    4b18:	e03fff05 	stb	zero,-4(fp)
    4b1c:	e0bfff03 	ldbu	r2,-4(fp)
}
    4b20:	e037883a 	mov	sp,fp
    4b24:	dfc00217 	ldw	ra,8(sp)
    4b28:	df000117 	ldw	fp,4(sp)
    4b2c:	dc000017 	ldw	r16,0(sp)
    4b30:	dec00304 	addi	sp,sp,12
    4b34:	f800283a 	ret

00004b38 <drawRectangle>:
  return nclasses;
}


/* draw white bounding boxes around detected faces */
void drawRectangle(MyImage* image, MyRect r)
    4b38:	defff904 	addi	sp,sp,-28
    4b3c:	df000315 	stw	fp,12(sp)
    4b40:	df000304 	addi	fp,sp,12
    4b44:	e13fff15 	stw	r4,-4(fp)
    4b48:	e1400115 	stw	r5,4(fp)
    4b4c:	e1800215 	stw	r6,8(fp)
    4b50:	e1c00315 	stw	r7,12(fp)
{
	int i;
	int col = image->width;
    4b54:	e0bfff17 	ldw	r2,-4(fp)
    4b58:	10800017 	ldw	r2,0(r2)
    4b5c:	e0bffd15 	stw	r2,-12(fp)

	for (i = 0; i < r.width; i++)
    4b60:	e03ffe15 	stw	zero,-8(fp)
    4b64:	00000f06 	br	4ba4 <drawRectangle+0x6c>
	{
      image->data[col*r.y + r.x + i] = 255;
    4b68:	e0bfff17 	ldw	r2,-4(fp)
    4b6c:	11000317 	ldw	r4,12(r2)
    4b70:	e0c00217 	ldw	r3,8(fp)
    4b74:	e0bffd17 	ldw	r2,-12(fp)
    4b78:	1887383a 	mul	r3,r3,r2
    4b7c:	e0800117 	ldw	r2,4(fp)
    4b80:	1887883a 	add	r3,r3,r2
    4b84:	e0bffe17 	ldw	r2,-8(fp)
    4b88:	1885883a 	add	r2,r3,r2
    4b8c:	2087883a 	add	r3,r4,r2
    4b90:	00bfffc4 	movi	r2,-1
    4b94:	18800005 	stb	r2,0(r3)
void drawRectangle(MyImage* image, MyRect r)
{
	int i;
	int col = image->width;

	for (i = 0; i < r.width; i++)
    4b98:	e0bffe17 	ldw	r2,-8(fp)
    4b9c:	10800044 	addi	r2,r2,1
    4ba0:	e0bffe15 	stw	r2,-8(fp)
    4ba4:	e0c00317 	ldw	r3,12(fp)
    4ba8:	e0bffe17 	ldw	r2,-8(fp)
    4bac:	10ffee16 	blt	r2,r3,4b68 <drawRectangle+0x30>
	{
      image->data[col*r.y + r.x + i] = 255;
	}
	for (i = 0; i < r.height; i++)
    4bb0:	e03ffe15 	stw	zero,-8(fp)
    4bb4:	00001106 	br	4bfc <drawRectangle+0xc4>
	{
		image->data[col*(r.y+i) + r.x + r.width] = 255;
    4bb8:	e0bfff17 	ldw	r2,-4(fp)
    4bbc:	11000317 	ldw	r4,12(r2)
    4bc0:	e0c00217 	ldw	r3,8(fp)
    4bc4:	e0bffe17 	ldw	r2,-8(fp)
    4bc8:	1887883a 	add	r3,r3,r2
    4bcc:	e0bffd17 	ldw	r2,-12(fp)
    4bd0:	1887383a 	mul	r3,r3,r2
    4bd4:	e0800117 	ldw	r2,4(fp)
    4bd8:	1887883a 	add	r3,r3,r2
    4bdc:	e0800317 	ldw	r2,12(fp)
    4be0:	1885883a 	add	r2,r3,r2
    4be4:	2087883a 	add	r3,r4,r2
    4be8:	00bfffc4 	movi	r2,-1
    4bec:	18800005 	stb	r2,0(r3)

	for (i = 0; i < r.width; i++)
	{
      image->data[col*r.y + r.x + i] = 255;
	}
	for (i = 0; i < r.height; i++)
    4bf0:	e0bffe17 	ldw	r2,-8(fp)
    4bf4:	10800044 	addi	r2,r2,1
    4bf8:	e0bffe15 	stw	r2,-8(fp)
    4bfc:	e0c00417 	ldw	r3,16(fp)
    4c00:	e0bffe17 	ldw	r2,-8(fp)
    4c04:	10ffec16 	blt	r2,r3,4bb8 <drawRectangle+0x80>
	{
		image->data[col*(r.y+i) + r.x + r.width] = 255;
	}
	for (i = 0; i < r.width; i++)
    4c08:	e03ffe15 	stw	zero,-8(fp)
    4c0c:	00001306 	br	4c5c <drawRectangle+0x124>
	{
		image->data[col*(r.y + r.height) + r.x + r.width - i] = 255;
    4c10:	e0bfff17 	ldw	r2,-4(fp)
    4c14:	11000317 	ldw	r4,12(r2)
    4c18:	e0c00217 	ldw	r3,8(fp)
    4c1c:	e0800417 	ldw	r2,16(fp)
    4c20:	1887883a 	add	r3,r3,r2
    4c24:	e0bffd17 	ldw	r2,-12(fp)
    4c28:	1887383a 	mul	r3,r3,r2
    4c2c:	e0800117 	ldw	r2,4(fp)
    4c30:	1887883a 	add	r3,r3,r2
    4c34:	e0800317 	ldw	r2,12(fp)
    4c38:	1887883a 	add	r3,r3,r2
    4c3c:	e0bffe17 	ldw	r2,-8(fp)
    4c40:	1885c83a 	sub	r2,r3,r2
    4c44:	2087883a 	add	r3,r4,r2
    4c48:	00bfffc4 	movi	r2,-1
    4c4c:	18800005 	stb	r2,0(r3)
	}
	for (i = 0; i < r.height; i++)
	{
		image->data[col*(r.y+i) + r.x + r.width] = 255;
	}
	for (i = 0; i < r.width; i++)
    4c50:	e0bffe17 	ldw	r2,-8(fp)
    4c54:	10800044 	addi	r2,r2,1
    4c58:	e0bffe15 	stw	r2,-8(fp)
    4c5c:	e0c00317 	ldw	r3,12(fp)
    4c60:	e0bffe17 	ldw	r2,-8(fp)
    4c64:	10ffea16 	blt	r2,r3,4c10 <drawRectangle+0xd8>
	{
		image->data[col*(r.y + r.height) + r.x + r.width - i] = 255;
	}
	for (i = 0; i < r.height; i++)
    4c68:	e03ffe15 	stw	zero,-8(fp)
    4c6c:	00001106 	br	4cb4 <drawRectangle+0x17c>
	{
		image->data[col*(r.y + r.height - i) + r.x] = 255;
    4c70:	e0bfff17 	ldw	r2,-4(fp)
    4c74:	11000317 	ldw	r4,12(r2)
    4c78:	e0c00217 	ldw	r3,8(fp)
    4c7c:	e0800417 	ldw	r2,16(fp)
    4c80:	1887883a 	add	r3,r3,r2
    4c84:	e0bffe17 	ldw	r2,-8(fp)
    4c88:	1887c83a 	sub	r3,r3,r2
    4c8c:	e0bffd17 	ldw	r2,-12(fp)
    4c90:	1887383a 	mul	r3,r3,r2
    4c94:	e0800117 	ldw	r2,4(fp)
    4c98:	1885883a 	add	r2,r3,r2
    4c9c:	2087883a 	add	r3,r4,r2
    4ca0:	00bfffc4 	movi	r2,-1
    4ca4:	18800005 	stb	r2,0(r3)
	}
	for (i = 0; i < r.width; i++)
	{
		image->data[col*(r.y + r.height) + r.x + r.width - i] = 255;
	}
	for (i = 0; i < r.height; i++)
    4ca8:	e0bffe17 	ldw	r2,-8(fp)
    4cac:	10800044 	addi	r2,r2,1
    4cb0:	e0bffe15 	stw	r2,-8(fp)
    4cb4:	e0c00417 	ldw	r3,16(fp)
    4cb8:	e0bffe17 	ldw	r2,-8(fp)
    4cbc:	10ffec16 	blt	r2,r3,4c70 <drawRectangle+0x138>
	{
		image->data[col*(r.y + r.height - i) + r.x] = 255;
	}

}
    4cc0:	e037883a 	mov	sp,fp
    4cc4:	df000017 	ldw	fp,0(sp)
    4cc8:	dec00404 	addi	sp,sp,16
    4ccc:	f800283a 	ret

00004cd0 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf>:
    }

}


int partition(std::vector<MyRect>& _vec, std::vector<int>& labels, float eps)
    4cd0:	deffcb04 	addi	sp,sp,-212
    4cd4:	dfc03415 	stw	ra,208(sp)
    4cd8:	df003315 	stw	fp,204(sp)
    4cdc:	ddc03215 	stw	r23,200(sp)
    4ce0:	dd803115 	stw	r22,196(sp)
    4ce4:	dd403015 	stw	r21,192(sp)
    4ce8:	dd002f15 	stw	r20,188(sp)
    4cec:	dcc02e15 	stw	r19,184(sp)
    4cf0:	dc802d15 	stw	r18,180(sp)
    4cf4:	dc402c15 	stw	r17,176(sp)
    4cf8:	dc002b15 	stw	r16,172(sp)
    4cfc:	df002b04 	addi	fp,sp,172
    4d00:	e13fe915 	stw	r4,-92(fp)
    4d04:	e17fea15 	stw	r5,-88(fp)
    4d08:	e1bfeb15 	stw	r6,-84(fp)
    4d0c:	00800074 	movhi	r2,1
    4d10:	10b9cd04 	addi	r2,r2,-6348
    4d14:	e0bff215 	stw	r2,-56(fp)
    4d18:	008000b4 	movhi	r2,2
    4d1c:	10b88884 	addi	r2,r2,-7646
    4d20:	e0bff315 	stw	r2,-52(fp)
    4d24:	e0bff404 	addi	r2,fp,-48
    4d28:	e0ffd504 	addi	r3,fp,-172
    4d2c:	10c00015 	stw	r3,0(r2)
    4d30:	00c00034 	movhi	r3,0
    4d34:	18d48904 	addi	r3,r3,21028
    4d38:	10c00115 	stw	r3,4(r2)
    4d3c:	16c00215 	stw	sp,8(r2)
    4d40:	e13fec04 	addi	r4,fp,-80
    4d44:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
{
  int i, j, N = (int)_vec.size();
    4d48:	e13fe917 	ldw	r4,-92(fp)
    4d4c:	00030800 	call	3080 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    4d50:	e0bfe115 	stw	r2,-124(fp)

  MyRect* vec = &_vec[0];
    4d54:	e13fe917 	ldw	r4,-92(fp)
    4d58:	000b883a 	mov	r5,zero
    4d5c:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    4d60:	e0bfe015 	stw	r2,-128(fp)

  const int PARENT=0;
    4d64:	e03fdf15 	stw	zero,-132(fp)
  const int RANK=1;
    4d68:	00800044 	movi	r2,1
    4d6c:	e0bfde15 	stw	r2,-136(fp)

  std::vector<int> _nodes(N*2);
    4d70:	e0bfe117 	ldw	r2,-124(fp)
    4d74:	1085883a 	add	r2,r2,r2
    4d78:	e0bffd15 	stw	r2,-12(fp)
    4d7c:	e03fe515 	stw	zero,-108(fp)
    4d80:	e13fe404 	addi	r4,fp,-112
    4d84:	00059fc0 	call	59fc <_ZNSaIiEC1Ev>
    4d88:	e13fe604 	addi	r4,fp,-104
    4d8c:	e1bfe504 	addi	r6,fp,-108
    4d90:	e1ffe404 	addi	r7,fp,-112
    4d94:	00800084 	movi	r2,2
    4d98:	e0bfed15 	stw	r2,-76(fp)
    4d9c:	e17ffd17 	ldw	r5,-12(fp)
    4da0:	0006cec0 	call	6cec <_ZNSt6vectorIiSaIiEEC1EmRKiRKS0_>
    4da4:	e13fe404 	addi	r4,fp,-112
    4da8:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>

  int (*nodes)[2] = (int(*)[2])&_nodes[0];
    4dac:	e13fe604 	addi	r4,fp,-104
    4db0:	000b883a 	mov	r5,zero
    4db4:	0005f680 	call	5f68 <_ZNSt6vectorIiSaIiEEixEm>
    4db8:	e0bfdd15 	stw	r2,-140(fp)

  /* The first O(N) pass: create N single-vertex trees */
  for(i = 0; i < N; i++)
    4dbc:	e03fe315 	stw	zero,-116(fp)
    4dc0:	00001a06 	br	4e2c <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x15c>
    4dc4:	e0bfff17 	ldw	r2,-4(fp)
    4dc8:	e0bffa15 	stw	r2,-24(fp)
  MyRect* vec = &_vec[0];

  const int PARENT=0;
  const int RANK=1;

  std::vector<int> _nodes(N*2);
    4dcc:	e13fe404 	addi	r4,fp,-112
    4dd0:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
    4dd4:	e0fffa17 	ldw	r3,-24(fp)
    4dd8:	e0ffff15 	stw	r3,-4(fp)
    4ddc:	00bfffc4 	movi	r2,-1
    4de0:	e0bfed15 	stw	r2,-76(fp)
    4de4:	e13fff17 	ldw	r4,-4(fp)
    4de8:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
  int (*nodes)[2] = (int(*)[2])&_nodes[0];

  /* The first O(N) pass: create N single-vertex trees */
  for(i = 0; i < N; i++)
    {
      nodes[i][PARENT]=-1;
    4dec:	e0bfe317 	ldw	r2,-116(fp)
    4df0:	100490fa 	slli	r2,r2,3
    4df4:	1007883a 	mov	r3,r2
    4df8:	e0bfdd17 	ldw	r2,-140(fp)
    4dfc:	1887883a 	add	r3,r3,r2
    4e00:	00bfffc4 	movi	r2,-1
    4e04:	18800015 	stw	r2,0(r3)
      nodes[i][RANK] = 0;
    4e08:	e0bfe317 	ldw	r2,-116(fp)
    4e0c:	100490fa 	slli	r2,r2,3
    4e10:	1007883a 	mov	r3,r2
    4e14:	e0bfdd17 	ldw	r2,-140(fp)
    4e18:	1885883a 	add	r2,r3,r2
    4e1c:	10000115 	stw	zero,4(r2)
  std::vector<int> _nodes(N*2);

  int (*nodes)[2] = (int(*)[2])&_nodes[0];

  /* The first O(N) pass: create N single-vertex trees */
  for(i = 0; i < N; i++)
    4e20:	e0bfe317 	ldw	r2,-116(fp)
    4e24:	10800044 	addi	r2,r2,1
    4e28:	e0bfe315 	stw	r2,-116(fp)
    4e2c:	e0ffe317 	ldw	r3,-116(fp)
    4e30:	e0bfe117 	ldw	r2,-124(fp)
    4e34:	18bfed16 	blt	r3,r2,4dec <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x11c>
      nodes[i][PARENT]=-1;
      nodes[i][RANK] = 0;
    }

  /* The main O(N^2) pass: merge connected components */
  for( i = 0; i < N; i++ )
    4e38:	e03fe315 	stw	zero,-116(fp)
    4e3c:	0000af06 	br	50fc <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x42c>
    {
      int root = i;
    4e40:	e0bfe317 	ldw	r2,-116(fp)
    4e44:	e0bfdb15 	stw	r2,-148(fp)

      /* find root */
      while( nodes[root][PARENT] >= 0 )
    4e48:	00000706 	br	4e68 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x198>
	root = nodes[root][PARENT];
    4e4c:	e0bfdb17 	ldw	r2,-148(fp)
    4e50:	100490fa 	slli	r2,r2,3
    4e54:	1007883a 	mov	r3,r2
    4e58:	e0bfdd17 	ldw	r2,-140(fp)
    4e5c:	1885883a 	add	r2,r3,r2
    4e60:	10800017 	ldw	r2,0(r2)
    4e64:	e0bfdb15 	stw	r2,-148(fp)
  for( i = 0; i < N; i++ )
    {
      int root = i;

      /* find root */
      while( nodes[root][PARENT] >= 0 )
    4e68:	e0bfdb17 	ldw	r2,-148(fp)
    4e6c:	100490fa 	slli	r2,r2,3
    4e70:	1007883a 	mov	r3,r2
    4e74:	e0bfdd17 	ldw	r2,-140(fp)
    4e78:	1885883a 	add	r2,r3,r2
    4e7c:	10800017 	ldw	r2,0(r2)
    4e80:	1004403a 	cmpge	r2,r2,zero
    4e84:	103ff11e 	bne	r2,zero,4e4c <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x17c>
	root = nodes[root][PARENT];

      for( j = 0; j < N; j++ )
    4e88:	e03fe215 	stw	zero,-120(fp)
    4e8c:	00009506 	br	50e4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x414>
	{
	  if( i == j || !predicate(eps, vec[i], vec[j]))
    4e90:	e0ffe317 	ldw	r3,-116(fp)
    4e94:	e0bfe217 	ldw	r2,-120(fp)
    4e98:	18800e26 	beq	r3,r2,4ed4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x204>
    4e9c:	e0bfe317 	ldw	r2,-116(fp)
    4ea0:	1004913a 	slli	r2,r2,4
    4ea4:	1007883a 	mov	r3,r2
    4ea8:	e0bfe017 	ldw	r2,-128(fp)
    4eac:	188b883a 	add	r5,r3,r2
    4eb0:	e0bfe217 	ldw	r2,-120(fp)
    4eb4:	1004913a 	slli	r2,r2,4
    4eb8:	1007883a 	mov	r3,r2
    4ebc:	e0bfe017 	ldw	r2,-128(fp)
    4ec0:	188d883a 	add	r6,r3,r2
    4ec4:	e13feb17 	ldw	r4,-84(fp)
    4ec8:	000490c0 	call	490c <_Z9predicatefR6MyRectS0_>
    4ecc:	1004c03a 	cmpne	r2,r2,zero
    4ed0:	1000031e 	bne	r2,zero,4ee0 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x210>
    4ed4:	00800044 	movi	r2,1
    4ed8:	e0bffc05 	stb	r2,-16(fp)
    4edc:	00000106 	br	4ee4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x214>
    4ee0:	e03ffc05 	stb	zero,-16(fp)
    4ee4:	e0bffc03 	ldbu	r2,-16(fp)
    4ee8:	10803fcc 	andi	r2,r2,255
    4eec:	1004c03a 	cmpne	r2,r2,zero
    4ef0:	1000791e 	bne	r2,zero,50d8 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x408>
	    continue;
	  int root2 = j;
    4ef4:	e0bfe217 	ldw	r2,-120(fp)
    4ef8:	e0bfda15 	stw	r2,-152(fp)

	  while( nodes[root2][PARENT] >= 0 )
    4efc:	00000706 	br	4f1c <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x24c>
	    root2 = nodes[root2][PARENT];
    4f00:	e0bfda17 	ldw	r2,-152(fp)
    4f04:	100490fa 	slli	r2,r2,3
    4f08:	1007883a 	mov	r3,r2
    4f0c:	e0bfdd17 	ldw	r2,-140(fp)
    4f10:	1885883a 	add	r2,r3,r2
    4f14:	10800017 	ldw	r2,0(r2)
    4f18:	e0bfda15 	stw	r2,-152(fp)
	{
	  if( i == j || !predicate(eps, vec[i], vec[j]))
	    continue;
	  int root2 = j;

	  while( nodes[root2][PARENT] >= 0 )
    4f1c:	e0bfda17 	ldw	r2,-152(fp)
    4f20:	100490fa 	slli	r2,r2,3
    4f24:	1007883a 	mov	r3,r2
    4f28:	e0bfdd17 	ldw	r2,-140(fp)
    4f2c:	1885883a 	add	r2,r3,r2
    4f30:	10800017 	ldw	r2,0(r2)
    4f34:	1004403a 	cmpge	r2,r2,zero
    4f38:	103ff11e 	bne	r2,zero,4f00 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x230>
	    root2 = nodes[root2][PARENT];

	  if( root2 != root )
    4f3c:	e0ffda17 	ldw	r3,-152(fp)
    4f40:	e0bfdb17 	ldw	r2,-148(fp)
    4f44:	18806426 	beq	r3,r2,50d8 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x408>
	    {
	      /* unite both trees */
	      int rank = nodes[root][RANK], rank2 = nodes[root2][RANK];
    4f48:	e0bfdb17 	ldw	r2,-148(fp)
    4f4c:	100490fa 	slli	r2,r2,3
    4f50:	1007883a 	mov	r3,r2
    4f54:	e0bfdd17 	ldw	r2,-140(fp)
    4f58:	1885883a 	add	r2,r3,r2
    4f5c:	10800117 	ldw	r2,4(r2)
    4f60:	e0bfd915 	stw	r2,-156(fp)
    4f64:	e0bfda17 	ldw	r2,-152(fp)
    4f68:	100490fa 	slli	r2,r2,3
    4f6c:	1007883a 	mov	r3,r2
    4f70:	e0bfdd17 	ldw	r2,-140(fp)
    4f74:	1885883a 	add	r2,r3,r2
    4f78:	10800117 	ldw	r2,4(r2)
    4f7c:	e0bfd815 	stw	r2,-160(fp)
	      if( rank > rank2 )
    4f80:	e0ffd917 	ldw	r3,-156(fp)
    4f84:	e0bfd817 	ldw	r2,-160(fp)
    4f88:	10c0080e 	bge	r2,r3,4fac <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x2dc>
		nodes[root2][PARENT] = root;
    4f8c:	e0bfda17 	ldw	r2,-152(fp)
    4f90:	100490fa 	slli	r2,r2,3
    4f94:	1007883a 	mov	r3,r2
    4f98:	e0bfdd17 	ldw	r2,-140(fp)
    4f9c:	1887883a 	add	r3,r3,r2
    4fa0:	e0bfdb17 	ldw	r2,-148(fp)
    4fa4:	18800015 	stw	r2,0(r3)
    4fa8:	00001906 	br	5010 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x340>
	      else
		{
		  nodes[root][PARENT] = root2;
    4fac:	e0bfdb17 	ldw	r2,-148(fp)
    4fb0:	100490fa 	slli	r2,r2,3
    4fb4:	1007883a 	mov	r3,r2
    4fb8:	e0bfdd17 	ldw	r2,-140(fp)
    4fbc:	1887883a 	add	r3,r3,r2
    4fc0:	e0bfda17 	ldw	r2,-152(fp)
    4fc4:	18800015 	stw	r2,0(r3)
		  nodes[root2][RANK] += rank == rank2;
    4fc8:	e0bfda17 	ldw	r2,-152(fp)
    4fcc:	100490fa 	slli	r2,r2,3
    4fd0:	1007883a 	mov	r3,r2
    4fd4:	e0bfdd17 	ldw	r2,-140(fp)
    4fd8:	188b883a 	add	r5,r3,r2
    4fdc:	e0bfda17 	ldw	r2,-152(fp)
    4fe0:	100490fa 	slli	r2,r2,3
    4fe4:	1007883a 	mov	r3,r2
    4fe8:	e0bfdd17 	ldw	r2,-140(fp)
    4fec:	1885883a 	add	r2,r3,r2
    4ff0:	11000117 	ldw	r4,4(r2)
    4ff4:	e0ffd917 	ldw	r3,-156(fp)
    4ff8:	e0bfd817 	ldw	r2,-160(fp)
    4ffc:	1885003a 	cmpeq	r2,r3,r2
    5000:	2085883a 	add	r2,r4,r2
    5004:	28800115 	stw	r2,4(r5)
		  root = root2;
    5008:	e0bfda17 	ldw	r2,-152(fp)
    500c:	e0bfdb15 	stw	r2,-148(fp)
		}

	      int k = j, parent;
    5010:	e0bfe217 	ldw	r2,-120(fp)
    5014:	e0bfd715 	stw	r2,-164(fp)

	      /* compress the path from node2 to root */
	      while( (parent = nodes[k][PARENT]) >= 0 )
    5018:	00000906 	br	5040 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x370>
		{
		  nodes[k][PARENT] = root;
    501c:	e0bfd717 	ldw	r2,-164(fp)
    5020:	100490fa 	slli	r2,r2,3
    5024:	1007883a 	mov	r3,r2
    5028:	e0bfdd17 	ldw	r2,-140(fp)
    502c:	1887883a 	add	r3,r3,r2
    5030:	e0bfdb17 	ldw	r2,-148(fp)
    5034:	18800015 	stw	r2,0(r3)
		  k = parent;
    5038:	e0bfd617 	ldw	r2,-168(fp)
    503c:	e0bfd715 	stw	r2,-164(fp)
		}

	      int k = j, parent;

	      /* compress the path from node2 to root */
	      while( (parent = nodes[k][PARENT]) >= 0 )
    5040:	e0bfd717 	ldw	r2,-164(fp)
    5044:	100490fa 	slli	r2,r2,3
    5048:	1007883a 	mov	r3,r2
    504c:	e0bfdd17 	ldw	r2,-140(fp)
    5050:	1885883a 	add	r2,r3,r2
    5054:	10800017 	ldw	r2,0(r2)
    5058:	e0bfd615 	stw	r2,-168(fp)
    505c:	e0bfd617 	ldw	r2,-168(fp)
    5060:	0084303a 	nor	r2,zero,r2
    5064:	1004d7fa 	srli	r2,r2,31
    5068:	10803fcc 	andi	r2,r2,255
    506c:	1004c03a 	cmpne	r2,r2,zero
    5070:	103fea1e 	bne	r2,zero,501c <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x34c>
		  nodes[k][PARENT] = root;
		  k = parent;
		}

	      /* compress the path from node to root */
	      k = i;
    5074:	e0bfe317 	ldw	r2,-116(fp)
    5078:	e0bfd715 	stw	r2,-164(fp)
	      while( (parent = nodes[k][PARENT]) >= 0 )
    507c:	00000906 	br	50a4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x3d4>
		{
		  nodes[k][PARENT] = root;
    5080:	e0bfd717 	ldw	r2,-164(fp)
    5084:	100490fa 	slli	r2,r2,3
    5088:	1007883a 	mov	r3,r2
    508c:	e0bfdd17 	ldw	r2,-140(fp)
    5090:	1887883a 	add	r3,r3,r2
    5094:	e0bfdb17 	ldw	r2,-148(fp)
    5098:	18800015 	stw	r2,0(r3)
		  k = parent;
    509c:	e0bfd617 	ldw	r2,-168(fp)
    50a0:	e0bfd715 	stw	r2,-164(fp)
		  k = parent;
		}

	      /* compress the path from node to root */
	      k = i;
	      while( (parent = nodes[k][PARENT]) >= 0 )
    50a4:	e0bfd717 	ldw	r2,-164(fp)
    50a8:	100490fa 	slli	r2,r2,3
    50ac:	1007883a 	mov	r3,r2
    50b0:	e0bfdd17 	ldw	r2,-140(fp)
    50b4:	1885883a 	add	r2,r3,r2
    50b8:	10800017 	ldw	r2,0(r2)
    50bc:	e0bfd615 	stw	r2,-168(fp)
    50c0:	e0bfd617 	ldw	r2,-168(fp)
    50c4:	0084303a 	nor	r2,zero,r2
    50c8:	1004d7fa 	srli	r2,r2,31
    50cc:	10803fcc 	andi	r2,r2,255
    50d0:	1004c03a 	cmpne	r2,r2,zero
    50d4:	103fea1e 	bne	r2,zero,5080 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x3b0>

      /* find root */
      while( nodes[root][PARENT] >= 0 )
	root = nodes[root][PARENT];

      for( j = 0; j < N; j++ )
    50d8:	e0bfe217 	ldw	r2,-120(fp)
    50dc:	10800044 	addi	r2,r2,1
    50e0:	e0bfe215 	stw	r2,-120(fp)
    50e4:	e0ffe217 	ldw	r3,-120(fp)
    50e8:	e0bfe117 	ldw	r2,-124(fp)
    50ec:	18bf6816 	blt	r3,r2,4e90 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x1c0>
      nodes[i][PARENT]=-1;
      nodes[i][RANK] = 0;
    }

  /* The main O(N^2) pass: merge connected components */
  for( i = 0; i < N; i++ )
    50f0:	e0bfe317 	ldw	r2,-116(fp)
    50f4:	10800044 	addi	r2,r2,1
    50f8:	e0bfe315 	stw	r2,-116(fp)
    50fc:	e0ffe317 	ldw	r3,-116(fp)
    5100:	e0bfe117 	ldw	r2,-124(fp)
    5104:	18bf4e16 	blt	r3,r2,4e40 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x170>
	    }
	}
    }

  /* Final O(N) pass: enumerate classes */
  labels.resize(N);
    5108:	e17fe117 	ldw	r5,-124(fp)
    510c:	00800044 	movi	r2,1
    5110:	e0bfed15 	stw	r2,-76(fp)
    5114:	e13fea17 	ldw	r4,-88(fp)
    5118:	000d883a 	mov	r6,zero
    511c:	0007ae00 	call	7ae0 <_ZNSt6vectorIiSaIiEE6resizeEmi>
  int nclasses = 0;
    5120:	e03fdc15 	stw	zero,-144(fp)

  for( i = 0; i < N; i++ )
    5124:	e03fe315 	stw	zero,-116(fp)
    5128:	00003406 	br	51fc <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x52c>
    {
      int root = i;
    512c:	e0bfe317 	ldw	r2,-116(fp)
    5130:	e0bfd515 	stw	r2,-172(fp)
      while( nodes[root][PARENT] >= 0 )
    5134:	00000706 	br	5154 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x484>
	root = nodes[root][PARENT];
    5138:	e0bfd517 	ldw	r2,-172(fp)
    513c:	100490fa 	slli	r2,r2,3
    5140:	1007883a 	mov	r3,r2
    5144:	e0bfdd17 	ldw	r2,-140(fp)
    5148:	1885883a 	add	r2,r3,r2
    514c:	10800017 	ldw	r2,0(r2)
    5150:	e0bfd515 	stw	r2,-172(fp)
  int nclasses = 0;

  for( i = 0; i < N; i++ )
    {
      int root = i;
      while( nodes[root][PARENT] >= 0 )
    5154:	e0bfd517 	ldw	r2,-172(fp)
    5158:	100490fa 	slli	r2,r2,3
    515c:	1007883a 	mov	r3,r2
    5160:	e0bfdd17 	ldw	r2,-140(fp)
    5164:	1885883a 	add	r2,r3,r2
    5168:	10800017 	ldw	r2,0(r2)
    516c:	1004403a 	cmpge	r2,r2,zero
    5170:	103ff11e 	bne	r2,zero,5138 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x468>
	root = nodes[root][PARENT];
      /* re-use the rank as the class label */
      if( nodes[root][RANK] >= 0 )
    5174:	e0bfd517 	ldw	r2,-172(fp)
    5178:	100490fa 	slli	r2,r2,3
    517c:	1007883a 	mov	r3,r2
    5180:	e0bfdd17 	ldw	r2,-140(fp)
    5184:	1885883a 	add	r2,r3,r2
    5188:	10800117 	ldw	r2,4(r2)
    518c:	1004803a 	cmplt	r2,r2,zero
    5190:	10000b1e 	bne	r2,zero,51c0 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x4f0>
	nodes[root][RANK] = ~nclasses++;
    5194:	e0bfd517 	ldw	r2,-172(fp)
    5198:	100490fa 	slli	r2,r2,3
    519c:	1007883a 	mov	r3,r2
    51a0:	e0bfdd17 	ldw	r2,-140(fp)
    51a4:	1887883a 	add	r3,r3,r2
    51a8:	e0bfdc17 	ldw	r2,-144(fp)
    51ac:	0084303a 	nor	r2,zero,r2
    51b0:	18800115 	stw	r2,4(r3)
    51b4:	e0bfdc17 	ldw	r2,-144(fp)
    51b8:	10800044 	addi	r2,r2,1
    51bc:	e0bfdc15 	stw	r2,-144(fp)
      labels[i] = ~nodes[root][RANK];
    51c0:	e17fe317 	ldw	r5,-116(fp)
    51c4:	e13fea17 	ldw	r4,-88(fp)
    51c8:	0005f680 	call	5f68 <_ZNSt6vectorIiSaIiEEixEm>
    51cc:	1009883a 	mov	r4,r2
    51d0:	e0bfd517 	ldw	r2,-172(fp)
    51d4:	100490fa 	slli	r2,r2,3
    51d8:	1007883a 	mov	r3,r2
    51dc:	e0bfdd17 	ldw	r2,-140(fp)
    51e0:	1885883a 	add	r2,r3,r2
    51e4:	10800117 	ldw	r2,4(r2)
    51e8:	0084303a 	nor	r2,zero,r2
    51ec:	20800015 	stw	r2,0(r4)

  /* Final O(N) pass: enumerate classes */
  labels.resize(N);
  int nclasses = 0;

  for( i = 0; i < N; i++ )
    51f0:	e0bfe317 	ldw	r2,-116(fp)
    51f4:	10800044 	addi	r2,r2,1
    51f8:	e0bfe315 	stw	r2,-116(fp)
    51fc:	e0ffe317 	ldw	r3,-116(fp)
    5200:	e0bfe117 	ldw	r2,-124(fp)
    5204:	18bfc916 	blt	r3,r2,512c <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x45c>
      if( nodes[root][RANK] >= 0 )
	nodes[root][RANK] = ~nclasses++;
      labels[i] = ~nodes[root][RANK];
    }

  return nclasses;
    5208:	e0ffdc17 	ldw	r3,-144(fp)
    520c:	e0fffb15 	stw	r3,-20(fp)
    5210:	e13fe604 	addi	r4,fp,-104
    5214:	0006d900 	call	6d90 <_ZNSt6vectorIiSaIiEED1Ev>
    5218:	e0bffb17 	ldw	r2,-20(fp)
    521c:	e0bffe15 	stw	r2,-8(fp)
    5220:	00001006 	br	5264 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x594>
    5224:	e7002b04 	addi	fp,fp,172
    5228:	e0bfed17 	ldw	r2,-76(fp)
    522c:	e0ffee17 	ldw	r3,-72(fp)
    5230:	e0ffff15 	stw	r3,-4(fp)
    5234:	10800060 	cmpeqi	r2,r2,1
    5238:	103ee21e 	bne	r2,zero,4dc4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0xf4>
    523c:	e0bfff17 	ldw	r2,-4(fp)
    5240:	e0bff915 	stw	r2,-28(fp)
    5244:	e13fe604 	addi	r4,fp,-104
    5248:	0006d900 	call	6d90 <_ZNSt6vectorIiSaIiEED1Ev>
    524c:	e0fff917 	ldw	r3,-28(fp)
    5250:	e0ffff15 	stw	r3,-4(fp)
    5254:	00bfffc4 	movi	r2,-1
    5258:	e0bfed15 	stw	r2,-76(fp)
    525c:	e13fff17 	ldw	r4,-4(fp)
    5260:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    5264:	e13fec04 	addi	r4,fp,-80
    5268:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
}
    526c:	e0bffe17 	ldw	r2,-8(fp)
    5270:	e037883a 	mov	sp,fp
    5274:	dfc00917 	ldw	ra,36(sp)
    5278:	df000817 	ldw	fp,32(sp)
    527c:	ddc00717 	ldw	r23,28(sp)
    5280:	dd800617 	ldw	r22,24(sp)
    5284:	dd400517 	ldw	r21,20(sp)
    5288:	dd000417 	ldw	r20,16(sp)
    528c:	dcc00317 	ldw	r19,12(sp)
    5290:	dc800217 	ldw	r18,8(sp)
    5294:	dc400117 	ldw	r17,4(sp)
    5298:	dc000017 	ldw	r16,0(sp)
    529c:	dec00a04 	addi	sp,sp,40
    52a0:	f800283a 	ret

000052a4 <groupRectangles>:
    myAbs(r1.y - r2.y) <= delta &&
    myAbs(r1.x + r1.width - r2.x - r2.width) <= delta &&
    myAbs(r1.y + r1.height - r2.y - r2.height) <= delta;
}

void groupRectangles(std::vector<MyRect>& rectList, int groupThreshold, float eps)
    52a4:	deffa804 	addi	sp,sp,-352
    52a8:	dfc05715 	stw	ra,348(sp)
    52ac:	df005615 	stw	fp,344(sp)
    52b0:	ddc05515 	stw	r23,340(sp)
    52b4:	dd805415 	stw	r22,336(sp)
    52b8:	dd405315 	stw	r21,332(sp)
    52bc:	dd005215 	stw	r20,328(sp)
    52c0:	dcc05115 	stw	r19,324(sp)
    52c4:	dc805015 	stw	r18,320(sp)
    52c8:	dc404f15 	stw	r17,316(sp)
    52cc:	dc004e15 	stw	r16,312(sp)
    52d0:	df004e04 	addi	fp,sp,312
    52d4:	e13fd915 	stw	r4,-156(fp)
    52d8:	e17fda15 	stw	r5,-152(fp)
    52dc:	e1bfdb15 	stw	r6,-148(fp)
    52e0:	00800074 	movhi	r2,1
    52e4:	10b9cd04 	addi	r2,r2,-6348
    52e8:	e0bfe215 	stw	r2,-120(fp)
    52ec:	008000b4 	movhi	r2,2
    52f0:	10b88a84 	addi	r2,r2,-7638
    52f4:	e0bfe315 	stw	r2,-116(fp)
    52f8:	e0bfe404 	addi	r2,fp,-112
    52fc:	e0ffb204 	addi	r3,fp,-312
    5300:	10c00015 	stw	r3,0(r2)
    5304:	00c00034 	movhi	r3,0
    5308:	18d64404 	addi	r3,r3,22800
    530c:	10c00115 	stw	r3,4(r2)
    5310:	16c00215 	stw	sp,8(r2)
    5314:	e13fdc04 	addi	r4,fp,-144
    5318:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
{
  if( groupThreshold <= 0 || rectList.empty() )
    531c:	e0bfda17 	ldw	r2,-152(fp)
    5320:	10800050 	cmplti	r2,r2,1
    5324:	1000051e 	bne	r2,zero,533c <groupRectangles+0x98>
    5328:	e13fd917 	ldw	r4,-156(fp)
    532c:	0005c0c0 	call	5c0c <_ZNKSt6vectorI6MyRectSaIS0_EE5emptyEv>
    5330:	10803fcc 	andi	r2,r2,255
    5334:	1005003a 	cmpeq	r2,r2,zero
    5338:	1000031e 	bne	r2,zero,5348 <groupRectangles+0xa4>
    533c:	00800044 	movi	r2,1
    5340:	e0bffd05 	stb	r2,-12(fp)
    5344:	00000106 	br	534c <groupRectangles+0xa8>
    5348:	e03ffd05 	stb	zero,-12(fp)
    534c:	e0bffd03 	ldbu	r2,-12(fp)
    5350:	10803fcc 	andi	r2,r2,255
    5354:	1004c03a 	cmpne	r2,r2,zero
    5358:	1001911e 	bne	r2,zero,59a0 <groupRectangles+0x6fc>
    return;


  std::vector<int> labels;
    535c:	e13fc304 	addi	r4,fp,-244
    5360:	00059fc0 	call	59fc <_ZNSaIiEC1Ev>
    5364:	e13fc404 	addi	r4,fp,-240
    5368:	e17fc304 	addi	r5,fp,-244
    536c:	0005ce40 	call	5ce4 <_ZNSt6vectorIiSaIiEEC1ERKS0_>
    5370:	e13fc304 	addi	r4,fp,-244
    5374:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>

  int nclasses = partition(rectList, labels, eps);
    5378:	e17fc404 	addi	r5,fp,-240
    537c:	00800104 	movi	r2,4
    5380:	e0bfdd15 	stw	r2,-140(fp)
    5384:	e13fd917 	ldw	r4,-156(fp)
    5388:	e1bfdb17 	ldw	r6,-148(fp)
    538c:	0004cd00 	call	4cd0 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf>
    5390:	e0bfbb15 	stw	r2,-276(fp)

  std::vector<MyRect> rrects(nclasses);
    5394:	e0ffbb17 	ldw	r3,-276(fp)
    5398:	e0fffc15 	stw	r3,-16(fp)
    539c:	e03fbf15 	stw	zero,-260(fp)
    53a0:	e03fc015 	stw	zero,-256(fp)
    53a4:	e03fc115 	stw	zero,-252(fp)
    53a8:	e03fc215 	stw	zero,-248(fp)
    53ac:	e13fbe04 	addi	r4,fp,-264
    53b0:	0002b1c0 	call	2b1c <_ZNSaI6MyRectEC1Ev>
    53b4:	e13fc704 	addi	r4,fp,-228
    53b8:	e1bfbf04 	addi	r6,fp,-260
    53bc:	e1ffbe04 	addi	r7,fp,-264
    53c0:	008000c4 	movi	r2,3
    53c4:	e0bfdd15 	stw	r2,-140(fp)
    53c8:	e17ffc17 	ldw	r5,-16(fp)
    53cc:	0006e0c0 	call	6e0c <_ZNSt6vectorI6MyRectSaIS0_EEC1EmRKS0_RKS1_>
    53d0:	e13fbe04 	addi	r4,fp,-264
    53d4:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
  std::vector<int> rweights(nclasses);
    53d8:	e0bfbb17 	ldw	r2,-276(fp)
    53dc:	e0bffb15 	stw	r2,-20(fp)
    53e0:	e03fbd15 	stw	zero,-268(fp)
    53e4:	e13fbc04 	addi	r4,fp,-272
    53e8:	00059fc0 	call	59fc <_ZNSaIiEC1Ev>
    53ec:	e13fca04 	addi	r4,fp,-216
    53f0:	e1bfbd04 	addi	r6,fp,-268
    53f4:	e1ffbc04 	addi	r7,fp,-272
    53f8:	00800084 	movi	r2,2
    53fc:	e0bfdd15 	stw	r2,-140(fp)
    5400:	e17ffb17 	ldw	r5,-20(fp)
    5404:	0006cec0 	call	6cec <_ZNSt6vectorIiSaIiEEC1EmRKiRKS0_>
    5408:	00000706 	br	5428 <groupRectangles+0x184>
    540c:	e0fffe17 	ldw	r3,-8(fp)
    5410:	e0ffed15 	stw	r3,-76(fp)

  std::vector<int> labels;

  int nclasses = partition(rectList, labels, eps);

  std::vector<MyRect> rrects(nclasses);
    5414:	e13fbe04 	addi	r4,fp,-264
    5418:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
    541c:	e0bfed17 	ldw	r2,-76(fp)
    5420:	e0bffe15 	stw	r2,-8(fp)
    5424:	00015406 	br	5978 <groupRectangles+0x6d4>
  std::vector<int> rweights(nclasses);
    5428:	e13fbc04 	addi	r4,fp,-272
    542c:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>

  int i, j, nlabels = (int)labels.size();
    5430:	e13fc404 	addi	r4,fp,-240
    5434:	0005e540 	call	5e54 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    5438:	e0bfb815 	stw	r2,-288(fp)


  for( i = 0; i < nlabels; i++ )
    543c:	e03fba15 	stw	zero,-280(fp)
    5440:	00005206 	br	558c <groupRectangles+0x2e8>
    5444:	e0fffe17 	ldw	r3,-8(fp)
    5448:	e0ffec15 	stw	r3,-80(fp)
  std::vector<int> labels;

  int nclasses = partition(rectList, labels, eps);

  std::vector<MyRect> rrects(nclasses);
  std::vector<int> rweights(nclasses);
    544c:	e13fbc04 	addi	r4,fp,-272
    5450:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
    5454:	e0bfec17 	ldw	r2,-80(fp)
    5458:	e0bffe15 	stw	r2,-8(fp)
    545c:	00014006 	br	5960 <groupRectangles+0x6bc>
  int i, j, nlabels = (int)labels.size();


  for( i = 0; i < nlabels; i++ )
    {
      int cls = labels[i];
    5460:	e17fba17 	ldw	r5,-280(fp)
    5464:	e13fc404 	addi	r4,fp,-240
    5468:	0005f680 	call	5f68 <_ZNSt6vectorIiSaIiEEixEm>
    546c:	10800017 	ldw	r2,0(r2)
    5470:	e0bfb715 	stw	r2,-292(fp)
      rrects[cls].x += rectList[i].x;
    5474:	e17fb717 	ldw	r5,-292(fp)
    5478:	e13fc704 	addi	r4,fp,-228
    547c:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5480:	e0bffa15 	stw	r2,-24(fp)
    5484:	e0fffa17 	ldw	r3,-24(fp)
    5488:	18c00017 	ldw	r3,0(r3)
    548c:	e0fff915 	stw	r3,-28(fp)
    5490:	e17fba17 	ldw	r5,-280(fp)
    5494:	e13fd917 	ldw	r4,-156(fp)
    5498:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    549c:	10800017 	ldw	r2,0(r2)
    54a0:	e0fff917 	ldw	r3,-28(fp)
    54a4:	1885883a 	add	r2,r3,r2
    54a8:	e0fffa17 	ldw	r3,-24(fp)
    54ac:	18800015 	stw	r2,0(r3)
      rrects[cls].y += rectList[i].y;
    54b0:	e17fb717 	ldw	r5,-292(fp)
    54b4:	e13fc704 	addi	r4,fp,-228
    54b8:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    54bc:	e0bff815 	stw	r2,-32(fp)
    54c0:	e0bff817 	ldw	r2,-32(fp)
    54c4:	10800117 	ldw	r2,4(r2)
    54c8:	e0bff715 	stw	r2,-36(fp)
    54cc:	e17fba17 	ldw	r5,-280(fp)
    54d0:	e13fd917 	ldw	r4,-156(fp)
    54d4:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    54d8:	10800117 	ldw	r2,4(r2)
    54dc:	e0fff717 	ldw	r3,-36(fp)
    54e0:	1885883a 	add	r2,r3,r2
    54e4:	e0fff817 	ldw	r3,-32(fp)
    54e8:	18800115 	stw	r2,4(r3)
      rrects[cls].width += rectList[i].width;
    54ec:	e17fb717 	ldw	r5,-292(fp)
    54f0:	e13fc704 	addi	r4,fp,-228
    54f4:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    54f8:	e0bff615 	stw	r2,-40(fp)
    54fc:	e0bff617 	ldw	r2,-40(fp)
    5500:	10800217 	ldw	r2,8(r2)
    5504:	e0bff515 	stw	r2,-44(fp)
    5508:	e17fba17 	ldw	r5,-280(fp)
    550c:	e13fd917 	ldw	r4,-156(fp)
    5510:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5514:	10800217 	ldw	r2,8(r2)
    5518:	e0fff517 	ldw	r3,-44(fp)
    551c:	1885883a 	add	r2,r3,r2
    5520:	e0fff617 	ldw	r3,-40(fp)
    5524:	18800215 	stw	r2,8(r3)
      rrects[cls].height += rectList[i].height;
    5528:	e17fb717 	ldw	r5,-292(fp)
    552c:	e13fc704 	addi	r4,fp,-228
    5530:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5534:	e0bff415 	stw	r2,-48(fp)
    5538:	e0bff417 	ldw	r2,-48(fp)
    553c:	10800317 	ldw	r2,12(r2)
    5540:	e0bff315 	stw	r2,-52(fp)
    5544:	e17fba17 	ldw	r5,-280(fp)
    5548:	e13fd917 	ldw	r4,-156(fp)
    554c:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5550:	10800317 	ldw	r2,12(r2)
    5554:	e0fff317 	ldw	r3,-52(fp)
    5558:	1885883a 	add	r2,r3,r2
    555c:	e0fff417 	ldw	r3,-48(fp)
    5560:	18800315 	stw	r2,12(r3)
      rweights[cls]++;
    5564:	e17fb717 	ldw	r5,-292(fp)
    5568:	e13fca04 	addi	r4,fp,-216
    556c:	0005f680 	call	5f68 <_ZNSt6vectorIiSaIiEEixEm>
    5570:	1007883a 	mov	r3,r2
    5574:	18800017 	ldw	r2,0(r3)
    5578:	10800044 	addi	r2,r2,1
    557c:	18800015 	stw	r2,0(r3)
  std::vector<int> rweights(nclasses);

  int i, j, nlabels = (int)labels.size();


  for( i = 0; i < nlabels; i++ )
    5580:	e0bfba17 	ldw	r2,-280(fp)
    5584:	10800044 	addi	r2,r2,1
    5588:	e0bfba15 	stw	r2,-280(fp)
    558c:	e0ffba17 	ldw	r3,-280(fp)
    5590:	e0bfb817 	ldw	r2,-288(fp)
    5594:	18bfb216 	blt	r3,r2,5460 <groupRectangles+0x1bc>
      rrects[cls].y += rectList[i].y;
      rrects[cls].width += rectList[i].width;
      rrects[cls].height += rectList[i].height;
      rweights[cls]++;
    }
  for( i = 0; i < nclasses; i++ )
    5598:	e03fba15 	stw	zero,-280(fp)
    559c:	00004c06 	br	56d0 <groupRectangles+0x42c>
    {
      MyRect r = rrects[i];
    55a0:	e17fba17 	ldw	r5,-280(fp)
    55a4:	e13fc704 	addi	r4,fp,-228
    55a8:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    55ac:	1007883a 	mov	r3,r2
    55b0:	18800017 	ldw	r2,0(r3)
    55b4:	e0bfcd15 	stw	r2,-204(fp)
    55b8:	18800117 	ldw	r2,4(r3)
    55bc:	e0bfce15 	stw	r2,-200(fp)
    55c0:	18800217 	ldw	r2,8(r3)
    55c4:	e0bfcf15 	stw	r2,-196(fp)
    55c8:	18800317 	ldw	r2,12(r3)
    55cc:	e0bfd015 	stw	r2,-192(fp)
      float s = 1.f/rweights[i];
    55d0:	e17fba17 	ldw	r5,-280(fp)
    55d4:	e13fca04 	addi	r4,fp,-216
    55d8:	0005f680 	call	5f68 <_ZNSt6vectorIiSaIiEEixEm>
    55dc:	11000017 	ldw	r4,0(r2)
    55e0:	000fc080 	call	fc08 <__floatsisf>
    55e4:	010fe034 	movhi	r4,16256
    55e8:	100b883a 	mov	r5,r2
    55ec:	000f9a40 	call	f9a4 <__divsf3>
    55f0:	e0bfb615 	stw	r2,-296(fp)
      rrects[i].x = myRound(r.x*s);
    55f4:	e17fba17 	ldw	r5,-280(fp)
    55f8:	e13fc704 	addi	r4,fp,-228
    55fc:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5600:	e0bff215 	stw	r2,-56(fp)
    5604:	e13fcd17 	ldw	r4,-204(fp)
    5608:	000fc080 	call	fc08 <__floatsisf>
    560c:	1009883a 	mov	r4,r2
    5610:	e17fb617 	ldw	r5,-296(fp)
    5614:	000f7c40 	call	f7c4 <__mulsf3>
    5618:	1009883a 	mov	r4,r2
    561c:	00026740 	call	2674 <_Z7myRoundf>
    5620:	e0fff217 	ldw	r3,-56(fp)
    5624:	18800015 	stw	r2,0(r3)
      rrects[i].y = myRound(r.y*s);
    5628:	e17fba17 	ldw	r5,-280(fp)
    562c:	e13fc704 	addi	r4,fp,-228
    5630:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5634:	e0bff115 	stw	r2,-60(fp)
    5638:	e13fce17 	ldw	r4,-200(fp)
    563c:	000fc080 	call	fc08 <__floatsisf>
    5640:	1009883a 	mov	r4,r2
    5644:	e17fb617 	ldw	r5,-296(fp)
    5648:	000f7c40 	call	f7c4 <__mulsf3>
    564c:	1009883a 	mov	r4,r2
    5650:	00026740 	call	2674 <_Z7myRoundf>
    5654:	e0fff117 	ldw	r3,-60(fp)
    5658:	18800115 	stw	r2,4(r3)
      rrects[i].width = myRound(r.width*s);
    565c:	e17fba17 	ldw	r5,-280(fp)
    5660:	e13fc704 	addi	r4,fp,-228
    5664:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5668:	e0bff015 	stw	r2,-64(fp)
    566c:	e13fcf17 	ldw	r4,-196(fp)
    5670:	000fc080 	call	fc08 <__floatsisf>
    5674:	1009883a 	mov	r4,r2
    5678:	e17fb617 	ldw	r5,-296(fp)
    567c:	000f7c40 	call	f7c4 <__mulsf3>
    5680:	1009883a 	mov	r4,r2
    5684:	00026740 	call	2674 <_Z7myRoundf>
    5688:	e0fff017 	ldw	r3,-64(fp)
    568c:	18800215 	stw	r2,8(r3)
      rrects[i].height = myRound(r.height*s);
    5690:	e17fba17 	ldw	r5,-280(fp)
    5694:	e13fc704 	addi	r4,fp,-228
    5698:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    569c:	e0bfef15 	stw	r2,-68(fp)
    56a0:	e13fd017 	ldw	r4,-192(fp)
    56a4:	000fc080 	call	fc08 <__floatsisf>
    56a8:	1009883a 	mov	r4,r2
    56ac:	e17fb617 	ldw	r5,-296(fp)
    56b0:	000f7c40 	call	f7c4 <__mulsf3>
    56b4:	1009883a 	mov	r4,r2
    56b8:	00026740 	call	2674 <_Z7myRoundf>
    56bc:	e0ffef17 	ldw	r3,-68(fp)
    56c0:	18800315 	stw	r2,12(r3)
      rrects[cls].y += rectList[i].y;
      rrects[cls].width += rectList[i].width;
      rrects[cls].height += rectList[i].height;
      rweights[cls]++;
    }
  for( i = 0; i < nclasses; i++ )
    56c4:	e0bfba17 	ldw	r2,-280(fp)
    56c8:	10800044 	addi	r2,r2,1
    56cc:	e0bfba15 	stw	r2,-280(fp)
    56d0:	e0ffba17 	ldw	r3,-280(fp)
    56d4:	e0bfbb17 	ldw	r2,-276(fp)
    56d8:	18bfb116 	blt	r3,r2,55a0 <groupRectangles+0x2fc>
      rrects[i].width = myRound(r.width*s);
      rrects[i].height = myRound(r.height*s);

    }

  rectList.clear();
    56dc:	e13fd917 	ldw	r4,-156(fp)
    56e0:	00063300 	call	6330 <_ZNSt6vectorI6MyRectSaIS0_EE5clearEv>

  for( i = 0; i < nclasses; i++ )
    56e4:	e03fba15 	stw	zero,-280(fp)
    56e8:	00007f06 	br	58e8 <groupRectangles+0x644>
    {
      MyRect r1 = rrects[i];
    56ec:	e17fba17 	ldw	r5,-280(fp)
    56f0:	e13fc704 	addi	r4,fp,-228
    56f4:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    56f8:	1007883a 	mov	r3,r2
    56fc:	18800017 	ldw	r2,0(r3)
    5700:	e0bfd115 	stw	r2,-188(fp)
    5704:	18800117 	ldw	r2,4(r3)
    5708:	e0bfd215 	stw	r2,-184(fp)
    570c:	18800217 	ldw	r2,8(r3)
    5710:	e0bfd315 	stw	r2,-180(fp)
    5714:	18800317 	ldw	r2,12(r3)
    5718:	e0bfd415 	stw	r2,-176(fp)
      int n1 = rweights[i];
    571c:	e17fba17 	ldw	r5,-280(fp)
    5720:	e13fca04 	addi	r4,fp,-216
    5724:	0005f680 	call	5f68 <_ZNSt6vectorIiSaIiEEixEm>
    5728:	10800017 	ldw	r2,0(r2)
    572c:	e0bfb515 	stw	r2,-300(fp)
      if( n1 <= groupThreshold )
    5730:	e0ffb517 	ldw	r3,-300(fp)
    5734:	e0bfda17 	ldw	r2,-152(fp)
    5738:	10c0680e 	bge	r2,r3,58dc <groupRectangles+0x638>
	continue;
      /* filter out small face rectangles inside large rectangles */
      for( j = 0; j < nclasses; j++ )
    573c:	e03fb915 	stw	zero,-284(fp)
    5740:	00005b06 	br	58b0 <groupRectangles+0x60c>
        {
	  int n2 = rweights[j];
    5744:	e17fb917 	ldw	r5,-284(fp)
    5748:	e13fca04 	addi	r4,fp,-216
    574c:	0005f680 	call	5f68 <_ZNSt6vectorIiSaIiEEixEm>
    5750:	10800017 	ldw	r2,0(r2)
    5754:	e0bfb415 	stw	r2,-304(fp)
	  /*********************************
	   * if it is the same rectangle, 
	   * or the number of rectangles in class j is < group threshold, 
	   * do nothing 
	   ********************************/
	  if( j == i || n2 <= groupThreshold )
    5758:	e0ffb917 	ldw	r3,-284(fp)
    575c:	e0bfba17 	ldw	r2,-280(fp)
    5760:	18805026 	beq	r3,r2,58a4 <groupRectangles+0x600>
    5764:	e0ffb417 	ldw	r3,-304(fp)
    5768:	e0bfda17 	ldw	r2,-152(fp)
    576c:	10c00116 	blt	r2,r3,5774 <groupRectangles+0x4d0>
	    continue;
    5770:	00004c06 	br	58a4 <groupRectangles+0x600>
	  MyRect r2 = rrects[j];
    5774:	e17fb917 	ldw	r5,-284(fp)
    5778:	e13fc704 	addi	r4,fp,-228
    577c:	00040540 	call	4054 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5780:	1007883a 	mov	r3,r2
    5784:	18800017 	ldw	r2,0(r3)
    5788:	e0bfd515 	stw	r2,-172(fp)
    578c:	18800117 	ldw	r2,4(r3)
    5790:	e0bfd615 	stw	r2,-168(fp)
    5794:	18800217 	ldw	r2,8(r3)
    5798:	e0bfd715 	stw	r2,-164(fp)
    579c:	18800317 	ldw	r2,12(r3)
    57a0:	e0bfd815 	stw	r2,-160(fp)

	  int dx = myRound( r2.width * eps );
    57a4:	e13fd717 	ldw	r4,-164(fp)
    57a8:	000fc080 	call	fc08 <__floatsisf>
    57ac:	1009883a 	mov	r4,r2
    57b0:	e17fdb17 	ldw	r5,-148(fp)
    57b4:	000f7c40 	call	f7c4 <__mulsf3>
    57b8:	1009883a 	mov	r4,r2
    57bc:	00026740 	call	2674 <_Z7myRoundf>
    57c0:	e0bfb315 	stw	r2,-308(fp)
	  int dy = myRound( r2.height * eps );
    57c4:	e13fd817 	ldw	r4,-160(fp)
    57c8:	000fc080 	call	fc08 <__floatsisf>
    57cc:	1009883a 	mov	r4,r2
    57d0:	e17fdb17 	ldw	r5,-148(fp)
    57d4:	000f7c40 	call	f7c4 <__mulsf3>
    57d8:	1009883a 	mov	r4,r2
    57dc:	00026740 	call	2674 <_Z7myRoundf>
    57e0:	e0bfb215 	stw	r2,-312(fp)

	  if( i != j &&
    57e4:	e0ffba17 	ldw	r3,-280(fp)
    57e8:	e0bfb917 	ldw	r2,-284(fp)
    57ec:	18802826 	beq	r3,r2,5890 <groupRectangles+0x5ec>
    57f0:	e13fd117 	ldw	r4,-188(fp)
    57f4:	e0ffd517 	ldw	r3,-172(fp)
    57f8:	e0bfb317 	ldw	r2,-308(fp)
    57fc:	1885c83a 	sub	r2,r3,r2
    5800:	20802316 	blt	r4,r2,5890 <groupRectangles+0x5ec>
    5804:	e13fd217 	ldw	r4,-184(fp)
    5808:	e0ffd617 	ldw	r3,-168(fp)
    580c:	e0bfb217 	ldw	r2,-312(fp)
    5810:	1885c83a 	sub	r2,r3,r2
    5814:	20801e16 	blt	r4,r2,5890 <groupRectangles+0x5ec>
    5818:	e0ffd117 	ldw	r3,-188(fp)
    581c:	e0bfd317 	ldw	r2,-180(fp)
    5820:	1889883a 	add	r4,r3,r2
    5824:	e0ffd517 	ldw	r3,-172(fp)
    5828:	e0bfd717 	ldw	r2,-164(fp)
    582c:	1887883a 	add	r3,r3,r2
    5830:	e0bfb317 	ldw	r2,-308(fp)
    5834:	1885883a 	add	r2,r3,r2
    5838:	11001516 	blt	r2,r4,5890 <groupRectangles+0x5ec>
    583c:	e0ffd217 	ldw	r3,-184(fp)
    5840:	e0bfd417 	ldw	r2,-176(fp)
    5844:	1889883a 	add	r4,r3,r2
    5848:	e0ffd617 	ldw	r3,-168(fp)
    584c:	e0bfd817 	ldw	r2,-160(fp)
    5850:	1887883a 	add	r3,r3,r2
    5854:	e0bfb217 	ldw	r2,-312(fp)
    5858:	1885883a 	add	r2,r3,r2
    585c:	11000c16 	blt	r2,r4,5890 <groupRectangles+0x5ec>
    5860:	010000c4 	movi	r4,3
    5864:	e17fb517 	ldw	r5,-300(fp)
    5868:	00048340 	call	4834 <_Z5myMaxii>
    586c:	1007883a 	mov	r3,r2
    5870:	e0bfb417 	ldw	r2,-304(fp)
    5874:	18800316 	blt	r3,r2,5884 <groupRectangles+0x5e0>
    5878:	e0bfb517 	ldw	r2,-300(fp)
    587c:	108000c8 	cmpgei	r2,r2,3
    5880:	1000031e 	bne	r2,zero,5890 <groupRectangles+0x5ec>
    5884:	00800044 	movi	r2,1
    5888:	e0bfee05 	stb	r2,-72(fp)
    588c:	00000106 	br	5894 <groupRectangles+0x5f0>
    5890:	e03fee05 	stb	zero,-72(fp)
    5894:	e0bfee03 	ldbu	r2,-72(fp)
    5898:	10803fcc 	andi	r2,r2,255
    589c:	1004c03a 	cmpne	r2,r2,zero
    58a0:	1000061e 	bne	r2,zero,58bc <groupRectangles+0x618>
      MyRect r1 = rrects[i];
      int n1 = rweights[i];
      if( n1 <= groupThreshold )
	continue;
      /* filter out small face rectangles inside large rectangles */
      for( j = 0; j < nclasses; j++ )
    58a4:	e0bfb917 	ldw	r2,-284(fp)
    58a8:	10800044 	addi	r2,r2,1
    58ac:	e0bfb915 	stw	r2,-284(fp)
    58b0:	e0ffb917 	ldw	r3,-284(fp)
    58b4:	e0bfbb17 	ldw	r2,-276(fp)
    58b8:	18bfa216 	blt	r3,r2,5744 <groupRectangles+0x4a0>
	      r1.y + r1.height <= r2.y + r2.height + dy &&
	      (n2 > myMax(3, n1) || n1 < 3) )
	    break;
        }

      if( j == nclasses )
    58bc:	e0ffb917 	ldw	r3,-284(fp)
    58c0:	e0bfbb17 	ldw	r2,-276(fp)
    58c4:	1880051e 	bne	r3,r2,58dc <groupRectangles+0x638>
        {
	  rectList.push_back(r1); // insert back r1
    58c8:	e17fd104 	addi	r5,fp,-188
    58cc:	00800044 	movi	r2,1
    58d0:	e0bfdd15 	stw	r2,-140(fp)
    58d4:	e13fd917 	ldw	r4,-156(fp)
    58d8:	0003ae00 	call	3ae0 <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_>

    }

  rectList.clear();

  for( i = 0; i < nclasses; i++ )
    58dc:	e0bfba17 	ldw	r2,-280(fp)
    58e0:	10800044 	addi	r2,r2,1
    58e4:	e0bfba15 	stw	r2,-280(fp)
    58e8:	e0ffba17 	ldw	r3,-280(fp)
    58ec:	e0bfbb17 	ldw	r2,-276(fp)
    58f0:	18bf7e16 	blt	r3,r2,56ec <groupRectangles+0x448>

      if( j == nclasses )
        {
	  rectList.push_back(r1); // insert back r1
        }
    }
    58f4:	e13fca04 	addi	r4,fp,-216
    58f8:	0006d900 	call	6d90 <_ZNSt6vectorIiSaIiEED1Ev>
    58fc:	e13fc704 	addi	r4,fp,-228
    5900:	0003bc80 	call	3bc8 <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    5904:	e13fc404 	addi	r4,fp,-240
    5908:	0006d900 	call	6d90 <_ZNSt6vectorIiSaIiEED1Ev>
    590c:	00002406 	br	59a0 <groupRectangles+0x6fc>
    5910:	e7004e04 	addi	fp,fp,312
    5914:	e0ffdd17 	ldw	r3,-140(fp)
    5918:	e0ffff15 	stw	r3,-4(fp)
    591c:	e0bfde17 	ldw	r2,-136(fp)
    5920:	e0bffe15 	stw	r2,-8(fp)
    5924:	e0ffff17 	ldw	r3,-4(fp)
    5928:	18800060 	cmpeqi	r2,r3,1
    592c:	103ec51e 	bne	r2,zero,5444 <groupRectangles+0x1a0>
    5930:	e0ffff17 	ldw	r3,-4(fp)
    5934:	188000a0 	cmpeqi	r2,r3,2
    5938:	103eb41e 	bne	r2,zero,540c <groupRectangles+0x168>
    593c:	e0ffff17 	ldw	r3,-4(fp)
    5940:	188000e0 	cmpeqi	r2,r3,3
    5944:	10000c1e 	bne	r2,zero,5978 <groupRectangles+0x6d4>
    5948:	e0bffe17 	ldw	r2,-8(fp)
    594c:	e0bfeb15 	stw	r2,-84(fp)
    5950:	e13fca04 	addi	r4,fp,-216
    5954:	0006d900 	call	6d90 <_ZNSt6vectorIiSaIiEED1Ev>
    5958:	e0ffeb17 	ldw	r3,-84(fp)
    595c:	e0fffe15 	stw	r3,-8(fp)
    5960:	e0bffe17 	ldw	r2,-8(fp)
    5964:	e0bfea15 	stw	r2,-88(fp)
    5968:	e13fc704 	addi	r4,fp,-228
    596c:	0003bc80 	call	3bc8 <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    5970:	e0ffea17 	ldw	r3,-88(fp)
    5974:	e0fffe15 	stw	r3,-8(fp)
    5978:	e0bffe17 	ldw	r2,-8(fp)
    597c:	e0bfe915 	stw	r2,-92(fp)
    5980:	e13fc404 	addi	r4,fp,-240
    5984:	0006d900 	call	6d90 <_ZNSt6vectorIiSaIiEED1Ev>
    5988:	e0ffe917 	ldw	r3,-92(fp)
    598c:	e0fffe15 	stw	r3,-8(fp)
    5990:	00bfffc4 	movi	r2,-1
    5994:	e0bfdd15 	stw	r2,-140(fp)
    5998:	e13ffe17 	ldw	r4,-8(fp)
    599c:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    59a0:	e13fdc04 	addi	r4,fp,-144
    59a4:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>

}
    59a8:	e037883a 	mov	sp,fp
    59ac:	dfc00917 	ldw	ra,36(sp)
    59b0:	df000817 	ldw	fp,32(sp)
    59b4:	ddc00717 	ldw	r23,28(sp)
    59b8:	dd800617 	ldw	r22,24(sp)
    59bc:	dd400517 	ldw	r21,20(sp)
    59c0:	dd000417 	ldw	r20,16(sp)
    59c4:	dcc00317 	ldw	r19,12(sp)
    59c8:	dc800217 	ldw	r18,8(sp)
    59cc:	dc400117 	ldw	r17,4(sp)
    59d0:	dc000017 	ldw	r16,0(sp)
    59d4:	dec00a04 	addi	sp,sp,40
    59d8:	f800283a 	ret

000059dc <_ZN9__gnu_cxx13new_allocatorIiEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
    59dc:	defffe04 	addi	sp,sp,-8
    59e0:	df000115 	stw	fp,4(sp)
    59e4:	df000104 	addi	fp,sp,4
    59e8:	e13fff15 	stw	r4,-4(fp)
    59ec:	e037883a 	mov	sp,fp
    59f0:	df000017 	ldw	fp,0(sp)
    59f4:	dec00104 	addi	sp,sp,4
    59f8:	f800283a 	ret

000059fc <_ZNSaIiEC1Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }
    59fc:	defffd04 	addi	sp,sp,-12
    5a00:	dfc00215 	stw	ra,8(sp)
    5a04:	df000115 	stw	fp,4(sp)
    5a08:	df000104 	addi	fp,sp,4
    5a0c:	e13fff15 	stw	r4,-4(fp)
    5a10:	e13fff17 	ldw	r4,-4(fp)
    5a14:	00059dc0 	call	59dc <_ZN9__gnu_cxx13new_allocatorIiEC2Ev>
    5a18:	e037883a 	mov	sp,fp
    5a1c:	dfc00117 	ldw	ra,4(sp)
    5a20:	df000017 	ldw	fp,0(sp)
    5a24:	dec00204 	addi	sp,sp,8
    5a28:	f800283a 	ret

00005a2c <_ZN9__gnu_cxx13new_allocatorIiED2Ev>:
      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }
    5a2c:	defffe04 	addi	sp,sp,-8
    5a30:	df000115 	stw	fp,4(sp)
    5a34:	df000104 	addi	fp,sp,4
    5a38:	e13fff15 	stw	r4,-4(fp)
    5a3c:	e037883a 	mov	sp,fp
    5a40:	df000017 	ldw	fp,0(sp)
    5a44:	dec00104 	addi	sp,sp,4
    5a48:	f800283a 	ret

00005a4c <_ZNSaIiED2Ev>:
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
    5a4c:	defffd04 	addi	sp,sp,-12
    5a50:	dfc00215 	stw	ra,8(sp)
    5a54:	df000115 	stw	fp,4(sp)
    5a58:	df000104 	addi	fp,sp,4
    5a5c:	e13fff15 	stw	r4,-4(fp)
    5a60:	e13fff17 	ldw	r4,-4(fp)
    5a64:	0005a2c0 	call	5a2c <_ZN9__gnu_cxx13new_allocatorIiED2Ev>
    5a68:	e037883a 	mov	sp,fp
    5a6c:	dfc00117 	ldw	ra,4(sp)
    5a70:	df000017 	ldw	fp,0(sp)
    5a74:	dec00204 	addi	sp,sp,8
    5a78:	f800283a 	ret

00005a7c <_ZNSaIiED1Ev>:
    5a7c:	defffd04 	addi	sp,sp,-12
    5a80:	dfc00215 	stw	ra,8(sp)
    5a84:	df000115 	stw	fp,4(sp)
    5a88:	df000104 	addi	fp,sp,4
    5a8c:	e13fff15 	stw	r4,-4(fp)
    5a90:	e13fff17 	ldw	r4,-4(fp)
    5a94:	0005a2c0 	call	5a2c <_ZN9__gnu_cxx13new_allocatorIiED2Ev>
    5a98:	e037883a 	mov	sp,fp
    5a9c:	dfc00117 	ldw	ra,4(sp)
    5aa0:	df000017 	ldw	fp,0(sp)
    5aa4:	dec00204 	addi	sp,sp,8
    5aa8:	f800283a 	ret

00005aac <_ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_>:
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }
    5aac:	defffd04 	addi	sp,sp,-12
    5ab0:	df000215 	stw	fp,8(sp)
    5ab4:	df000204 	addi	fp,sp,8
    5ab8:	e13ffe15 	stw	r4,-8(fp)
    5abc:	e17fff15 	stw	r5,-4(fp)
    5ac0:	e037883a 	mov	sp,fp
    5ac4:	df000017 	ldw	fp,0(sp)
    5ac8:	dec00104 	addi	sp,sp,4
    5acc:	f800283a 	ret

00005ad0 <_ZNSaIiEC2ERKS_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    5ad0:	defffc04 	addi	sp,sp,-16
    5ad4:	dfc00315 	stw	ra,12(sp)
    5ad8:	df000215 	stw	fp,8(sp)
    5adc:	df000204 	addi	fp,sp,8
    5ae0:	e13ffe15 	stw	r4,-8(fp)
    5ae4:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
    5ae8:	e13ffe17 	ldw	r4,-8(fp)
    5aec:	e17fff17 	ldw	r5,-4(fp)
    5af0:	0005aac0 	call	5aac <_ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_>
    5af4:	e037883a 	mov	sp,fp
    5af8:	dfc00117 	ldw	ra,4(sp)
    5afc:	df000017 	ldw	fp,0(sp)
    5b00:	dec00204 	addi	sp,sp,8
    5b04:	f800283a 	ret

00005b08 <_ZNSaIiEC1ERKS_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    5b08:	defffc04 	addi	sp,sp,-16
    5b0c:	dfc00315 	stw	ra,12(sp)
    5b10:	df000215 	stw	fp,8(sp)
    5b14:	df000204 	addi	fp,sp,8
    5b18:	e13ffe15 	stw	r4,-8(fp)
    5b1c:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
    5b20:	e13ffe17 	ldw	r4,-8(fp)
    5b24:	e17fff17 	ldw	r5,-4(fp)
    5b28:	0005aac0 	call	5aac <_ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_>
    5b2c:	e037883a 	mov	sp,fp
    5b30:	dfc00117 	ldw	ra,4(sp)
    5b34:	df000017 	ldw	fp,0(sp)
    5b38:	dec00204 	addi	sp,sp,8
    5b3c:	f800283a 	ret

00005b40 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>:
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl 
      : public _Tp_alloc_type
      {
    5b40:	defffd04 	addi	sp,sp,-12
    5b44:	dfc00215 	stw	ra,8(sp)
    5b48:	df000115 	stw	fp,4(sp)
    5b4c:	df000104 	addi	fp,sp,4
    5b50:	e13fff15 	stw	r4,-4(fp)
    5b54:	e13fff17 	ldw	r4,-4(fp)
    5b58:	0005a4c0 	call	5a4c <_ZNSaIiED2Ev>
    5b5c:	e037883a 	mov	sp,fp
    5b60:	dfc00117 	ldw	ra,4(sp)
    5b64:	df000017 	ldw	fp,0(sp)
    5b68:	dec00204 	addi	sp,sp,8
    5b6c:	f800283a 	ret

00005b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
    5b70:	defffe04 	addi	sp,sp,-8
    5b74:	df000115 	stw	fp,4(sp)
    5b78:	df000104 	addi	fp,sp,4
    5b7c:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    5b80:	e0bfff17 	ldw	r2,-4(fp)
    5b84:	e037883a 	mov	sp,fp
    5b88:	df000017 	ldw	fp,0(sp)
    5b8c:	dec00104 	addi	sp,sp,4
    5b90:	f800283a 	ret

00005b94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
    5b94:	defffe04 	addi	sp,sp,-8
    5b98:	df000115 	stw	fp,4(sp)
    5b9c:	df000104 	addi	fp,sp,4
    5ba0:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
    5ba4:	e0bfff17 	ldw	r2,-4(fp)
    5ba8:	10800017 	ldw	r2,0(r2)
    5bac:	e037883a 	mov	sp,fp
    5bb0:	df000017 	ldw	fp,0(sp)
    5bb4:	dec00104 	addi	sp,sp,4
    5bb8:	f800283a 	ret

00005bbc <_ZN9__gnu_cxxeqIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    5bbc:	defffb04 	addi	sp,sp,-20
    5bc0:	dfc00415 	stw	ra,16(sp)
    5bc4:	df000315 	stw	fp,12(sp)
    5bc8:	dc000215 	stw	r16,8(sp)
    5bcc:	df000204 	addi	fp,sp,8
    5bd0:	e13ffe15 	stw	r4,-8(fp)
    5bd4:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() == __rhs.base(); }
    5bd8:	e13ffe17 	ldw	r4,-8(fp)
    5bdc:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    5be0:	14000017 	ldw	r16,0(r2)
    5be4:	e13fff17 	ldw	r4,-4(fp)
    5be8:	00030040 	call	3004 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    5bec:	10800017 	ldw	r2,0(r2)
    5bf0:	8085003a 	cmpeq	r2,r16,r2
    5bf4:	e037883a 	mov	sp,fp
    5bf8:	dfc00217 	ldw	ra,8(sp)
    5bfc:	df000117 	ldw	fp,4(sp)
    5c00:	dc000017 	ldw	r16,0(sp)
    5c04:	dec00304 	addi	sp,sp,12
    5c08:	f800283a 	ret

00005c0c <_ZNKSt6vectorI6MyRectSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      bool
      empty() const
    5c0c:	defffb04 	addi	sp,sp,-20
    5c10:	dfc00415 	stw	ra,16(sp)
    5c14:	df000315 	stw	fp,12(sp)
    5c18:	df000304 	addi	fp,sp,12
    5c1c:	e13fff15 	stw	r4,-4(fp)
      { return begin() == end(); }
    5c20:	e13fff17 	ldw	r4,-4(fp)
    5c24:	0002e6c0 	call	2e6c <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    5c28:	e0bffe15 	stw	r2,-8(fp)
    5c2c:	e13fff17 	ldw	r4,-4(fp)
    5c30:	0002e280 	call	2e28 <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    5c34:	e0bffd15 	stw	r2,-12(fp)
    5c38:	e13ffe04 	addi	r4,fp,-8
    5c3c:	e17ffd04 	addi	r5,fp,-12
    5c40:	0005bbc0 	call	5bbc <_ZN9__gnu_cxxeqIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    5c44:	10803fcc 	andi	r2,r2,255
    5c48:	e037883a 	mov	sp,fp
    5c4c:	dfc00117 	ldw	ra,4(sp)
    5c50:	df000017 	ldw	fp,0(sp)
    5c54:	dec00204 	addi	sp,sp,8
    5c58:	f800283a 	ret

00005c5c <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>:
      : public _Tp_alloc_type
      {
	_Tp*           _M_start;
	_Tp*           _M_finish;
	_Tp*           _M_end_of_storage;
	_Vector_impl(_Tp_alloc_type const& __a)
    5c5c:	defffc04 	addi	sp,sp,-16
    5c60:	dfc00315 	stw	ra,12(sp)
    5c64:	df000215 	stw	fp,8(sp)
    5c68:	df000204 	addi	fp,sp,8
    5c6c:	e13ffe15 	stw	r4,-8(fp)
    5c70:	e17fff15 	stw	r5,-4(fp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    5c74:	e13ffe17 	ldw	r4,-8(fp)
    5c78:	e17fff17 	ldw	r5,-4(fp)
    5c7c:	0005ad00 	call	5ad0 <_ZNSaIiEC2ERKS_>
    5c80:	e0bffe17 	ldw	r2,-8(fp)
    5c84:	10000015 	stw	zero,0(r2)
    5c88:	e0bffe17 	ldw	r2,-8(fp)
    5c8c:	10000115 	stw	zero,4(r2)
    5c90:	e0bffe17 	ldw	r2,-8(fp)
    5c94:	10000215 	stw	zero,8(r2)
	{ }
    5c98:	e037883a 	mov	sp,fp
    5c9c:	dfc00117 	ldw	ra,4(sp)
    5ca0:	df000017 	ldw	fp,0(sp)
    5ca4:	dec00204 	addi	sp,sp,8
    5ca8:	f800283a 	ret

00005cac <_ZNSt12_Vector_baseIiSaIiEEC2ERKS0_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _Vector_base(const allocator_type& __a)
    5cac:	defffc04 	addi	sp,sp,-16
    5cb0:	dfc00315 	stw	ra,12(sp)
    5cb4:	df000215 	stw	fp,8(sp)
    5cb8:	df000204 	addi	fp,sp,8
    5cbc:	e13ffe15 	stw	r4,-8(fp)
    5cc0:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
    5cc4:	e13ffe17 	ldw	r4,-8(fp)
    5cc8:	e17fff17 	ldw	r5,-4(fp)
    5ccc:	0005c5c0 	call	5c5c <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
      { }
    5cd0:	e037883a 	mov	sp,fp
    5cd4:	dfc00117 	ldw	ra,4(sp)
    5cd8:	df000017 	ldw	fp,0(sp)
    5cdc:	dec00204 	addi	sp,sp,8
    5ce0:	f800283a 	ret

00005ce4 <_ZNSt6vectorIiSaIiEEC1ERKS0_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      vector(const allocator_type& __a = allocator_type())
    5ce4:	defffc04 	addi	sp,sp,-16
    5ce8:	dfc00315 	stw	ra,12(sp)
    5cec:	df000215 	stw	fp,8(sp)
    5cf0:	df000204 	addi	fp,sp,8
    5cf4:	e13ffe15 	stw	r4,-8(fp)
    5cf8:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a)
    5cfc:	e13ffe17 	ldw	r4,-8(fp)
    5d00:	e17fff17 	ldw	r5,-4(fp)
    5d04:	0005cac0 	call	5cac <_ZNSt12_Vector_baseIiSaIiEEC2ERKS0_>
      { }
    5d08:	e037883a 	mov	sp,fp
    5d0c:	dfc00117 	ldw	ra,4(sp)
    5d10:	df000017 	ldw	fp,0(sp)
    5d14:	dec00204 	addi	sp,sp,8
    5d18:	f800283a 	ret

00005d1c <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    5d1c:	defffd04 	addi	sp,sp,-12
    5d20:	df000215 	stw	fp,8(sp)
    5d24:	df000204 	addi	fp,sp,8
    5d28:	e13ffe15 	stw	r4,-8(fp)
    5d2c:	e17fff15 	stw	r5,-4(fp)
    5d30:	e0bfff17 	ldw	r2,-4(fp)
    5d34:	10c00017 	ldw	r3,0(r2)
    5d38:	e0bffe17 	ldw	r2,-8(fp)
    5d3c:	10c00015 	stw	r3,0(r2)
    5d40:	e037883a 	mov	sp,fp
    5d44:	df000017 	ldw	fp,0(sp)
    5d48:	dec00104 	addi	sp,sp,4
    5d4c:	f800283a 	ret

00005d50 <_ZNKSt6vectorIiSaIiEE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const
    5d50:	defffb04 	addi	sp,sp,-20
    5d54:	dfc00415 	stw	ra,16(sp)
    5d58:	df000315 	stw	fp,12(sp)
    5d5c:	df000304 	addi	fp,sp,12
    5d60:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_finish); }
    5d64:	e0bfff17 	ldw	r2,-4(fp)
    5d68:	10800117 	ldw	r2,4(r2)
    5d6c:	e0bffd15 	stw	r2,-12(fp)
    5d70:	e13ffe04 	addi	r4,fp,-8
    5d74:	e17ffd04 	addi	r5,fp,-12
    5d78:	0005d1c0 	call	5d1c <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>
    5d7c:	e0bffe17 	ldw	r2,-8(fp)
    5d80:	e037883a 	mov	sp,fp
    5d84:	dfc00117 	ldw	ra,4(sp)
    5d88:	df000017 	ldw	fp,0(sp)
    5d8c:	dec00204 	addi	sp,sp,8
    5d90:	f800283a 	ret

00005d94 <_ZNKSt6vectorIiSaIiEE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const
    5d94:	defffb04 	addi	sp,sp,-20
    5d98:	dfc00415 	stw	ra,16(sp)
    5d9c:	df000315 	stw	fp,12(sp)
    5da0:	df000304 	addi	fp,sp,12
    5da4:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_start); }
    5da8:	e0bfff17 	ldw	r2,-4(fp)
    5dac:	10800017 	ldw	r2,0(r2)
    5db0:	e0bffd15 	stw	r2,-12(fp)
    5db4:	e13ffe04 	addi	r4,fp,-8
    5db8:	e17ffd04 	addi	r5,fp,-12
    5dbc:	0005d1c0 	call	5d1c <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>
    5dc0:	e0bffe17 	ldw	r2,-8(fp)
    5dc4:	e037883a 	mov	sp,fp
    5dc8:	dfc00117 	ldw	ra,4(sp)
    5dcc:	df000017 	ldw	fp,0(sp)
    5dd0:	dec00204 	addi	sp,sp,8
    5dd4:	f800283a 	ret

00005dd8 <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
    5dd8:	defffe04 	addi	sp,sp,-8
    5ddc:	df000115 	stw	fp,4(sp)
    5de0:	df000104 	addi	fp,sp,4
    5de4:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
    5de8:	e0bfff17 	ldw	r2,-4(fp)
    5dec:	e037883a 	mov	sp,fp
    5df0:	df000017 	ldw	fp,0(sp)
    5df4:	dec00104 	addi	sp,sp,4
    5df8:	f800283a 	ret

00005dfc <_ZN9__gnu_cxxmiIPKiS2_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
    5dfc:	defffb04 	addi	sp,sp,-20
    5e00:	dfc00415 	stw	ra,16(sp)
    5e04:	df000315 	stw	fp,12(sp)
    5e08:	dc000215 	stw	r16,8(sp)
    5e0c:	df000204 	addi	fp,sp,8
    5e10:	e13ffe15 	stw	r4,-8(fp)
    5e14:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
    5e18:	e13ffe17 	ldw	r4,-8(fp)
    5e1c:	0005dd80 	call	5dd8 <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>
    5e20:	10800017 	ldw	r2,0(r2)
    5e24:	1021883a 	mov	r16,r2
    5e28:	e13fff17 	ldw	r4,-4(fp)
    5e2c:	0005dd80 	call	5dd8 <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>
    5e30:	10800017 	ldw	r2,0(r2)
    5e34:	8085c83a 	sub	r2,r16,r2
    5e38:	1005d0ba 	srai	r2,r2,2
    5e3c:	e037883a 	mov	sp,fp
    5e40:	dfc00217 	ldw	ra,8(sp)
    5e44:	df000117 	ldw	fp,4(sp)
    5e48:	dc000017 	ldw	r16,0(sp)
    5e4c:	dec00304 	addi	sp,sp,12
    5e50:	f800283a 	ret

00005e54 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const
    5e54:	defffb04 	addi	sp,sp,-20
    5e58:	dfc00415 	stw	ra,16(sp)
    5e5c:	df000315 	stw	fp,12(sp)
    5e60:	df000304 	addi	fp,sp,12
    5e64:	e13fff15 	stw	r4,-4(fp)
      { return size_type(end() - begin()); }
    5e68:	e13fff17 	ldw	r4,-4(fp)
    5e6c:	0005d500 	call	5d50 <_ZNKSt6vectorIiSaIiEE3endEv>
    5e70:	e0bffe15 	stw	r2,-8(fp)
    5e74:	e13fff17 	ldw	r4,-4(fp)
    5e78:	0005d940 	call	5d94 <_ZNKSt6vectorIiSaIiEE5beginEv>
    5e7c:	e0bffd15 	stw	r2,-12(fp)
    5e80:	e13ffe04 	addi	r4,fp,-8
    5e84:	e17ffd04 	addi	r5,fp,-12
    5e88:	0005dfc0 	call	5dfc <_ZN9__gnu_cxxmiIPKiS2_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE>
    5e8c:	e037883a 	mov	sp,fp
    5e90:	dfc00117 	ldw	ra,4(sp)
    5e94:	df000017 	ldw	fp,0(sp)
    5e98:	dec00204 	addi	sp,sp,8
    5e9c:	f800283a 	ret

00005ea0 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    5ea0:	defffd04 	addi	sp,sp,-12
    5ea4:	df000215 	stw	fp,8(sp)
    5ea8:	df000204 	addi	fp,sp,8
    5eac:	e13ffe15 	stw	r4,-8(fp)
    5eb0:	e17fff15 	stw	r5,-4(fp)
    5eb4:	e0bfff17 	ldw	r2,-4(fp)
    5eb8:	10c00017 	ldw	r3,0(r2)
    5ebc:	e0bffe17 	ldw	r2,-8(fp)
    5ec0:	10c00015 	stw	r3,0(r2)
    5ec4:	e037883a 	mov	sp,fp
    5ec8:	df000017 	ldw	fp,0(sp)
    5ecc:	dec00104 	addi	sp,sp,4
    5ed0:	f800283a 	ret

00005ed4 <_ZNSt6vectorIiSaIiEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin()
    5ed4:	defffc04 	addi	sp,sp,-16
    5ed8:	dfc00315 	stw	ra,12(sp)
    5edc:	df000215 	stw	fp,8(sp)
    5ee0:	df000204 	addi	fp,sp,8
    5ee4:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_start); }
    5ee8:	e17fff17 	ldw	r5,-4(fp)
    5eec:	e13ffe04 	addi	r4,fp,-8
    5ef0:	0005ea00 	call	5ea0 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    5ef4:	e0bffe17 	ldw	r2,-8(fp)
    5ef8:	e037883a 	mov	sp,fp
    5efc:	dfc00117 	ldw	ra,4(sp)
    5f00:	df000017 	ldw	fp,0(sp)
    5f04:	dec00204 	addi	sp,sp,8
    5f08:	f800283a 	ret

00005f0c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl>:
      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
    5f0c:	defffa04 	addi	sp,sp,-24
    5f10:	dfc00515 	stw	ra,20(sp)
    5f14:	df000415 	stw	fp,16(sp)
    5f18:	df000404 	addi	fp,sp,16
    5f1c:	e13ffe15 	stw	r4,-8(fp)
    5f20:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current + __n); }
    5f24:	e0bffe17 	ldw	r2,-8(fp)
    5f28:	10c00017 	ldw	r3,0(r2)
    5f2c:	e0bfff17 	ldw	r2,-4(fp)
    5f30:	10800017 	ldw	r2,0(r2)
    5f34:	1085883a 	add	r2,r2,r2
    5f38:	1085883a 	add	r2,r2,r2
    5f3c:	1885883a 	add	r2,r3,r2
    5f40:	e0bffc15 	stw	r2,-16(fp)
    5f44:	e13ffd04 	addi	r4,fp,-12
    5f48:	e17ffc04 	addi	r5,fp,-16
    5f4c:	0005ea00 	call	5ea0 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    5f50:	e0bffd17 	ldw	r2,-12(fp)
    5f54:	e037883a 	mov	sp,fp
    5f58:	dfc00117 	ldw	ra,4(sp)
    5f5c:	df000017 	ldw	fp,0(sp)
    5f60:	dec00204 	addi	sp,sp,8
    5f64:	f800283a 	ret

00005f68 <_ZNSt6vectorIiSaIiEEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
    5f68:	defff904 	addi	sp,sp,-28
    5f6c:	dfc00615 	stw	ra,24(sp)
    5f70:	df000515 	stw	fp,20(sp)
    5f74:	df000504 	addi	fp,sp,20
    5f78:	e13ffe15 	stw	r4,-8(fp)
    5f7c:	e17fff15 	stw	r5,-4(fp)
      { return *(begin() + __n); }
    5f80:	e13ffe17 	ldw	r4,-8(fp)
    5f84:	0005ed40 	call	5ed4 <_ZNSt6vectorIiSaIiEE5beginEv>
    5f88:	e0bffc15 	stw	r2,-16(fp)
    5f8c:	e0bfff17 	ldw	r2,-4(fp)
    5f90:	e0bffb15 	stw	r2,-20(fp)
    5f94:	e13ffc04 	addi	r4,fp,-16
    5f98:	e17ffb04 	addi	r5,fp,-20
    5f9c:	0005f0c0 	call	5f0c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl>
    5fa0:	e0bffd15 	stw	r2,-12(fp)
    5fa4:	e13ffd04 	addi	r4,fp,-12
    5fa8:	0005b940 	call	5b94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv>
    5fac:	e037883a 	mov	sp,fp
    5fb0:	dfc00117 	ldw	ra,4(sp)
    5fb4:	df000017 	ldw	fp,0(sp)
    5fb8:	dec00204 	addi	sp,sp,8
    5fbc:	f800283a 	ret

00005fc0 <_ZNSt6vectorIiSaIiEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end()
    5fc0:	defffc04 	addi	sp,sp,-16
    5fc4:	dfc00315 	stw	ra,12(sp)
    5fc8:	df000215 	stw	fp,8(sp)
    5fcc:	df000204 	addi	fp,sp,8
    5fd0:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_finish); }
    5fd4:	e0bfff17 	ldw	r2,-4(fp)
    5fd8:	11400104 	addi	r5,r2,4
    5fdc:	e13ffe04 	addi	r4,fp,-8
    5fe0:	0005ea00 	call	5ea0 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    5fe4:	e0bffe17 	ldw	r2,-8(fp)
    5fe8:	e037883a 	mov	sp,fp
    5fec:	dfc00117 	ldw	ra,4(sp)
    5ff0:	df000017 	ldw	fp,0(sp)
    5ff4:	dec00204 	addi	sp,sp,8
    5ff8:	f800283a 	ret

00005ffc <_ZSt13__destroy_auxIPiEvT_S1_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
    5ffc:	defffc04 	addi	sp,sp,-16
    6000:	df000315 	stw	fp,12(sp)
    6004:	df000304 	addi	fp,sp,12
    6008:	e13ffd15 	stw	r4,-12(fp)
    600c:	e17ffe15 	stw	r5,-8(fp)
    6010:	e1bfff05 	stb	r6,-4(fp)
    { }
    6014:	e037883a 	mov	sp,fp
    6018:	df000017 	ldw	fp,0(sp)
    601c:	dec00104 	addi	sp,sp,4
    6020:	f800283a 	ret

00006024 <_ZSt8_DestroyIPiEvT_S1_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    6024:	defffb04 	addi	sp,sp,-20
    6028:	dfc00415 	stw	ra,16(sp)
    602c:	df000315 	stw	fp,12(sp)
    6030:	df000304 	addi	fp,sp,12
    6034:	e13ffd15 	stw	r4,-12(fp)
    6038:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
    603c:	e13ffd17 	ldw	r4,-12(fp)
    6040:	e17ffe17 	ldw	r5,-8(fp)
    6044:	e1bfff03 	ldbu	r6,-4(fp)
    6048:	0005ffc0 	call	5ffc <_ZSt13__destroy_auxIPiEvT_S1_11__true_type>
    604c:	e037883a 	mov	sp,fp
    6050:	dfc00117 	ldw	ra,4(sp)
    6054:	df000017 	ldw	fp,0(sp)
    6058:	dec00204 	addi	sp,sp,8
    605c:	f800283a 	ret

00006060 <_ZSt8_DestroyIPiiEvT_S1_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
    6060:	defffb04 	addi	sp,sp,-20
    6064:	dfc00415 	stw	ra,16(sp)
    6068:	df000315 	stw	fp,12(sp)
    606c:	df000304 	addi	fp,sp,12
    6070:	e13ffd15 	stw	r4,-12(fp)
    6074:	e17ffe15 	stw	r5,-8(fp)
    6078:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
    607c:	e13ffd17 	ldw	r4,-12(fp)
    6080:	e17ffe17 	ldw	r5,-8(fp)
    6084:	00060240 	call	6024 <_ZSt8_DestroyIPiEvT_S1_>
    6088:	e037883a 	mov	sp,fp
    608c:	dfc00117 	ldw	ra,4(sp)
    6090:	df000017 	ldw	fp,0(sp)
    6094:	dec00204 	addi	sp,sp,8
    6098:	f800283a 	ret

0000609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
    609c:	defffe04 	addi	sp,sp,-8
    60a0:	df000115 	stw	fp,4(sp)
    60a4:	df000104 	addi	fp,sp,4
    60a8:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
    60ac:	e0bfff17 	ldw	r2,-4(fp)
    60b0:	e037883a 	mov	sp,fp
    60b4:	df000017 	ldw	fp,0(sp)
    60b8:	dec00104 	addi	sp,sp,4
    60bc:	f800283a 	ret

000060c0 <_ZN9__gnu_cxxmiIPiS1_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS8_RKNS5_IT0_S7_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
    60c0:	defffb04 	addi	sp,sp,-20
    60c4:	dfc00415 	stw	ra,16(sp)
    60c8:	df000315 	stw	fp,12(sp)
    60cc:	dc000215 	stw	r16,8(sp)
    60d0:	df000204 	addi	fp,sp,8
    60d4:	e13ffe15 	stw	r4,-8(fp)
    60d8:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
    60dc:	e13ffe17 	ldw	r4,-8(fp)
    60e0:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    60e4:	10800017 	ldw	r2,0(r2)
    60e8:	1021883a 	mov	r16,r2
    60ec:	e13fff17 	ldw	r4,-4(fp)
    60f0:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    60f4:	10800017 	ldw	r2,0(r2)
    60f8:	8085c83a 	sub	r2,r16,r2
    60fc:	1005d0ba 	srai	r2,r2,2
    6100:	e037883a 	mov	sp,fp
    6104:	dfc00217 	ldw	ra,8(sp)
    6108:	df000117 	ldw	fp,4(sp)
    610c:	dc000017 	ldw	r16,0(sp)
    6110:	dec00304 	addi	sp,sp,12
    6114:	f800283a 	ret

00006118 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEmiERKl>:
      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
    6118:	defffa04 	addi	sp,sp,-24
    611c:	dfc00515 	stw	ra,20(sp)
    6120:	df000415 	stw	fp,16(sp)
    6124:	df000404 	addi	fp,sp,16
    6128:	e13ffe15 	stw	r4,-8(fp)
    612c:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current - __n); }
    6130:	e0bffe17 	ldw	r2,-8(fp)
    6134:	10c00017 	ldw	r3,0(r2)
    6138:	e0bfff17 	ldw	r2,-4(fp)
    613c:	10800017 	ldw	r2,0(r2)
    6140:	1085883a 	add	r2,r2,r2
    6144:	1085883a 	add	r2,r2,r2
    6148:	1885c83a 	sub	r2,r3,r2
    614c:	e0bffc15 	stw	r2,-16(fp)
    6150:	e13ffd04 	addi	r4,fp,-12
    6154:	e17ffc04 	addi	r5,fp,-16
    6158:	0005ea00 	call	5ea0 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    615c:	e0bffd17 	ldw	r2,-12(fp)
    6160:	e037883a 	mov	sp,fp
    6164:	dfc00117 	ldw	ra,4(sp)
    6168:	df000017 	ldw	fp,0(sp)
    616c:	dec00204 	addi	sp,sp,8
    6170:	f800283a 	ret

00006174 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>:
      size() const
      { return size_type(end() - begin()); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const
    6174:	defffe04 	addi	sp,sp,-8
    6178:	df000115 	stw	fp,4(sp)
    617c:	df000104 	addi	fp,sp,4
    6180:	e13fff15 	stw	r4,-4(fp)
      { return size_type(-1) / sizeof(value_type); }
    6184:	00900034 	movhi	r2,16384
    6188:	10bfffc4 	addi	r2,r2,-1
    618c:	e037883a 	mov	sp,fp
    6190:	df000017 	ldw	fp,0(sp)
    6194:	dec00104 	addi	sp,sp,4
    6198:	f800283a 	ret

0000619c <_ZSt3maxImERKT_S2_S2_>:
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    619c:	defffc04 	addi	sp,sp,-16
    61a0:	df000315 	stw	fp,12(sp)
    61a4:	df000304 	addi	fp,sp,12
    61a8:	e13ffd15 	stw	r4,-12(fp)
    61ac:	e17ffe15 	stw	r5,-8(fp)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    61b0:	e0bffd17 	ldw	r2,-12(fp)
    61b4:	10c00017 	ldw	r3,0(r2)
    61b8:	e0bffe17 	ldw	r2,-8(fp)
    61bc:	10800017 	ldw	r2,0(r2)
    61c0:	1880032e 	bgeu	r3,r2,61d0 <_ZSt3maxImERKT_S2_S2_+0x34>
	return __b;
    61c4:	e0bffe17 	ldw	r2,-8(fp)
    61c8:	e0bfff15 	stw	r2,-4(fp)
    61cc:	00000206 	br	61d8 <_ZSt3maxImERKT_S2_S2_+0x3c>
      return __a;
    61d0:	e0bffd17 	ldw	r2,-12(fp)
    61d4:	e0bfff15 	stw	r2,-4(fp)
    61d8:	e0bfff17 	ldw	r2,-4(fp)
    61dc:	e037883a 	mov	sp,fp
    61e0:	df000017 	ldw	fp,0(sp)
    61e4:	dec00104 	addi	sp,sp,4
    61e8:	f800283a 	ret

000061ec <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEpLERKl>:
      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
    61ec:	defffd04 	addi	sp,sp,-12
    61f0:	df000215 	stw	fp,8(sp)
    61f4:	df000204 	addi	fp,sp,8
    61f8:	e13ffe15 	stw	r4,-8(fp)
    61fc:	e17fff15 	stw	r5,-4(fp)
      { _M_current += __n; return *this; }
    6200:	e0bffe17 	ldw	r2,-8(fp)
    6204:	10c00017 	ldw	r3,0(r2)
    6208:	e0bfff17 	ldw	r2,-4(fp)
    620c:	10800017 	ldw	r2,0(r2)
    6210:	1085883a 	add	r2,r2,r2
    6214:	1085883a 	add	r2,r2,r2
    6218:	1887883a 	add	r3,r3,r2
    621c:	e0bffe17 	ldw	r2,-8(fp)
    6220:	10c00015 	stw	r3,0(r2)
    6224:	e0bffe17 	ldw	r2,-8(fp)
    6228:	e037883a 	mov	sp,fp
    622c:	df000017 	ldw	fp,0(sp)
    6230:	dec00104 	addi	sp,sp,4
    6234:	f800283a 	ret

00006238 <_ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type>:
    { std::fill_n(__first, __n, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    void
    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,
			       const _Tp& __x, __false_type)
    6238:	defff904 	addi	sp,sp,-28
    623c:	dfc00615 	stw	ra,24(sp)
    6240:	df000515 	stw	fp,20(sp)
    6244:	df000504 	addi	fp,sp,20
    6248:	e13ffc15 	stw	r4,-16(fp)
    624c:	e17ffd15 	stw	r5,-12(fp)
    6250:	e1bffe15 	stw	r6,-8(fp)
    6254:	e1ffff05 	stb	r7,-4(fp)
    {
      _ForwardIterator __cur = __first;
    6258:	e0bffc17 	ldw	r2,-16(fp)
    625c:	e0bffb15 	stw	r2,-20(fp)
      try
	{
	  for (; __n > 0; --__n, ++__cur)
    6260:	00000906 	br	6288 <_ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type+0x50>
	    std::_Construct(&*__cur, __x);
    6264:	e13ffb17 	ldw	r4,-20(fp)
    6268:	e17ffe17 	ldw	r5,-8(fp)
    626c:	00032100 	call	3210 <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_>
			       const _Tp& __x, __false_type)
    {
      _ForwardIterator __cur = __first;
      try
	{
	  for (; __n > 0; --__n, ++__cur)
    6270:	e0bffd17 	ldw	r2,-12(fp)
    6274:	10bfffc4 	addi	r2,r2,-1
    6278:	e0bffd15 	stw	r2,-12(fp)
    627c:	e0bffb17 	ldw	r2,-20(fp)
    6280:	10800404 	addi	r2,r2,16
    6284:	e0bffb15 	stw	r2,-20(fp)
    6288:	e0bffd17 	ldw	r2,-12(fp)
    628c:	1004c03a 	cmpne	r2,r2,zero
    6290:	103ff41e 	bne	r2,zero,6264 <_ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type+0x2c>
	    std::_Construct(&*__cur, __x);
	}
      catch(...)
	{
	  std::_Destroy(__first, __cur);
	  __throw_exception_again;
    6294:	e037883a 	mov	sp,fp
    6298:	dfc00117 	ldw	ra,4(sp)
    629c:	df000017 	ldw	fp,0(sp)
    62a0:	dec00204 	addi	sp,sp,8
    62a4:	f800283a 	ret

000062a8 <_ZSt20uninitialized_fill_nIP6MyRectmS0_EvT_T0_RKT1_>:
   *
   *  Like fill_n(), but does not require an initialized output range.
  */
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    62a8:	defffa04 	addi	sp,sp,-24
    62ac:	dfc00515 	stw	ra,20(sp)
    62b0:	df000415 	stw	fp,16(sp)
    62b4:	df000404 	addi	fp,sp,16
    62b8:	e13ffc15 	stw	r4,-16(fp)
    62bc:	e17ffd15 	stw	r5,-12(fp)
    62c0:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());
    62c4:	e13ffc17 	ldw	r4,-16(fp)
    62c8:	e17ffd17 	ldw	r5,-12(fp)
    62cc:	e1bffe17 	ldw	r6,-8(fp)
    62d0:	e1ffff03 	ldbu	r7,-4(fp)
    62d4:	00062380 	call	6238 <_ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type>
    62d8:	e037883a 	mov	sp,fp
    62dc:	dfc00117 	ldw	ra,4(sp)
    62e0:	df000017 	ldw	fp,0(sp)
    62e4:	dec00204 	addi	sp,sp,8
    62e8:	f800283a 	ret

000062ec <_ZSt24__uninitialized_fill_n_aIP6MyRectmS0_S0_EvT_T0_RKT1_SaIT2_E>:
  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
			     const _Tp& __x,
			     allocator<_Tp2>)
    62ec:	defffa04 	addi	sp,sp,-24
    62f0:	dfc00515 	stw	ra,20(sp)
    62f4:	df000415 	stw	fp,16(sp)
    62f8:	df000404 	addi	fp,sp,16
    62fc:	e13ffc15 	stw	r4,-16(fp)
    6300:	e17ffd15 	stw	r5,-12(fp)
    6304:	e1bffe15 	stw	r6,-8(fp)
    6308:	e1ffff15 	stw	r7,-4(fp)
    {
      std::uninitialized_fill_n(__first, __n, __x);
    630c:	e13ffc17 	ldw	r4,-16(fp)
    6310:	e17ffd17 	ldw	r5,-12(fp)
    6314:	e1bffe17 	ldw	r6,-8(fp)
    6318:	00062a80 	call	62a8 <_ZSt20uninitialized_fill_nIP6MyRectmS0_EvT_T0_RKT1_>
    631c:	e037883a 	mov	sp,fp
    6320:	dfc00117 	ldw	ra,4(sp)
    6324:	df000017 	ldw	fp,0(sp)
    6328:	dec00204 	addi	sp,sp,8
    632c:	f800283a 	ret

00006330 <_ZNSt6vectorI6MyRectSaIS0_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibilty.
       */
      void
      clear()
    6330:	defffa04 	addi	sp,sp,-24
    6334:	dfc00515 	stw	ra,20(sp)
    6338:	df000415 	stw	fp,16(sp)
    633c:	dc400315 	stw	r17,12(sp)
    6340:	dc000215 	stw	r16,8(sp)
    6344:	df000204 	addi	fp,sp,8
    6348:	e13fff15 	stw	r4,-4(fp)
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    634c:	e0bfff17 	ldw	r2,-4(fp)
    6350:	14000017 	ldw	r16,0(r2)
    6354:	e0bfff17 	ldw	r2,-4(fp)
    6358:	14400117 	ldw	r17,4(r2)
    635c:	e13fff17 	ldw	r4,-4(fp)
    6360:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    6364:	100b883a 	mov	r5,r2
    6368:	e13ffe04 	addi	r4,fp,-8
    636c:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    6370:	8009883a 	mov	r4,r16
    6374:	880b883a 	mov	r5,r17
    6378:	e1bffe04 	addi	r6,fp,-8
    637c:	00031ac0 	call	31ac <_ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E>
    6380:	e13ffe04 	addi	r4,fp,-8
    6384:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
		      _M_get_Tp_allocator());
	this->_M_impl._M_finish = this->_M_impl._M_start;
    6388:	e0bfff17 	ldw	r2,-4(fp)
    638c:	10c00017 	ldw	r3,0(r2)
    6390:	e0bfff17 	ldw	r2,-4(fp)
    6394:	10c00115 	stw	r3,4(r2)
    6398:	e037883a 	mov	sp,fp
    639c:	dfc00317 	ldw	ra,12(sp)
    63a0:	df000217 	ldw	fp,8(sp)
    63a4:	dc400117 	ldw	r17,4(sp)
    63a8:	dc000017 	ldw	r16,0(sp)
    63ac:	dec00404 	addi	sp,sp,16
    63b0:	f800283a 	ret

000063b4 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
    63b4:	defffe04 	addi	sp,sp,-8
    63b8:	df000115 	stw	fp,4(sp)
    63bc:	df000104 	addi	fp,sp,4
    63c0:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
    63c4:	00900034 	movhi	r2,16384
    63c8:	10bfffc4 	addi	r2,r2,-1
    63cc:	e037883a 	mov	sp,fp
    63d0:	df000017 	ldw	fp,0(sp)
    63d4:	dec00104 	addi	sp,sp,4
    63d8:	f800283a 	ret

000063dc <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
    63dc:	defffc04 	addi	sp,sp,-16
    63e0:	df000315 	stw	fp,12(sp)
    63e4:	df000304 	addi	fp,sp,12
    63e8:	e13ffd15 	stw	r4,-12(fp)
    63ec:	e17ffe15 	stw	r5,-8(fp)
    63f0:	e1bfff05 	stb	r6,-4(fp)
    { }
    63f4:	e037883a 	mov	sp,fp
    63f8:	df000017 	ldw	fp,0(sp)
    63fc:	dec00104 	addi	sp,sp,4
    6400:	f800283a 	ret

00006404 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    6404:	defffb04 	addi	sp,sp,-20
    6408:	dfc00415 	stw	ra,16(sp)
    640c:	df000315 	stw	fp,12(sp)
    6410:	df000304 	addi	fp,sp,12
    6414:	e13ffd15 	stw	r4,-12(fp)
    6418:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
    641c:	e13ffd17 	ldw	r4,-12(fp)
    6420:	e17ffe17 	ldw	r5,-8(fp)
    6424:	e1bfff03 	ldbu	r6,-4(fp)
    6428:	00063dc0 	call	63dc <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_11__true_type>
    642c:	e037883a 	mov	sp,fp
    6430:	dfc00117 	ldw	ra,4(sp)
    6434:	df000017 	ldw	fp,0(sp)
    6438:	dec00204 	addi	sp,sp,8
    643c:	f800283a 	ret

00006440 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
    6440:	defffb04 	addi	sp,sp,-20
    6444:	dfc00415 	stw	ra,16(sp)
    6448:	df000315 	stw	fp,12(sp)
    644c:	df000304 	addi	fp,sp,12
    6450:	e13ffd15 	stw	r4,-12(fp)
    6454:	e17ffe15 	stw	r5,-8(fp)
    6458:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
    645c:	e13ffd17 	ldw	r4,-12(fp)
    6460:	e17ffe17 	ldw	r5,-8(fp)
    6464:	00064040 	call	6404 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_>
    6468:	e037883a 	mov	sp,fp
    646c:	dfc00117 	ldw	ra,4(sp)
    6470:	df000017 	ldw	fp,0(sp)
    6474:	dec00204 	addi	sp,sp,8
    6478:	f800283a 	ret

0000647c <_ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_>:
  template<>
    struct __fill_n<true>
    {
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
    647c:	defffb04 	addi	sp,sp,-20
    6480:	df000415 	stw	fp,16(sp)
    6484:	df000404 	addi	fp,sp,16
    6488:	e13ffd15 	stw	r4,-12(fp)
    648c:	e17ffe15 	stw	r5,-8(fp)
    6490:	e1bfff15 	stw	r6,-4(fp)
        {
	  const _Tp __tmp = __value;
    6494:	e0bfff17 	ldw	r2,-4(fp)
    6498:	10800017 	ldw	r2,0(r2)
    649c:	e0bffc15 	stw	r2,-16(fp)
	  for (; __n > 0; --__n, ++__first)
    64a0:	00000906 	br	64c8 <_ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_+0x4c>
	    *__first = __tmp;
    64a4:	e0fffd17 	ldw	r3,-12(fp)
    64a8:	e0bffc17 	ldw	r2,-16(fp)
    64ac:	18800015 	stw	r2,0(r3)
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
        {
	  const _Tp __tmp = __value;
	  for (; __n > 0; --__n, ++__first)
    64b0:	e0bffe17 	ldw	r2,-8(fp)
    64b4:	10bfffc4 	addi	r2,r2,-1
    64b8:	e0bffe15 	stw	r2,-8(fp)
    64bc:	e0bffd17 	ldw	r2,-12(fp)
    64c0:	10800104 	addi	r2,r2,4
    64c4:	e0bffd15 	stw	r2,-12(fp)
    64c8:	e0bffe17 	ldw	r2,-8(fp)
    64cc:	1004c03a 	cmpne	r2,r2,zero
    64d0:	103ff41e 	bne	r2,zero,64a4 <_ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_+0x28>
	    *__first = __tmp;
	  return __first;	  
    64d4:	e0bffd17 	ldw	r2,-12(fp)
    64d8:	e037883a 	mov	sp,fp
    64dc:	df000017 	ldw	fp,0(sp)
    64e0:	dec00104 	addi	sp,sp,4
    64e4:	f800283a 	ret

000064e8 <_ZSt6fill_nIPimiET_S1_T0_RKT1_>:
   *  types filling contiguous areas of memory, this becomes an inline call to
   *  @c memset.
  */
  template<typename _OutputIterator, typename _Size, typename _Tp>
    _OutputIterator
    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
    64e8:	defffa04 	addi	sp,sp,-24
    64ec:	dfc00515 	stw	ra,20(sp)
    64f0:	df000415 	stw	fp,16(sp)
    64f4:	df000404 	addi	fp,sp,16
    64f8:	e13ffd15 	stw	r4,-12(fp)
    64fc:	e17ffe15 	stw	r5,-8(fp)
    6500:	e1bfff15 	stw	r6,-4(fp)
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _Tp>)

      const bool __scalar = __is_scalar<_Tp>::__value;
    6504:	00800044 	movi	r2,1
    6508:	e0bffc05 	stb	r2,-16(fp)
      return std::__fill_n<__scalar>::fill_n(__first, __n, __value);
    650c:	e13ffd17 	ldw	r4,-12(fp)
    6510:	e17ffe17 	ldw	r5,-8(fp)
    6514:	e1bfff17 	ldw	r6,-4(fp)
    6518:	000647c0 	call	647c <_ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_>
    651c:	e037883a 	mov	sp,fp
    6520:	dfc00117 	ldw	ra,4(sp)
    6524:	df000017 	ldw	fp,0(sp)
    6528:	dec00204 	addi	sp,sp,8
    652c:	f800283a 	ret

00006530 <_ZSt26__uninitialized_fill_n_auxIPimiEvT_T0_RKT1_11__true_type>:
  // Valid if copy construction is equivalent to assignment, and if the
  //  destructor is trivial.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,
			       const _Tp& __x, __true_type)
    6530:	defffa04 	addi	sp,sp,-24
    6534:	dfc00515 	stw	ra,20(sp)
    6538:	df000415 	stw	fp,16(sp)
    653c:	df000404 	addi	fp,sp,16
    6540:	e13ffc15 	stw	r4,-16(fp)
    6544:	e17ffd15 	stw	r5,-12(fp)
    6548:	e1bffe15 	stw	r6,-8(fp)
    654c:	e1ffff05 	stb	r7,-4(fp)
    { std::fill_n(__first, __n, __x); }
    6550:	e13ffc17 	ldw	r4,-16(fp)
    6554:	e17ffd17 	ldw	r5,-12(fp)
    6558:	e1bffe17 	ldw	r6,-8(fp)
    655c:	00064e80 	call	64e8 <_ZSt6fill_nIPimiET_S1_T0_RKT1_>
    6560:	e037883a 	mov	sp,fp
    6564:	dfc00117 	ldw	ra,4(sp)
    6568:	df000017 	ldw	fp,0(sp)
    656c:	dec00204 	addi	sp,sp,8
    6570:	f800283a 	ret

00006574 <_ZSt20uninitialized_fill_nIPimiEvT_T0_RKT1_>:
   *
   *  Like fill_n(), but does not require an initialized output range.
  */
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    6574:	defffa04 	addi	sp,sp,-24
    6578:	dfc00515 	stw	ra,20(sp)
    657c:	df000415 	stw	fp,16(sp)
    6580:	df000404 	addi	fp,sp,16
    6584:	e13ffc15 	stw	r4,-16(fp)
    6588:	e17ffd15 	stw	r5,-12(fp)
    658c:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());
    6590:	e13ffc17 	ldw	r4,-16(fp)
    6594:	e17ffd17 	ldw	r5,-12(fp)
    6598:	e1bffe17 	ldw	r6,-8(fp)
    659c:	e1ffff03 	ldbu	r7,-4(fp)
    65a0:	00065300 	call	6530 <_ZSt26__uninitialized_fill_n_auxIPimiEvT_T0_RKT1_11__true_type>
    65a4:	e037883a 	mov	sp,fp
    65a8:	dfc00117 	ldw	ra,4(sp)
    65ac:	df000017 	ldw	fp,0(sp)
    65b0:	dec00204 	addi	sp,sp,8
    65b4:	f800283a 	ret

000065b8 <_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_SaIT2_E>:
  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
			     const _Tp& __x,
			     allocator<_Tp2>)
    65b8:	defffa04 	addi	sp,sp,-24
    65bc:	dfc00515 	stw	ra,20(sp)
    65c0:	df000415 	stw	fp,16(sp)
    65c4:	df000404 	addi	fp,sp,16
    65c8:	e13ffc15 	stw	r4,-16(fp)
    65cc:	e17ffd15 	stw	r5,-12(fp)
    65d0:	e1bffe15 	stw	r6,-8(fp)
    65d4:	e1ffff15 	stw	r7,-4(fp)
    {
      std::uninitialized_fill_n(__first, __n, __x);
    65d8:	e13ffc17 	ldw	r4,-16(fp)
    65dc:	e17ffd17 	ldw	r5,-12(fp)
    65e0:	e1bffe17 	ldw	r6,-8(fp)
    65e4:	00065740 	call	6574 <_ZSt20uninitialized_fill_nIPimiEvT_T0_RKT1_>
    65e8:	e037883a 	mov	sp,fp
    65ec:	dfc00117 	ldw	ra,4(sp)
    65f0:	df000017 	ldw	fp,0(sp)
    65f4:	dec00204 	addi	sp,sp,8
    65f8:	f800283a 	ret

000065fc <_ZN9__gnu_cxxneIPiSt6vectorIiSaIiEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    65fc:	defffb04 	addi	sp,sp,-20
    6600:	dfc00415 	stw	ra,16(sp)
    6604:	df000315 	stw	fp,12(sp)
    6608:	dc000215 	stw	r16,8(sp)
    660c:	df000204 	addi	fp,sp,8
    6610:	e13ffe15 	stw	r4,-8(fp)
    6614:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() != __rhs.base(); }
    6618:	e13ffe17 	ldw	r4,-8(fp)
    661c:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    6620:	14000017 	ldw	r16,0(r2)
    6624:	e13fff17 	ldw	r4,-4(fp)
    6628:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    662c:	10800017 	ldw	r2,0(r2)
    6630:	8084c03a 	cmpne	r2,r16,r2
    6634:	e037883a 	mov	sp,fp
    6638:	dfc00217 	ldw	ra,8(sp)
    663c:	df000117 	ldw	fp,4(sp)
    6640:	dc000017 	ldw	r16,0(sp)
    6644:	dec00304 	addi	sp,sp,12
    6648:	f800283a 	ret

0000664c <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
    664c:	defffe04 	addi	sp,sp,-8
    6650:	df000115 	stw	fp,4(sp)
    6654:	df000104 	addi	fp,sp,4
    6658:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
    665c:	e0bfff17 	ldw	r2,-4(fp)
    6660:	10800017 	ldw	r2,0(r2)
    6664:	10c00104 	addi	r3,r2,4
    6668:	e0bfff17 	ldw	r2,-4(fp)
    666c:	10c00015 	stw	r3,0(r2)
	return *this;
    6670:	e0bfff17 	ldw	r2,-4(fp)
    6674:	e037883a 	mov	sp,fp
    6678:	df000017 	ldw	fp,0(sp)
    667c:	dec00104 	addi	sp,sp,4
    6680:	f800283a 	ret

00006684 <_ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_>:
    struct __fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        fill(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    6684:	defffa04 	addi	sp,sp,-24
    6688:	dfc00515 	stw	ra,20(sp)
    668c:	df000415 	stw	fp,16(sp)
    6690:	df000404 	addi	fp,sp,16
    6694:	e13ffd15 	stw	r4,-12(fp)
    6698:	e17ffe15 	stw	r5,-8(fp)
    669c:	e1bfff15 	stw	r6,-4(fp)
        {
	  const _Tp __tmp = __value;
    66a0:	e0bfff17 	ldw	r2,-4(fp)
    66a4:	10800017 	ldw	r2,0(r2)
    66a8:	e0bffc15 	stw	r2,-16(fp)
	  for (; __first != __last; ++__first)
    66ac:	00000706 	br	66cc <_ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_+0x48>
	    *__first = __tmp;
    66b0:	e13ffd04 	addi	r4,fp,-12
    66b4:	0005b940 	call	5b94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv>
    66b8:	1007883a 	mov	r3,r2
    66bc:	e0bffc17 	ldw	r2,-16(fp)
    66c0:	18800015 	stw	r2,0(r3)
        static void
        fill(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
        {
	  const _Tp __tmp = __value;
	  for (; __first != __last; ++__first)
    66c4:	e13ffd04 	addi	r4,fp,-12
    66c8:	000664c0 	call	664c <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv>
    66cc:	e13ffd04 	addi	r4,fp,-12
    66d0:	e17ffe04 	addi	r5,fp,-8
    66d4:	00065fc0 	call	65fc <_ZN9__gnu_cxxneIPiSt6vectorIiSaIiEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
    66d8:	10803fcc 	andi	r2,r2,255
    66dc:	1004c03a 	cmpne	r2,r2,zero
    66e0:	103ff31e 	bne	r2,zero,66b0 <_ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_+0x2c>
	    *__first = __tmp;
    66e4:	e037883a 	mov	sp,fp
    66e8:	dfc00117 	ldw	ra,4(sp)
    66ec:	df000017 	ldw	fp,0(sp)
    66f0:	dec00204 	addi	sp,sp,8
    66f4:	f800283a 	ret

000066f8 <_ZSt4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call to
   *  @c memset.
  */
  template<typename _ForwardIterator, typename _Tp>
    void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    66f8:	defffa04 	addi	sp,sp,-24
    66fc:	dfc00515 	stw	ra,20(sp)
    6700:	df000415 	stw	fp,16(sp)
    6704:	df000404 	addi	fp,sp,16
    6708:	e13ffd15 	stw	r4,-12(fp)
    670c:	e17ffe15 	stw	r5,-8(fp)
    6710:	e1bfff15 	stw	r6,-4(fp)
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __scalar = __is_scalar<_Tp>::__value;
    6714:	00800044 	movi	r2,1
    6718:	e0bffc05 	stb	r2,-16(fp)
      std::__fill<__scalar>::fill(__first, __last, __value);
    671c:	e13ffd17 	ldw	r4,-12(fp)
    6720:	e17ffe17 	ldw	r5,-8(fp)
    6724:	e1bfff17 	ldw	r6,-4(fp)
    6728:	00066840 	call	6684 <_ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_>
    672c:	e037883a 	mov	sp,fp
    6730:	dfc00117 	ldw	ra,4(sp)
    6734:	df000017 	ldw	fp,0(sp)
    6738:	dec00204 	addi	sp,sp,8
    673c:	f800283a 	ret

00006740 <_ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_>:
  template<>
    struct __fill_n<true>
    {
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
    6740:	defffa04 	addi	sp,sp,-24
    6744:	dfc00515 	stw	ra,20(sp)
    6748:	df000415 	stw	fp,16(sp)
    674c:	df000404 	addi	fp,sp,16
    6750:	e13ffd15 	stw	r4,-12(fp)
    6754:	e17ffe15 	stw	r5,-8(fp)
    6758:	e1bfff15 	stw	r6,-4(fp)
        {
	  const _Tp __tmp = __value;
    675c:	e0bfff17 	ldw	r2,-4(fp)
    6760:	10800017 	ldw	r2,0(r2)
    6764:	e0bffc15 	stw	r2,-16(fp)
	  for (; __n > 0; --__n, ++__first)
    6768:	00000a06 	br	6794 <_ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_+0x54>
	    *__first = __tmp;
    676c:	e13ffd04 	addi	r4,fp,-12
    6770:	0005b940 	call	5b94 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv>
    6774:	1007883a 	mov	r3,r2
    6778:	e0bffc17 	ldw	r2,-16(fp)
    677c:	18800015 	stw	r2,0(r3)
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
        {
	  const _Tp __tmp = __value;
	  for (; __n > 0; --__n, ++__first)
    6780:	e0bffe17 	ldw	r2,-8(fp)
    6784:	10bfffc4 	addi	r2,r2,-1
    6788:	e0bffe15 	stw	r2,-8(fp)
    678c:	e13ffd04 	addi	r4,fp,-12
    6790:	000664c0 	call	664c <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv>
    6794:	e0bffe17 	ldw	r2,-8(fp)
    6798:	1004c03a 	cmpne	r2,r2,zero
    679c:	103ff31e 	bne	r2,zero,676c <_ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_+0x2c>
	    *__first = __tmp;
	  return __first;	  
    67a0:	e0bffd17 	ldw	r2,-12(fp)
    67a4:	e037883a 	mov	sp,fp
    67a8:	dfc00117 	ldw	ra,4(sp)
    67ac:	df000017 	ldw	fp,0(sp)
    67b0:	dec00204 	addi	sp,sp,8
    67b4:	f800283a 	ret

000067b8 <_ZSt6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiET_S7_T0_RKT1_>:
   *  types filling contiguous areas of memory, this becomes an inline call to
   *  @c memset.
  */
  template<typename _OutputIterator, typename _Size, typename _Tp>
    _OutputIterator
    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
    67b8:	defffa04 	addi	sp,sp,-24
    67bc:	dfc00515 	stw	ra,20(sp)
    67c0:	df000415 	stw	fp,16(sp)
    67c4:	df000404 	addi	fp,sp,16
    67c8:	e13ffd15 	stw	r4,-12(fp)
    67cc:	e17ffe15 	stw	r5,-8(fp)
    67d0:	e1bfff15 	stw	r6,-4(fp)
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _Tp>)

      const bool __scalar = __is_scalar<_Tp>::__value;
    67d4:	00800044 	movi	r2,1
    67d8:	e0bffc05 	stb	r2,-16(fp)
      return std::__fill_n<__scalar>::fill_n(__first, __n, __value);
    67dc:	e13ffd17 	ldw	r4,-12(fp)
    67e0:	e17ffe17 	ldw	r5,-8(fp)
    67e4:	e1bfff17 	ldw	r6,-4(fp)
    67e8:	00067400 	call	6740 <_ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_>
    67ec:	e037883a 	mov	sp,fp
    67f0:	dfc00117 	ldw	ra,4(sp)
    67f4:	df000017 	ldw	fp,0(sp)
    67f8:	dec00204 	addi	sp,sp,8
    67fc:	f800283a 	ret

00006800 <_ZSt26__uninitialized_fill_n_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_11__true_type>:
  // Valid if copy construction is equivalent to assignment, and if the
  //  destructor is trivial.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,
			       const _Tp& __x, __true_type)
    6800:	defffa04 	addi	sp,sp,-24
    6804:	dfc00515 	stw	ra,20(sp)
    6808:	df000415 	stw	fp,16(sp)
    680c:	df000404 	addi	fp,sp,16
    6810:	e13ffc15 	stw	r4,-16(fp)
    6814:	e17ffd15 	stw	r5,-12(fp)
    6818:	e1bffe15 	stw	r6,-8(fp)
    681c:	e1ffff05 	stb	r7,-4(fp)
    { std::fill_n(__first, __n, __x); }
    6820:	e13ffc17 	ldw	r4,-16(fp)
    6824:	e17ffd17 	ldw	r5,-12(fp)
    6828:	e1bffe17 	ldw	r6,-8(fp)
    682c:	00067b80 	call	67b8 <_ZSt6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiET_S7_T0_RKT1_>
    6830:	e037883a 	mov	sp,fp
    6834:	dfc00117 	ldw	ra,4(sp)
    6838:	df000017 	ldw	fp,0(sp)
    683c:	dec00204 	addi	sp,sp,8
    6840:	f800283a 	ret

00006844 <_ZSt20uninitialized_fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_>:
   *
   *  Like fill_n(), but does not require an initialized output range.
  */
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    6844:	defffa04 	addi	sp,sp,-24
    6848:	dfc00515 	stw	ra,20(sp)
    684c:	df000415 	stw	fp,16(sp)
    6850:	df000404 	addi	fp,sp,16
    6854:	e13ffc15 	stw	r4,-16(fp)
    6858:	e17ffd15 	stw	r5,-12(fp)
    685c:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());
    6860:	e13ffc17 	ldw	r4,-16(fp)
    6864:	e17ffd17 	ldw	r5,-12(fp)
    6868:	e1bffe17 	ldw	r6,-8(fp)
    686c:	e1ffff03 	ldbu	r7,-4(fp)
    6870:	00068000 	call	6800 <_ZSt26__uninitialized_fill_n_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_11__true_type>
    6874:	e037883a 	mov	sp,fp
    6878:	dfc00117 	ldw	ra,4(sp)
    687c:	df000017 	ldw	fp,0(sp)
    6880:	dec00204 	addi	sp,sp,8
    6884:	f800283a 	ret

00006888 <_ZSt24__uninitialized_fill_n_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiiEvT_T0_RKT1_SaIT2_E>:
  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
			     const _Tp& __x,
			     allocator<_Tp2>)
    6888:	defffa04 	addi	sp,sp,-24
    688c:	dfc00515 	stw	ra,20(sp)
    6890:	df000415 	stw	fp,16(sp)
    6894:	df000404 	addi	fp,sp,16
    6898:	e13ffc15 	stw	r4,-16(fp)
    689c:	e17ffd15 	stw	r5,-12(fp)
    68a0:	e1bffe15 	stw	r6,-8(fp)
    68a4:	e1ffff15 	stw	r7,-4(fp)
    {
      std::uninitialized_fill_n(__first, __n, __x);
    68a8:	e13ffc17 	ldw	r4,-16(fp)
    68ac:	e17ffd17 	ldw	r5,-12(fp)
    68b0:	e1bffe17 	ldw	r6,-8(fp)
    68b4:	00068440 	call	6844 <_ZSt20uninitialized_fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_>
    68b8:	e037883a 	mov	sp,fp
    68bc:	dfc00117 	ldw	ra,4(sp)
    68c0:	df000017 	ldw	fp,0(sp)
    68c4:	dec00204 	addi	sp,sp,8
    68c8:	f800283a 	ret

000068cc <_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
    68cc:	defffb04 	addi	sp,sp,-20
    68d0:	dfc00415 	stw	ra,16(sp)
    68d4:	df000315 	stw	fp,12(sp)
    68d8:	df000304 	addi	fp,sp,12
    68dc:	e13ffd15 	stw	r4,-12(fp)
    68e0:	e17ffe15 	stw	r5,-8(fp)
    68e4:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
    68e8:	e13ffd17 	ldw	r4,-12(fp)
    68ec:	00063b40 	call	63b4 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
    68f0:	1007883a 	mov	r3,r2
    68f4:	e0bffe17 	ldw	r2,-8(fp)
    68f8:	1885803a 	cmpltu	r2,r3,r2
    68fc:	1004c03a 	cmpne	r2,r2,zero
    6900:	10803fcc 	andi	r2,r2,255
    6904:	1005003a 	cmpeq	r2,r2,zero
    6908:	1000011e 	bne	r2,zero,6910 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
    690c:	0007c100 	call	7c10 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    6910:	e0bffe17 	ldw	r2,-8(fp)
    6914:	1085883a 	add	r2,r2,r2
    6918:	1085883a 	add	r2,r2,r2
    691c:	1009883a 	mov	r4,r2
    6920:	000ef4c0 	call	ef4c <_Znwm>
    6924:	e037883a 	mov	sp,fp
    6928:	dfc00117 	ldw	ra,4(sp)
    692c:	df000017 	ldw	fp,0(sp)
    6930:	dec00204 	addi	sp,sp,8
    6934:	f800283a 	ret

00006938 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      _Tp*
      _M_allocate(size_t __n)
    6938:	defffc04 	addi	sp,sp,-16
    693c:	dfc00315 	stw	ra,12(sp)
    6940:	df000215 	stw	fp,8(sp)
    6944:	df000204 	addi	fp,sp,8
    6948:	e13ffe15 	stw	r4,-8(fp)
    694c:	e17fff15 	stw	r5,-4(fp)
      { return _M_impl.allocate(__n); }
    6950:	e0bffe17 	ldw	r2,-8(fp)
    6954:	1009883a 	mov	r4,r2
    6958:	e17fff17 	ldw	r5,-4(fp)
    695c:	000d883a 	mov	r6,zero
    6960:	00068cc0 	call	68cc <_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv>
    6964:	e037883a 	mov	sp,fp
    6968:	dfc00117 	ldw	ra,4(sp)
    696c:	df000017 	ldw	fp,0(sp)
    6970:	dec00204 	addi	sp,sp,8
    6974:	f800283a 	ret

00006978 <_ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_>:

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a)
      { }

      _Vector_base(size_t __n, const allocator_type& __a)
    6978:	deffe404 	addi	sp,sp,-112
    697c:	dfc01b15 	stw	ra,108(sp)
    6980:	df001a15 	stw	fp,104(sp)
    6984:	ddc01915 	stw	r23,100(sp)
    6988:	dd801815 	stw	r22,96(sp)
    698c:	dd401715 	stw	r21,92(sp)
    6990:	dd001615 	stw	r20,88(sp)
    6994:	dcc01515 	stw	r19,84(sp)
    6998:	dc801415 	stw	r18,80(sp)
    699c:	dc401315 	stw	r17,76(sp)
    69a0:	dc001215 	stw	r16,72(sp)
    69a4:	df001204 	addi	fp,sp,72
    69a8:	e13fee15 	stw	r4,-72(fp)
    69ac:	e17fef15 	stw	r5,-68(fp)
    69b0:	e1bff015 	stw	r6,-64(fp)
    69b4:	00800074 	movhi	r2,1
    69b8:	10b9cd04 	addi	r2,r2,-6348
    69bc:	e0bff715 	stw	r2,-36(fp)
    69c0:	008000b4 	movhi	r2,2
    69c4:	10b88584 	addi	r2,r2,-7658
    69c8:	e0bff815 	stw	r2,-32(fp)
    69cc:	e0bff904 	addi	r2,fp,-28
    69d0:	e0ffee04 	addi	r3,fp,-72
    69d4:	10c00015 	stw	r3,0(r2)
    69d8:	00c00034 	movhi	r3,0
    69dc:	18da9404 	addi	r3,r3,27216
    69e0:	10c00115 	stw	r3,4(r2)
    69e4:	16c00215 	stw	sp,8(r2)
    69e8:	e13ff104 	addi	r4,fp,-60
    69ec:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
      : _M_impl(__a)
    69f0:	e13fee17 	ldw	r4,-72(fp)
    69f4:	e17ff017 	ldw	r5,-64(fp)
    69f8:	0005c5c0 	call	5c5c <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
      {
	this->_M_impl._M_start = this->_M_allocate(__n);
    69fc:	00800044 	movi	r2,1
    6a00:	e0bff215 	stw	r2,-56(fp)
    6a04:	e13fee17 	ldw	r4,-72(fp)
    6a08:	e17fef17 	ldw	r5,-68(fp)
    6a0c:	00069380 	call	6938 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm>
    6a10:	1007883a 	mov	r3,r2
    6a14:	e0bfee17 	ldw	r2,-72(fp)
    6a18:	10c00015 	stw	r3,0(r2)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    6a1c:	e0bfee17 	ldw	r2,-72(fp)
    6a20:	10c00017 	ldw	r3,0(r2)
    6a24:	e0bfee17 	ldw	r2,-72(fp)
    6a28:	10c00115 	stw	r3,4(r2)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    6a2c:	e0bfee17 	ldw	r2,-72(fp)
    6a30:	10c00017 	ldw	r3,0(r2)
    6a34:	e0bfef17 	ldw	r2,-68(fp)
    6a38:	1085883a 	add	r2,r2,r2
    6a3c:	1085883a 	add	r2,r2,r2
    6a40:	1887883a 	add	r3,r3,r2
    6a44:	e0bfee17 	ldw	r2,-72(fp)
    6a48:	10c00215 	stw	r3,8(r2)
    6a4c:	00000d06 	br	6a84 <_ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_+0x10c>
    6a50:	e7001204 	addi	fp,fp,72
    6a54:	e0bff317 	ldw	r2,-52(fp)
    6a58:	e0bfff15 	stw	r2,-4(fp)
    6a5c:	e0ffff17 	ldw	r3,-4(fp)
    6a60:	e0fffe15 	stw	r3,-8(fp)
    6a64:	e13fee17 	ldw	r4,-72(fp)
    6a68:	0005b400 	call	5b40 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
    6a6c:	e0bffe17 	ldw	r2,-8(fp)
    6a70:	e0bfff15 	stw	r2,-4(fp)
    6a74:	00bfffc4 	movi	r2,-1
    6a78:	e0bff215 	stw	r2,-56(fp)
    6a7c:	e13fff17 	ldw	r4,-4(fp)
    6a80:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    6a84:	e13ff104 	addi	r4,fp,-60
    6a88:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    6a8c:	e037883a 	mov	sp,fp
    6a90:	dfc00917 	ldw	ra,36(sp)
    6a94:	df000817 	ldw	fp,32(sp)
    6a98:	ddc00717 	ldw	r23,28(sp)
    6a9c:	dd800617 	ldw	r22,24(sp)
    6aa0:	dd400517 	ldw	r21,20(sp)
    6aa4:	dd000417 	ldw	r20,16(sp)
    6aa8:	dcc00317 	ldw	r19,12(sp)
    6aac:	dc800217 	ldw	r18,8(sp)
    6ab0:	dc400117 	ldw	r17,4(sp)
    6ab4:	dc000017 	ldw	r16,0(sp)
    6ab8:	dec00a04 	addi	sp,sp,40
    6abc:	f800283a 	ret

00006ac0 <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2EmRKS1_>:

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a)
      { }

      _Vector_base(size_t __n, const allocator_type& __a)
    6ac0:	deffe404 	addi	sp,sp,-112
    6ac4:	dfc01b15 	stw	ra,108(sp)
    6ac8:	df001a15 	stw	fp,104(sp)
    6acc:	ddc01915 	stw	r23,100(sp)
    6ad0:	dd801815 	stw	r22,96(sp)
    6ad4:	dd401715 	stw	r21,92(sp)
    6ad8:	dd001615 	stw	r20,88(sp)
    6adc:	dcc01515 	stw	r19,84(sp)
    6ae0:	dc801415 	stw	r18,80(sp)
    6ae4:	dc401315 	stw	r17,76(sp)
    6ae8:	dc001215 	stw	r16,72(sp)
    6aec:	df001204 	addi	fp,sp,72
    6af0:	e13fee15 	stw	r4,-72(fp)
    6af4:	e17fef15 	stw	r5,-68(fp)
    6af8:	e1bff015 	stw	r6,-64(fp)
    6afc:	00800074 	movhi	r2,1
    6b00:	10b9cd04 	addi	r2,r2,-6348
    6b04:	e0bff715 	stw	r2,-36(fp)
    6b08:	008000b4 	movhi	r2,2
    6b0c:	10b88704 	addi	r2,r2,-7652
    6b10:	e0bff815 	stw	r2,-32(fp)
    6b14:	e0bff904 	addi	r2,fp,-28
    6b18:	e0ffee04 	addi	r3,fp,-72
    6b1c:	10c00015 	stw	r3,0(r2)
    6b20:	00c00034 	movhi	r3,0
    6b24:	18dae504 	addi	r3,r3,27540
    6b28:	10c00115 	stw	r3,4(r2)
    6b2c:	16c00215 	stw	sp,8(r2)
    6b30:	e13ff104 	addi	r4,fp,-60
    6b34:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
      : _M_impl(__a)
    6b38:	e13fee17 	ldw	r4,-72(fp)
    6b3c:	e17ff017 	ldw	r5,-64(fp)
    6b40:	0002d340 	call	2d34 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implC1ERKS1_>
      {
	this->_M_impl._M_start = this->_M_allocate(__n);
    6b44:	00800044 	movi	r2,1
    6b48:	e0bff215 	stw	r2,-56(fp)
    6b4c:	e13fee17 	ldw	r4,-72(fp)
    6b50:	e17fef17 	ldw	r5,-68(fp)
    6b54:	00036ec0 	call	36ec <_ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm>
    6b58:	1007883a 	mov	r3,r2
    6b5c:	e0bfee17 	ldw	r2,-72(fp)
    6b60:	10c00015 	stw	r3,0(r2)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    6b64:	e0bfee17 	ldw	r2,-72(fp)
    6b68:	10c00017 	ldw	r3,0(r2)
    6b6c:	e0bfee17 	ldw	r2,-72(fp)
    6b70:	10c00115 	stw	r3,4(r2)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    6b74:	e0bfee17 	ldw	r2,-72(fp)
    6b78:	10c00017 	ldw	r3,0(r2)
    6b7c:	e0bfef17 	ldw	r2,-68(fp)
    6b80:	1004913a 	slli	r2,r2,4
    6b84:	1887883a 	add	r3,r3,r2
    6b88:	e0bfee17 	ldw	r2,-72(fp)
    6b8c:	10c00215 	stw	r3,8(r2)
    6b90:	00000d06 	br	6bc8 <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2EmRKS1_+0x108>
    6b94:	e7001204 	addi	fp,fp,72
    6b98:	e0bff317 	ldw	r2,-52(fp)
    6b9c:	e0bfff15 	stw	r2,-4(fp)
    6ba0:	e0ffff17 	ldw	r3,-4(fp)
    6ba4:	e0fffe15 	stw	r3,-8(fp)
    6ba8:	e13fee17 	ldw	r4,-72(fp)
    6bac:	0002c600 	call	2c60 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implD1Ev>
    6bb0:	e0bffe17 	ldw	r2,-8(fp)
    6bb4:	e0bfff15 	stw	r2,-4(fp)
    6bb8:	00bfffc4 	movi	r2,-1
    6bbc:	e0bff215 	stw	r2,-56(fp)
    6bc0:	e13fff17 	ldw	r4,-4(fp)
    6bc4:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    6bc8:	e13ff104 	addi	r4,fp,-60
    6bcc:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    6bd0:	e037883a 	mov	sp,fp
    6bd4:	dfc00917 	ldw	ra,36(sp)
    6bd8:	df000817 	ldw	fp,32(sp)
    6bdc:	ddc00717 	ldw	r23,28(sp)
    6be0:	dd800617 	ldw	r22,24(sp)
    6be4:	dd400517 	ldw	r21,20(sp)
    6be8:	dd000417 	ldw	r20,16(sp)
    6bec:	dcc00317 	ldw	r19,12(sp)
    6bf0:	dc800217 	ldw	r18,8(sp)
    6bf4:	dc400117 	ldw	r17,4(sp)
    6bf8:	dc000017 	ldw	r16,0(sp)
    6bfc:	dec00a04 	addi	sp,sp,40
    6c00:	f800283a 	ret

00006c04 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
    6c04:	defffb04 	addi	sp,sp,-20
    6c08:	dfc00415 	stw	ra,16(sp)
    6c0c:	df000315 	stw	fp,12(sp)
    6c10:	df000304 	addi	fp,sp,12
    6c14:	e13ffd15 	stw	r4,-12(fp)
    6c18:	e17ffe15 	stw	r5,-8(fp)
    6c1c:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
    6c20:	e13ffe17 	ldw	r4,-8(fp)
    6c24:	000e01c0 	call	e01c <_ZdlPv>
    6c28:	e037883a 	mov	sp,fp
    6c2c:	dfc00117 	ldw	ra,4(sp)
    6c30:	df000017 	ldw	fp,0(sp)
    6c34:	dec00204 	addi	sp,sp,8
    6c38:	f800283a 	ret

00006c3c <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim>:
      _Tp*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(__n); }

      void
      _M_deallocate(_Tp* __p, size_t __n)
    6c3c:	defffb04 	addi	sp,sp,-20
    6c40:	dfc00415 	stw	ra,16(sp)
    6c44:	df000315 	stw	fp,12(sp)
    6c48:	df000304 	addi	fp,sp,12
    6c4c:	e13ffd15 	stw	r4,-12(fp)
    6c50:	e17ffe15 	stw	r5,-8(fp)
    6c54:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__p)
    6c58:	e0bffe17 	ldw	r2,-8(fp)
    6c5c:	1005003a 	cmpeq	r2,r2,zero
    6c60:	1000051e 	bne	r2,zero,6c78 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim+0x3c>
	  _M_impl.deallocate(__p, __n);
    6c64:	e0bffd17 	ldw	r2,-12(fp)
    6c68:	1009883a 	mov	r4,r2
    6c6c:	e17ffe17 	ldw	r5,-8(fp)
    6c70:	e1bfff17 	ldw	r6,-4(fp)
    6c74:	0006c040 	call	6c04 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim>
    6c78:	e037883a 	mov	sp,fp
    6c7c:	dfc00117 	ldw	ra,4(sp)
    6c80:	df000017 	ldw	fp,0(sp)
    6c84:	dec00204 	addi	sp,sp,8
    6c88:	f800283a 	ret

00006c8c <_ZNSt12_Vector_baseIiSaIiEED2Ev>:
	this->_M_impl._M_start = this->_M_allocate(__n);
	this->_M_impl._M_finish = this->_M_impl._M_start;
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      ~_Vector_base()
    6c8c:	defffd04 	addi	sp,sp,-12
    6c90:	dfc00215 	stw	ra,8(sp)
    6c94:	df000115 	stw	fp,4(sp)
    6c98:	df000104 	addi	fp,sp,4
    6c9c:	e13fff15 	stw	r4,-4(fp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    6ca0:	e0bfff17 	ldw	r2,-4(fp)
    6ca4:	11400017 	ldw	r5,0(r2)
    6ca8:	e0bfff17 	ldw	r2,-4(fp)
    6cac:	10800217 	ldw	r2,8(r2)
    6cb0:	1007883a 	mov	r3,r2
    6cb4:	e0bfff17 	ldw	r2,-4(fp)
    6cb8:	10800017 	ldw	r2,0(r2)
    6cbc:	1885c83a 	sub	r2,r3,r2
    6cc0:	1005d0ba 	srai	r2,r2,2
    6cc4:	100d883a 	mov	r6,r2
    6cc8:	e13fff17 	ldw	r4,-4(fp)
    6ccc:	0006c3c0 	call	6c3c <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim>
    6cd0:	e13fff17 	ldw	r4,-4(fp)
    6cd4:	0005b400 	call	5b40 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
    6cd8:	e037883a 	mov	sp,fp
    6cdc:	dfc00117 	ldw	ra,4(sp)
    6ce0:	df000017 	ldw	fp,0(sp)
    6ce4:	dec00204 	addi	sp,sp,8
    6ce8:	f800283a 	ret

00006cec <_ZNSt6vectorIiSaIiEEC1EmRKiRKS0_>:
       *
       *  This constructor fills the %vector with @a n copies of @a value.
       */
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
	     const allocator_type& __a = allocator_type())
    6cec:	defff804 	addi	sp,sp,-32
    6cf0:	dfc00715 	stw	ra,28(sp)
    6cf4:	df000615 	stw	fp,24(sp)
    6cf8:	dc000515 	stw	r16,20(sp)
    6cfc:	df000504 	addi	fp,sp,20
    6d00:	e13ffc15 	stw	r4,-16(fp)
    6d04:	e17ffd15 	stw	r5,-12(fp)
    6d08:	e1bffe15 	stw	r6,-8(fp)
    6d0c:	e1ffff15 	stw	r7,-4(fp)
      : _Base(__n, __a)
    6d10:	e13ffc17 	ldw	r4,-16(fp)
    6d14:	e17ffd17 	ldw	r5,-12(fp)
    6d18:	e1bfff17 	ldw	r6,-4(fp)
    6d1c:	00069780 	call	6978 <_ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_>
      {
	std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
    6d20:	e0bffc17 	ldw	r2,-16(fp)
    6d24:	14000017 	ldw	r16,0(r2)
    6d28:	e13ffc17 	ldw	r4,-16(fp)
    6d2c:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    6d30:	100b883a 	mov	r5,r2
    6d34:	e13ffb04 	addi	r4,fp,-20
    6d38:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    6d3c:	8009883a 	mov	r4,r16
    6d40:	e17ffd17 	ldw	r5,-12(fp)
    6d44:	e1bffe17 	ldw	r6,-8(fp)
    6d48:	e1fffb04 	addi	r7,fp,-20
    6d4c:	00065b80 	call	65b8 <_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_SaIT2_E>
    6d50:	e13ffb04 	addi	r4,fp,-20
    6d54:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
				      _M_get_Tp_allocator());
	this->_M_impl._M_finish = this->_M_impl._M_start + __n;
    6d58:	e0bffc17 	ldw	r2,-16(fp)
    6d5c:	10c00017 	ldw	r3,0(r2)
    6d60:	e0bffd17 	ldw	r2,-12(fp)
    6d64:	1085883a 	add	r2,r2,r2
    6d68:	1085883a 	add	r2,r2,r2
    6d6c:	1887883a 	add	r3,r3,r2
    6d70:	e0bffc17 	ldw	r2,-16(fp)
    6d74:	10c00115 	stw	r3,4(r2)
    6d78:	e037883a 	mov	sp,fp
    6d7c:	dfc00217 	ldw	ra,8(sp)
    6d80:	df000117 	ldw	fp,4(sp)
    6d84:	dc000017 	ldw	r16,0(sp)
    6d88:	dec00304 	addi	sp,sp,12
    6d8c:	f800283a 	ret

00006d90 <_ZNSt6vectorIiSaIiEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibilty.
       */
      ~vector()
    6d90:	defffa04 	addi	sp,sp,-24
    6d94:	dfc00515 	stw	ra,20(sp)
    6d98:	df000415 	stw	fp,16(sp)
    6d9c:	dc400315 	stw	r17,12(sp)
    6da0:	dc000215 	stw	r16,8(sp)
    6da4:	df000204 	addi	fp,sp,8
    6da8:	e13fff15 	stw	r4,-4(fp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6dac:	e0bfff17 	ldw	r2,-4(fp)
    6db0:	14000017 	ldw	r16,0(r2)
    6db4:	e0bfff17 	ldw	r2,-4(fp)
    6db8:	14400117 	ldw	r17,4(r2)
    6dbc:	e13fff17 	ldw	r4,-4(fp)
    6dc0:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    6dc4:	100b883a 	mov	r5,r2
    6dc8:	e13ffe04 	addi	r4,fp,-8
    6dcc:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    6dd0:	8009883a 	mov	r4,r16
    6dd4:	880b883a 	mov	r5,r17
    6dd8:	e1bffe04 	addi	r6,fp,-8
    6ddc:	00060600 	call	6060 <_ZSt8_DestroyIPiiEvT_S1_SaIT0_E>
    6de0:	e13ffe04 	addi	r4,fp,-8
    6de4:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
    6de8:	e13fff17 	ldw	r4,-4(fp)
    6dec:	0006c8c0 	call	6c8c <_ZNSt12_Vector_baseIiSaIiEED2Ev>
    6df0:	e037883a 	mov	sp,fp
    6df4:	dfc00317 	ldw	ra,12(sp)
    6df8:	df000217 	ldw	fp,8(sp)
    6dfc:	dc400117 	ldw	r17,4(sp)
    6e00:	dc000017 	ldw	r16,0(sp)
    6e04:	dec00404 	addi	sp,sp,16
    6e08:	f800283a 	ret

00006e0c <_ZNSt6vectorI6MyRectSaIS0_EEC1EmRKS0_RKS1_>:
       *
       *  This constructor fills the %vector with @a n copies of @a value.
       */
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
	     const allocator_type& __a = allocator_type())
    6e0c:	defff804 	addi	sp,sp,-32
    6e10:	dfc00715 	stw	ra,28(sp)
    6e14:	df000615 	stw	fp,24(sp)
    6e18:	dc000515 	stw	r16,20(sp)
    6e1c:	df000504 	addi	fp,sp,20
    6e20:	e13ffc15 	stw	r4,-16(fp)
    6e24:	e17ffd15 	stw	r5,-12(fp)
    6e28:	e1bffe15 	stw	r6,-8(fp)
    6e2c:	e1ffff15 	stw	r7,-4(fp)
      : _Base(__n, __a)
    6e30:	e13ffc17 	ldw	r4,-16(fp)
    6e34:	e17ffd17 	ldw	r5,-12(fp)
    6e38:	e1bfff17 	ldw	r6,-4(fp)
    6e3c:	0006ac00 	call	6ac0 <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2EmRKS1_>
      {
	std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
    6e40:	e0bffc17 	ldw	r2,-16(fp)
    6e44:	14000017 	ldw	r16,0(r2)
    6e48:	e13ffc17 	ldw	r4,-16(fp)
    6e4c:	0002c900 	call	2c90 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    6e50:	100b883a 	mov	r5,r2
    6e54:	e13ffb04 	addi	r4,fp,-20
    6e58:	0002bf00 	call	2bf0 <_ZNSaI6MyRectEC1ERKS0_>
    6e5c:	8009883a 	mov	r4,r16
    6e60:	e17ffd17 	ldw	r5,-12(fp)
    6e64:	e1bffe17 	ldw	r6,-8(fp)
    6e68:	e1fffb04 	addi	r7,fp,-20
    6e6c:	00062ec0 	call	62ec <_ZSt24__uninitialized_fill_n_aIP6MyRectmS0_S0_EvT_T0_RKT1_SaIT2_E>
    6e70:	e13ffb04 	addi	r4,fp,-20
    6e74:	0002b6c0 	call	2b6c <_ZNSaI6MyRectED1Ev>
				      _M_get_Tp_allocator());
	this->_M_impl._M_finish = this->_M_impl._M_start + __n;
    6e78:	e0bffc17 	ldw	r2,-16(fp)
    6e7c:	10c00017 	ldw	r3,0(r2)
    6e80:	e0bffd17 	ldw	r2,-12(fp)
    6e84:	1004913a 	slli	r2,r2,4
    6e88:	1887883a 	add	r3,r3,r2
    6e8c:	e0bffc17 	ldw	r2,-16(fp)
    6e90:	10c00115 	stw	r3,4(r2)
    6e94:	e037883a 	mov	sp,fp
    6e98:	dfc00217 	ldw	ra,8(sp)
    6e9c:	df000117 	ldw	fp,4(sp)
    6ea0:	dc000017 	ldw	r16,0(sp)
    6ea4:	dec00304 	addi	sp,sp,12
    6ea8:	f800283a 	ret

00006eac <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIiEEPT_PKS3_S6_S4_>:
  template<>
    struct __copy<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
    6eac:	defffb04 	addi	sp,sp,-20
    6eb0:	dfc00415 	stw	ra,16(sp)
    6eb4:	df000315 	stw	fp,12(sp)
    6eb8:	df000304 	addi	fp,sp,12
    6ebc:	e13ffd15 	stw	r4,-12(fp)
    6ec0:	e17ffe15 	stw	r5,-8(fp)
    6ec4:	e1bfff15 	stw	r6,-4(fp)
        { 
	  std::memmove(__result, __first, sizeof(_Tp) * (__last - __first));
    6ec8:	e0fffe17 	ldw	r3,-8(fp)
    6ecc:	e0bffd17 	ldw	r2,-12(fp)
    6ed0:	1885c83a 	sub	r2,r3,r2
    6ed4:	100d883a 	mov	r6,r2
    6ed8:	e13fff17 	ldw	r4,-4(fp)
    6edc:	e17ffd17 	ldw	r5,-12(fp)
    6ee0:	0013ed40 	call	13ed4 <memmove>
	  return __result + (__last - __first);
    6ee4:	e0fffe17 	ldw	r3,-8(fp)
    6ee8:	e0bffd17 	ldw	r2,-12(fp)
    6eec:	1885c83a 	sub	r2,r3,r2
    6ef0:	1007883a 	mov	r3,r2
    6ef4:	e0bfff17 	ldw	r2,-4(fp)
    6ef8:	1885883a 	add	r2,r3,r2
    6efc:	e037883a 	mov	sp,fp
    6f00:	dfc00117 	ldw	ra,4(sp)
    6f04:	df000017 	ldw	fp,0(sp)
    6f08:	dec00204 	addi	sp,sp,8
    6f0c:	f800283a 	ret

00006f10 <_ZSt10__copy_auxIPiS0_ET0_T_S2_S1_>:
	}
    };

  template<typename _II, typename _OI>
    inline _OI
    __copy_aux(_II __first, _II __last, _OI __result)
    6f10:	defffa04 	addi	sp,sp,-24
    6f14:	dfc00515 	stw	ra,20(sp)
    6f18:	df000415 	stw	fp,16(sp)
    6f1c:	df000404 	addi	fp,sp,16
    6f20:	e13ffd15 	stw	r4,-12(fp)
    6f24:	e17ffe15 	stw	r5,-8(fp)
    6f28:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueTypeI>::__value
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
    6f2c:	00800044 	movi	r2,1
    6f30:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy<__simple, _Category>::copy(__first, __last, __result);
    6f34:	e13ffd17 	ldw	r4,-12(fp)
    6f38:	e17ffe17 	ldw	r5,-8(fp)
    6f3c:	e1bfff17 	ldw	r6,-4(fp)
    6f40:	0006eac0 	call	6eac <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIiEEPT_PKS3_S6_S4_>
    6f44:	e037883a 	mov	sp,fp
    6f48:	dfc00117 	ldw	ra,4(sp)
    6f4c:	df000017 	ldw	fp,0(sp)
    6f50:	dec00204 	addi	sp,sp,8
    6f54:	f800283a 	ret

00006f58 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_>:
  template<>
    struct __copy_normal<true, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    6f58:	defff704 	addi	sp,sp,-36
    6f5c:	dfc00815 	stw	ra,32(sp)
    6f60:	df000715 	stw	fp,28(sp)
    6f64:	dc400615 	stw	r17,24(sp)
    6f68:	dc000515 	stw	r16,20(sp)
    6f6c:	df000504 	addi	fp,sp,20
    6f70:	e13ffd15 	stw	r4,-12(fp)
    6f74:	e17ffe15 	stw	r5,-8(fp)
    6f78:	e1bfff15 	stw	r6,-4(fp)
        { return _OI(std::__copy_aux(__first.base(), __last.base(),
				     __result.base())); }
    6f7c:	e13ffd04 	addi	r4,fp,-12
    6f80:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    6f84:	14400017 	ldw	r17,0(r2)
    6f88:	e13ffe04 	addi	r4,fp,-8
    6f8c:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    6f90:	14000017 	ldw	r16,0(r2)
    6f94:	e13fff04 	addi	r4,fp,-4
    6f98:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    6f9c:	11800017 	ldw	r6,0(r2)
    6fa0:	8809883a 	mov	r4,r17
    6fa4:	800b883a 	mov	r5,r16
    6fa8:	0006f100 	call	6f10 <_ZSt10__copy_auxIPiS0_ET0_T_S2_S1_>
    6fac:	e0bffb15 	stw	r2,-20(fp)
    6fb0:	e13ffc04 	addi	r4,fp,-16
    6fb4:	e17ffb04 	addi	r5,fp,-20
    6fb8:	0005ea00 	call	5ea0 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    6fbc:	e0bffc17 	ldw	r2,-16(fp)
    6fc0:	e037883a 	mov	sp,fp
    6fc4:	dfc00317 	ldw	ra,12(sp)
    6fc8:	df000217 	ldw	fp,8(sp)
    6fcc:	dc400117 	ldw	r17,4(sp)
    6fd0:	dc000017 	ldw	r16,0(sp)
    6fd4:	dec00404 	addi	sp,sp,16
    6fd8:	f800283a 	ret

00006fdc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    6fdc:	defffa04 	addi	sp,sp,-24
    6fe0:	dfc00515 	stw	ra,20(sp)
    6fe4:	df000415 	stw	fp,16(sp)
    6fe8:	df000404 	addi	fp,sp,16
    6fec:	e13ffd15 	stw	r4,-12(fp)
    6ff0:	e17ffe15 	stw	r5,-8(fp)
    6ff4:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    6ff8:	00800044 	movi	r2,1
    6ffc:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    7000:	00800044 	movi	r2,1
    7004:	e0bffc05 	stb	r2,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    7008:	e13ffd17 	ldw	r4,-12(fp)
    700c:	e17ffe17 	ldw	r5,-8(fp)
    7010:	e1bfff17 	ldw	r6,-4(fp)
    7014:	0006f580 	call	6f58 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_>
    7018:	e037883a 	mov	sp,fp
    701c:	dfc00117 	ldw	ra,4(sp)
    7020:	df000017 	ldw	fp,0(sp)
    7024:	dec00204 	addi	sp,sp,8
    7028:	f800283a 	ret

0000702c <_ZNSt6vectorIiSaIiEE5eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EES5_>:
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    702c:	defff804 	addi	sp,sp,-32
    7030:	dfc00715 	stw	ra,28(sp)
    7034:	df000615 	stw	fp,24(sp)
    7038:	dc000515 	stw	r16,20(sp)
    703c:	df000504 	addi	fp,sp,20
    7040:	e13ffd15 	stw	r4,-12(fp)
    7044:	e17ffe15 	stw	r5,-8(fp)
    7048:	e1bfff15 	stw	r6,-4(fp)
    {
      iterator __i(std::copy(__last, end(), __first));
    704c:	e13ffd17 	ldw	r4,-12(fp)
    7050:	0005fc00 	call	5fc0 <_ZNSt6vectorIiSaIiEE3endEv>
    7054:	100b883a 	mov	r5,r2
    7058:	e13fff17 	ldw	r4,-4(fp)
    705c:	e1bffe17 	ldw	r6,-8(fp)
    7060:	0006fdc0 	call	6fdc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>
    7064:	e0bffc15 	stw	r2,-16(fp)
      std::_Destroy(__i, end(), _M_get_Tp_allocator());
    7068:	e13ffd17 	ldw	r4,-12(fp)
    706c:	0005fc00 	call	5fc0 <_ZNSt6vectorIiSaIiEE3endEv>
    7070:	1021883a 	mov	r16,r2
    7074:	e13ffd17 	ldw	r4,-12(fp)
    7078:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    707c:	100b883a 	mov	r5,r2
    7080:	e13ffb04 	addi	r4,fp,-20
    7084:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    7088:	e13ffc17 	ldw	r4,-16(fp)
    708c:	800b883a 	mov	r5,r16
    7090:	e1bffb04 	addi	r6,fp,-20
    7094:	00064400 	call	6440 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_SaIT0_E>
    7098:	e13ffb04 	addi	r4,fp,-20
    709c:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
      this->_M_impl._M_finish = this->_M_impl._M_finish - (__last - __first);
    70a0:	e0bffd17 	ldw	r2,-12(fp)
    70a4:	14000117 	ldw	r16,4(r2)
    70a8:	e13fff04 	addi	r4,fp,-4
    70ac:	e17ffe04 	addi	r5,fp,-8
    70b0:	00060c00 	call	60c0 <_ZN9__gnu_cxxmiIPiS1_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS8_RKNS5_IT0_S7_EE>
    70b4:	1085883a 	add	r2,r2,r2
    70b8:	1085883a 	add	r2,r2,r2
    70bc:	8087c83a 	sub	r3,r16,r2
    70c0:	e0bffd17 	ldw	r2,-12(fp)
    70c4:	10c00115 	stw	r3,4(r2)
      return __first;
    70c8:	e0bffe17 	ldw	r2,-8(fp)
    70cc:	e037883a 	mov	sp,fp
    70d0:	dfc00217 	ldw	ra,8(sp)
    70d4:	df000117 	ldw	fp,4(sp)
    70d8:	dc000017 	ldw	r16,0(sp)
    70dc:	dec00304 	addi	sp,sp,12
    70e0:	f800283a 	ret

000070e4 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
    70e4:	defffa04 	addi	sp,sp,-24
    70e8:	dfc00515 	stw	ra,20(sp)
    70ec:	df000415 	stw	fp,16(sp)
    70f0:	df000404 	addi	fp,sp,16
    70f4:	e13ffc15 	stw	r4,-16(fp)
    70f8:	e17ffd15 	stw	r5,-12(fp)
    70fc:	e1bffe15 	stw	r6,-8(fp)
    7100:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
    7104:	e13ffc17 	ldw	r4,-16(fp)
    7108:	e17ffd17 	ldw	r5,-12(fp)
    710c:	e1bffe17 	ldw	r6,-8(fp)
    7110:	0006fdc0 	call	6fdc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>
    7114:	e037883a 	mov	sp,fp
    7118:	dfc00117 	ldw	ra,4(sp)
    711c:	df000017 	ldw	fp,0(sp)
    7120:	dec00204 	addi	sp,sp,8
    7124:	f800283a 	ret

00007128 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    7128:	defffa04 	addi	sp,sp,-24
    712c:	dfc00515 	stw	ra,20(sp)
    7130:	df000415 	stw	fp,16(sp)
    7134:	df000404 	addi	fp,sp,16
    7138:	e13ffc15 	stw	r4,-16(fp)
    713c:	e17ffd15 	stw	r5,-12(fp)
    7140:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    7144:	e13ffc17 	ldw	r4,-16(fp)
    7148:	e17ffd17 	ldw	r5,-12(fp)
    714c:	e1bffe17 	ldw	r6,-8(fp)
    7150:	e1ffff03 	ldbu	r7,-4(fp)
    7154:	00070e40 	call	70e4 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_11__true_type>
    7158:	e037883a 	mov	sp,fp
    715c:	dfc00117 	ldw	ra,4(sp)
    7160:	df000017 	ldw	fp,0(sp)
    7164:	dec00204 	addi	sp,sp,8
    7168:	f800283a 	ret

0000716c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_iET0_T_S8_S7_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    716c:	defffa04 	addi	sp,sp,-24
    7170:	dfc00515 	stw	ra,20(sp)
    7174:	df000415 	stw	fp,16(sp)
    7178:	df000404 	addi	fp,sp,16
    717c:	e13ffc15 	stw	r4,-16(fp)
    7180:	e17ffd15 	stw	r5,-12(fp)
    7184:	e1bffe15 	stw	r6,-8(fp)
    7188:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    718c:	e13ffc17 	ldw	r4,-16(fp)
    7190:	e17ffd17 	ldw	r5,-12(fp)
    7194:	e1bffe17 	ldw	r6,-8(fp)
    7198:	00071280 	call	7128 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>
    719c:	e037883a 	mov	sp,fp
    71a0:	dfc00117 	ldw	ra,4(sp)
    71a4:	df000017 	ldw	fp,0(sp)
    71a8:	dec00204 	addi	sp,sp,8
    71ac:	f800283a 	ret

000071b0 <_ZNSt13__copy_normalILb0ELb0EE6copy_nIPiS2_EET0_T_S4_S3_>:
  template<bool, bool>
    struct __copy_normal
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    71b0:	defffb04 	addi	sp,sp,-20
    71b4:	dfc00415 	stw	ra,16(sp)
    71b8:	df000315 	stw	fp,12(sp)
    71bc:	df000304 	addi	fp,sp,12
    71c0:	e13ffd15 	stw	r4,-12(fp)
    71c4:	e17ffe15 	stw	r5,-8(fp)
    71c8:	e1bfff15 	stw	r6,-4(fp)
        { return std::__copy_aux(__first, __last, __result); }
    71cc:	e13ffd17 	ldw	r4,-12(fp)
    71d0:	e17ffe17 	ldw	r5,-8(fp)
    71d4:	e1bfff17 	ldw	r6,-4(fp)
    71d8:	0006f100 	call	6f10 <_ZSt10__copy_auxIPiS0_ET0_T_S2_S1_>
    71dc:	e037883a 	mov	sp,fp
    71e0:	dfc00117 	ldw	ra,4(sp)
    71e4:	df000017 	ldw	fp,0(sp)
    71e8:	dec00204 	addi	sp,sp,8
    71ec:	f800283a 	ret

000071f0 <_ZSt4copyIPiS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    71f0:	defffa04 	addi	sp,sp,-24
    71f4:	dfc00515 	stw	ra,20(sp)
    71f8:	df000415 	stw	fp,16(sp)
    71fc:	df000404 	addi	fp,sp,16
    7200:	e13ffd15 	stw	r4,-12(fp)
    7204:	e17ffe15 	stw	r5,-8(fp)
    7208:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    720c:	e03ffc45 	stb	zero,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    7210:	e03ffc05 	stb	zero,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    7214:	e13ffd17 	ldw	r4,-12(fp)
    7218:	e17ffe17 	ldw	r5,-8(fp)
    721c:	e1bfff17 	ldw	r6,-4(fp)
    7220:	00071b00 	call	71b0 <_ZNSt13__copy_normalILb0ELb0EE6copy_nIPiS2_EET0_T_S4_S3_>
    7224:	e037883a 	mov	sp,fp
    7228:	dfc00117 	ldw	ra,4(sp)
    722c:	df000017 	ldw	fp,0(sp)
    7230:	dec00204 	addi	sp,sp,8
    7234:	f800283a 	ret

00007238 <_ZSt24__uninitialized_copy_auxIPiS0_ET0_T_S2_S1_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
    7238:	defffa04 	addi	sp,sp,-24
    723c:	dfc00515 	stw	ra,20(sp)
    7240:	df000415 	stw	fp,16(sp)
    7244:	df000404 	addi	fp,sp,16
    7248:	e13ffc15 	stw	r4,-16(fp)
    724c:	e17ffd15 	stw	r5,-12(fp)
    7250:	e1bffe15 	stw	r6,-8(fp)
    7254:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
    7258:	e13ffc17 	ldw	r4,-16(fp)
    725c:	e17ffd17 	ldw	r5,-12(fp)
    7260:	e1bffe17 	ldw	r6,-8(fp)
    7264:	00071f00 	call	71f0 <_ZSt4copyIPiS0_ET0_T_S2_S1_>
    7268:	e037883a 	mov	sp,fp
    726c:	dfc00117 	ldw	ra,4(sp)
    7270:	df000017 	ldw	fp,0(sp)
    7274:	dec00204 	addi	sp,sp,8
    7278:	f800283a 	ret

0000727c <_ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    727c:	defffa04 	addi	sp,sp,-24
    7280:	dfc00515 	stw	ra,20(sp)
    7284:	df000415 	stw	fp,16(sp)
    7288:	df000404 	addi	fp,sp,16
    728c:	e13ffc15 	stw	r4,-16(fp)
    7290:	e17ffd15 	stw	r5,-12(fp)
    7294:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    7298:	e13ffc17 	ldw	r4,-16(fp)
    729c:	e17ffd17 	ldw	r5,-12(fp)
    72a0:	e1bffe17 	ldw	r6,-8(fp)
    72a4:	e1ffff03 	ldbu	r7,-4(fp)
    72a8:	00072380 	call	7238 <_ZSt24__uninitialized_copy_auxIPiS0_ET0_T_S2_S1_11__true_type>
    72ac:	e037883a 	mov	sp,fp
    72b0:	dfc00117 	ldw	ra,4(sp)
    72b4:	df000017 	ldw	fp,0(sp)
    72b8:	dec00204 	addi	sp,sp,8
    72bc:	f800283a 	ret

000072c0 <_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    72c0:	defffa04 	addi	sp,sp,-24
    72c4:	dfc00515 	stw	ra,20(sp)
    72c8:	df000415 	stw	fp,16(sp)
    72cc:	df000404 	addi	fp,sp,16
    72d0:	e13ffc15 	stw	r4,-16(fp)
    72d4:	e17ffd15 	stw	r5,-12(fp)
    72d8:	e1bffe15 	stw	r6,-8(fp)
    72dc:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    72e0:	e13ffc17 	ldw	r4,-16(fp)
    72e4:	e17ffd17 	ldw	r5,-12(fp)
    72e8:	e1bffe17 	ldw	r6,-8(fp)
    72ec:	000727c0 	call	727c <_ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_>
    72f0:	e037883a 	mov	sp,fp
    72f4:	dfc00117 	ldw	ra,4(sp)
    72f8:	df000017 	ldw	fp,0(sp)
    72fc:	dec00204 	addi	sp,sp,8
    7300:	f800283a 	ret

00007304 <_ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES4_EET0_T_SA_S9_>:
  template<>
    struct __copy_normal<true, false>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    7304:	defffa04 	addi	sp,sp,-24
    7308:	dfc00515 	stw	ra,20(sp)
    730c:	df000415 	stw	fp,16(sp)
    7310:	dc000315 	stw	r16,12(sp)
    7314:	df000304 	addi	fp,sp,12
    7318:	e13ffd15 	stw	r4,-12(fp)
    731c:	e17ffe15 	stw	r5,-8(fp)
    7320:	e1bfff15 	stw	r6,-4(fp)
        { return std::__copy_aux(__first.base(), __last.base(), __result); }
    7324:	e13ffd04 	addi	r4,fp,-12
    7328:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    732c:	14000017 	ldw	r16,0(r2)
    7330:	e13ffe04 	addi	r4,fp,-8
    7334:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7338:	11400017 	ldw	r5,0(r2)
    733c:	8009883a 	mov	r4,r16
    7340:	e1bfff17 	ldw	r6,-4(fp)
    7344:	0006f100 	call	6f10 <_ZSt10__copy_auxIPiS0_ET0_T_S2_S1_>
    7348:	e037883a 	mov	sp,fp
    734c:	dfc00217 	ldw	ra,8(sp)
    7350:	df000117 	ldw	fp,4(sp)
    7354:	dc000017 	ldw	r16,0(sp)
    7358:	dec00304 	addi	sp,sp,12
    735c:	f800283a 	ret

00007360 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    7360:	defffa04 	addi	sp,sp,-24
    7364:	dfc00515 	stw	ra,20(sp)
    7368:	df000415 	stw	fp,16(sp)
    736c:	df000404 	addi	fp,sp,16
    7370:	e13ffd15 	stw	r4,-12(fp)
    7374:	e17ffe15 	stw	r5,-8(fp)
    7378:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    737c:	00800044 	movi	r2,1
    7380:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    7384:	e03ffc05 	stb	zero,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    7388:	e13ffd17 	ldw	r4,-12(fp)
    738c:	e17ffe17 	ldw	r5,-8(fp)
    7390:	e1bfff17 	ldw	r6,-4(fp)
    7394:	00073040 	call	7304 <_ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES4_EET0_T_SA_S9_>
    7398:	e037883a 	mov	sp,fp
    739c:	dfc00117 	ldw	ra,4(sp)
    73a0:	df000017 	ldw	fp,0(sp)
    73a4:	dec00204 	addi	sp,sp,8
    73a8:	f800283a 	ret

000073ac <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
    73ac:	defffa04 	addi	sp,sp,-24
    73b0:	dfc00515 	stw	ra,20(sp)
    73b4:	df000415 	stw	fp,16(sp)
    73b8:	df000404 	addi	fp,sp,16
    73bc:	e13ffc15 	stw	r4,-16(fp)
    73c0:	e17ffd15 	stw	r5,-12(fp)
    73c4:	e1bffe15 	stw	r6,-8(fp)
    73c8:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
    73cc:	e13ffc17 	ldw	r4,-16(fp)
    73d0:	e17ffd17 	ldw	r5,-12(fp)
    73d4:	e1bffe17 	ldw	r6,-8(fp)
    73d8:	00073600 	call	7360 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_>
    73dc:	e037883a 	mov	sp,fp
    73e0:	dfc00117 	ldw	ra,4(sp)
    73e4:	df000017 	ldw	fp,0(sp)
    73e8:	dec00204 	addi	sp,sp,8
    73ec:	f800283a 	ret

000073f0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    73f0:	defffa04 	addi	sp,sp,-24
    73f4:	dfc00515 	stw	ra,20(sp)
    73f8:	df000415 	stw	fp,16(sp)
    73fc:	df000404 	addi	fp,sp,16
    7400:	e13ffc15 	stw	r4,-16(fp)
    7404:	e17ffd15 	stw	r5,-12(fp)
    7408:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    740c:	e13ffc17 	ldw	r4,-16(fp)
    7410:	e17ffd17 	ldw	r5,-12(fp)
    7414:	e1bffe17 	ldw	r6,-8(fp)
    7418:	e1ffff03 	ldbu	r7,-4(fp)
    741c:	00073ac0 	call	73ac <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_11__true_type>
    7420:	e037883a 	mov	sp,fp
    7424:	dfc00117 	ldw	ra,4(sp)
    7428:	df000017 	ldw	fp,0(sp)
    742c:	dec00204 	addi	sp,sp,8
    7430:	f800283a 	ret

00007434 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_iET0_T_S8_S7_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    7434:	defffa04 	addi	sp,sp,-24
    7438:	dfc00515 	stw	ra,20(sp)
    743c:	df000415 	stw	fp,16(sp)
    7440:	df000404 	addi	fp,sp,16
    7444:	e13ffc15 	stw	r4,-16(fp)
    7448:	e17ffd15 	stw	r5,-12(fp)
    744c:	e1bffe15 	stw	r6,-8(fp)
    7450:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    7454:	e13ffc17 	ldw	r4,-16(fp)
    7458:	e17ffd17 	ldw	r5,-12(fp)
    745c:	e1bffe17 	ldw	r6,-8(fp)
    7460:	00073f00 	call	73f0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_>
    7464:	e037883a 	mov	sp,fp
    7468:	dfc00117 	ldw	ra,4(sp)
    746c:	df000017 	ldw	fp,0(sp)
    7470:	dec00204 	addi	sp,sp,8
    7474:	f800283a 	ret

00007478 <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIiEEPT_PKS3_S6_S4_>:
  template<>
    struct __copy_backward<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
    7478:	defffa04 	addi	sp,sp,-24
    747c:	dfc00515 	stw	ra,20(sp)
    7480:	df000415 	stw	fp,16(sp)
    7484:	df000404 	addi	fp,sp,16
    7488:	e13ffd15 	stw	r4,-12(fp)
    748c:	e17ffe15 	stw	r5,-8(fp)
    7490:	e1bfff15 	stw	r6,-4(fp)
        { 
	  const ptrdiff_t _Num = __last - __first;
    7494:	e0fffe17 	ldw	r3,-8(fp)
    7498:	e0bffd17 	ldw	r2,-12(fp)
    749c:	1885c83a 	sub	r2,r3,r2
    74a0:	1005d0ba 	srai	r2,r2,2
    74a4:	e0bffc15 	stw	r2,-16(fp)
	  std::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
    74a8:	e0bffc17 	ldw	r2,-16(fp)
    74ac:	1085883a 	add	r2,r2,r2
    74b0:	1085883a 	add	r2,r2,r2
    74b4:	1007883a 	mov	r3,r2
    74b8:	e0bfff17 	ldw	r2,-4(fp)
    74bc:	10c9c83a 	sub	r4,r2,r3
    74c0:	e0bffc17 	ldw	r2,-16(fp)
    74c4:	1085883a 	add	r2,r2,r2
    74c8:	1085883a 	add	r2,r2,r2
    74cc:	100d883a 	mov	r6,r2
    74d0:	e17ffd17 	ldw	r5,-12(fp)
    74d4:	0013ed40 	call	13ed4 <memmove>
	  return __result - _Num;
    74d8:	e0bffc17 	ldw	r2,-16(fp)
    74dc:	1085883a 	add	r2,r2,r2
    74e0:	1085883a 	add	r2,r2,r2
    74e4:	1007883a 	mov	r3,r2
    74e8:	e0bfff17 	ldw	r2,-4(fp)
    74ec:	10c5c83a 	sub	r2,r2,r3
    74f0:	e037883a 	mov	sp,fp
    74f4:	dfc00117 	ldw	ra,4(sp)
    74f8:	df000017 	ldw	fp,0(sp)
    74fc:	dec00204 	addi	sp,sp,8
    7500:	f800283a 	ret

00007504 <_ZSt19__copy_backward_auxIPiS0_ET0_T_S2_S1_>:
	}
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
    7504:	defffa04 	addi	sp,sp,-24
    7508:	dfc00515 	stw	ra,20(sp)
    750c:	df000415 	stw	fp,16(sp)
    7510:	df000404 	addi	fp,sp,16
    7514:	e13ffd15 	stw	r4,-12(fp)
    7518:	e17ffe15 	stw	r5,-8(fp)
    751c:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueType1>::__value
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
    7520:	00800044 	movi	r2,1
    7524:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,
							       __result);
    7528:	e13ffd17 	ldw	r4,-12(fp)
    752c:	e17ffe17 	ldw	r5,-8(fp)
    7530:	e1bfff17 	ldw	r6,-4(fp)
    7534:	00074780 	call	7478 <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIiEEPT_PKS3_S6_S4_>
    7538:	e037883a 	mov	sp,fp
    753c:	dfc00117 	ldw	ra,4(sp)
    7540:	df000017 	ldw	fp,0(sp)
    7544:	dec00204 	addi	sp,sp,8
    7548:	f800283a 	ret

0000754c <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_>:
  template<>
    struct __copy_backward_normal<true, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
    754c:	defff704 	addi	sp,sp,-36
    7550:	dfc00815 	stw	ra,32(sp)
    7554:	df000715 	stw	fp,28(sp)
    7558:	dc400615 	stw	r17,24(sp)
    755c:	dc000515 	stw	r16,20(sp)
    7560:	df000504 	addi	fp,sp,20
    7564:	e13ffd15 	stw	r4,-12(fp)
    7568:	e17ffe15 	stw	r5,-8(fp)
    756c:	e1bfff15 	stw	r6,-4(fp)
        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),
					       __result.base())); }
    7570:	e13ffd04 	addi	r4,fp,-12
    7574:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7578:	14400017 	ldw	r17,0(r2)
    757c:	e13ffe04 	addi	r4,fp,-8
    7580:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7584:	14000017 	ldw	r16,0(r2)
    7588:	e13fff04 	addi	r4,fp,-4
    758c:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7590:	11800017 	ldw	r6,0(r2)
    7594:	8809883a 	mov	r4,r17
    7598:	800b883a 	mov	r5,r16
    759c:	00075040 	call	7504 <_ZSt19__copy_backward_auxIPiS0_ET0_T_S2_S1_>
    75a0:	e0bffb15 	stw	r2,-20(fp)
    75a4:	e13ffc04 	addi	r4,fp,-16
    75a8:	e17ffb04 	addi	r5,fp,-20
    75ac:	0005ea00 	call	5ea0 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    75b0:	e0bffc17 	ldw	r2,-16(fp)
    75b4:	e037883a 	mov	sp,fp
    75b8:	dfc00317 	ldw	ra,12(sp)
    75bc:	df000217 	ldw	fp,8(sp)
    75c0:	dc400117 	ldw	r17,4(sp)
    75c4:	dc000017 	ldw	r16,0(sp)
    75c8:	dec00404 	addi	sp,sp,16
    75cc:	f800283a 	ret

000075d0 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>:
   *  Result may not be in the range [first,last).  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    75d0:	defffa04 	addi	sp,sp,-24
    75d4:	dfc00515 	stw	ra,20(sp)
    75d8:	df000415 	stw	fp,16(sp)
    75dc:	df000404 	addi	fp,sp,16
    75e0:	e13ffd15 	stw	r4,-12(fp)
    75e4:	e17ffe15 	stw	r5,-8(fp)
    75e8:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __bi1 = __is_normal_iterator<_BI1>::__value;
    75ec:	00800044 	movi	r2,1
    75f0:	e0bffc45 	stb	r2,-15(fp)
      const bool __bi2 = __is_normal_iterator<_BI2>::__value;
    75f4:	00800044 	movi	r2,1
    75f8:	e0bffc05 	stb	r2,-16(fp)
      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,
								 __result);
    75fc:	e13ffd17 	ldw	r4,-12(fp)
    7600:	e17ffe17 	ldw	r5,-8(fp)
    7604:	e1bfff17 	ldw	r6,-4(fp)
    7608:	000754c0 	call	754c <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_>
    760c:	e037883a 	mov	sp,fp
    7610:	dfc00117 	ldw	ra,4(sp)
    7614:	df000017 	ldw	fp,0(sp)
    7618:	dec00204 	addi	sp,sp,8
    761c:	f800283a 	ret

00007620 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi>:
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    7620:	deffe704 	addi	sp,sp,-100
    7624:	dfc01815 	stw	ra,96(sp)
    7628:	df001715 	stw	fp,92(sp)
    762c:	dc801615 	stw	r18,88(sp)
    7630:	dc401515 	stw	r17,84(sp)
    7634:	dc001415 	stw	r16,80(sp)
    7638:	df001404 	addi	fp,sp,80
    763c:	e13ffc15 	stw	r4,-16(fp)
    7640:	e17ffd15 	stw	r5,-12(fp)
    7644:	e1bffe15 	stw	r6,-8(fp)
    7648:	e1ffff15 	stw	r7,-4(fp)
    {
      if (__n != 0)
    764c:	e0bffe17 	ldw	r2,-8(fp)
    7650:	1005003a 	cmpeq	r2,r2,zero
    7654:	1001081e 	bne	r2,zero,7a78 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x458>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
    7658:	e0bffc17 	ldw	r2,-16(fp)
    765c:	10800217 	ldw	r2,8(r2)
    7660:	1007883a 	mov	r3,r2
    7664:	e0bffc17 	ldw	r2,-16(fp)
    7668:	10800117 	ldw	r2,4(r2)
    766c:	1885c83a 	sub	r2,r3,r2
    7670:	1005d0ba 	srai	r2,r2,2
    7674:	1007883a 	mov	r3,r2
    7678:	e0bffe17 	ldw	r2,-8(fp)
    767c:	18807836 	bltu	r3,r2,7860 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x240>
			- this->_M_impl._M_finish) >= __n)
	    {
	      value_type __x_copy = __x;
    7680:	e0bfff17 	ldw	r2,-4(fp)
    7684:	10800017 	ldw	r2,0(r2)
    7688:	e0bff715 	stw	r2,-36(fp)
	      const size_type __elems_after = end() - __position;
    768c:	e13ffc17 	ldw	r4,-16(fp)
    7690:	0005fc00 	call	5fc0 <_ZNSt6vectorIiSaIiEE3endEv>
    7694:	e0bff615 	stw	r2,-40(fp)
    7698:	e13ff604 	addi	r4,fp,-40
    769c:	e17ffd04 	addi	r5,fp,-12
    76a0:	00060c00 	call	60c0 <_ZN9__gnu_cxxmiIPiS1_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS8_RKNS5_IT0_S7_EE>
    76a4:	e0bfed15 	stw	r2,-76(fp)
	      iterator __old_finish(this->_M_impl._M_finish);
    76a8:	e0bffc17 	ldw	r2,-16(fp)
    76ac:	11400104 	addi	r5,r2,4
    76b0:	e13ff804 	addi	r4,fp,-32
    76b4:	0005ea00 	call	5ea0 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
	      if (__elems_after > __n)
    76b8:	e0fffe17 	ldw	r3,-8(fp)
    76bc:	e0bfed17 	ldw	r2,-76(fp)
    76c0:	1880312e 	bgeu	r3,r2,7788 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x168>
		{
		  std::__uninitialized_copy_a(this->_M_impl._M_finish - __n,
    76c4:	e0bffc17 	ldw	r2,-16(fp)
    76c8:	10c00117 	ldw	r3,4(r2)
    76cc:	e0bffe17 	ldw	r2,-8(fp)
    76d0:	1085883a 	add	r2,r2,r2
    76d4:	1085883a 	add	r2,r2,r2
    76d8:	18a1c83a 	sub	r16,r3,r2
    76dc:	e0bffc17 	ldw	r2,-16(fp)
    76e0:	14400117 	ldw	r17,4(r2)
    76e4:	e0bffc17 	ldw	r2,-16(fp)
    76e8:	14800117 	ldw	r18,4(r2)
    76ec:	e13ffc17 	ldw	r4,-16(fp)
    76f0:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    76f4:	100b883a 	mov	r5,r2
    76f8:	e13ff504 	addi	r4,fp,-44
    76fc:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    7700:	e1fff504 	addi	r7,fp,-44
    7704:	8009883a 	mov	r4,r16
    7708:	880b883a 	mov	r5,r17
    770c:	900d883a 	mov	r6,r18
    7710:	00072c00 	call	72c0 <_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_SaIT1_E>
    7714:	e13ff504 	addi	r4,fp,-44
    7718:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
					      this->_M_impl._M_finish,
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
		  this->_M_impl._M_finish += __n;
    771c:	e0bffc17 	ldw	r2,-16(fp)
    7720:	10c00117 	ldw	r3,4(r2)
    7724:	e0bffe17 	ldw	r2,-8(fp)
    7728:	1085883a 	add	r2,r2,r2
    772c:	1085883a 	add	r2,r2,r2
    7730:	1887883a 	add	r3,r3,r2
    7734:	e0bffc17 	ldw	r2,-16(fp)
    7738:	10c00115 	stw	r3,4(r2)
		  std::copy_backward(__position, __old_finish - __n,
    773c:	e0bffe17 	ldw	r2,-8(fp)
    7740:	e0bff415 	stw	r2,-48(fp)
    7744:	e13ff804 	addi	r4,fp,-32
    7748:	e17ff404 	addi	r5,fp,-48
    774c:	00061180 	call	6118 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEmiERKl>
    7750:	100b883a 	mov	r5,r2
    7754:	e13ffd17 	ldw	r4,-12(fp)
    7758:	e1bff817 	ldw	r6,-32(fp)
    775c:	00075d00 	call	75d0 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>
				     __old_finish);
		  std::fill(__position, __position + __n, __x_copy);
    7760:	e0bffe17 	ldw	r2,-8(fp)
    7764:	e0bff315 	stw	r2,-52(fp)
    7768:	e13ffd04 	addi	r4,fp,-12
    776c:	e17ff304 	addi	r5,fp,-52
    7770:	0005f0c0 	call	5f0c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl>
    7774:	100b883a 	mov	r5,r2
    7778:	e1bff704 	addi	r6,fp,-36
    777c:	e13ffd17 	ldw	r4,-12(fp)
    7780:	00066f80 	call	66f8 <_ZSt4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RKT0_>
    7784:	0000bc06 	br	7a78 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x458>
		}
	      else
		{
		  std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
    7788:	e0bffc17 	ldw	r2,-16(fp)
    778c:	14000117 	ldw	r16,4(r2)
    7790:	e0fffe17 	ldw	r3,-8(fp)
    7794:	e0bfed17 	ldw	r2,-76(fp)
    7798:	18a3c83a 	sub	r17,r3,r2
    779c:	e13ffc17 	ldw	r4,-16(fp)
    77a0:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    77a4:	100b883a 	mov	r5,r2
    77a8:	e13ff244 	addi	r4,fp,-55
    77ac:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    77b0:	e1bff704 	addi	r6,fp,-36
    77b4:	e1fff244 	addi	r7,fp,-55
    77b8:	8009883a 	mov	r4,r16
    77bc:	880b883a 	mov	r5,r17
    77c0:	00065b80 	call	65b8 <_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_SaIT2_E>
    77c4:	e13ff244 	addi	r4,fp,-55
    77c8:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
						__n - __elems_after,
						__x_copy,
						_M_get_Tp_allocator());
		  this->_M_impl._M_finish += __n - __elems_after;
    77cc:	e0bffc17 	ldw	r2,-16(fp)
    77d0:	11000117 	ldw	r4,4(r2)
    77d4:	e0fffe17 	ldw	r3,-8(fp)
    77d8:	e0bfed17 	ldw	r2,-76(fp)
    77dc:	1885c83a 	sub	r2,r3,r2
    77e0:	1085883a 	add	r2,r2,r2
    77e4:	1085883a 	add	r2,r2,r2
    77e8:	2087883a 	add	r3,r4,r2
    77ec:	e0bffc17 	ldw	r2,-16(fp)
    77f0:	10c00115 	stw	r3,4(r2)
		  std::__uninitialized_copy_a(__position, __old_finish,
    77f4:	e0bffc17 	ldw	r2,-16(fp)
    77f8:	14000117 	ldw	r16,4(r2)
    77fc:	e13ffc17 	ldw	r4,-16(fp)
    7800:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    7804:	100b883a 	mov	r5,r2
    7808:	e13ff204 	addi	r4,fp,-56
    780c:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    7810:	e1fff204 	addi	r7,fp,-56
    7814:	e13ffd17 	ldw	r4,-12(fp)
    7818:	e17ff817 	ldw	r5,-32(fp)
    781c:	800d883a 	mov	r6,r16
    7820:	00074340 	call	7434 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_iET0_T_S8_S7_SaIT1_E>
    7824:	e13ff204 	addi	r4,fp,-56
    7828:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
		  this->_M_impl._M_finish += __elems_after;
    782c:	e0bffc17 	ldw	r2,-16(fp)
    7830:	10c00117 	ldw	r3,4(r2)
    7834:	e0bfed17 	ldw	r2,-76(fp)
    7838:	1085883a 	add	r2,r2,r2
    783c:	1085883a 	add	r2,r2,r2
    7840:	1887883a 	add	r3,r3,r2
    7844:	e0bffc17 	ldw	r2,-16(fp)
    7848:	10c00115 	stw	r3,4(r2)
		  std::fill(__position, __old_finish, __x_copy);
    784c:	e1bff704 	addi	r6,fp,-36
    7850:	e13ffd17 	ldw	r4,-12(fp)
    7854:	e17ff817 	ldw	r5,-32(fp)
    7858:	00066f80 	call	66f8 <_ZSt4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RKT0_>
    785c:	00008606 	br	7a78 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x458>
		}
	    }
	  else
	    {
	      const size_type __old_size = size();
    7860:	e13ffc17 	ldw	r4,-16(fp)
    7864:	0005e540 	call	5e54 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    7868:	e0bff915 	stw	r2,-28(fp)
	      if (this->max_size() - __old_size < __n)
    786c:	e13ffc17 	ldw	r4,-16(fp)
    7870:	00061740 	call	6174 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
    7874:	1007883a 	mov	r3,r2
    7878:	e0bff917 	ldw	r2,-28(fp)
    787c:	1887c83a 	sub	r3,r3,r2
    7880:	e0bffe17 	ldw	r2,-8(fp)
    7884:	1885803a 	cmpltu	r2,r3,r2
    7888:	10803fcc 	andi	r2,r2,255
    788c:	1005003a 	cmpeq	r2,r2,zero
    7890:	1000031e 	bne	r2,zero,78a0 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x280>
		__throw_length_error(__N("vector::_M_fill_insert"));
    7894:	010000b4 	movhi	r4,2
    7898:	2139c304 	addi	r4,r4,-6388
    789c:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>
	      
	      // See _M_insert_aux above.
	      size_type __len = __old_size + std::max(__old_size, __n);
    78a0:	e13ff904 	addi	r4,fp,-28
    78a4:	e17ffe04 	addi	r5,fp,-8
    78a8:	000619c0 	call	619c <_ZSt3maxImERKT_S2_S2_>
    78ac:	10c00017 	ldw	r3,0(r2)
    78b0:	e0bff917 	ldw	r2,-28(fp)
    78b4:	1885883a 	add	r2,r3,r2
    78b8:	e0bfec15 	stw	r2,-80(fp)
	      if (__len < __old_size)
    78bc:	e0fff917 	ldw	r3,-28(fp)
    78c0:	e0bfec17 	ldw	r2,-80(fp)
    78c4:	10c0032e 	bgeu	r2,r3,78d4 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x2b4>
		__len = this->max_size();
    78c8:	e13ffc17 	ldw	r4,-16(fp)
    78cc:	00061740 	call	6174 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
    78d0:	e0bfec15 	stw	r2,-80(fp)

	      iterator __new_start(this->_M_allocate(__len));
    78d4:	e13ffc17 	ldw	r4,-16(fp)
    78d8:	e17fec17 	ldw	r5,-80(fp)
    78dc:	00069380 	call	6938 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm>
    78e0:	e0bff115 	stw	r2,-60(fp)
    78e4:	e13ffa04 	addi	r4,fp,-24
    78e8:	e17ff104 	addi	r5,fp,-60
    78ec:	0005ea00 	call	5ea0 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
	      iterator __new_finish(__new_start);
    78f0:	e0bffa17 	ldw	r2,-24(fp)
    78f4:	e0bffb15 	stw	r2,-20(fp)
	      try
		{
		  __new_finish =
    78f8:	e13ffc17 	ldw	r4,-16(fp)
    78fc:	0005ed40 	call	5ed4 <_ZNSt6vectorIiSaIiEE5beginEv>
    7900:	1021883a 	mov	r16,r2
    7904:	e13ffc17 	ldw	r4,-16(fp)
    7908:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    790c:	100b883a 	mov	r5,r2
    7910:	e13ff044 	addi	r4,fp,-63
    7914:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    7918:	e1fff044 	addi	r7,fp,-63
    791c:	8009883a 	mov	r4,r16
    7920:	e17ffd17 	ldw	r5,-12(fp)
    7924:	e1bffa17 	ldw	r6,-24(fp)
    7928:	000716c0 	call	716c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_iET0_T_S8_S7_SaIT1_E>
    792c:	e0bffb15 	stw	r2,-20(fp)
    7930:	e13ff044 	addi	r4,fp,-63
    7934:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
		    std::__uninitialized_copy_a(begin(), __position,
						__new_start,
						_M_get_Tp_allocator());
		  std::__uninitialized_fill_n_a(__new_finish, __n, __x,
    7938:	e43ffe17 	ldw	r16,-8(fp)
    793c:	e13ffc17 	ldw	r4,-16(fp)
    7940:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    7944:	100b883a 	mov	r5,r2
    7948:	e13ff004 	addi	r4,fp,-64
    794c:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    7950:	e1fff004 	addi	r7,fp,-64
    7954:	e13ffb17 	ldw	r4,-20(fp)
    7958:	800b883a 	mov	r5,r16
    795c:	e1bfff17 	ldw	r6,-4(fp)
    7960:	00068880 	call	6888 <_ZSt24__uninitialized_fill_n_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiiEvT_T0_RKT1_SaIT2_E>
    7964:	e13ff004 	addi	r4,fp,-64
    7968:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
						_M_get_Tp_allocator());
		  __new_finish += __n;
    796c:	e0bffe17 	ldw	r2,-8(fp)
    7970:	e0bfef15 	stw	r2,-68(fp)
    7974:	e13ffb04 	addi	r4,fp,-20
    7978:	e17fef04 	addi	r5,fp,-68
    797c:	00061ec0 	call	61ec <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEpLERKl>
		  __new_finish =
    7980:	e13ffc17 	ldw	r4,-16(fp)
    7984:	0005fc00 	call	5fc0 <_ZNSt6vectorIiSaIiEE3endEv>
    7988:	1021883a 	mov	r16,r2
    798c:	e13ffc17 	ldw	r4,-16(fp)
    7990:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    7994:	100b883a 	mov	r5,r2
    7998:	e13fee84 	addi	r4,fp,-70
    799c:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    79a0:	e1ffee84 	addi	r7,fp,-70
    79a4:	e13ffd17 	ldw	r4,-12(fp)
    79a8:	800b883a 	mov	r5,r16
    79ac:	e1bffb17 	ldw	r6,-20(fp)
    79b0:	000716c0 	call	716c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_iET0_T_S8_S7_SaIT1_E>
    79b4:	e0bffb15 	stw	r2,-20(fp)
    79b8:	e13fee84 	addi	r4,fp,-70
    79bc:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
		  std::_Destroy(__new_start, __new_finish,
				_M_get_Tp_allocator());
		  _M_deallocate(__new_start.base(), __len);
		  __throw_exception_again;
		}
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    79c0:	e0bffc17 	ldw	r2,-16(fp)
    79c4:	14000017 	ldw	r16,0(r2)
    79c8:	e0bffc17 	ldw	r2,-16(fp)
    79cc:	14400117 	ldw	r17,4(r2)
    79d0:	e13ffc17 	ldw	r4,-16(fp)
    79d4:	0005b700 	call	5b70 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    79d8:	100b883a 	mov	r5,r2
    79dc:	e13fee04 	addi	r4,fp,-72
    79e0:	0005b080 	call	5b08 <_ZNSaIiEC1ERKS_>
    79e4:	e1bfee04 	addi	r6,fp,-72
    79e8:	8009883a 	mov	r4,r16
    79ec:	880b883a 	mov	r5,r17
    79f0:	00060600 	call	6060 <_ZSt8_DestroyIPiiEvT_S1_SaIT0_E>
    79f4:	e13fee04 	addi	r4,fp,-72
    79f8:	0005a7c0 	call	5a7c <_ZNSaIiED1Ev>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
    79fc:	e13ffc17 	ldw	r4,-16(fp)
    7a00:	e0bffc17 	ldw	r2,-16(fp)
    7a04:	11400017 	ldw	r5,0(r2)
    7a08:	e0bffc17 	ldw	r2,-16(fp)
    7a0c:	10800217 	ldw	r2,8(r2)
    7a10:	1007883a 	mov	r3,r2
    7a14:	e0bffc17 	ldw	r2,-16(fp)
    7a18:	10800017 	ldw	r2,0(r2)
    7a1c:	1885c83a 	sub	r2,r3,r2
    7a20:	1005d0ba 	srai	r2,r2,2
    7a24:	100d883a 	mov	r6,r2
    7a28:	0006c3c0 	call	6c3c <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __new_start.base();
    7a2c:	e13ffa04 	addi	r4,fp,-24
    7a30:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7a34:	10c00017 	ldw	r3,0(r2)
    7a38:	e0bffc17 	ldw	r2,-16(fp)
    7a3c:	10c00015 	stw	r3,0(r2)
	      this->_M_impl._M_finish = __new_finish.base();
    7a40:	e13ffb04 	addi	r4,fp,-20
    7a44:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7a48:	10c00017 	ldw	r3,0(r2)
    7a4c:	e0bffc17 	ldw	r2,-16(fp)
    7a50:	10c00115 	stw	r3,4(r2)
	      this->_M_impl._M_end_of_storage = __new_start.base() + __len;
    7a54:	e13ffa04 	addi	r4,fp,-24
    7a58:	000609c0 	call	609c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7a5c:	10c00017 	ldw	r3,0(r2)
    7a60:	e0bfec17 	ldw	r2,-80(fp)
    7a64:	1085883a 	add	r2,r2,r2
    7a68:	1085883a 	add	r2,r2,r2
    7a6c:	1887883a 	add	r3,r3,r2
    7a70:	e0bffc17 	ldw	r2,-16(fp)
    7a74:	10c00215 	stw	r3,8(r2)
    7a78:	e037883a 	mov	sp,fp
    7a7c:	dfc00417 	ldw	ra,16(sp)
    7a80:	df000317 	ldw	fp,12(sp)
    7a84:	dc800217 	ldw	r18,8(sp)
    7a88:	dc400117 	ldw	r17,4(sp)
    7a8c:	dc000017 	ldw	r16,0(sp)
    7a90:	dec00504 	addi	sp,sp,20
    7a94:	f800283a 	ret

00007a98 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi>:
       *  Note that this kind of operation could be expensive for a
       *  %vector and if it is frequently used the user should
       *  consider using std::list.
       */
      void
      insert(iterator __position, size_type __n, const value_type& __x)
    7a98:	defffa04 	addi	sp,sp,-24
    7a9c:	dfc00515 	stw	ra,20(sp)
    7aa0:	df000415 	stw	fp,16(sp)
    7aa4:	df000404 	addi	fp,sp,16
    7aa8:	e13ffc15 	stw	r4,-16(fp)
    7aac:	e17ffd15 	stw	r5,-12(fp)
    7ab0:	e1bffe15 	stw	r6,-8(fp)
    7ab4:	e1ffff15 	stw	r7,-4(fp)
      { _M_fill_insert(__position, __n, __x); }
    7ab8:	e13ffc17 	ldw	r4,-16(fp)
    7abc:	e17ffd17 	ldw	r5,-12(fp)
    7ac0:	e1bffe17 	ldw	r6,-8(fp)
    7ac4:	e1ffff17 	ldw	r7,-4(fp)
    7ac8:	00076200 	call	7620 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi>
    7acc:	e037883a 	mov	sp,fp
    7ad0:	dfc00117 	ldw	ra,4(sp)
    7ad4:	df000017 	ldw	fp,0(sp)
    7ad8:	dec00204 	addi	sp,sp,8
    7adc:	f800283a 	ret

00007ae0 <_ZNSt6vectorIiSaIiEE6resizeEmi>:
       *  %vector's current size the %vector is truncated, otherwise
       *  the %vector is extended and new elements are populated with
       *  given data.
       */
      void
      resize(size_type __new_size, value_type __x = value_type())
    7ae0:	defff804 	addi	sp,sp,-32
    7ae4:	dfc00715 	stw	ra,28(sp)
    7ae8:	df000615 	stw	fp,24(sp)
    7aec:	dc000515 	stw	r16,20(sp)
    7af0:	df000504 	addi	fp,sp,20
    7af4:	e13ffd15 	stw	r4,-12(fp)
    7af8:	e17ffe15 	stw	r5,-8(fp)
    7afc:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__new_size < size())
    7b00:	e13ffd17 	ldw	r4,-12(fp)
    7b04:	0005e540 	call	5e54 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    7b08:	1007883a 	mov	r3,r2
    7b0c:	e0bffe17 	ldw	r2,-8(fp)
    7b10:	10c5803a 	cmpltu	r2,r2,r3
    7b14:	10803fcc 	andi	r2,r2,255
    7b18:	1005003a 	cmpeq	r2,r2,zero
    7b1c:	1000101e 	bne	r2,zero,7b60 <_ZNSt6vectorIiSaIiEE6resizeEmi+0x80>
	  erase(begin() + __new_size, end());
    7b20:	e13ffd17 	ldw	r4,-12(fp)
    7b24:	0005ed40 	call	5ed4 <_ZNSt6vectorIiSaIiEE5beginEv>
    7b28:	e0bffc15 	stw	r2,-16(fp)
    7b2c:	e0bffe17 	ldw	r2,-8(fp)
    7b30:	e0bffb15 	stw	r2,-20(fp)
    7b34:	e13ffc04 	addi	r4,fp,-16
    7b38:	e17ffb04 	addi	r5,fp,-20
    7b3c:	0005f0c0 	call	5f0c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl>
    7b40:	1021883a 	mov	r16,r2
    7b44:	e13ffd17 	ldw	r4,-12(fp)
    7b48:	0005fc00 	call	5fc0 <_ZNSt6vectorIiSaIiEE3endEv>
    7b4c:	100d883a 	mov	r6,r2
    7b50:	e13ffd17 	ldw	r4,-12(fp)
    7b54:	800b883a 	mov	r5,r16
    7b58:	000702c0 	call	702c <_ZNSt6vectorIiSaIiEE5eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EES5_>
    7b5c:	00000c06 	br	7b90 <_ZNSt6vectorIiSaIiEE6resizeEmi+0xb0>
	else
	  insert(end(), __new_size - size(), __x);
    7b60:	e13ffd17 	ldw	r4,-12(fp)
    7b64:	0005fc00 	call	5fc0 <_ZNSt6vectorIiSaIiEE3endEv>
    7b68:	1021883a 	mov	r16,r2
    7b6c:	e13ffd17 	ldw	r4,-12(fp)
    7b70:	0005e540 	call	5e54 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    7b74:	1007883a 	mov	r3,r2
    7b78:	e0bffe17 	ldw	r2,-8(fp)
    7b7c:	10cdc83a 	sub	r6,r2,r3
    7b80:	e1ffff04 	addi	r7,fp,-4
    7b84:	e13ffd17 	ldw	r4,-12(fp)
    7b88:	800b883a 	mov	r5,r16
    7b8c:	0007a980 	call	7a98 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi>
    7b90:	e037883a 	mov	sp,fp
    7b94:	dfc00217 	ldw	ra,8(sp)
    7b98:	df000117 	ldw	fp,4(sp)
    7b9c:	dc000017 	ldw	r16,0(sp)
    7ba0:	dec00304 	addi	sp,sp,12
    7ba4:	f800283a 	ret

00007ba8 <_ZSt18__throw_bad_typeidv>:
    7ba8:	deffff04 	addi	sp,sp,-4
    7bac:	01000104 	movi	r4,4
    7bb0:	dfc00015 	stw	ra,0(sp)
    7bb4:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    7bb8:	1009883a 	mov	r4,r2
    7bbc:	008000b4 	movhi	r2,2
    7bc0:	10baac04 	addi	r2,r2,-5456
    7bc4:	20800015 	stw	r2,0(r4)
    7bc8:	014000b4 	movhi	r5,2
    7bcc:	297ab304 	addi	r5,r5,-5428
    7bd0:	01800074 	movhi	r6,1
    7bd4:	31b73404 	addi	r6,r6,-9008
    7bd8:	000dd640 	call	dd64 <__cxa_throw>

00007bdc <_ZSt16__throw_bad_castv>:
    7bdc:	deffff04 	addi	sp,sp,-4
    7be0:	01000104 	movi	r4,4
    7be4:	dfc00015 	stw	ra,0(sp)
    7be8:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    7bec:	1009883a 	mov	r4,r2
    7bf0:	008000b4 	movhi	r2,2
    7bf4:	10bab804 	addi	r2,r2,-5408
    7bf8:	20800015 	stw	r2,0(r4)
    7bfc:	014000b4 	movhi	r5,2
    7c00:	297abe04 	addi	r5,r5,-5384
    7c04:	01800074 	movhi	r6,1
    7c08:	31bb1204 	addi	r6,r6,-5048
    7c0c:	000dd640 	call	dd64 <__cxa_throw>

00007c10 <_ZSt17__throw_bad_allocv>:
    7c10:	deffff04 	addi	sp,sp,-4
    7c14:	01000104 	movi	r4,4
    7c18:	dfc00015 	stw	ra,0(sp)
    7c1c:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    7c20:	1009883a 	mov	r4,r2
    7c24:	008000b4 	movhi	r2,2
    7c28:	10baf104 	addi	r2,r2,-5180
    7c2c:	20800015 	stw	r2,0(r4)
    7c30:	014000b4 	movhi	r5,2
    7c34:	297af804 	addi	r5,r5,-5152
    7c38:	01800074 	movhi	r6,1
    7c3c:	31bc5904 	addi	r6,r6,-3740
    7c40:	000dd640 	call	dd64 <__cxa_throw>

00007c44 <_ZSt21__throw_bad_exceptionv>:
    7c44:	deffff04 	addi	sp,sp,-4
    7c48:	01000104 	movi	r4,4
    7c4c:	dfc00015 	stw	ra,0(sp)
    7c50:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    7c54:	1009883a 	mov	r4,r2
    7c58:	008000b4 	movhi	r2,2
    7c5c:	10badb04 	addi	r2,r2,-5268
    7c60:	20800015 	stw	r2,0(r4)
    7c64:	014000b4 	movhi	r5,2
    7c68:	297ae804 	addi	r5,r5,-5216
    7c6c:	01800074 	movhi	r6,1
    7c70:	31bc4104 	addi	r6,r6,-3836
    7c74:	000dd640 	call	dd64 <__cxa_throw>

00007c78 <_ZSt19__throw_ios_failurePKc>:
    7c78:	deffeb04 	addi	sp,sp,-84
    7c7c:	00800074 	movhi	r2,1
    7c80:	10b9cd04 	addi	r2,r2,-6348
    7c84:	d8800815 	stw	r2,32(sp)
    7c88:	00c000b4 	movhi	r3,2
    7c8c:	18f88e04 	addi	r3,r3,-7624
    7c90:	00800034 	movhi	r2,0
    7c94:	109f5504 	addi	r2,r2,32084
    7c98:	d9001115 	stw	r4,68(sp)
    7c9c:	d9000204 	addi	r4,sp,8
    7ca0:	d8800b15 	stw	r2,44(sp)
    7ca4:	dfc01415 	stw	ra,80(sp)
    7ca8:	df001315 	stw	fp,76(sp)
    7cac:	ddc01215 	stw	r23,72(sp)
    7cb0:	d8c00915 	stw	r3,36(sp)
    7cb4:	dec00a15 	stw	sp,40(sp)
    7cb8:	dec00c15 	stw	sp,48(sp)
    7cbc:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    7cc0:	00800084 	movi	r2,2
    7cc4:	d8800315 	stw	r2,12(sp)
    7cc8:	d9401117 	ldw	r5,68(sp)
    7ccc:	d9000104 	addi	r4,sp,4
    7cd0:	d9800044 	addi	r6,sp,1
    7cd4:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    7cd8:	01000204 	movi	r4,8
    7cdc:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    7ce0:	1009883a 	mov	r4,r2
    7ce4:	d9400104 	addi	r5,sp,4
    7ce8:	d8801015 	stw	r2,64(sp)
    7cec:	0008e780 	call	8e78 <_ZNSt8ios_base7failureC1ERKSs>
    7cf0:	d8800117 	ldw	r2,4(sp)
    7cf4:	00c000b4 	movhi	r3,2
    7cf8:	18ca2404 	addi	r3,r3,10384
    7cfc:	10bffd04 	addi	r2,r2,-12
    7d00:	d8800f15 	stw	r2,60(sp)
    7d04:	10c0081e 	bne	r2,r3,7d28 <_ZSt19__throw_ios_failurePKc+0xb0>
    7d08:	d9001017 	ldw	r4,64(sp)
    7d0c:	00bfffc4 	movi	r2,-1
    7d10:	014000b4 	movhi	r5,2
    7d14:	297a3504 	addi	r5,r5,-5932
    7d18:	01800074 	movhi	r6,1
    7d1c:	31a35d04 	addi	r6,r6,-29324
    7d20:	d8800315 	stw	r2,12(sp)
    7d24:	000dd640 	call	dd64 <__cxa_throw>
    7d28:	00800044 	movi	r2,1
    7d2c:	d8800315 	stw	r2,12(sp)
    7d30:	d8800f17 	ldw	r2,60(sp)
    7d34:	017fffc4 	movi	r5,-1
    7d38:	11000204 	addi	r4,r2,8
    7d3c:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7d40:	00bff116 	blt	zero,r2,7d08 <_ZSt19__throw_ios_failurePKc+0x90>
    7d44:	d9000f17 	ldw	r4,60(sp)
    7d48:	d80b883a 	mov	r5,sp
    7d4c:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7d50:	003fed06 	br	7d08 <_ZSt19__throw_ios_failurePKc+0x90>
    7d54:	d8c00317 	ldw	r3,12(sp)
    7d58:	00800044 	movi	r2,1
    7d5c:	d9000417 	ldw	r4,16(sp)
    7d60:	d9400517 	ldw	r5,20(sp)
    7d64:	18800226 	beq	r3,r2,7d70 <_ZSt19__throw_ios_failurePKc+0xf8>
    7d68:	00bfffc4 	movi	r2,-1
    7d6c:	28800326 	beq	r5,r2,7d7c <_ZSt19__throw_ios_failurePKc+0x104>
    7d70:	00bfffc4 	movi	r2,-1
    7d74:	d8800315 	stw	r2,12(sp)
    7d78:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    7d7c:	000ef0c0 	call	ef0c <_ZSt9terminatev>

00007d80 <_ZSt19__throw_logic_errorPKc>:
    7d80:	deffe704 	addi	sp,sp,-100
    7d84:	00800074 	movhi	r2,1
    7d88:	10b9cd04 	addi	r2,r2,-6348
    7d8c:	d8800815 	stw	r2,32(sp)
    7d90:	00c000b4 	movhi	r3,2
    7d94:	18f89304 	addi	r3,r3,-7604
    7d98:	00800034 	movhi	r2,0
    7d9c:	109f9b04 	addi	r2,r2,32364
    7da0:	d9001315 	stw	r4,76(sp)
    7da4:	d9000204 	addi	r4,sp,8
    7da8:	d8800b15 	stw	r2,44(sp)
    7dac:	dfc01815 	stw	ra,96(sp)
    7db0:	df001715 	stw	fp,92(sp)
    7db4:	ddc01615 	stw	r23,88(sp)
    7db8:	d8c00915 	stw	r3,36(sp)
    7dbc:	dec00a15 	stw	sp,40(sp)
    7dc0:	dec00c15 	stw	sp,48(sp)
    7dc4:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    7dc8:	00800104 	movi	r2,4
    7dcc:	d8800315 	stw	r2,12(sp)
    7dd0:	d885883a 	add	r2,sp,r2
    7dd4:	d8801415 	stw	r2,80(sp)
    7dd8:	d9401317 	ldw	r5,76(sp)
    7ddc:	1009883a 	mov	r4,r2
    7de0:	d9800084 	addi	r6,sp,2
    7de4:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    7de8:	01000204 	movi	r4,8
    7dec:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    7df0:	d8801215 	stw	r2,72(sp)
    7df4:	008000c4 	movi	r2,3
    7df8:	d8800315 	stw	r2,12(sp)
    7dfc:	d9401417 	ldw	r5,80(sp)
    7e00:	d9001217 	ldw	r4,72(sp)
    7e04:	00095040 	call	9504 <_ZNSt11logic_errorC1ERKSs>
    7e08:	d8800117 	ldw	r2,4(sp)
    7e0c:	00c000b4 	movhi	r3,2
    7e10:	18ca2404 	addi	r3,r3,10384
    7e14:	10bffd04 	addi	r2,r2,-12
    7e18:	d8800f15 	stw	r2,60(sp)
    7e1c:	10c0081e 	bne	r2,r3,7e40 <_ZSt19__throw_logic_errorPKc+0xc0>
    7e20:	d9001217 	ldw	r4,72(sp)
    7e24:	00bfffc4 	movi	r2,-1
    7e28:	014000b4 	movhi	r5,2
    7e2c:	297a4e04 	addi	r5,r5,-5832
    7e30:	01800074 	movhi	r6,1
    7e34:	31a48c04 	addi	r6,r6,-28112
    7e38:	d8800315 	stw	r2,12(sp)
    7e3c:	000dd640 	call	dd64 <__cxa_throw>
    7e40:	00800044 	movi	r2,1
    7e44:	d8800315 	stw	r2,12(sp)
    7e48:	d8800f17 	ldw	r2,60(sp)
    7e4c:	017fffc4 	movi	r5,-1
    7e50:	11000204 	addi	r4,r2,8
    7e54:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7e58:	00bff116 	blt	zero,r2,7e20 <_ZSt19__throw_logic_errorPKc+0xa0>
    7e5c:	d9000f17 	ldw	r4,60(sp)
    7e60:	d80b883a 	mov	r5,sp
    7e64:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7e68:	003fed06 	br	7e20 <_ZSt19__throw_logic_errorPKc+0xa0>
    7e6c:	d8800417 	ldw	r2,16(sp)
    7e70:	d8c00317 	ldw	r3,12(sp)
    7e74:	d9000517 	ldw	r4,20(sp)
    7e78:	d8801515 	stw	r2,84(sp)
    7e7c:	00800044 	movi	r2,1
    7e80:	18800426 	beq	r3,r2,7e94 <_ZSt19__throw_logic_errorPKc+0x114>
    7e84:	00800084 	movi	r2,2
    7e88:	18800826 	beq	r3,r2,7eac <_ZSt19__throw_logic_errorPKc+0x12c>
    7e8c:	008000c4 	movi	r2,3
    7e90:	18800226 	beq	r3,r2,7e9c <_ZSt19__throw_logic_errorPKc+0x11c>
    7e94:	00bfffc4 	movi	r2,-1
    7e98:	20801126 	beq	r4,r2,7ee0 <_ZSt19__throw_logic_errorPKc+0x160>
    7e9c:	d9001517 	ldw	r4,84(sp)
    7ea0:	00bfffc4 	movi	r2,-1
    7ea4:	d8800315 	stw	r2,12(sp)
    7ea8:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    7eac:	d9001217 	ldw	r4,72(sp)
    7eb0:	000f1840 	call	f184 <__cxa_free_exception>
    7eb4:	d8801517 	ldw	r2,84(sp)
    7eb8:	00c000b4 	movhi	r3,2
    7ebc:	18ca2404 	addi	r3,r3,10384
    7ec0:	d8801115 	stw	r2,68(sp)
    7ec4:	d8800117 	ldw	r2,4(sp)
    7ec8:	10bffd04 	addi	r2,r2,-12
    7ecc:	d8801015 	stw	r2,64(sp)
    7ed0:	10c0041e 	bne	r2,r3,7ee4 <_ZSt19__throw_logic_errorPKc+0x164>
    7ed4:	d8801117 	ldw	r2,68(sp)
    7ed8:	d8801515 	stw	r2,84(sp)
    7edc:	003fef06 	br	7e9c <_ZSt19__throw_logic_errorPKc+0x11c>
    7ee0:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    7ee4:	00800084 	movi	r2,2
    7ee8:	d8800315 	stw	r2,12(sp)
    7eec:	d8801017 	ldw	r2,64(sp)
    7ef0:	017fffc4 	movi	r5,-1
    7ef4:	11000204 	addi	r4,r2,8
    7ef8:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7efc:	00bff516 	blt	zero,r2,7ed4 <_ZSt19__throw_logic_errorPKc+0x154>
    7f00:	d9001017 	ldw	r4,64(sp)
    7f04:	d9400044 	addi	r5,sp,1
    7f08:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7f0c:	003ff106 	br	7ed4 <_ZSt19__throw_logic_errorPKc+0x154>

00007f10 <_ZSt23__throw_underflow_errorPKc>:
    7f10:	deffe704 	addi	sp,sp,-100
    7f14:	00800074 	movhi	r2,1
    7f18:	10b9cd04 	addi	r2,r2,-6348
    7f1c:	d8800815 	stw	r2,32(sp)
    7f20:	00c000b4 	movhi	r3,2
    7f24:	18f89904 	addi	r3,r3,-7580
    7f28:	00800034 	movhi	r2,0
    7f2c:	109fff04 	addi	r2,r2,32764
    7f30:	d9001315 	stw	r4,76(sp)
    7f34:	d9000204 	addi	r4,sp,8
    7f38:	d8800b15 	stw	r2,44(sp)
    7f3c:	dfc01815 	stw	ra,96(sp)
    7f40:	df001715 	stw	fp,92(sp)
    7f44:	ddc01615 	stw	r23,88(sp)
    7f48:	d8c00915 	stw	r3,36(sp)
    7f4c:	dec00a15 	stw	sp,40(sp)
    7f50:	dec00c15 	stw	sp,48(sp)
    7f54:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    7f58:	00800104 	movi	r2,4
    7f5c:	d8800315 	stw	r2,12(sp)
    7f60:	d885883a 	add	r2,sp,r2
    7f64:	d8801415 	stw	r2,80(sp)
    7f68:	d9401317 	ldw	r5,76(sp)
    7f6c:	1009883a 	mov	r4,r2
    7f70:	d9800084 	addi	r6,sp,2
    7f74:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    7f78:	01000204 	movi	r4,8
    7f7c:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    7f80:	d8801215 	stw	r2,72(sp)
    7f84:	008000c4 	movi	r2,3
    7f88:	d8800315 	stw	r2,12(sp)
    7f8c:	d9401417 	ldw	r5,80(sp)
    7f90:	d9001217 	ldw	r4,72(sp)
    7f94:	00093e40 	call	93e4 <_ZNSt15underflow_errorC1ERKSs>
    7f98:	d8800117 	ldw	r2,4(sp)
    7f9c:	00c000b4 	movhi	r3,2
    7fa0:	18ca2404 	addi	r3,r3,10384
    7fa4:	10bffd04 	addi	r2,r2,-12
    7fa8:	d8800f15 	stw	r2,60(sp)
    7fac:	10c0081e 	bne	r2,r3,7fd0 <_ZSt23__throw_underflow_errorPKc+0xc0>
    7fb0:	d9001217 	ldw	r4,72(sp)
    7fb4:	00bfffc4 	movi	r2,-1
    7fb8:	014000b4 	movhi	r5,2
    7fbc:	2979cf04 	addi	r5,r5,-6340
    7fc0:	01800074 	movhi	r6,1
    7fc4:	31a2f104 	addi	r6,r6,-29756
    7fc8:	d8800315 	stw	r2,12(sp)
    7fcc:	000dd640 	call	dd64 <__cxa_throw>
    7fd0:	00800044 	movi	r2,1
    7fd4:	d8800315 	stw	r2,12(sp)
    7fd8:	d8800f17 	ldw	r2,60(sp)
    7fdc:	017fffc4 	movi	r5,-1
    7fe0:	11000204 	addi	r4,r2,8
    7fe4:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7fe8:	00bff116 	blt	zero,r2,7fb0 <_ZSt23__throw_underflow_errorPKc+0xa0>
    7fec:	d9000f17 	ldw	r4,60(sp)
    7ff0:	d80b883a 	mov	r5,sp
    7ff4:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7ff8:	003fed06 	br	7fb0 <_ZSt23__throw_underflow_errorPKc+0xa0>
    7ffc:	d8800417 	ldw	r2,16(sp)
    8000:	d8c00317 	ldw	r3,12(sp)
    8004:	d9000517 	ldw	r4,20(sp)
    8008:	d8801515 	stw	r2,84(sp)
    800c:	00800044 	movi	r2,1
    8010:	18800426 	beq	r3,r2,8024 <_ZSt23__throw_underflow_errorPKc+0x114>
    8014:	00800084 	movi	r2,2
    8018:	18800826 	beq	r3,r2,803c <_ZSt23__throw_underflow_errorPKc+0x12c>
    801c:	008000c4 	movi	r2,3
    8020:	18800226 	beq	r3,r2,802c <_ZSt23__throw_underflow_errorPKc+0x11c>
    8024:	00bfffc4 	movi	r2,-1
    8028:	20801126 	beq	r4,r2,8070 <_ZSt23__throw_underflow_errorPKc+0x160>
    802c:	d9001517 	ldw	r4,84(sp)
    8030:	00bfffc4 	movi	r2,-1
    8034:	d8800315 	stw	r2,12(sp)
    8038:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    803c:	d9001217 	ldw	r4,72(sp)
    8040:	000f1840 	call	f184 <__cxa_free_exception>
    8044:	d8801517 	ldw	r2,84(sp)
    8048:	00c000b4 	movhi	r3,2
    804c:	18ca2404 	addi	r3,r3,10384
    8050:	d8801115 	stw	r2,68(sp)
    8054:	d8800117 	ldw	r2,4(sp)
    8058:	10bffd04 	addi	r2,r2,-12
    805c:	d8801015 	stw	r2,64(sp)
    8060:	10c0041e 	bne	r2,r3,8074 <_ZSt23__throw_underflow_errorPKc+0x164>
    8064:	d8801117 	ldw	r2,68(sp)
    8068:	d8801515 	stw	r2,84(sp)
    806c:	003fef06 	br	802c <_ZSt23__throw_underflow_errorPKc+0x11c>
    8070:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    8074:	00800084 	movi	r2,2
    8078:	d8800315 	stw	r2,12(sp)
    807c:	d8801017 	ldw	r2,64(sp)
    8080:	017fffc4 	movi	r5,-1
    8084:	11000204 	addi	r4,r2,8
    8088:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    808c:	00bff516 	blt	zero,r2,8064 <_ZSt23__throw_underflow_errorPKc+0x154>
    8090:	d9001017 	ldw	r4,64(sp)
    8094:	d9400044 	addi	r5,sp,1
    8098:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    809c:	003ff106 	br	8064 <_ZSt23__throw_underflow_errorPKc+0x154>

000080a0 <_ZSt22__throw_overflow_errorPKc>:
    80a0:	deffe704 	addi	sp,sp,-100
    80a4:	00800074 	movhi	r2,1
    80a8:	10b9cd04 	addi	r2,r2,-6348
    80ac:	d8800815 	stw	r2,32(sp)
    80b0:	00c000b4 	movhi	r3,2
    80b4:	18f89f04 	addi	r3,r3,-7556
    80b8:	00800074 	movhi	r2,1
    80bc:	10a06304 	addi	r2,r2,-32372
    80c0:	d9001315 	stw	r4,76(sp)
    80c4:	d9000204 	addi	r4,sp,8
    80c8:	d8800b15 	stw	r2,44(sp)
    80cc:	dfc01815 	stw	ra,96(sp)
    80d0:	df001715 	stw	fp,92(sp)
    80d4:	ddc01615 	stw	r23,88(sp)
    80d8:	d8c00915 	stw	r3,36(sp)
    80dc:	dec00a15 	stw	sp,40(sp)
    80e0:	dec00c15 	stw	sp,48(sp)
    80e4:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    80e8:	00800104 	movi	r2,4
    80ec:	d8800315 	stw	r2,12(sp)
    80f0:	d885883a 	add	r2,sp,r2
    80f4:	d8801415 	stw	r2,80(sp)
    80f8:	d9401317 	ldw	r5,76(sp)
    80fc:	1009883a 	mov	r4,r2
    8100:	d9800084 	addi	r6,sp,2
    8104:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    8108:	01000204 	movi	r4,8
    810c:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    8110:	d8801215 	stw	r2,72(sp)
    8114:	008000c4 	movi	r2,3
    8118:	d8800315 	stw	r2,12(sp)
    811c:	d9401417 	ldw	r5,80(sp)
    8120:	d9001217 	ldw	r4,72(sp)
    8124:	00094440 	call	9444 <_ZNSt14overflow_errorC1ERKSs>
    8128:	d8800117 	ldw	r2,4(sp)
    812c:	00c000b4 	movhi	r3,2
    8130:	18ca2404 	addi	r3,r3,10384
    8134:	10bffd04 	addi	r2,r2,-12
    8138:	d8800f15 	stw	r2,60(sp)
    813c:	10c0081e 	bne	r2,r3,8160 <_ZSt22__throw_overflow_errorPKc+0xc0>
    8140:	d9001217 	ldw	r4,72(sp)
    8144:	00bfffc4 	movi	r2,-1
    8148:	014000b4 	movhi	r5,2
    814c:	2979dc04 	addi	r5,r5,-6288
    8150:	01800074 	movhi	r6,1
    8154:	31a30204 	addi	r6,r6,-29688
    8158:	d8800315 	stw	r2,12(sp)
    815c:	000dd640 	call	dd64 <__cxa_throw>
    8160:	00800044 	movi	r2,1
    8164:	d8800315 	stw	r2,12(sp)
    8168:	d8800f17 	ldw	r2,60(sp)
    816c:	017fffc4 	movi	r5,-1
    8170:	11000204 	addi	r4,r2,8
    8174:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8178:	00bff116 	blt	zero,r2,8140 <_ZSt22__throw_overflow_errorPKc+0xa0>
    817c:	d9000f17 	ldw	r4,60(sp)
    8180:	d80b883a 	mov	r5,sp
    8184:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8188:	003fed06 	br	8140 <_ZSt22__throw_overflow_errorPKc+0xa0>
    818c:	d8800417 	ldw	r2,16(sp)
    8190:	d8c00317 	ldw	r3,12(sp)
    8194:	d9000517 	ldw	r4,20(sp)
    8198:	d8801515 	stw	r2,84(sp)
    819c:	00800044 	movi	r2,1
    81a0:	18800426 	beq	r3,r2,81b4 <_ZSt22__throw_overflow_errorPKc+0x114>
    81a4:	00800084 	movi	r2,2
    81a8:	18800826 	beq	r3,r2,81cc <_ZSt22__throw_overflow_errorPKc+0x12c>
    81ac:	008000c4 	movi	r2,3
    81b0:	18800226 	beq	r3,r2,81bc <_ZSt22__throw_overflow_errorPKc+0x11c>
    81b4:	00bfffc4 	movi	r2,-1
    81b8:	20801126 	beq	r4,r2,8200 <_ZSt22__throw_overflow_errorPKc+0x160>
    81bc:	d9001517 	ldw	r4,84(sp)
    81c0:	00bfffc4 	movi	r2,-1
    81c4:	d8800315 	stw	r2,12(sp)
    81c8:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    81cc:	d9001217 	ldw	r4,72(sp)
    81d0:	000f1840 	call	f184 <__cxa_free_exception>
    81d4:	d8801517 	ldw	r2,84(sp)
    81d8:	00c000b4 	movhi	r3,2
    81dc:	18ca2404 	addi	r3,r3,10384
    81e0:	d8801115 	stw	r2,68(sp)
    81e4:	d8800117 	ldw	r2,4(sp)
    81e8:	10bffd04 	addi	r2,r2,-12
    81ec:	d8801015 	stw	r2,64(sp)
    81f0:	10c0041e 	bne	r2,r3,8204 <_ZSt22__throw_overflow_errorPKc+0x164>
    81f4:	d8801117 	ldw	r2,68(sp)
    81f8:	d8801515 	stw	r2,84(sp)
    81fc:	003fef06 	br	81bc <_ZSt22__throw_overflow_errorPKc+0x11c>
    8200:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    8204:	00800084 	movi	r2,2
    8208:	d8800315 	stw	r2,12(sp)
    820c:	d8801017 	ldw	r2,64(sp)
    8210:	017fffc4 	movi	r5,-1
    8214:	11000204 	addi	r4,r2,8
    8218:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    821c:	00bff516 	blt	zero,r2,81f4 <_ZSt22__throw_overflow_errorPKc+0x154>
    8220:	d9001017 	ldw	r4,64(sp)
    8224:	d9400044 	addi	r5,sp,1
    8228:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    822c:	003ff106 	br	81f4 <_ZSt22__throw_overflow_errorPKc+0x154>

00008230 <_ZSt24__throw_invalid_argumentPKc>:
    8230:	deffe704 	addi	sp,sp,-100
    8234:	00800074 	movhi	r2,1
    8238:	10b9cd04 	addi	r2,r2,-6348
    823c:	d8800815 	stw	r2,32(sp)
    8240:	00c000b4 	movhi	r3,2
    8244:	18f8a504 	addi	r3,r3,-7532
    8248:	00800074 	movhi	r2,1
    824c:	10a0c704 	addi	r2,r2,-31972
    8250:	d9001315 	stw	r4,76(sp)
    8254:	d9000204 	addi	r4,sp,8
    8258:	d8800b15 	stw	r2,44(sp)
    825c:	dfc01815 	stw	ra,96(sp)
    8260:	df001715 	stw	fp,92(sp)
    8264:	ddc01615 	stw	r23,88(sp)
    8268:	d8c00915 	stw	r3,36(sp)
    826c:	dec00a15 	stw	sp,40(sp)
    8270:	dec00c15 	stw	sp,48(sp)
    8274:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    8278:	00800104 	movi	r2,4
    827c:	d8800315 	stw	r2,12(sp)
    8280:	d885883a 	add	r2,sp,r2
    8284:	d8801415 	stw	r2,80(sp)
    8288:	d9401317 	ldw	r5,76(sp)
    828c:	1009883a 	mov	r4,r2
    8290:	d9800084 	addi	r6,sp,2
    8294:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    8298:	01000204 	movi	r4,8
    829c:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    82a0:	d8801215 	stw	r2,72(sp)
    82a4:	008000c4 	movi	r2,3
    82a8:	d8800315 	stw	r2,12(sp)
    82ac:	d9401417 	ldw	r5,80(sp)
    82b0:	d9001217 	ldw	r4,72(sp)
    82b4:	00097240 	call	9724 <_ZNSt16invalid_argumentC1ERKSs>
    82b8:	d8800117 	ldw	r2,4(sp)
    82bc:	00c000b4 	movhi	r3,2
    82c0:	18ca2404 	addi	r3,r3,10384
    82c4:	10bffd04 	addi	r2,r2,-12
    82c8:	d8800f15 	stw	r2,60(sp)
    82cc:	10c0081e 	bne	r2,r3,82f0 <_ZSt24__throw_invalid_argumentPKc+0xc0>
    82d0:	d9001217 	ldw	r4,72(sp)
    82d4:	00bfffc4 	movi	r2,-1
    82d8:	014000b4 	movhi	r5,2
    82dc:	297a0f04 	addi	r5,r5,-6084
    82e0:	01800074 	movhi	r6,1
    82e4:	31a34604 	addi	r6,r6,-29416
    82e8:	d8800315 	stw	r2,12(sp)
    82ec:	000dd640 	call	dd64 <__cxa_throw>
    82f0:	00800044 	movi	r2,1
    82f4:	d8800315 	stw	r2,12(sp)
    82f8:	d8800f17 	ldw	r2,60(sp)
    82fc:	017fffc4 	movi	r5,-1
    8300:	11000204 	addi	r4,r2,8
    8304:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8308:	00bff116 	blt	zero,r2,82d0 <_ZSt24__throw_invalid_argumentPKc+0xa0>
    830c:	d9000f17 	ldw	r4,60(sp)
    8310:	d80b883a 	mov	r5,sp
    8314:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8318:	003fed06 	br	82d0 <_ZSt24__throw_invalid_argumentPKc+0xa0>
    831c:	d8800417 	ldw	r2,16(sp)
    8320:	d8c00317 	ldw	r3,12(sp)
    8324:	d9000517 	ldw	r4,20(sp)
    8328:	d8801515 	stw	r2,84(sp)
    832c:	00800044 	movi	r2,1
    8330:	18800426 	beq	r3,r2,8344 <_ZSt24__throw_invalid_argumentPKc+0x114>
    8334:	00800084 	movi	r2,2
    8338:	18800826 	beq	r3,r2,835c <_ZSt24__throw_invalid_argumentPKc+0x12c>
    833c:	008000c4 	movi	r2,3
    8340:	18800226 	beq	r3,r2,834c <_ZSt24__throw_invalid_argumentPKc+0x11c>
    8344:	00bfffc4 	movi	r2,-1
    8348:	20801126 	beq	r4,r2,8390 <_ZSt24__throw_invalid_argumentPKc+0x160>
    834c:	d9001517 	ldw	r4,84(sp)
    8350:	00bfffc4 	movi	r2,-1
    8354:	d8800315 	stw	r2,12(sp)
    8358:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    835c:	d9001217 	ldw	r4,72(sp)
    8360:	000f1840 	call	f184 <__cxa_free_exception>
    8364:	d8801517 	ldw	r2,84(sp)
    8368:	00c000b4 	movhi	r3,2
    836c:	18ca2404 	addi	r3,r3,10384
    8370:	d8801115 	stw	r2,68(sp)
    8374:	d8800117 	ldw	r2,4(sp)
    8378:	10bffd04 	addi	r2,r2,-12
    837c:	d8801015 	stw	r2,64(sp)
    8380:	10c0041e 	bne	r2,r3,8394 <_ZSt24__throw_invalid_argumentPKc+0x164>
    8384:	d8801117 	ldw	r2,68(sp)
    8388:	d8801515 	stw	r2,84(sp)
    838c:	003fef06 	br	834c <_ZSt24__throw_invalid_argumentPKc+0x11c>
    8390:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    8394:	00800084 	movi	r2,2
    8398:	d8800315 	stw	r2,12(sp)
    839c:	d8801017 	ldw	r2,64(sp)
    83a0:	017fffc4 	movi	r5,-1
    83a4:	11000204 	addi	r4,r2,8
    83a8:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    83ac:	00bff516 	blt	zero,r2,8384 <_ZSt24__throw_invalid_argumentPKc+0x154>
    83b0:	d9001017 	ldw	r4,64(sp)
    83b4:	d9400044 	addi	r5,sp,1
    83b8:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    83bc:	003ff106 	br	8384 <_ZSt24__throw_invalid_argumentPKc+0x154>

000083c0 <_ZSt20__throw_domain_errorPKc>:
    83c0:	deffe704 	addi	sp,sp,-100
    83c4:	00800074 	movhi	r2,1
    83c8:	10b9cd04 	addi	r2,r2,-6348
    83cc:	d8800815 	stw	r2,32(sp)
    83d0:	00c000b4 	movhi	r3,2
    83d4:	18f8ab04 	addi	r3,r3,-7508
    83d8:	00800074 	movhi	r2,1
    83dc:	10a12b04 	addi	r2,r2,-31572
    83e0:	d9001315 	stw	r4,76(sp)
    83e4:	d9000204 	addi	r4,sp,8
    83e8:	d8800b15 	stw	r2,44(sp)
    83ec:	dfc01815 	stw	ra,96(sp)
    83f0:	df001715 	stw	fp,92(sp)
    83f4:	ddc01615 	stw	r23,88(sp)
    83f8:	d8c00915 	stw	r3,36(sp)
    83fc:	dec00a15 	stw	sp,40(sp)
    8400:	dec00c15 	stw	sp,48(sp)
    8404:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    8408:	00800104 	movi	r2,4
    840c:	d8800315 	stw	r2,12(sp)
    8410:	d885883a 	add	r2,sp,r2
    8414:	d8801415 	stw	r2,80(sp)
    8418:	d9401317 	ldw	r5,76(sp)
    841c:	1009883a 	mov	r4,r2
    8420:	d9800084 	addi	r6,sp,2
    8424:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    8428:	01000204 	movi	r4,8
    842c:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    8430:	d8801215 	stw	r2,72(sp)
    8434:	008000c4 	movi	r2,3
    8438:	d8800315 	stw	r2,12(sp)
    843c:	d9401417 	ldw	r5,80(sp)
    8440:	d9001217 	ldw	r4,72(sp)
    8444:	00097840 	call	9784 <_ZNSt12domain_errorC1ERKSs>
    8448:	d8800117 	ldw	r2,4(sp)
    844c:	00c000b4 	movhi	r3,2
    8450:	18ca2404 	addi	r3,r3,10384
    8454:	10bffd04 	addi	r2,r2,-12
    8458:	d8800f15 	stw	r2,60(sp)
    845c:	10c0081e 	bne	r2,r3,8480 <_ZSt20__throw_domain_errorPKc+0xc0>
    8460:	d9001217 	ldw	r4,72(sp)
    8464:	00bfffc4 	movi	r2,-1
    8468:	014000b4 	movhi	r5,2
    846c:	297a1d04 	addi	r5,r5,-6028
    8470:	01800074 	movhi	r6,1
    8474:	31a35704 	addi	r6,r6,-29348
    8478:	d8800315 	stw	r2,12(sp)
    847c:	000dd640 	call	dd64 <__cxa_throw>
    8480:	00800044 	movi	r2,1
    8484:	d8800315 	stw	r2,12(sp)
    8488:	d8800f17 	ldw	r2,60(sp)
    848c:	017fffc4 	movi	r5,-1
    8490:	11000204 	addi	r4,r2,8
    8494:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8498:	00bff116 	blt	zero,r2,8460 <_ZSt20__throw_domain_errorPKc+0xa0>
    849c:	d9000f17 	ldw	r4,60(sp)
    84a0:	d80b883a 	mov	r5,sp
    84a4:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    84a8:	003fed06 	br	8460 <_ZSt20__throw_domain_errorPKc+0xa0>
    84ac:	d8800417 	ldw	r2,16(sp)
    84b0:	d8c00317 	ldw	r3,12(sp)
    84b4:	d9000517 	ldw	r4,20(sp)
    84b8:	d8801515 	stw	r2,84(sp)
    84bc:	00800044 	movi	r2,1
    84c0:	18800426 	beq	r3,r2,84d4 <_ZSt20__throw_domain_errorPKc+0x114>
    84c4:	00800084 	movi	r2,2
    84c8:	18800826 	beq	r3,r2,84ec <_ZSt20__throw_domain_errorPKc+0x12c>
    84cc:	008000c4 	movi	r2,3
    84d0:	18800226 	beq	r3,r2,84dc <_ZSt20__throw_domain_errorPKc+0x11c>
    84d4:	00bfffc4 	movi	r2,-1
    84d8:	20801126 	beq	r4,r2,8520 <_ZSt20__throw_domain_errorPKc+0x160>
    84dc:	d9001517 	ldw	r4,84(sp)
    84e0:	00bfffc4 	movi	r2,-1
    84e4:	d8800315 	stw	r2,12(sp)
    84e8:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    84ec:	d9001217 	ldw	r4,72(sp)
    84f0:	000f1840 	call	f184 <__cxa_free_exception>
    84f4:	d8801517 	ldw	r2,84(sp)
    84f8:	00c000b4 	movhi	r3,2
    84fc:	18ca2404 	addi	r3,r3,10384
    8500:	d8801115 	stw	r2,68(sp)
    8504:	d8800117 	ldw	r2,4(sp)
    8508:	10bffd04 	addi	r2,r2,-12
    850c:	d8801015 	stw	r2,64(sp)
    8510:	10c0041e 	bne	r2,r3,8524 <_ZSt20__throw_domain_errorPKc+0x164>
    8514:	d8801117 	ldw	r2,68(sp)
    8518:	d8801515 	stw	r2,84(sp)
    851c:	003fef06 	br	84dc <_ZSt20__throw_domain_errorPKc+0x11c>
    8520:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    8524:	00800084 	movi	r2,2
    8528:	d8800315 	stw	r2,12(sp)
    852c:	d8801017 	ldw	r2,64(sp)
    8530:	017fffc4 	movi	r5,-1
    8534:	11000204 	addi	r4,r2,8
    8538:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    853c:	00bff516 	blt	zero,r2,8514 <_ZSt20__throw_domain_errorPKc+0x154>
    8540:	d9001017 	ldw	r4,64(sp)
    8544:	d9400044 	addi	r5,sp,1
    8548:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    854c:	003ff106 	br	8514 <_ZSt20__throw_domain_errorPKc+0x154>

00008550 <_ZSt19__throw_range_errorPKc>:
    8550:	deffe704 	addi	sp,sp,-100
    8554:	00800074 	movhi	r2,1
    8558:	10b9cd04 	addi	r2,r2,-6348
    855c:	d8800815 	stw	r2,32(sp)
    8560:	00c000b4 	movhi	r3,2
    8564:	18f8b104 	addi	r3,r3,-7484
    8568:	00800074 	movhi	r2,1
    856c:	10a18f04 	addi	r2,r2,-31172
    8570:	d9001315 	stw	r4,76(sp)
    8574:	d9000204 	addi	r4,sp,8
    8578:	d8800b15 	stw	r2,44(sp)
    857c:	dfc01815 	stw	ra,96(sp)
    8580:	df001715 	stw	fp,92(sp)
    8584:	ddc01615 	stw	r23,88(sp)
    8588:	d8c00915 	stw	r3,36(sp)
    858c:	dec00a15 	stw	sp,40(sp)
    8590:	dec00c15 	stw	sp,48(sp)
    8594:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    8598:	00800104 	movi	r2,4
    859c:	d8800315 	stw	r2,12(sp)
    85a0:	d885883a 	add	r2,sp,r2
    85a4:	d8801415 	stw	r2,80(sp)
    85a8:	d9401317 	ldw	r5,76(sp)
    85ac:	1009883a 	mov	r4,r2
    85b0:	d9800084 	addi	r6,sp,2
    85b4:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    85b8:	01000204 	movi	r4,8
    85bc:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    85c0:	d8801215 	stw	r2,72(sp)
    85c4:	008000c4 	movi	r2,3
    85c8:	d8800315 	stw	r2,12(sp)
    85cc:	d9401417 	ldw	r5,80(sp)
    85d0:	d9001217 	ldw	r4,72(sp)
    85d4:	00094a40 	call	94a4 <_ZNSt11range_errorC1ERKSs>
    85d8:	d8800117 	ldw	r2,4(sp)
    85dc:	00c000b4 	movhi	r3,2
    85e0:	18ca2404 	addi	r3,r3,10384
    85e4:	10bffd04 	addi	r2,r2,-12
    85e8:	d8800f15 	stw	r2,60(sp)
    85ec:	10c0081e 	bne	r2,r3,8610 <_ZSt19__throw_range_errorPKc+0xc0>
    85f0:	d9001217 	ldw	r4,72(sp)
    85f4:	00bfffc4 	movi	r2,-1
    85f8:	014000b4 	movhi	r5,2
    85fc:	2979e904 	addi	r5,r5,-6236
    8600:	01800074 	movhi	r6,1
    8604:	31a31304 	addi	r6,r6,-29620
    8608:	d8800315 	stw	r2,12(sp)
    860c:	000dd640 	call	dd64 <__cxa_throw>
    8610:	00800044 	movi	r2,1
    8614:	d8800315 	stw	r2,12(sp)
    8618:	d8800f17 	ldw	r2,60(sp)
    861c:	017fffc4 	movi	r5,-1
    8620:	11000204 	addi	r4,r2,8
    8624:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8628:	00bff116 	blt	zero,r2,85f0 <_ZSt19__throw_range_errorPKc+0xa0>
    862c:	d9000f17 	ldw	r4,60(sp)
    8630:	d80b883a 	mov	r5,sp
    8634:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8638:	003fed06 	br	85f0 <_ZSt19__throw_range_errorPKc+0xa0>
    863c:	d8800417 	ldw	r2,16(sp)
    8640:	d8c00317 	ldw	r3,12(sp)
    8644:	d9000517 	ldw	r4,20(sp)
    8648:	d8801515 	stw	r2,84(sp)
    864c:	00800044 	movi	r2,1
    8650:	18800426 	beq	r3,r2,8664 <_ZSt19__throw_range_errorPKc+0x114>
    8654:	00800084 	movi	r2,2
    8658:	18800826 	beq	r3,r2,867c <_ZSt19__throw_range_errorPKc+0x12c>
    865c:	008000c4 	movi	r2,3
    8660:	18800226 	beq	r3,r2,866c <_ZSt19__throw_range_errorPKc+0x11c>
    8664:	00bfffc4 	movi	r2,-1
    8668:	20801126 	beq	r4,r2,86b0 <_ZSt19__throw_range_errorPKc+0x160>
    866c:	d9001517 	ldw	r4,84(sp)
    8670:	00bfffc4 	movi	r2,-1
    8674:	d8800315 	stw	r2,12(sp)
    8678:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    867c:	d9001217 	ldw	r4,72(sp)
    8680:	000f1840 	call	f184 <__cxa_free_exception>
    8684:	d8801517 	ldw	r2,84(sp)
    8688:	00c000b4 	movhi	r3,2
    868c:	18ca2404 	addi	r3,r3,10384
    8690:	d8801115 	stw	r2,68(sp)
    8694:	d8800117 	ldw	r2,4(sp)
    8698:	10bffd04 	addi	r2,r2,-12
    869c:	d8801015 	stw	r2,64(sp)
    86a0:	10c0041e 	bne	r2,r3,86b4 <_ZSt19__throw_range_errorPKc+0x164>
    86a4:	d8801117 	ldw	r2,68(sp)
    86a8:	d8801515 	stw	r2,84(sp)
    86ac:	003fef06 	br	866c <_ZSt19__throw_range_errorPKc+0x11c>
    86b0:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    86b4:	00800084 	movi	r2,2
    86b8:	d8800315 	stw	r2,12(sp)
    86bc:	d8801017 	ldw	r2,64(sp)
    86c0:	017fffc4 	movi	r5,-1
    86c4:	11000204 	addi	r4,r2,8
    86c8:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    86cc:	00bff516 	blt	zero,r2,86a4 <_ZSt19__throw_range_errorPKc+0x154>
    86d0:	d9001017 	ldw	r4,64(sp)
    86d4:	d9400044 	addi	r5,sp,1
    86d8:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    86dc:	003ff106 	br	86a4 <_ZSt19__throw_range_errorPKc+0x154>

000086e0 <_ZSt21__throw_runtime_errorPKc>:
    86e0:	deffe704 	addi	sp,sp,-100
    86e4:	00800074 	movhi	r2,1
    86e8:	10b9cd04 	addi	r2,r2,-6348
    86ec:	d8800815 	stw	r2,32(sp)
    86f0:	00c000b4 	movhi	r3,2
    86f4:	18f8b704 	addi	r3,r3,-7460
    86f8:	00800074 	movhi	r2,1
    86fc:	10a1f304 	addi	r2,r2,-30772
    8700:	d9001315 	stw	r4,76(sp)
    8704:	d9000204 	addi	r4,sp,8
    8708:	d8800b15 	stw	r2,44(sp)
    870c:	dfc01815 	stw	ra,96(sp)
    8710:	df001715 	stw	fp,92(sp)
    8714:	ddc01615 	stw	r23,88(sp)
    8718:	d8c00915 	stw	r3,36(sp)
    871c:	dec00a15 	stw	sp,40(sp)
    8720:	dec00c15 	stw	sp,48(sp)
    8724:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    8728:	00800104 	movi	r2,4
    872c:	d8800315 	stw	r2,12(sp)
    8730:	d885883a 	add	r2,sp,r2
    8734:	d8801415 	stw	r2,80(sp)
    8738:	d9401317 	ldw	r5,76(sp)
    873c:	1009883a 	mov	r4,r2
    8740:	d9800084 	addi	r6,sp,2
    8744:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    8748:	01000204 	movi	r4,8
    874c:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    8750:	d8801215 	stw	r2,72(sp)
    8754:	008000c4 	movi	r2,3
    8758:	d8800315 	stw	r2,12(sp)
    875c:	d9401417 	ldw	r5,80(sp)
    8760:	d9001217 	ldw	r4,72(sp)
    8764:	00097ec0 	call	97ec <_ZNSt13runtime_errorC1ERKSs>
    8768:	d8800117 	ldw	r2,4(sp)
    876c:	00c000b4 	movhi	r3,2
    8770:	18ca2404 	addi	r3,r3,10384
    8774:	10bffd04 	addi	r2,r2,-12
    8778:	d8800f15 	stw	r2,60(sp)
    877c:	10c0081e 	bne	r2,r3,87a0 <_ZSt21__throw_runtime_errorPKc+0xc0>
    8780:	d9001217 	ldw	r4,72(sp)
    8784:	00bfffc4 	movi	r2,-1
    8788:	014000b4 	movhi	r5,2
    878c:	297a4704 	addi	r5,r5,-5860
    8790:	01800074 	movhi	r6,1
    8794:	31a62704 	addi	r6,r6,-26468
    8798:	d8800315 	stw	r2,12(sp)
    879c:	000dd640 	call	dd64 <__cxa_throw>
    87a0:	00800044 	movi	r2,1
    87a4:	d8800315 	stw	r2,12(sp)
    87a8:	d8800f17 	ldw	r2,60(sp)
    87ac:	017fffc4 	movi	r5,-1
    87b0:	11000204 	addi	r4,r2,8
    87b4:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    87b8:	00bff116 	blt	zero,r2,8780 <_ZSt21__throw_runtime_errorPKc+0xa0>
    87bc:	d9000f17 	ldw	r4,60(sp)
    87c0:	d80b883a 	mov	r5,sp
    87c4:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    87c8:	003fed06 	br	8780 <_ZSt21__throw_runtime_errorPKc+0xa0>
    87cc:	d8800417 	ldw	r2,16(sp)
    87d0:	d8c00317 	ldw	r3,12(sp)
    87d4:	d9000517 	ldw	r4,20(sp)
    87d8:	d8801515 	stw	r2,84(sp)
    87dc:	00800044 	movi	r2,1
    87e0:	18800426 	beq	r3,r2,87f4 <_ZSt21__throw_runtime_errorPKc+0x114>
    87e4:	00800084 	movi	r2,2
    87e8:	18800826 	beq	r3,r2,880c <_ZSt21__throw_runtime_errorPKc+0x12c>
    87ec:	008000c4 	movi	r2,3
    87f0:	18800226 	beq	r3,r2,87fc <_ZSt21__throw_runtime_errorPKc+0x11c>
    87f4:	00bfffc4 	movi	r2,-1
    87f8:	20801126 	beq	r4,r2,8840 <_ZSt21__throw_runtime_errorPKc+0x160>
    87fc:	d9001517 	ldw	r4,84(sp)
    8800:	00bfffc4 	movi	r2,-1
    8804:	d8800315 	stw	r2,12(sp)
    8808:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    880c:	d9001217 	ldw	r4,72(sp)
    8810:	000f1840 	call	f184 <__cxa_free_exception>
    8814:	d8801517 	ldw	r2,84(sp)
    8818:	00c000b4 	movhi	r3,2
    881c:	18ca2404 	addi	r3,r3,10384
    8820:	d8801115 	stw	r2,68(sp)
    8824:	d8800117 	ldw	r2,4(sp)
    8828:	10bffd04 	addi	r2,r2,-12
    882c:	d8801015 	stw	r2,64(sp)
    8830:	10c0041e 	bne	r2,r3,8844 <_ZSt21__throw_runtime_errorPKc+0x164>
    8834:	d8801117 	ldw	r2,68(sp)
    8838:	d8801515 	stw	r2,84(sp)
    883c:	003fef06 	br	87fc <_ZSt21__throw_runtime_errorPKc+0x11c>
    8840:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    8844:	00800084 	movi	r2,2
    8848:	d8800315 	stw	r2,12(sp)
    884c:	d8801017 	ldw	r2,64(sp)
    8850:	017fffc4 	movi	r5,-1
    8854:	11000204 	addi	r4,r2,8
    8858:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    885c:	00bff516 	blt	zero,r2,8834 <_ZSt21__throw_runtime_errorPKc+0x154>
    8860:	d9001017 	ldw	r4,64(sp)
    8864:	d9400044 	addi	r5,sp,1
    8868:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    886c:	003ff106 	br	8834 <_ZSt21__throw_runtime_errorPKc+0x154>

00008870 <_ZSt20__throw_out_of_rangePKc>:
    8870:	deffe704 	addi	sp,sp,-100
    8874:	00800074 	movhi	r2,1
    8878:	10b9cd04 	addi	r2,r2,-6348
    887c:	d8800815 	stw	r2,32(sp)
    8880:	00c000b4 	movhi	r3,2
    8884:	18f8bd04 	addi	r3,r3,-7436
    8888:	00800074 	movhi	r2,1
    888c:	10a25704 	addi	r2,r2,-30372
    8890:	d9001315 	stw	r4,76(sp)
    8894:	d9000204 	addi	r4,sp,8
    8898:	d8800b15 	stw	r2,44(sp)
    889c:	dfc01815 	stw	ra,96(sp)
    88a0:	df001715 	stw	fp,92(sp)
    88a4:	ddc01615 	stw	r23,88(sp)
    88a8:	d8c00915 	stw	r3,36(sp)
    88ac:	dec00a15 	stw	sp,40(sp)
    88b0:	dec00c15 	stw	sp,48(sp)
    88b4:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    88b8:	00800104 	movi	r2,4
    88bc:	d8800315 	stw	r2,12(sp)
    88c0:	d885883a 	add	r2,sp,r2
    88c4:	d8801415 	stw	r2,80(sp)
    88c8:	d9401317 	ldw	r5,76(sp)
    88cc:	1009883a 	mov	r4,r2
    88d0:	d9800084 	addi	r6,sp,2
    88d4:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    88d8:	01000204 	movi	r4,8
    88dc:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    88e0:	d8801215 	stw	r2,72(sp)
    88e4:	008000c4 	movi	r2,3
    88e8:	d8800315 	stw	r2,12(sp)
    88ec:	d9401417 	ldw	r5,80(sp)
    88f0:	d9001217 	ldw	r4,72(sp)
    88f4:	00096640 	call	9664 <_ZNSt12out_of_rangeC1ERKSs>
    88f8:	d8800117 	ldw	r2,4(sp)
    88fc:	00c000b4 	movhi	r3,2
    8900:	18ca2404 	addi	r3,r3,10384
    8904:	10bffd04 	addi	r2,r2,-12
    8908:	d8800f15 	stw	r2,60(sp)
    890c:	10c0081e 	bne	r2,r3,8930 <_ZSt20__throw_out_of_rangePKc+0xc0>
    8910:	d9001217 	ldw	r4,72(sp)
    8914:	00bfffc4 	movi	r2,-1
    8918:	014000b4 	movhi	r5,2
    891c:	2979f504 	addi	r5,r5,-6188
    8920:	01800074 	movhi	r6,1
    8924:	31a32404 	addi	r6,r6,-29552
    8928:	d8800315 	stw	r2,12(sp)
    892c:	000dd640 	call	dd64 <__cxa_throw>
    8930:	00800044 	movi	r2,1
    8934:	d8800315 	stw	r2,12(sp)
    8938:	d8800f17 	ldw	r2,60(sp)
    893c:	017fffc4 	movi	r5,-1
    8940:	11000204 	addi	r4,r2,8
    8944:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8948:	00bff116 	blt	zero,r2,8910 <_ZSt20__throw_out_of_rangePKc+0xa0>
    894c:	d9000f17 	ldw	r4,60(sp)
    8950:	d80b883a 	mov	r5,sp
    8954:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8958:	003fed06 	br	8910 <_ZSt20__throw_out_of_rangePKc+0xa0>
    895c:	d8800417 	ldw	r2,16(sp)
    8960:	d8c00317 	ldw	r3,12(sp)
    8964:	d9000517 	ldw	r4,20(sp)
    8968:	d8801515 	stw	r2,84(sp)
    896c:	00800044 	movi	r2,1
    8970:	18800426 	beq	r3,r2,8984 <_ZSt20__throw_out_of_rangePKc+0x114>
    8974:	00800084 	movi	r2,2
    8978:	18800826 	beq	r3,r2,899c <_ZSt20__throw_out_of_rangePKc+0x12c>
    897c:	008000c4 	movi	r2,3
    8980:	18800226 	beq	r3,r2,898c <_ZSt20__throw_out_of_rangePKc+0x11c>
    8984:	00bfffc4 	movi	r2,-1
    8988:	20801126 	beq	r4,r2,89d0 <_ZSt20__throw_out_of_rangePKc+0x160>
    898c:	d9001517 	ldw	r4,84(sp)
    8990:	00bfffc4 	movi	r2,-1
    8994:	d8800315 	stw	r2,12(sp)
    8998:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    899c:	d9001217 	ldw	r4,72(sp)
    89a0:	000f1840 	call	f184 <__cxa_free_exception>
    89a4:	d8801517 	ldw	r2,84(sp)
    89a8:	00c000b4 	movhi	r3,2
    89ac:	18ca2404 	addi	r3,r3,10384
    89b0:	d8801115 	stw	r2,68(sp)
    89b4:	d8800117 	ldw	r2,4(sp)
    89b8:	10bffd04 	addi	r2,r2,-12
    89bc:	d8801015 	stw	r2,64(sp)
    89c0:	10c0041e 	bne	r2,r3,89d4 <_ZSt20__throw_out_of_rangePKc+0x164>
    89c4:	d8801117 	ldw	r2,68(sp)
    89c8:	d8801515 	stw	r2,84(sp)
    89cc:	003fef06 	br	898c <_ZSt20__throw_out_of_rangePKc+0x11c>
    89d0:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    89d4:	00800084 	movi	r2,2
    89d8:	d8800315 	stw	r2,12(sp)
    89dc:	d8801017 	ldw	r2,64(sp)
    89e0:	017fffc4 	movi	r5,-1
    89e4:	11000204 	addi	r4,r2,8
    89e8:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    89ec:	00bff516 	blt	zero,r2,89c4 <_ZSt20__throw_out_of_rangePKc+0x154>
    89f0:	d9001017 	ldw	r4,64(sp)
    89f4:	d9400044 	addi	r5,sp,1
    89f8:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    89fc:	003ff106 	br	89c4 <_ZSt20__throw_out_of_rangePKc+0x154>

00008a00 <_ZSt20__throw_length_errorPKc>:
    8a00:	deffe704 	addi	sp,sp,-100
    8a04:	00800074 	movhi	r2,1
    8a08:	10b9cd04 	addi	r2,r2,-6348
    8a0c:	d8800815 	stw	r2,32(sp)
    8a10:	00c000b4 	movhi	r3,2
    8a14:	18f8c304 	addi	r3,r3,-7412
    8a18:	00800074 	movhi	r2,1
    8a1c:	10a2bb04 	addi	r2,r2,-29972
    8a20:	d9001315 	stw	r4,76(sp)
    8a24:	d9000204 	addi	r4,sp,8
    8a28:	d8800b15 	stw	r2,44(sp)
    8a2c:	dfc01815 	stw	ra,96(sp)
    8a30:	df001715 	stw	fp,92(sp)
    8a34:	ddc01615 	stw	r23,88(sp)
    8a38:	d8c00915 	stw	r3,36(sp)
    8a3c:	dec00a15 	stw	sp,40(sp)
    8a40:	dec00c15 	stw	sp,48(sp)
    8a44:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    8a48:	00800104 	movi	r2,4
    8a4c:	d8800315 	stw	r2,12(sp)
    8a50:	d885883a 	add	r2,sp,r2
    8a54:	d8801415 	stw	r2,80(sp)
    8a58:	d9401317 	ldw	r5,76(sp)
    8a5c:	1009883a 	mov	r4,r2
    8a60:	d9800084 	addi	r6,sp,2
    8a64:	000b9700 	call	b970 <_ZNSsC1EPKcRKSaIcE>
    8a68:	01000204 	movi	r4,8
    8a6c:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    8a70:	d8801215 	stw	r2,72(sp)
    8a74:	008000c4 	movi	r2,3
    8a78:	d8800315 	stw	r2,12(sp)
    8a7c:	d9401417 	ldw	r5,80(sp)
    8a80:	d9001217 	ldw	r4,72(sp)
    8a84:	00096c40 	call	96c4 <_ZNSt12length_errorC1ERKSs>
    8a88:	d8800117 	ldw	r2,4(sp)
    8a8c:	00c000b4 	movhi	r3,2
    8a90:	18ca2404 	addi	r3,r3,10384
    8a94:	10bffd04 	addi	r2,r2,-12
    8a98:	d8800f15 	stw	r2,60(sp)
    8a9c:	10c0081e 	bne	r2,r3,8ac0 <_ZSt20__throw_length_errorPKc+0xc0>
    8aa0:	d9001217 	ldw	r4,72(sp)
    8aa4:	00bfffc4 	movi	r2,-1
    8aa8:	014000b4 	movhi	r5,2
    8aac:	297a0204 	addi	r5,r5,-6136
    8ab0:	01800074 	movhi	r6,1
    8ab4:	31a33504 	addi	r6,r6,-29484
    8ab8:	d8800315 	stw	r2,12(sp)
    8abc:	000dd640 	call	dd64 <__cxa_throw>
    8ac0:	00800044 	movi	r2,1
    8ac4:	d8800315 	stw	r2,12(sp)
    8ac8:	d8800f17 	ldw	r2,60(sp)
    8acc:	017fffc4 	movi	r5,-1
    8ad0:	11000204 	addi	r4,r2,8
    8ad4:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8ad8:	00bff116 	blt	zero,r2,8aa0 <_ZSt20__throw_length_errorPKc+0xa0>
    8adc:	d9000f17 	ldw	r4,60(sp)
    8ae0:	d80b883a 	mov	r5,sp
    8ae4:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8ae8:	003fed06 	br	8aa0 <_ZSt20__throw_length_errorPKc+0xa0>
    8aec:	d8800417 	ldw	r2,16(sp)
    8af0:	d8c00317 	ldw	r3,12(sp)
    8af4:	d9000517 	ldw	r4,20(sp)
    8af8:	d8801515 	stw	r2,84(sp)
    8afc:	00800044 	movi	r2,1
    8b00:	18800426 	beq	r3,r2,8b14 <_ZSt20__throw_length_errorPKc+0x114>
    8b04:	00800084 	movi	r2,2
    8b08:	18800826 	beq	r3,r2,8b2c <_ZSt20__throw_length_errorPKc+0x12c>
    8b0c:	008000c4 	movi	r2,3
    8b10:	18800226 	beq	r3,r2,8b1c <_ZSt20__throw_length_errorPKc+0x11c>
    8b14:	00bfffc4 	movi	r2,-1
    8b18:	20801126 	beq	r4,r2,8b60 <_ZSt20__throw_length_errorPKc+0x160>
    8b1c:	d9001517 	ldw	r4,84(sp)
    8b20:	00bfffc4 	movi	r2,-1
    8b24:	d8800315 	stw	r2,12(sp)
    8b28:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    8b2c:	d9001217 	ldw	r4,72(sp)
    8b30:	000f1840 	call	f184 <__cxa_free_exception>
    8b34:	d8801517 	ldw	r2,84(sp)
    8b38:	00c000b4 	movhi	r3,2
    8b3c:	18ca2404 	addi	r3,r3,10384
    8b40:	d8801115 	stw	r2,68(sp)
    8b44:	d8800117 	ldw	r2,4(sp)
    8b48:	10bffd04 	addi	r2,r2,-12
    8b4c:	d8801015 	stw	r2,64(sp)
    8b50:	10c0041e 	bne	r2,r3,8b64 <_ZSt20__throw_length_errorPKc+0x164>
    8b54:	d8801117 	ldw	r2,68(sp)
    8b58:	d8801515 	stw	r2,84(sp)
    8b5c:	003fef06 	br	8b1c <_ZSt20__throw_length_errorPKc+0x11c>
    8b60:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    8b64:	00800084 	movi	r2,2
    8b68:	d8800315 	stw	r2,12(sp)
    8b6c:	d8801017 	ldw	r2,64(sp)
    8b70:	017fffc4 	movi	r5,-1
    8b74:	11000204 	addi	r4,r2,8
    8b78:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8b7c:	00bff516 	blt	zero,r2,8b54 <_ZSt20__throw_length_errorPKc+0x154>
    8b80:	d9001017 	ldw	r4,64(sp)
    8b84:	d9400044 	addi	r5,sp,1
    8b88:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8b8c:	003ff106 	br	8b54 <_ZSt20__throw_length_errorPKc+0x154>

00008b90 <_ZNSt15underflow_errorD0Ev>:
    8b90:	defffe04 	addi	sp,sp,-8
    8b94:	008000b4 	movhi	r2,2
    8b98:	10b9d904 	addi	r2,r2,-6300
    8b9c:	dc400015 	stw	r17,0(sp)
    8ba0:	20800015 	stw	r2,0(r4)
    8ba4:	2023883a 	mov	r17,r4
    8ba8:	dfc00115 	stw	ra,4(sp)
    8bac:	00099a00 	call	99a0 <_ZNSt13runtime_errorD2Ev>
    8bb0:	8809883a 	mov	r4,r17
    8bb4:	dfc00117 	ldw	ra,4(sp)
    8bb8:	dc400017 	ldw	r17,0(sp)
    8bbc:	dec00204 	addi	sp,sp,8
    8bc0:	000e01c1 	jmpi	e01c <_ZdlPv>

00008bc4 <_ZNSt15underflow_errorD1Ev>:
    8bc4:	008000b4 	movhi	r2,2
    8bc8:	10b9d904 	addi	r2,r2,-6300
    8bcc:	20800015 	stw	r2,0(r4)
    8bd0:	00099a01 	jmpi	99a0 <_ZNSt13runtime_errorD2Ev>

00008bd4 <_ZNSt14overflow_errorD0Ev>:
    8bd4:	defffe04 	addi	sp,sp,-8
    8bd8:	008000b4 	movhi	r2,2
    8bdc:	10b9e604 	addi	r2,r2,-6248
    8be0:	dc400015 	stw	r17,0(sp)
    8be4:	20800015 	stw	r2,0(r4)
    8be8:	2023883a 	mov	r17,r4
    8bec:	dfc00115 	stw	ra,4(sp)
    8bf0:	00099a00 	call	99a0 <_ZNSt13runtime_errorD2Ev>
    8bf4:	8809883a 	mov	r4,r17
    8bf8:	dfc00117 	ldw	ra,4(sp)
    8bfc:	dc400017 	ldw	r17,0(sp)
    8c00:	dec00204 	addi	sp,sp,8
    8c04:	000e01c1 	jmpi	e01c <_ZdlPv>

00008c08 <_ZNSt14overflow_errorD1Ev>:
    8c08:	008000b4 	movhi	r2,2
    8c0c:	10b9e604 	addi	r2,r2,-6248
    8c10:	20800015 	stw	r2,0(r4)
    8c14:	00099a01 	jmpi	99a0 <_ZNSt13runtime_errorD2Ev>

00008c18 <_ZNSt11range_errorD0Ev>:
    8c18:	defffe04 	addi	sp,sp,-8
    8c1c:	008000b4 	movhi	r2,2
    8c20:	10b9f204 	addi	r2,r2,-6200
    8c24:	dc400015 	stw	r17,0(sp)
    8c28:	20800015 	stw	r2,0(r4)
    8c2c:	2023883a 	mov	r17,r4
    8c30:	dfc00115 	stw	ra,4(sp)
    8c34:	00099a00 	call	99a0 <_ZNSt13runtime_errorD2Ev>
    8c38:	8809883a 	mov	r4,r17
    8c3c:	dfc00117 	ldw	ra,4(sp)
    8c40:	dc400017 	ldw	r17,0(sp)
    8c44:	dec00204 	addi	sp,sp,8
    8c48:	000e01c1 	jmpi	e01c <_ZdlPv>

00008c4c <_ZNSt11range_errorD1Ev>:
    8c4c:	008000b4 	movhi	r2,2
    8c50:	10b9f204 	addi	r2,r2,-6200
    8c54:	20800015 	stw	r2,0(r4)
    8c58:	00099a01 	jmpi	99a0 <_ZNSt13runtime_errorD2Ev>

00008c5c <_ZNSt12out_of_rangeD0Ev>:
    8c5c:	defffe04 	addi	sp,sp,-8
    8c60:	008000b4 	movhi	r2,2
    8c64:	10b9ff04 	addi	r2,r2,-6148
    8c68:	dc400015 	stw	r17,0(sp)
    8c6c:	20800015 	stw	r2,0(r4)
    8c70:	2023883a 	mov	r17,r4
    8c74:	dfc00115 	stw	ra,4(sp)
    8c78:	0009bb00 	call	9bb0 <_ZNSt11logic_errorD2Ev>
    8c7c:	8809883a 	mov	r4,r17
    8c80:	dfc00117 	ldw	ra,4(sp)
    8c84:	dc400017 	ldw	r17,0(sp)
    8c88:	dec00204 	addi	sp,sp,8
    8c8c:	000e01c1 	jmpi	e01c <_ZdlPv>

00008c90 <_ZNSt12out_of_rangeD1Ev>:
    8c90:	008000b4 	movhi	r2,2
    8c94:	10b9ff04 	addi	r2,r2,-6148
    8c98:	20800015 	stw	r2,0(r4)
    8c9c:	0009bb01 	jmpi	9bb0 <_ZNSt11logic_errorD2Ev>

00008ca0 <_ZNSt12length_errorD0Ev>:
    8ca0:	defffe04 	addi	sp,sp,-8
    8ca4:	008000b4 	movhi	r2,2
    8ca8:	10ba0c04 	addi	r2,r2,-6096
    8cac:	dc400015 	stw	r17,0(sp)
    8cb0:	20800015 	stw	r2,0(r4)
    8cb4:	2023883a 	mov	r17,r4
    8cb8:	dfc00115 	stw	ra,4(sp)
    8cbc:	0009bb00 	call	9bb0 <_ZNSt11logic_errorD2Ev>
    8cc0:	8809883a 	mov	r4,r17
    8cc4:	dfc00117 	ldw	ra,4(sp)
    8cc8:	dc400017 	ldw	r17,0(sp)
    8ccc:	dec00204 	addi	sp,sp,8
    8cd0:	000e01c1 	jmpi	e01c <_ZdlPv>

00008cd4 <_ZNSt12length_errorD1Ev>:
    8cd4:	008000b4 	movhi	r2,2
    8cd8:	10ba0c04 	addi	r2,r2,-6096
    8cdc:	20800015 	stw	r2,0(r4)
    8ce0:	0009bb01 	jmpi	9bb0 <_ZNSt11logic_errorD2Ev>

00008ce4 <_ZNSt16invalid_argumentD0Ev>:
    8ce4:	defffe04 	addi	sp,sp,-8
    8ce8:	008000b4 	movhi	r2,2
    8cec:	10ba1a04 	addi	r2,r2,-6040
    8cf0:	dc400015 	stw	r17,0(sp)
    8cf4:	20800015 	stw	r2,0(r4)
    8cf8:	2023883a 	mov	r17,r4
    8cfc:	dfc00115 	stw	ra,4(sp)
    8d00:	0009bb00 	call	9bb0 <_ZNSt11logic_errorD2Ev>
    8d04:	8809883a 	mov	r4,r17
    8d08:	dfc00117 	ldw	ra,4(sp)
    8d0c:	dc400017 	ldw	r17,0(sp)
    8d10:	dec00204 	addi	sp,sp,8
    8d14:	000e01c1 	jmpi	e01c <_ZdlPv>

00008d18 <_ZNSt16invalid_argumentD1Ev>:
    8d18:	008000b4 	movhi	r2,2
    8d1c:	10ba1a04 	addi	r2,r2,-6040
    8d20:	20800015 	stw	r2,0(r4)
    8d24:	0009bb01 	jmpi	9bb0 <_ZNSt11logic_errorD2Ev>

00008d28 <_ZNSt12domain_errorD0Ev>:
    8d28:	defffe04 	addi	sp,sp,-8
    8d2c:	008000b4 	movhi	r2,2
    8d30:	10ba2704 	addi	r2,r2,-5988
    8d34:	dc400015 	stw	r17,0(sp)
    8d38:	20800015 	stw	r2,0(r4)
    8d3c:	2023883a 	mov	r17,r4
    8d40:	dfc00115 	stw	ra,4(sp)
    8d44:	0009bb00 	call	9bb0 <_ZNSt11logic_errorD2Ev>
    8d48:	8809883a 	mov	r4,r17
    8d4c:	dfc00117 	ldw	ra,4(sp)
    8d50:	dc400017 	ldw	r17,0(sp)
    8d54:	dec00204 	addi	sp,sp,8
    8d58:	000e01c1 	jmpi	e01c <_ZdlPv>

00008d5c <_ZNSt12domain_errorD1Ev>:
    8d5c:	008000b4 	movhi	r2,2
    8d60:	10ba2704 	addi	r2,r2,-5988
    8d64:	20800015 	stw	r2,0(r4)
    8d68:	0009bb01 	jmpi	9bb0 <_ZNSt11logic_errorD2Ev>

00008d6c <_ZNKSt8ios_base7failure4whatEv>:
    8d6c:	20800117 	ldw	r2,4(r4)
    8d70:	f800283a 	ret

00008d74 <_ZNSt8ios_base7failureD1Ev>:
    8d74:	deffeb04 	addi	sp,sp,-84
    8d78:	00800074 	movhi	r2,1
    8d7c:	10b9cd04 	addi	r2,r2,-6348
    8d80:	00c000b4 	movhi	r3,2
    8d84:	18f8c904 	addi	r3,r3,-7388
    8d88:	d8800715 	stw	r2,28(sp)
    8d8c:	d9001015 	stw	r4,64(sp)
    8d90:	00800074 	movhi	r2,1
    8d94:	10a38e04 	addi	r2,r2,-29128
    8d98:	d9000104 	addi	r4,sp,4
    8d9c:	d8c00815 	stw	r3,32(sp)
    8da0:	d8800a15 	stw	r2,40(sp)
    8da4:	dfc01415 	stw	ra,80(sp)
    8da8:	df001315 	stw	fp,76(sp)
    8dac:	ddc01215 	stw	r23,72(sp)
    8db0:	dec00915 	stw	sp,36(sp)
    8db4:	dec00b15 	stw	sp,44(sp)
    8db8:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    8dbc:	d8c01017 	ldw	r3,64(sp)
    8dc0:	18800117 	ldw	r2,4(r3)
    8dc4:	00c000b4 	movhi	r3,2
    8dc8:	18fa2c04 	addi	r3,r3,-5968
    8dcc:	10bffd04 	addi	r2,r2,-12
    8dd0:	d8800e15 	stw	r2,56(sp)
    8dd4:	d8801017 	ldw	r2,64(sp)
    8dd8:	10c00015 	stw	r3,0(r2)
    8ddc:	d8c00e17 	ldw	r3,56(sp)
    8de0:	008000b4 	movhi	r2,2
    8de4:	108a2404 	addi	r2,r2,10384
    8de8:	1880091e 	bne	r3,r2,8e10 <_ZNSt8ios_base7failureD1Ev+0x9c>
    8dec:	d9001017 	ldw	r4,64(sp)
    8df0:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    8df4:	d9000104 	addi	r4,sp,4
    8df8:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    8dfc:	dfc01417 	ldw	ra,80(sp)
    8e00:	df001317 	ldw	fp,76(sp)
    8e04:	ddc01217 	ldw	r23,72(sp)
    8e08:	dec01504 	addi	sp,sp,84
    8e0c:	f800283a 	ret
    8e10:	00800044 	movi	r2,1
    8e14:	d8800215 	stw	r2,8(sp)
    8e18:	19000204 	addi	r4,r3,8
    8e1c:	017fffc4 	movi	r5,-1
    8e20:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8e24:	00bff116 	blt	zero,r2,8dec <_ZNSt8ios_base7failureD1Ev+0x78>
    8e28:	d9000e17 	ldw	r4,56(sp)
    8e2c:	d80b883a 	mov	r5,sp
    8e30:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8e34:	003fed06 	br	8dec <_ZNSt8ios_base7failureD1Ev+0x78>
    8e38:	d8800417 	ldw	r2,16(sp)
    8e3c:	d8c00317 	ldw	r3,12(sp)
    8e40:	d9001017 	ldw	r4,64(sp)
    8e44:	d8800f15 	stw	r2,60(sp)
    8e48:	d8c01115 	stw	r3,68(sp)
    8e4c:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    8e50:	d8c00f17 	ldw	r3,60(sp)
    8e54:	00bfffc4 	movi	r2,-1
    8e58:	18800326 	beq	r3,r2,8e68 <_ZNSt8ios_base7failureD1Ev+0xf4>
    8e5c:	d9001117 	ldw	r4,68(sp)
    8e60:	d8800215 	stw	r2,8(sp)
    8e64:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    8e68:	d9001117 	ldw	r4,68(sp)
    8e6c:	00bfffc4 	movi	r2,-1
    8e70:	d8800215 	stw	r2,8(sp)
    8e74:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

00008e78 <_ZNSt8ios_base7failureC1ERKSs>:
    8e78:	deffec04 	addi	sp,sp,-80
    8e7c:	00800074 	movhi	r2,1
    8e80:	10b9cd04 	addi	r2,r2,-6348
    8e84:	00c000b4 	movhi	r3,2
    8e88:	18f8cd04 	addi	r3,r3,-7372
    8e8c:	d8800615 	stw	r2,24(sp)
    8e90:	d9000d15 	stw	r4,52(sp)
    8e94:	00800074 	movhi	r2,1
    8e98:	10a3c204 	addi	r2,r2,-28920
    8e9c:	d809883a 	mov	r4,sp
    8ea0:	d8c00715 	stw	r3,28(sp)
    8ea4:	d8800915 	stw	r2,36(sp)
    8ea8:	d9400e15 	stw	r5,56(sp)
    8eac:	dfc01315 	stw	ra,76(sp)
    8eb0:	df001215 	stw	fp,72(sp)
    8eb4:	ddc01115 	stw	r23,68(sp)
    8eb8:	dec00815 	stw	sp,32(sp)
    8ebc:	dec00a15 	stw	sp,40(sp)
    8ec0:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    8ec4:	d8c00d17 	ldw	r3,52(sp)
    8ec8:	008000b4 	movhi	r2,2
    8ecc:	10ba2c04 	addi	r2,r2,-5968
    8ed0:	d9400e17 	ldw	r5,56(sp)
    8ed4:	18800015 	stw	r2,0(r3)
    8ed8:	d8800d17 	ldw	r2,52(sp)
    8edc:	00c00044 	movi	r3,1
    8ee0:	d8c00115 	stw	r3,4(sp)
    8ee4:	11000104 	addi	r4,r2,4
    8ee8:	000bb6c0 	call	bb6c <_ZNSsC1ERKSs>
    8eec:	d809883a 	mov	r4,sp
    8ef0:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    8ef4:	dfc01317 	ldw	ra,76(sp)
    8ef8:	df001217 	ldw	fp,72(sp)
    8efc:	ddc01117 	ldw	r23,68(sp)
    8f00:	dec01404 	addi	sp,sp,80
    8f04:	f800283a 	ret
    8f08:	d8c00317 	ldw	r3,12(sp)
    8f0c:	d8800217 	ldw	r2,8(sp)
    8f10:	d9000d17 	ldw	r4,52(sp)
    8f14:	d8c00f15 	stw	r3,60(sp)
    8f18:	d8801015 	stw	r2,64(sp)
    8f1c:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    8f20:	d8c00f17 	ldw	r3,60(sp)
    8f24:	00bfffc4 	movi	r2,-1
    8f28:	18800326 	beq	r3,r2,8f38 <_ZNSt8ios_base7failureC1ERKSs+0xc0>
    8f2c:	d9001017 	ldw	r4,64(sp)
    8f30:	d8800115 	stw	r2,4(sp)
    8f34:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    8f38:	d9001017 	ldw	r4,64(sp)
    8f3c:	00bfffc4 	movi	r2,-1
    8f40:	d8800115 	stw	r2,4(sp)
    8f44:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

00008f48 <_ZNSt8ios_base7failureC2ERKSs>:
    8f48:	deffec04 	addi	sp,sp,-80
    8f4c:	00800074 	movhi	r2,1
    8f50:	10b9cd04 	addi	r2,r2,-6348
    8f54:	00c000b4 	movhi	r3,2
    8f58:	18f8d104 	addi	r3,r3,-7356
    8f5c:	d8800615 	stw	r2,24(sp)
    8f60:	d9000d15 	stw	r4,52(sp)
    8f64:	00800074 	movhi	r2,1
    8f68:	10a3f604 	addi	r2,r2,-28712
    8f6c:	d809883a 	mov	r4,sp
    8f70:	d8c00715 	stw	r3,28(sp)
    8f74:	d8800915 	stw	r2,36(sp)
    8f78:	d9400e15 	stw	r5,56(sp)
    8f7c:	dfc01315 	stw	ra,76(sp)
    8f80:	df001215 	stw	fp,72(sp)
    8f84:	ddc01115 	stw	r23,68(sp)
    8f88:	dec00815 	stw	sp,32(sp)
    8f8c:	dec00a15 	stw	sp,40(sp)
    8f90:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    8f94:	d8c00d17 	ldw	r3,52(sp)
    8f98:	008000b4 	movhi	r2,2
    8f9c:	10ba2c04 	addi	r2,r2,-5968
    8fa0:	d9400e17 	ldw	r5,56(sp)
    8fa4:	18800015 	stw	r2,0(r3)
    8fa8:	d8800d17 	ldw	r2,52(sp)
    8fac:	00c00044 	movi	r3,1
    8fb0:	d8c00115 	stw	r3,4(sp)
    8fb4:	11000104 	addi	r4,r2,4
    8fb8:	000bb6c0 	call	bb6c <_ZNSsC1ERKSs>
    8fbc:	d809883a 	mov	r4,sp
    8fc0:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    8fc4:	dfc01317 	ldw	ra,76(sp)
    8fc8:	df001217 	ldw	fp,72(sp)
    8fcc:	ddc01117 	ldw	r23,68(sp)
    8fd0:	dec01404 	addi	sp,sp,80
    8fd4:	f800283a 	ret
    8fd8:	d8c00317 	ldw	r3,12(sp)
    8fdc:	d8800217 	ldw	r2,8(sp)
    8fe0:	d9000d17 	ldw	r4,52(sp)
    8fe4:	d8c00f15 	stw	r3,60(sp)
    8fe8:	d8801015 	stw	r2,64(sp)
    8fec:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    8ff0:	d8c00f17 	ldw	r3,60(sp)
    8ff4:	00bfffc4 	movi	r2,-1
    8ff8:	18800326 	beq	r3,r2,9008 <_ZNSt8ios_base7failureC2ERKSs+0xc0>
    8ffc:	d9001017 	ldw	r4,64(sp)
    9000:	d8800115 	stw	r2,4(sp)
    9004:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    9008:	d9001017 	ldw	r4,64(sp)
    900c:	00bfffc4 	movi	r2,-1
    9010:	d8800115 	stw	r2,4(sp)
    9014:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

00009018 <_ZNSt8ios_base7failureD2Ev>:
    9018:	deffeb04 	addi	sp,sp,-84
    901c:	00800074 	movhi	r2,1
    9020:	10b9cd04 	addi	r2,r2,-6348
    9024:	00c000b4 	movhi	r3,2
    9028:	18f8d504 	addi	r3,r3,-7340
    902c:	d8800715 	stw	r2,28(sp)
    9030:	d9001015 	stw	r4,64(sp)
    9034:	00800074 	movhi	r2,1
    9038:	10a43704 	addi	r2,r2,-28452
    903c:	d9000104 	addi	r4,sp,4
    9040:	d8c00815 	stw	r3,32(sp)
    9044:	d8800a15 	stw	r2,40(sp)
    9048:	dfc01415 	stw	ra,80(sp)
    904c:	df001315 	stw	fp,76(sp)
    9050:	ddc01215 	stw	r23,72(sp)
    9054:	dec00915 	stw	sp,36(sp)
    9058:	dec00b15 	stw	sp,44(sp)
    905c:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9060:	d8c01017 	ldw	r3,64(sp)
    9064:	18800117 	ldw	r2,4(r3)
    9068:	00c000b4 	movhi	r3,2
    906c:	18fa2c04 	addi	r3,r3,-5968
    9070:	10bffd04 	addi	r2,r2,-12
    9074:	d8800e15 	stw	r2,56(sp)
    9078:	d8801017 	ldw	r2,64(sp)
    907c:	10c00015 	stw	r3,0(r2)
    9080:	d8c00e17 	ldw	r3,56(sp)
    9084:	008000b4 	movhi	r2,2
    9088:	108a2404 	addi	r2,r2,10384
    908c:	1880091e 	bne	r3,r2,90b4 <_ZNSt8ios_base7failureD2Ev+0x9c>
    9090:	d9001017 	ldw	r4,64(sp)
    9094:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9098:	d9000104 	addi	r4,sp,4
    909c:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    90a0:	dfc01417 	ldw	ra,80(sp)
    90a4:	df001317 	ldw	fp,76(sp)
    90a8:	ddc01217 	ldw	r23,72(sp)
    90ac:	dec01504 	addi	sp,sp,84
    90b0:	f800283a 	ret
    90b4:	00800044 	movi	r2,1
    90b8:	d8800215 	stw	r2,8(sp)
    90bc:	19000204 	addi	r4,r3,8
    90c0:	017fffc4 	movi	r5,-1
    90c4:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    90c8:	00bff116 	blt	zero,r2,9090 <_ZNSt8ios_base7failureD2Ev+0x78>
    90cc:	d9000e17 	ldw	r4,56(sp)
    90d0:	d80b883a 	mov	r5,sp
    90d4:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    90d8:	003fed06 	br	9090 <_ZNSt8ios_base7failureD2Ev+0x78>
    90dc:	d8800417 	ldw	r2,16(sp)
    90e0:	d8c00317 	ldw	r3,12(sp)
    90e4:	d9001017 	ldw	r4,64(sp)
    90e8:	d8800f15 	stw	r2,60(sp)
    90ec:	d8c01115 	stw	r3,68(sp)
    90f0:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    90f4:	d8c00f17 	ldw	r3,60(sp)
    90f8:	00bfffc4 	movi	r2,-1
    90fc:	18800326 	beq	r3,r2,910c <_ZNSt8ios_base7failureD2Ev+0xf4>
    9100:	d9001117 	ldw	r4,68(sp)
    9104:	d8800215 	stw	r2,8(sp)
    9108:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    910c:	d9001117 	ldw	r4,68(sp)
    9110:	00bfffc4 	movi	r2,-1
    9114:	d8800215 	stw	r2,8(sp)
    9118:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

0000911c <_ZNSt8ios_base7failureD0Ev>:
    911c:	deffeb04 	addi	sp,sp,-84
    9120:	00800074 	movhi	r2,1
    9124:	10b9cd04 	addi	r2,r2,-6348
    9128:	00c000b4 	movhi	r3,2
    912c:	18f8d904 	addi	r3,r3,-7324
    9130:	d8800715 	stw	r2,28(sp)
    9134:	d9001015 	stw	r4,64(sp)
    9138:	00800074 	movhi	r2,1
    913c:	10a47a04 	addi	r2,r2,-28184
    9140:	d9000104 	addi	r4,sp,4
    9144:	d8c00815 	stw	r3,32(sp)
    9148:	d8800a15 	stw	r2,40(sp)
    914c:	dfc01415 	stw	ra,80(sp)
    9150:	df001315 	stw	fp,76(sp)
    9154:	ddc01215 	stw	r23,72(sp)
    9158:	dec00915 	stw	sp,36(sp)
    915c:	dec00b15 	stw	sp,44(sp)
    9160:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9164:	d8c01017 	ldw	r3,64(sp)
    9168:	18800117 	ldw	r2,4(r3)
    916c:	00c000b4 	movhi	r3,2
    9170:	18fa2c04 	addi	r3,r3,-5968
    9174:	10bffd04 	addi	r2,r2,-12
    9178:	d8800e15 	stw	r2,56(sp)
    917c:	d8801017 	ldw	r2,64(sp)
    9180:	10c00015 	stw	r3,0(r2)
    9184:	d8c00e17 	ldw	r3,56(sp)
    9188:	008000b4 	movhi	r2,2
    918c:	108a2404 	addi	r2,r2,10384
    9190:	18800b1e 	bne	r3,r2,91c0 <_ZNSt8ios_base7failureD0Ev+0xa4>
    9194:	d9001017 	ldw	r4,64(sp)
    9198:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    919c:	d9001017 	ldw	r4,64(sp)
    91a0:	000e01c0 	call	e01c <_ZdlPv>
    91a4:	d9000104 	addi	r4,sp,4
    91a8:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    91ac:	dfc01417 	ldw	ra,80(sp)
    91b0:	df001317 	ldw	fp,76(sp)
    91b4:	ddc01217 	ldw	r23,72(sp)
    91b8:	dec01504 	addi	sp,sp,84
    91bc:	f800283a 	ret
    91c0:	00800044 	movi	r2,1
    91c4:	d8800215 	stw	r2,8(sp)
    91c8:	19000204 	addi	r4,r3,8
    91cc:	017fffc4 	movi	r5,-1
    91d0:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    91d4:	00bfef16 	blt	zero,r2,9194 <_ZNSt8ios_base7failureD0Ev+0x78>
    91d8:	d9000e17 	ldw	r4,56(sp)
    91dc:	d80b883a 	mov	r5,sp
    91e0:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    91e4:	003feb06 	br	9194 <_ZNSt8ios_base7failureD0Ev+0x78>
    91e8:	d8800417 	ldw	r2,16(sp)
    91ec:	d8c00317 	ldw	r3,12(sp)
    91f0:	d9001017 	ldw	r4,64(sp)
    91f4:	d8800f15 	stw	r2,60(sp)
    91f8:	d8c01115 	stw	r3,68(sp)
    91fc:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9200:	d8c00f17 	ldw	r3,60(sp)
    9204:	00bfffc4 	movi	r2,-1
    9208:	18800326 	beq	r3,r2,9218 <_ZNSt8ios_base7failureD0Ev+0xfc>
    920c:	d9001117 	ldw	r4,68(sp)
    9210:	d8800215 	stw	r2,8(sp)
    9214:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    9218:	d9001117 	ldw	r4,68(sp)
    921c:	00bfffc4 	movi	r2,-1
    9220:	d8800215 	stw	r2,8(sp)
    9224:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

00009228 <_ZNKSt13runtime_error4whatEv>:
    9228:	20800117 	ldw	r2,4(r4)
    922c:	f800283a 	ret

00009230 <_ZNSt11logic_errorD1Ev>:
    9230:	deffeb04 	addi	sp,sp,-84
    9234:	00800074 	movhi	r2,1
    9238:	10b9cd04 	addi	r2,r2,-6348
    923c:	00c000b4 	movhi	r3,2
    9240:	18f8dd04 	addi	r3,r3,-7308
    9244:	d8800715 	stw	r2,28(sp)
    9248:	d9001015 	stw	r4,64(sp)
    924c:	00800074 	movhi	r2,1
    9250:	10a4bd04 	addi	r2,r2,-27916
    9254:	d9000104 	addi	r4,sp,4
    9258:	d8c00815 	stw	r3,32(sp)
    925c:	d8800a15 	stw	r2,40(sp)
    9260:	dfc01415 	stw	ra,80(sp)
    9264:	df001315 	stw	fp,76(sp)
    9268:	ddc01215 	stw	r23,72(sp)
    926c:	dec00915 	stw	sp,36(sp)
    9270:	dec00b15 	stw	sp,44(sp)
    9274:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9278:	d8c01017 	ldw	r3,64(sp)
    927c:	18800117 	ldw	r2,4(r3)
    9280:	00c000b4 	movhi	r3,2
    9284:	18fa3f04 	addi	r3,r3,-5892
    9288:	10bffd04 	addi	r2,r2,-12
    928c:	d8800e15 	stw	r2,56(sp)
    9290:	d8801017 	ldw	r2,64(sp)
    9294:	10c00015 	stw	r3,0(r2)
    9298:	d8c00e17 	ldw	r3,56(sp)
    929c:	008000b4 	movhi	r2,2
    92a0:	108a2404 	addi	r2,r2,10384
    92a4:	1880091e 	bne	r3,r2,92cc <_ZNSt11logic_errorD1Ev+0x9c>
    92a8:	d9001017 	ldw	r4,64(sp)
    92ac:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    92b0:	d9000104 	addi	r4,sp,4
    92b4:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    92b8:	dfc01417 	ldw	ra,80(sp)
    92bc:	df001317 	ldw	fp,76(sp)
    92c0:	ddc01217 	ldw	r23,72(sp)
    92c4:	dec01504 	addi	sp,sp,84
    92c8:	f800283a 	ret
    92cc:	00800044 	movi	r2,1
    92d0:	d8800215 	stw	r2,8(sp)
    92d4:	19000204 	addi	r4,r3,8
    92d8:	017fffc4 	movi	r5,-1
    92dc:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    92e0:	00bff116 	blt	zero,r2,92a8 <_ZNSt11logic_errorD1Ev+0x78>
    92e4:	d9000e17 	ldw	r4,56(sp)
    92e8:	d80b883a 	mov	r5,sp
    92ec:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    92f0:	003fed06 	br	92a8 <_ZNSt11logic_errorD1Ev+0x78>
    92f4:	d8800417 	ldw	r2,16(sp)
    92f8:	d8c00317 	ldw	r3,12(sp)
    92fc:	d9001017 	ldw	r4,64(sp)
    9300:	d8800f15 	stw	r2,60(sp)
    9304:	d8c01115 	stw	r3,68(sp)
    9308:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    930c:	d8c00f17 	ldw	r3,60(sp)
    9310:	00bfffc4 	movi	r2,-1
    9314:	18800326 	beq	r3,r2,9324 <_ZNSt11logic_errorD1Ev+0xf4>
    9318:	d9001117 	ldw	r4,68(sp)
    931c:	d8800215 	stw	r2,8(sp)
    9320:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    9324:	d9001117 	ldw	r4,68(sp)
    9328:	00bfffc4 	movi	r2,-1
    932c:	d8800215 	stw	r2,8(sp)
    9330:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

00009334 <_ZNSt13runtime_errorC2ERKSs>:
    9334:	deffed04 	addi	sp,sp,-76
    9338:	00800074 	movhi	r2,1
    933c:	10b9cd04 	addi	r2,r2,-6348
    9340:	00c000b4 	movhi	r3,2
    9344:	18f8e044 	addi	r3,r3,-7295
    9348:	d8800615 	stw	r2,24(sp)
    934c:	d9000d15 	stw	r4,52(sp)
    9350:	00800074 	movhi	r2,1
    9354:	10a4f104 	addi	r2,r2,-27708
    9358:	d809883a 	mov	r4,sp
    935c:	d8c00715 	stw	r3,28(sp)
    9360:	d8800915 	stw	r2,36(sp)
    9364:	d9400e15 	stw	r5,56(sp)
    9368:	dfc01215 	stw	ra,72(sp)
    936c:	df001115 	stw	fp,68(sp)
    9370:	ddc01015 	stw	r23,64(sp)
    9374:	dec00815 	stw	sp,32(sp)
    9378:	dec00a15 	stw	sp,40(sp)
    937c:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9380:	d8c00d17 	ldw	r3,52(sp)
    9384:	008000b4 	movhi	r2,2
    9388:	10ba3a04 	addi	r2,r2,-5912
    938c:	d9400e17 	ldw	r5,56(sp)
    9390:	18800015 	stw	r2,0(r3)
    9394:	d8800d17 	ldw	r2,52(sp)
    9398:	00c00044 	movi	r3,1
    939c:	d8c00115 	stw	r3,4(sp)
    93a0:	11000104 	addi	r4,r2,4
    93a4:	000bb6c0 	call	bb6c <_ZNSsC1ERKSs>
    93a8:	d809883a 	mov	r4,sp
    93ac:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    93b0:	dfc01217 	ldw	ra,72(sp)
    93b4:	df001117 	ldw	fp,68(sp)
    93b8:	ddc01017 	ldw	r23,64(sp)
    93bc:	dec01304 	addi	sp,sp,76
    93c0:	f800283a 	ret
    93c4:	d8c00217 	ldw	r3,8(sp)
    93c8:	d9000d17 	ldw	r4,52(sp)
    93cc:	d8c00f15 	stw	r3,60(sp)
    93d0:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    93d4:	d9000f17 	ldw	r4,60(sp)
    93d8:	00bfffc4 	movi	r2,-1
    93dc:	d8800115 	stw	r2,4(sp)
    93e0:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

000093e4 <_ZNSt15underflow_errorC1ERKSs>:
    93e4:	defffe04 	addi	sp,sp,-8
    93e8:	dc000015 	stw	r16,0(sp)
    93ec:	dfc00115 	stw	ra,4(sp)
    93f0:	2021883a 	mov	r16,r4
    93f4:	00093340 	call	9334 <_ZNSt13runtime_errorC2ERKSs>
    93f8:	008000b4 	movhi	r2,2
    93fc:	10b9d904 	addi	r2,r2,-6300
    9400:	80800015 	stw	r2,0(r16)
    9404:	dfc00117 	ldw	ra,4(sp)
    9408:	dc000017 	ldw	r16,0(sp)
    940c:	dec00204 	addi	sp,sp,8
    9410:	f800283a 	ret

00009414 <_ZNSt15underflow_errorC2ERKSs>:
    9414:	defffe04 	addi	sp,sp,-8
    9418:	dc000015 	stw	r16,0(sp)
    941c:	dfc00115 	stw	ra,4(sp)
    9420:	2021883a 	mov	r16,r4
    9424:	00093340 	call	9334 <_ZNSt13runtime_errorC2ERKSs>
    9428:	008000b4 	movhi	r2,2
    942c:	10b9d904 	addi	r2,r2,-6300
    9430:	80800015 	stw	r2,0(r16)
    9434:	dfc00117 	ldw	ra,4(sp)
    9438:	dc000017 	ldw	r16,0(sp)
    943c:	dec00204 	addi	sp,sp,8
    9440:	f800283a 	ret

00009444 <_ZNSt14overflow_errorC1ERKSs>:
    9444:	defffe04 	addi	sp,sp,-8
    9448:	dc000015 	stw	r16,0(sp)
    944c:	dfc00115 	stw	ra,4(sp)
    9450:	2021883a 	mov	r16,r4
    9454:	00093340 	call	9334 <_ZNSt13runtime_errorC2ERKSs>
    9458:	008000b4 	movhi	r2,2
    945c:	10b9e604 	addi	r2,r2,-6248
    9460:	80800015 	stw	r2,0(r16)
    9464:	dfc00117 	ldw	ra,4(sp)
    9468:	dc000017 	ldw	r16,0(sp)
    946c:	dec00204 	addi	sp,sp,8
    9470:	f800283a 	ret

00009474 <_ZNSt14overflow_errorC2ERKSs>:
    9474:	defffe04 	addi	sp,sp,-8
    9478:	dc000015 	stw	r16,0(sp)
    947c:	dfc00115 	stw	ra,4(sp)
    9480:	2021883a 	mov	r16,r4
    9484:	00093340 	call	9334 <_ZNSt13runtime_errorC2ERKSs>
    9488:	008000b4 	movhi	r2,2
    948c:	10b9e604 	addi	r2,r2,-6248
    9490:	80800015 	stw	r2,0(r16)
    9494:	dfc00117 	ldw	ra,4(sp)
    9498:	dc000017 	ldw	r16,0(sp)
    949c:	dec00204 	addi	sp,sp,8
    94a0:	f800283a 	ret

000094a4 <_ZNSt11range_errorC1ERKSs>:
    94a4:	defffe04 	addi	sp,sp,-8
    94a8:	dc000015 	stw	r16,0(sp)
    94ac:	dfc00115 	stw	ra,4(sp)
    94b0:	2021883a 	mov	r16,r4
    94b4:	00093340 	call	9334 <_ZNSt13runtime_errorC2ERKSs>
    94b8:	008000b4 	movhi	r2,2
    94bc:	10b9f204 	addi	r2,r2,-6200
    94c0:	80800015 	stw	r2,0(r16)
    94c4:	dfc00117 	ldw	ra,4(sp)
    94c8:	dc000017 	ldw	r16,0(sp)
    94cc:	dec00204 	addi	sp,sp,8
    94d0:	f800283a 	ret

000094d4 <_ZNSt11range_errorC2ERKSs>:
    94d4:	defffe04 	addi	sp,sp,-8
    94d8:	dc000015 	stw	r16,0(sp)
    94dc:	dfc00115 	stw	ra,4(sp)
    94e0:	2021883a 	mov	r16,r4
    94e4:	00093340 	call	9334 <_ZNSt13runtime_errorC2ERKSs>
    94e8:	008000b4 	movhi	r2,2
    94ec:	10b9f204 	addi	r2,r2,-6200
    94f0:	80800015 	stw	r2,0(r16)
    94f4:	dfc00117 	ldw	ra,4(sp)
    94f8:	dc000017 	ldw	r16,0(sp)
    94fc:	dec00204 	addi	sp,sp,8
    9500:	f800283a 	ret

00009504 <_ZNSt11logic_errorC1ERKSs>:
    9504:	deffed04 	addi	sp,sp,-76
    9508:	00800074 	movhi	r2,1
    950c:	10b9cd04 	addi	r2,r2,-6348
    9510:	00c000b4 	movhi	r3,2
    9514:	18f8e1c4 	addi	r3,r3,-7289
    9518:	d8800615 	stw	r2,24(sp)
    951c:	d9000d15 	stw	r4,52(sp)
    9520:	00800074 	movhi	r2,1
    9524:	10a56504 	addi	r2,r2,-27244
    9528:	d809883a 	mov	r4,sp
    952c:	d8c00715 	stw	r3,28(sp)
    9530:	d8800915 	stw	r2,36(sp)
    9534:	d9400e15 	stw	r5,56(sp)
    9538:	dfc01215 	stw	ra,72(sp)
    953c:	df001115 	stw	fp,68(sp)
    9540:	ddc01015 	stw	r23,64(sp)
    9544:	dec00815 	stw	sp,32(sp)
    9548:	dec00a15 	stw	sp,40(sp)
    954c:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9550:	d8c00d17 	ldw	r3,52(sp)
    9554:	008000b4 	movhi	r2,2
    9558:	10ba3f04 	addi	r2,r2,-5892
    955c:	d9400e17 	ldw	r5,56(sp)
    9560:	18800015 	stw	r2,0(r3)
    9564:	d8800d17 	ldw	r2,52(sp)
    9568:	00c00044 	movi	r3,1
    956c:	d8c00115 	stw	r3,4(sp)
    9570:	11000104 	addi	r4,r2,4
    9574:	000bb6c0 	call	bb6c <_ZNSsC1ERKSs>
    9578:	d809883a 	mov	r4,sp
    957c:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    9580:	dfc01217 	ldw	ra,72(sp)
    9584:	df001117 	ldw	fp,68(sp)
    9588:	ddc01017 	ldw	r23,64(sp)
    958c:	dec01304 	addi	sp,sp,76
    9590:	f800283a 	ret
    9594:	d8c00217 	ldw	r3,8(sp)
    9598:	d9000d17 	ldw	r4,52(sp)
    959c:	d8c00f15 	stw	r3,60(sp)
    95a0:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    95a4:	d9000f17 	ldw	r4,60(sp)
    95a8:	00bfffc4 	movi	r2,-1
    95ac:	d8800115 	stw	r2,4(sp)
    95b0:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

000095b4 <_ZNSt11logic_errorC2ERKSs>:
    95b4:	deffed04 	addi	sp,sp,-76
    95b8:	00800074 	movhi	r2,1
    95bc:	10b9cd04 	addi	r2,r2,-6348
    95c0:	00c000b4 	movhi	r3,2
    95c4:	18f8e344 	addi	r3,r3,-7283
    95c8:	d8800615 	stw	r2,24(sp)
    95cc:	d9000d15 	stw	r4,52(sp)
    95d0:	00800074 	movhi	r2,1
    95d4:	10a59104 	addi	r2,r2,-27068
    95d8:	d809883a 	mov	r4,sp
    95dc:	d8c00715 	stw	r3,28(sp)
    95e0:	d8800915 	stw	r2,36(sp)
    95e4:	d9400e15 	stw	r5,56(sp)
    95e8:	dfc01215 	stw	ra,72(sp)
    95ec:	df001115 	stw	fp,68(sp)
    95f0:	ddc01015 	stw	r23,64(sp)
    95f4:	dec00815 	stw	sp,32(sp)
    95f8:	dec00a15 	stw	sp,40(sp)
    95fc:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9600:	d8c00d17 	ldw	r3,52(sp)
    9604:	008000b4 	movhi	r2,2
    9608:	10ba3f04 	addi	r2,r2,-5892
    960c:	d9400e17 	ldw	r5,56(sp)
    9610:	18800015 	stw	r2,0(r3)
    9614:	d8800d17 	ldw	r2,52(sp)
    9618:	00c00044 	movi	r3,1
    961c:	d8c00115 	stw	r3,4(sp)
    9620:	11000104 	addi	r4,r2,4
    9624:	000bb6c0 	call	bb6c <_ZNSsC1ERKSs>
    9628:	d809883a 	mov	r4,sp
    962c:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    9630:	dfc01217 	ldw	ra,72(sp)
    9634:	df001117 	ldw	fp,68(sp)
    9638:	ddc01017 	ldw	r23,64(sp)
    963c:	dec01304 	addi	sp,sp,76
    9640:	f800283a 	ret
    9644:	d8c00217 	ldw	r3,8(sp)
    9648:	d9000d17 	ldw	r4,52(sp)
    964c:	d8c00f15 	stw	r3,60(sp)
    9650:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9654:	d9000f17 	ldw	r4,60(sp)
    9658:	00bfffc4 	movi	r2,-1
    965c:	d8800115 	stw	r2,4(sp)
    9660:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

00009664 <_ZNSt12out_of_rangeC1ERKSs>:
    9664:	defffe04 	addi	sp,sp,-8
    9668:	dc000015 	stw	r16,0(sp)
    966c:	dfc00115 	stw	ra,4(sp)
    9670:	2021883a 	mov	r16,r4
    9674:	00095b40 	call	95b4 <_ZNSt11logic_errorC2ERKSs>
    9678:	008000b4 	movhi	r2,2
    967c:	10b9ff04 	addi	r2,r2,-6148
    9680:	80800015 	stw	r2,0(r16)
    9684:	dfc00117 	ldw	ra,4(sp)
    9688:	dc000017 	ldw	r16,0(sp)
    968c:	dec00204 	addi	sp,sp,8
    9690:	f800283a 	ret

00009694 <_ZNSt12out_of_rangeC2ERKSs>:
    9694:	defffe04 	addi	sp,sp,-8
    9698:	dc000015 	stw	r16,0(sp)
    969c:	dfc00115 	stw	ra,4(sp)
    96a0:	2021883a 	mov	r16,r4
    96a4:	00095b40 	call	95b4 <_ZNSt11logic_errorC2ERKSs>
    96a8:	008000b4 	movhi	r2,2
    96ac:	10b9ff04 	addi	r2,r2,-6148
    96b0:	80800015 	stw	r2,0(r16)
    96b4:	dfc00117 	ldw	ra,4(sp)
    96b8:	dc000017 	ldw	r16,0(sp)
    96bc:	dec00204 	addi	sp,sp,8
    96c0:	f800283a 	ret

000096c4 <_ZNSt12length_errorC1ERKSs>:
    96c4:	defffe04 	addi	sp,sp,-8
    96c8:	dc000015 	stw	r16,0(sp)
    96cc:	dfc00115 	stw	ra,4(sp)
    96d0:	2021883a 	mov	r16,r4
    96d4:	00095b40 	call	95b4 <_ZNSt11logic_errorC2ERKSs>
    96d8:	008000b4 	movhi	r2,2
    96dc:	10ba0c04 	addi	r2,r2,-6096
    96e0:	80800015 	stw	r2,0(r16)
    96e4:	dfc00117 	ldw	ra,4(sp)
    96e8:	dc000017 	ldw	r16,0(sp)
    96ec:	dec00204 	addi	sp,sp,8
    96f0:	f800283a 	ret

000096f4 <_ZNSt12length_errorC2ERKSs>:
    96f4:	defffe04 	addi	sp,sp,-8
    96f8:	dc000015 	stw	r16,0(sp)
    96fc:	dfc00115 	stw	ra,4(sp)
    9700:	2021883a 	mov	r16,r4
    9704:	00095b40 	call	95b4 <_ZNSt11logic_errorC2ERKSs>
    9708:	008000b4 	movhi	r2,2
    970c:	10ba0c04 	addi	r2,r2,-6096
    9710:	80800015 	stw	r2,0(r16)
    9714:	dfc00117 	ldw	ra,4(sp)
    9718:	dc000017 	ldw	r16,0(sp)
    971c:	dec00204 	addi	sp,sp,8
    9720:	f800283a 	ret

00009724 <_ZNSt16invalid_argumentC1ERKSs>:
    9724:	defffe04 	addi	sp,sp,-8
    9728:	dc000015 	stw	r16,0(sp)
    972c:	dfc00115 	stw	ra,4(sp)
    9730:	2021883a 	mov	r16,r4
    9734:	00095b40 	call	95b4 <_ZNSt11logic_errorC2ERKSs>
    9738:	008000b4 	movhi	r2,2
    973c:	10ba1a04 	addi	r2,r2,-6040
    9740:	80800015 	stw	r2,0(r16)
    9744:	dfc00117 	ldw	ra,4(sp)
    9748:	dc000017 	ldw	r16,0(sp)
    974c:	dec00204 	addi	sp,sp,8
    9750:	f800283a 	ret

00009754 <_ZNSt16invalid_argumentC2ERKSs>:
    9754:	defffe04 	addi	sp,sp,-8
    9758:	dc000015 	stw	r16,0(sp)
    975c:	dfc00115 	stw	ra,4(sp)
    9760:	2021883a 	mov	r16,r4
    9764:	00095b40 	call	95b4 <_ZNSt11logic_errorC2ERKSs>
    9768:	008000b4 	movhi	r2,2
    976c:	10ba1a04 	addi	r2,r2,-6040
    9770:	80800015 	stw	r2,0(r16)
    9774:	dfc00117 	ldw	ra,4(sp)
    9778:	dc000017 	ldw	r16,0(sp)
    977c:	dec00204 	addi	sp,sp,8
    9780:	f800283a 	ret

00009784 <_ZNSt12domain_errorC1ERKSs>:
    9784:	defffe04 	addi	sp,sp,-8
    9788:	dc000015 	stw	r16,0(sp)
    978c:	dfc00115 	stw	ra,4(sp)
    9790:	2021883a 	mov	r16,r4
    9794:	00095b40 	call	95b4 <_ZNSt11logic_errorC2ERKSs>
    9798:	008000b4 	movhi	r2,2
    979c:	10ba2704 	addi	r2,r2,-5988
    97a0:	80800015 	stw	r2,0(r16)
    97a4:	dfc00117 	ldw	ra,4(sp)
    97a8:	dc000017 	ldw	r16,0(sp)
    97ac:	dec00204 	addi	sp,sp,8
    97b0:	f800283a 	ret

000097b4 <_ZNSt12domain_errorC2ERKSs>:
    97b4:	defffe04 	addi	sp,sp,-8
    97b8:	dc000015 	stw	r16,0(sp)
    97bc:	dfc00115 	stw	ra,4(sp)
    97c0:	2021883a 	mov	r16,r4
    97c4:	00095b40 	call	95b4 <_ZNSt11logic_errorC2ERKSs>
    97c8:	008000b4 	movhi	r2,2
    97cc:	10ba2704 	addi	r2,r2,-5988
    97d0:	80800015 	stw	r2,0(r16)
    97d4:	dfc00117 	ldw	ra,4(sp)
    97d8:	dc000017 	ldw	r16,0(sp)
    97dc:	dec00204 	addi	sp,sp,8
    97e0:	f800283a 	ret

000097e4 <_ZNKSt11logic_error4whatEv>:
    97e4:	20800117 	ldw	r2,4(r4)
    97e8:	f800283a 	ret

000097ec <_ZNSt13runtime_errorC1ERKSs>:
    97ec:	deffed04 	addi	sp,sp,-76
    97f0:	00800074 	movhi	r2,1
    97f4:	10b9cd04 	addi	r2,r2,-6348
    97f8:	00c000b4 	movhi	r3,2
    97fc:	18f8e4c4 	addi	r3,r3,-7277
    9800:	d8800615 	stw	r2,24(sp)
    9804:	d9000d15 	stw	r4,52(sp)
    9808:	00800074 	movhi	r2,1
    980c:	10a61f04 	addi	r2,r2,-26500
    9810:	d809883a 	mov	r4,sp
    9814:	d8c00715 	stw	r3,28(sp)
    9818:	d8800915 	stw	r2,36(sp)
    981c:	d9400e15 	stw	r5,56(sp)
    9820:	dfc01215 	stw	ra,72(sp)
    9824:	df001115 	stw	fp,68(sp)
    9828:	ddc01015 	stw	r23,64(sp)
    982c:	dec00815 	stw	sp,32(sp)
    9830:	dec00a15 	stw	sp,40(sp)
    9834:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9838:	d8c00d17 	ldw	r3,52(sp)
    983c:	008000b4 	movhi	r2,2
    9840:	10ba3a04 	addi	r2,r2,-5912
    9844:	d9400e17 	ldw	r5,56(sp)
    9848:	18800015 	stw	r2,0(r3)
    984c:	d8800d17 	ldw	r2,52(sp)
    9850:	00c00044 	movi	r3,1
    9854:	d8c00115 	stw	r3,4(sp)
    9858:	11000104 	addi	r4,r2,4
    985c:	000bb6c0 	call	bb6c <_ZNSsC1ERKSs>
    9860:	d809883a 	mov	r4,sp
    9864:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    9868:	dfc01217 	ldw	ra,72(sp)
    986c:	df001117 	ldw	fp,68(sp)
    9870:	ddc01017 	ldw	r23,64(sp)
    9874:	dec01304 	addi	sp,sp,76
    9878:	f800283a 	ret
    987c:	d8c00217 	ldw	r3,8(sp)
    9880:	d9000d17 	ldw	r4,52(sp)
    9884:	d8c00f15 	stw	r3,60(sp)
    9888:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    988c:	d9000f17 	ldw	r4,60(sp)
    9890:	00bfffc4 	movi	r2,-1
    9894:	d8800115 	stw	r2,4(sp)
    9898:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

0000989c <_ZNSt13runtime_errorD1Ev>:
    989c:	deffeb04 	addi	sp,sp,-84
    98a0:	00800074 	movhi	r2,1
    98a4:	10b9cd04 	addi	r2,r2,-6348
    98a8:	00c000b4 	movhi	r3,2
    98ac:	18f8e704 	addi	r3,r3,-7268
    98b0:	d8800715 	stw	r2,28(sp)
    98b4:	d9001015 	stw	r4,64(sp)
    98b8:	00800074 	movhi	r2,1
    98bc:	10a65804 	addi	r2,r2,-26272
    98c0:	d9000104 	addi	r4,sp,4
    98c4:	d8c00815 	stw	r3,32(sp)
    98c8:	d8800a15 	stw	r2,40(sp)
    98cc:	dfc01415 	stw	ra,80(sp)
    98d0:	df001315 	stw	fp,76(sp)
    98d4:	ddc01215 	stw	r23,72(sp)
    98d8:	dec00915 	stw	sp,36(sp)
    98dc:	dec00b15 	stw	sp,44(sp)
    98e0:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    98e4:	d8c01017 	ldw	r3,64(sp)
    98e8:	18800117 	ldw	r2,4(r3)
    98ec:	00c000b4 	movhi	r3,2
    98f0:	18fa3a04 	addi	r3,r3,-5912
    98f4:	10bffd04 	addi	r2,r2,-12
    98f8:	d8800e15 	stw	r2,56(sp)
    98fc:	d8801017 	ldw	r2,64(sp)
    9900:	10c00015 	stw	r3,0(r2)
    9904:	d8c00e17 	ldw	r3,56(sp)
    9908:	008000b4 	movhi	r2,2
    990c:	108a2404 	addi	r2,r2,10384
    9910:	1880091e 	bne	r3,r2,9938 <_ZNSt13runtime_errorD1Ev+0x9c>
    9914:	d9001017 	ldw	r4,64(sp)
    9918:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    991c:	d9000104 	addi	r4,sp,4
    9920:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    9924:	dfc01417 	ldw	ra,80(sp)
    9928:	df001317 	ldw	fp,76(sp)
    992c:	ddc01217 	ldw	r23,72(sp)
    9930:	dec01504 	addi	sp,sp,84
    9934:	f800283a 	ret
    9938:	00800044 	movi	r2,1
    993c:	d8800215 	stw	r2,8(sp)
    9940:	19000204 	addi	r4,r3,8
    9944:	017fffc4 	movi	r5,-1
    9948:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    994c:	00bff116 	blt	zero,r2,9914 <_ZNSt13runtime_errorD1Ev+0x78>
    9950:	d9000e17 	ldw	r4,56(sp)
    9954:	d80b883a 	mov	r5,sp
    9958:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    995c:	003fed06 	br	9914 <_ZNSt13runtime_errorD1Ev+0x78>
    9960:	d8800417 	ldw	r2,16(sp)
    9964:	d8c00317 	ldw	r3,12(sp)
    9968:	d9001017 	ldw	r4,64(sp)
    996c:	d8800f15 	stw	r2,60(sp)
    9970:	d8c01115 	stw	r3,68(sp)
    9974:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9978:	d8c00f17 	ldw	r3,60(sp)
    997c:	00bfffc4 	movi	r2,-1
    9980:	18800326 	beq	r3,r2,9990 <_ZNSt13runtime_errorD1Ev+0xf4>
    9984:	d9001117 	ldw	r4,68(sp)
    9988:	d8800215 	stw	r2,8(sp)
    998c:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    9990:	d9001117 	ldw	r4,68(sp)
    9994:	00bfffc4 	movi	r2,-1
    9998:	d8800215 	stw	r2,8(sp)
    999c:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

000099a0 <_ZNSt13runtime_errorD2Ev>:
    99a0:	deffeb04 	addi	sp,sp,-84
    99a4:	00800074 	movhi	r2,1
    99a8:	10b9cd04 	addi	r2,r2,-6348
    99ac:	00c000b4 	movhi	r3,2
    99b0:	18f8eb04 	addi	r3,r3,-7252
    99b4:	d8800715 	stw	r2,28(sp)
    99b8:	d9001015 	stw	r4,64(sp)
    99bc:	00800074 	movhi	r2,1
    99c0:	10a69904 	addi	r2,r2,-26012
    99c4:	d9000104 	addi	r4,sp,4
    99c8:	d8c00815 	stw	r3,32(sp)
    99cc:	d8800a15 	stw	r2,40(sp)
    99d0:	dfc01415 	stw	ra,80(sp)
    99d4:	df001315 	stw	fp,76(sp)
    99d8:	ddc01215 	stw	r23,72(sp)
    99dc:	dec00915 	stw	sp,36(sp)
    99e0:	dec00b15 	stw	sp,44(sp)
    99e4:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    99e8:	d8c01017 	ldw	r3,64(sp)
    99ec:	18800117 	ldw	r2,4(r3)
    99f0:	00c000b4 	movhi	r3,2
    99f4:	18fa3a04 	addi	r3,r3,-5912
    99f8:	10bffd04 	addi	r2,r2,-12
    99fc:	d8800e15 	stw	r2,56(sp)
    9a00:	d8801017 	ldw	r2,64(sp)
    9a04:	10c00015 	stw	r3,0(r2)
    9a08:	d8c00e17 	ldw	r3,56(sp)
    9a0c:	008000b4 	movhi	r2,2
    9a10:	108a2404 	addi	r2,r2,10384
    9a14:	1880091e 	bne	r3,r2,9a3c <_ZNSt13runtime_errorD2Ev+0x9c>
    9a18:	d9001017 	ldw	r4,64(sp)
    9a1c:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9a20:	d9000104 	addi	r4,sp,4
    9a24:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    9a28:	dfc01417 	ldw	ra,80(sp)
    9a2c:	df001317 	ldw	fp,76(sp)
    9a30:	ddc01217 	ldw	r23,72(sp)
    9a34:	dec01504 	addi	sp,sp,84
    9a38:	f800283a 	ret
    9a3c:	00800044 	movi	r2,1
    9a40:	d8800215 	stw	r2,8(sp)
    9a44:	19000204 	addi	r4,r3,8
    9a48:	017fffc4 	movi	r5,-1
    9a4c:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9a50:	00bff116 	blt	zero,r2,9a18 <_ZNSt13runtime_errorD2Ev+0x78>
    9a54:	d9000e17 	ldw	r4,56(sp)
    9a58:	d80b883a 	mov	r5,sp
    9a5c:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9a60:	003fed06 	br	9a18 <_ZNSt13runtime_errorD2Ev+0x78>
    9a64:	d8800417 	ldw	r2,16(sp)
    9a68:	d8c00317 	ldw	r3,12(sp)
    9a6c:	d9001017 	ldw	r4,64(sp)
    9a70:	d8800f15 	stw	r2,60(sp)
    9a74:	d8c01115 	stw	r3,68(sp)
    9a78:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9a7c:	d8c00f17 	ldw	r3,60(sp)
    9a80:	00bfffc4 	movi	r2,-1
    9a84:	18800326 	beq	r3,r2,9a94 <_ZNSt13runtime_errorD2Ev+0xf4>
    9a88:	d9001117 	ldw	r4,68(sp)
    9a8c:	d8800215 	stw	r2,8(sp)
    9a90:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    9a94:	d9001117 	ldw	r4,68(sp)
    9a98:	00bfffc4 	movi	r2,-1
    9a9c:	d8800215 	stw	r2,8(sp)
    9aa0:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

00009aa4 <_ZNSt13runtime_errorD0Ev>:
    9aa4:	deffeb04 	addi	sp,sp,-84
    9aa8:	00800074 	movhi	r2,1
    9aac:	10b9cd04 	addi	r2,r2,-6348
    9ab0:	00c000b4 	movhi	r3,2
    9ab4:	18f8ef04 	addi	r3,r3,-7236
    9ab8:	d8800715 	stw	r2,28(sp)
    9abc:	d9001015 	stw	r4,64(sp)
    9ac0:	00800074 	movhi	r2,1
    9ac4:	10a6dc04 	addi	r2,r2,-25744
    9ac8:	d9000104 	addi	r4,sp,4
    9acc:	d8c00815 	stw	r3,32(sp)
    9ad0:	d8800a15 	stw	r2,40(sp)
    9ad4:	dfc01415 	stw	ra,80(sp)
    9ad8:	df001315 	stw	fp,76(sp)
    9adc:	ddc01215 	stw	r23,72(sp)
    9ae0:	dec00915 	stw	sp,36(sp)
    9ae4:	dec00b15 	stw	sp,44(sp)
    9ae8:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9aec:	d8c01017 	ldw	r3,64(sp)
    9af0:	18800117 	ldw	r2,4(r3)
    9af4:	00c000b4 	movhi	r3,2
    9af8:	18fa3a04 	addi	r3,r3,-5912
    9afc:	10bffd04 	addi	r2,r2,-12
    9b00:	d8800e15 	stw	r2,56(sp)
    9b04:	d8801017 	ldw	r2,64(sp)
    9b08:	10c00015 	stw	r3,0(r2)
    9b0c:	d8c00e17 	ldw	r3,56(sp)
    9b10:	008000b4 	movhi	r2,2
    9b14:	108a2404 	addi	r2,r2,10384
    9b18:	18800b1e 	bne	r3,r2,9b48 <_ZNSt13runtime_errorD0Ev+0xa4>
    9b1c:	d9001017 	ldw	r4,64(sp)
    9b20:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9b24:	d9001017 	ldw	r4,64(sp)
    9b28:	000e01c0 	call	e01c <_ZdlPv>
    9b2c:	d9000104 	addi	r4,sp,4
    9b30:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    9b34:	dfc01417 	ldw	ra,80(sp)
    9b38:	df001317 	ldw	fp,76(sp)
    9b3c:	ddc01217 	ldw	r23,72(sp)
    9b40:	dec01504 	addi	sp,sp,84
    9b44:	f800283a 	ret
    9b48:	00800044 	movi	r2,1
    9b4c:	d8800215 	stw	r2,8(sp)
    9b50:	19000204 	addi	r4,r3,8
    9b54:	017fffc4 	movi	r5,-1
    9b58:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9b5c:	00bfef16 	blt	zero,r2,9b1c <_ZNSt13runtime_errorD0Ev+0x78>
    9b60:	d9000e17 	ldw	r4,56(sp)
    9b64:	d80b883a 	mov	r5,sp
    9b68:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9b6c:	003feb06 	br	9b1c <_ZNSt13runtime_errorD0Ev+0x78>
    9b70:	d8800417 	ldw	r2,16(sp)
    9b74:	d8c00317 	ldw	r3,12(sp)
    9b78:	d9001017 	ldw	r4,64(sp)
    9b7c:	d8800f15 	stw	r2,60(sp)
    9b80:	d8c01115 	stw	r3,68(sp)
    9b84:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9b88:	d8c00f17 	ldw	r3,60(sp)
    9b8c:	00bfffc4 	movi	r2,-1
    9b90:	18800326 	beq	r3,r2,9ba0 <_ZNSt13runtime_errorD0Ev+0xfc>
    9b94:	d9001117 	ldw	r4,68(sp)
    9b98:	d8800215 	stw	r2,8(sp)
    9b9c:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    9ba0:	d9001117 	ldw	r4,68(sp)
    9ba4:	00bfffc4 	movi	r2,-1
    9ba8:	d8800215 	stw	r2,8(sp)
    9bac:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

00009bb0 <_ZNSt11logic_errorD2Ev>:
    9bb0:	deffeb04 	addi	sp,sp,-84
    9bb4:	00800074 	movhi	r2,1
    9bb8:	10b9cd04 	addi	r2,r2,-6348
    9bbc:	00c000b4 	movhi	r3,2
    9bc0:	18f8f304 	addi	r3,r3,-7220
    9bc4:	d8800715 	stw	r2,28(sp)
    9bc8:	d9001015 	stw	r4,64(sp)
    9bcc:	00800074 	movhi	r2,1
    9bd0:	10a71d04 	addi	r2,r2,-25484
    9bd4:	d9000104 	addi	r4,sp,4
    9bd8:	d8c00815 	stw	r3,32(sp)
    9bdc:	d8800a15 	stw	r2,40(sp)
    9be0:	dfc01415 	stw	ra,80(sp)
    9be4:	df001315 	stw	fp,76(sp)
    9be8:	ddc01215 	stw	r23,72(sp)
    9bec:	dec00915 	stw	sp,36(sp)
    9bf0:	dec00b15 	stw	sp,44(sp)
    9bf4:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9bf8:	d8c01017 	ldw	r3,64(sp)
    9bfc:	18800117 	ldw	r2,4(r3)
    9c00:	00c000b4 	movhi	r3,2
    9c04:	18fa3f04 	addi	r3,r3,-5892
    9c08:	10bffd04 	addi	r2,r2,-12
    9c0c:	d8800e15 	stw	r2,56(sp)
    9c10:	d8801017 	ldw	r2,64(sp)
    9c14:	10c00015 	stw	r3,0(r2)
    9c18:	d8c00e17 	ldw	r3,56(sp)
    9c1c:	008000b4 	movhi	r2,2
    9c20:	108a2404 	addi	r2,r2,10384
    9c24:	1880091e 	bne	r3,r2,9c4c <_ZNSt11logic_errorD2Ev+0x9c>
    9c28:	d9001017 	ldw	r4,64(sp)
    9c2c:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9c30:	d9000104 	addi	r4,sp,4
    9c34:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    9c38:	dfc01417 	ldw	ra,80(sp)
    9c3c:	df001317 	ldw	fp,76(sp)
    9c40:	ddc01217 	ldw	r23,72(sp)
    9c44:	dec01504 	addi	sp,sp,84
    9c48:	f800283a 	ret
    9c4c:	00800044 	movi	r2,1
    9c50:	d8800215 	stw	r2,8(sp)
    9c54:	19000204 	addi	r4,r3,8
    9c58:	017fffc4 	movi	r5,-1
    9c5c:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9c60:	00bff116 	blt	zero,r2,9c28 <_ZNSt11logic_errorD2Ev+0x78>
    9c64:	d9000e17 	ldw	r4,56(sp)
    9c68:	d80b883a 	mov	r5,sp
    9c6c:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9c70:	003fed06 	br	9c28 <_ZNSt11logic_errorD2Ev+0x78>
    9c74:	d8800417 	ldw	r2,16(sp)
    9c78:	d8c00317 	ldw	r3,12(sp)
    9c7c:	d9001017 	ldw	r4,64(sp)
    9c80:	d8800f15 	stw	r2,60(sp)
    9c84:	d8c01115 	stw	r3,68(sp)
    9c88:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9c8c:	d8c00f17 	ldw	r3,60(sp)
    9c90:	00bfffc4 	movi	r2,-1
    9c94:	18800326 	beq	r3,r2,9ca4 <_ZNSt11logic_errorD2Ev+0xf4>
    9c98:	d9001117 	ldw	r4,68(sp)
    9c9c:	d8800215 	stw	r2,8(sp)
    9ca0:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    9ca4:	d9001117 	ldw	r4,68(sp)
    9ca8:	00bfffc4 	movi	r2,-1
    9cac:	d8800215 	stw	r2,8(sp)
    9cb0:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

00009cb4 <_ZNSt11logic_errorD0Ev>:
    9cb4:	deffeb04 	addi	sp,sp,-84
    9cb8:	00800074 	movhi	r2,1
    9cbc:	10b9cd04 	addi	r2,r2,-6348
    9cc0:	00c000b4 	movhi	r3,2
    9cc4:	18f8f704 	addi	r3,r3,-7204
    9cc8:	d8800715 	stw	r2,28(sp)
    9ccc:	d9001015 	stw	r4,64(sp)
    9cd0:	00800074 	movhi	r2,1
    9cd4:	10a76004 	addi	r2,r2,-25216
    9cd8:	d9000104 	addi	r4,sp,4
    9cdc:	d8c00815 	stw	r3,32(sp)
    9ce0:	d8800a15 	stw	r2,40(sp)
    9ce4:	dfc01415 	stw	ra,80(sp)
    9ce8:	df001315 	stw	fp,76(sp)
    9cec:	ddc01215 	stw	r23,72(sp)
    9cf0:	dec00915 	stw	sp,36(sp)
    9cf4:	dec00b15 	stw	sp,44(sp)
    9cf8:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    9cfc:	d8c01017 	ldw	r3,64(sp)
    9d00:	18800117 	ldw	r2,4(r3)
    9d04:	00c000b4 	movhi	r3,2
    9d08:	18fa3f04 	addi	r3,r3,-5892
    9d0c:	10bffd04 	addi	r2,r2,-12
    9d10:	d8800e15 	stw	r2,56(sp)
    9d14:	d8801017 	ldw	r2,64(sp)
    9d18:	10c00015 	stw	r3,0(r2)
    9d1c:	d8c00e17 	ldw	r3,56(sp)
    9d20:	008000b4 	movhi	r2,2
    9d24:	108a2404 	addi	r2,r2,10384
    9d28:	18800b1e 	bne	r3,r2,9d58 <_ZNSt11logic_errorD0Ev+0xa4>
    9d2c:	d9001017 	ldw	r4,64(sp)
    9d30:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9d34:	d9001017 	ldw	r4,64(sp)
    9d38:	000e01c0 	call	e01c <_ZdlPv>
    9d3c:	d9000104 	addi	r4,sp,4
    9d40:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    9d44:	dfc01417 	ldw	ra,80(sp)
    9d48:	df001317 	ldw	fp,76(sp)
    9d4c:	ddc01217 	ldw	r23,72(sp)
    9d50:	dec01504 	addi	sp,sp,84
    9d54:	f800283a 	ret
    9d58:	00800044 	movi	r2,1
    9d5c:	d8800215 	stw	r2,8(sp)
    9d60:	19000204 	addi	r4,r3,8
    9d64:	017fffc4 	movi	r5,-1
    9d68:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9d6c:	00bfef16 	blt	zero,r2,9d2c <_ZNSt11logic_errorD0Ev+0x78>
    9d70:	d9000e17 	ldw	r4,56(sp)
    9d74:	d80b883a 	mov	r5,sp
    9d78:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9d7c:	003feb06 	br	9d2c <_ZNSt11logic_errorD0Ev+0x78>
    9d80:	d8800417 	ldw	r2,16(sp)
    9d84:	d8c00317 	ldw	r3,12(sp)
    9d88:	d9001017 	ldw	r4,64(sp)
    9d8c:	d8800f15 	stw	r2,60(sp)
    9d90:	d8c01115 	stw	r3,68(sp)
    9d94:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    9d98:	d8c00f17 	ldw	r3,60(sp)
    9d9c:	00bfffc4 	movi	r2,-1
    9da0:	18800326 	beq	r3,r2,9db0 <_ZNSt11logic_errorD0Ev+0xfc>
    9da4:	d9001117 	ldw	r4,68(sp)
    9da8:	d8800215 	stw	r2,8(sp)
    9dac:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    9db0:	d9001117 	ldw	r4,68(sp)
    9db4:	00bfffc4 	movi	r2,-1
    9db8:	d8800215 	stw	r2,8(sp)
    9dbc:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

00009dc0 <_ZNSt11char_traitsIcE2eqERKcS2_>:
    9dc0:	20c00007 	ldb	r3,0(r4)
    9dc4:	28800007 	ldb	r2,0(r5)
    9dc8:	1885003a 	cmpeq	r2,r3,r2
    9dcc:	f800283a 	ret

00009dd0 <_ZNKSs7_M_dataEv>:
    9dd0:	20800017 	ldw	r2,0(r4)
    9dd4:	f800283a 	ret

00009dd8 <_ZNSs7_M_dataEPc>:
    9dd8:	2805883a 	mov	r2,r5
    9ddc:	21400015 	stw	r5,0(r4)
    9de0:	f800283a 	ret

00009de4 <_ZNKSs6_M_repEv>:
    9de4:	20800017 	ldw	r2,0(r4)
    9de8:	10bffd04 	addi	r2,r2,-12
    9dec:	f800283a 	ret

00009df0 <_ZNKSs9_M_ibeginEv>:
    9df0:	20800017 	ldw	r2,0(r4)
    9df4:	f800283a 	ret

00009df8 <_ZNKSs7_M_iendEv>:
    9df8:	20c00017 	ldw	r3,0(r4)
    9dfc:	18bffd17 	ldw	r2,-12(r3)
    9e00:	1885883a 	add	r2,r3,r2
    9e04:	f800283a 	ret

00009e08 <_ZNKSs8_M_limitEmm>:
    9e08:	20c00017 	ldw	r3,0(r4)
    9e0c:	18bffd17 	ldw	r2,-12(r3)
    9e10:	1145c83a 	sub	r2,r2,r5
    9e14:	3080012e 	bgeu	r6,r2,9e1c <_ZNKSs8_M_limitEmm+0x14>
    9e18:	3005883a 	mov	r2,r6
    9e1c:	f800283a 	ret

00009e20 <_ZNKSs11_M_disjunctEPKc>:
    9e20:	21000017 	ldw	r4,0(r4)
    9e24:	00800044 	movi	r2,1
    9e28:	29000336 	bltu	r5,r4,9e38 <_ZNKSs11_M_disjunctEPKc+0x18>
    9e2c:	20bffd17 	ldw	r2,-12(r4)
    9e30:	2085883a 	add	r2,r4,r2
    9e34:	1145803a 	cmpltu	r2,r2,r5
    9e38:	f800283a 	ret

00009e3c <_ZNSs12_S_empty_repEv>:
    9e3c:	008000b4 	movhi	r2,2
    9e40:	108a2404 	addi	r2,r2,10384
    9e44:	f800283a 	ret

00009e48 <_ZNSsC1Ev>:
    9e48:	008000b4 	movhi	r2,2
    9e4c:	108a2704 	addi	r2,r2,10396
    9e50:	20800015 	stw	r2,0(r4)
    9e54:	f800283a 	ret

00009e58 <_ZNKSs5beginEv>:
    9e58:	20800017 	ldw	r2,0(r4)
    9e5c:	f800283a 	ret

00009e60 <_ZNKSs3endEv>:
    9e60:	20c00017 	ldw	r3,0(r4)
    9e64:	18bffd17 	ldw	r2,-12(r3)
    9e68:	1885883a 	add	r2,r3,r2
    9e6c:	f800283a 	ret

00009e70 <_ZNKSs4sizeEv>:
    9e70:	20c00017 	ldw	r3,0(r4)
    9e74:	18bffd17 	ldw	r2,-12(r3)
    9e78:	f800283a 	ret

00009e7c <_ZNKSs8max_sizeEv>:
    9e7c:	00900034 	movhi	r2,16384
    9e80:	10bfff04 	addi	r2,r2,-4
    9e84:	f800283a 	ret

00009e88 <_ZNKSs8capacityEv>:
    9e88:	20c00017 	ldw	r3,0(r4)
    9e8c:	18bffe17 	ldw	r2,-8(r3)
    9e90:	f800283a 	ret

00009e94 <_ZNKSs4dataEv>:
    9e94:	20800017 	ldw	r2,0(r4)
    9e98:	f800283a 	ret

00009e9c <_ZNKSs13get_allocatorEv>:
    9e9c:	2005883a 	mov	r2,r4
    9ea0:	f800283a 	ret

00009ea4 <_ZNSs12_Alloc_hiderC1EPcRKSaIcE>:
    9ea4:	21400015 	stw	r5,0(r4)
    9ea8:	f800283a 	ret

00009eac <_ZNSs4_Rep12_S_empty_repEv>:
    9eac:	008000b4 	movhi	r2,2
    9eb0:	108a2404 	addi	r2,r2,10384
    9eb4:	f800283a 	ret

00009eb8 <_ZNKSs4_Rep12_M_is_leakedEv>:
    9eb8:	20800217 	ldw	r2,8(r4)
    9ebc:	1004d7fa 	srli	r2,r2,31
    9ec0:	f800283a 	ret

00009ec4 <_ZNKSs4_Rep12_M_is_sharedEv>:
    9ec4:	20800217 	ldw	r2,8(r4)
    9ec8:	0084803a 	cmplt	r2,zero,r2
    9ecc:	f800283a 	ret

00009ed0 <_ZNSs4_Rep13_M_set_leakedEv>:
    9ed0:	00bfffc4 	movi	r2,-1
    9ed4:	20800215 	stw	r2,8(r4)
    9ed8:	f800283a 	ret

00009edc <_ZNSs4_Rep15_M_set_sharableEv>:
    9edc:	20000215 	stw	zero,8(r4)
    9ee0:	f800283a 	ret

00009ee4 <_ZNSs4_Rep26_M_set_length_and_sharableEm>:
    9ee4:	2145883a 	add	r2,r4,r5
    9ee8:	20000215 	stw	zero,8(r4)
    9eec:	21400015 	stw	r5,0(r4)
    9ef0:	10000305 	stb	zero,12(r2)
    9ef4:	f800283a 	ret

00009ef8 <_ZNSs4_Rep10_M_refdataEv>:
    9ef8:	20800304 	addi	r2,r4,12
    9efc:	f800283a 	ret

00009f00 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>:
    9f00:	defff504 	addi	sp,sp,-44
    9f04:	dd400615 	stw	r21,24(sp)
    9f08:	dd000515 	stw	r20,20(sp)
    9f0c:	dcc00415 	stw	r19,16(sp)
    9f10:	dc800315 	stw	r18,12(sp)
    9f14:	dc400215 	stw	r17,8(sp)
    9f18:	dfc00a15 	stw	ra,40(sp)
    9f1c:	df000915 	stw	fp,36(sp)
    9f20:	ddc00815 	stw	r23,32(sp)
    9f24:	dd800715 	stw	r22,28(sp)
    9f28:	dc000115 	stw	r16,4(sp)
    9f2c:	2025883a 	mov	r18,r4
    9f30:	2823883a 	mov	r17,r5
    9f34:	3027883a 	mov	r19,r6
    9f38:	382b883a 	mov	r21,r7
    9f3c:	dd000b17 	ldw	r20,44(sp)
    9f40:	21400d26 	beq	r4,r5,9f78 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
    9f44:	31c00c26 	beq	r6,r7,9f78 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
    9f48:	30800044 	addi	r2,r6,1
    9f4c:	d8800015 	stw	r2,0(sp)
    9f50:	38803226 	beq	r7,r2,a01c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x11c>
    9f54:	9021883a 	mov	r16,r18
    9f58:	8009883a 	mov	r4,r16
    9f5c:	980b883a 	mov	r5,r19
    9f60:	a03ee83a 	callr	r20
    9f64:	10803fcc 	andi	r2,r2,255
    9f68:	1000101e 	bne	r2,zero,9fac <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xac>
    9f6c:	84000044 	addi	r16,r16,1
    9f70:	847ff91e 	bne	r16,r17,9f58 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x58>
    9f74:	8825883a 	mov	r18,r17
    9f78:	9005883a 	mov	r2,r18
    9f7c:	dfc00a17 	ldw	ra,40(sp)
    9f80:	df000917 	ldw	fp,36(sp)
    9f84:	ddc00817 	ldw	r23,32(sp)
    9f88:	dd800717 	ldw	r22,28(sp)
    9f8c:	dd400617 	ldw	r21,24(sp)
    9f90:	dd000517 	ldw	r20,20(sp)
    9f94:	dcc00417 	ldw	r19,16(sp)
    9f98:	dc800317 	ldw	r18,12(sp)
    9f9c:	dc400217 	ldw	r17,8(sp)
    9fa0:	dc000117 	ldw	r16,4(sp)
    9fa4:	dec00b04 	addi	sp,sp,44
    9fa8:	f800283a 	ret
    9fac:	8c3ff126 	beq	r17,r16,9f74 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
    9fb0:	8825883a 	mov	r18,r17
    9fb4:	00000206 	br	9fc0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xc0>
    9fb8:	84000044 	addi	r16,r16,1
    9fbc:	84bfed26 	beq	r16,r18,9f74 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
    9fc0:	8009883a 	mov	r4,r16
    9fc4:	980b883a 	mov	r5,r19
    9fc8:	a03ee83a 	callr	r20
    9fcc:	10803fcc 	andi	r2,r2,255
    9fd0:	103ff926 	beq	r2,zero,9fb8 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xb8>
    9fd4:	87000044 	addi	fp,r16,1
    9fd8:	8f001a26 	beq	r17,fp,a044 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x144>
    9fdc:	dd800017 	ldw	r22,0(sp)
    9fe0:	e02f883a 	mov	r23,fp
    9fe4:	b809883a 	mov	r4,r23
    9fe8:	b00b883a 	mov	r5,r22
    9fec:	a03ee83a 	callr	r20
    9ff0:	8c07c83a 	sub	r3,r17,r16
    9ff4:	10803fcc 	andi	r2,r2,255
    9ff8:	98c7883a 	add	r3,r19,r3
    9ffc:	b5800044 	addi	r22,r22,1
    a000:	bdc00044 	addi	r23,r23,1
    a004:	e025883a 	mov	r18,fp
    a008:	103fd226 	beq	r2,zero,9f54 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x54>
    a00c:	ad800b26 	beq	r21,r22,a03c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
    a010:	b0fff41e 	bne	r22,r3,9fe4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xe4>
    a014:	b825883a 	mov	r18,r23
    a018:	003fd706 	br	9f78 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
    a01c:	2021883a 	mov	r16,r4
    a020:	8009883a 	mov	r4,r16
    a024:	980b883a 	mov	r5,r19
    a028:	a03ee83a 	callr	r20
    a02c:	10803fcc 	andi	r2,r2,255
    a030:	1000021e 	bne	r2,zero,a03c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
    a034:	84000044 	addi	r16,r16,1
    a038:	8c3ff91e 	bne	r17,r16,a020 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x120>
    a03c:	8025883a 	mov	r18,r16
    a040:	003fcd06 	br	9f78 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
    a044:	e025883a 	mov	r18,fp
    a048:	003fcb06 	br	9f78 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>

0000a04c <_ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>:
    a04c:	20c00017 	ldw	r3,0(r4)
    a050:	28800017 	ldw	r2,0(r5)
    a054:	1885003a 	cmpeq	r2,r3,r2
    a058:	f800283a 	ret

0000a05c <_ZNSs12_Alloc_hiderC2EPcRKSaIcE>:
    a05c:	21400015 	stw	r5,0(r4)
    a060:	f800283a 	ret

0000a064 <_ZNSs4_Rep10_M_refcopyEv>:
    a064:	deffee04 	addi	sp,sp,-72
    a068:	00800074 	movhi	r2,1
    a06c:	10b9cd04 	addi	r2,r2,-6348
    a070:	00c000b4 	movhi	r3,2
    a074:	18f8fb04 	addi	r3,r3,-7188
    a078:	d8800615 	stw	r2,24(sp)
    a07c:	d9000d15 	stw	r4,52(sp)
    a080:	00800074 	movhi	r2,1
    a084:	10a83f04 	addi	r2,r2,-24324
    a088:	d809883a 	mov	r4,sp
    a08c:	d8c00715 	stw	r3,28(sp)
    a090:	d8800915 	stw	r2,36(sp)
    a094:	dfc01115 	stw	ra,68(sp)
    a098:	df001015 	stw	fp,64(sp)
    a09c:	ddc00f15 	stw	r23,60(sp)
    a0a0:	dec00815 	stw	sp,32(sp)
    a0a4:	dec00a15 	stw	sp,40(sp)
    a0a8:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    a0ac:	d8c00d17 	ldw	r3,52(sp)
    a0b0:	008000b4 	movhi	r2,2
    a0b4:	108a2404 	addi	r2,r2,10384
    a0b8:	18800b1e 	bne	r3,r2,a0e8 <_ZNSs4_Rep10_M_refcopyEv+0x84>
    a0bc:	d8800d17 	ldw	r2,52(sp)
    a0c0:	d809883a 	mov	r4,sp
    a0c4:	10800304 	addi	r2,r2,12
    a0c8:	d8800e15 	stw	r2,56(sp)
    a0cc:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    a0d0:	d8800e17 	ldw	r2,56(sp)
    a0d4:	dfc01117 	ldw	ra,68(sp)
    a0d8:	df001017 	ldw	fp,64(sp)
    a0dc:	ddc00f17 	ldw	r23,60(sp)
    a0e0:	dec01204 	addi	sp,sp,72
    a0e4:	f800283a 	ret
    a0e8:	01400044 	movi	r5,1
    a0ec:	d9400115 	stw	r5,4(sp)
    a0f0:	19000204 	addi	r4,r3,8
    a0f4:	000dc980 	call	dc98 <_ZN9__gnu_cxx12__atomic_addEPVii>
    a0f8:	003ff006 	br	a0bc <_ZNSs4_Rep10_M_refcopyEv+0x58>
    a0fc:	d8800317 	ldw	r2,12(sp)
    a100:	00ffffc4 	movi	r3,-1
    a104:	d9000217 	ldw	r4,8(sp)
    a108:	10c00226 	beq	r2,r3,a114 <_ZNSs4_Rep10_M_refcopyEv+0xb0>
    a10c:	d8c00115 	stw	r3,4(sp)
    a110:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    a114:	00bfffc4 	movi	r2,-1
    a118:	d8800115 	stw	r2,4(sp)
    a11c:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

0000a120 <_ZNKSs15_M_check_lengthEmmPKc>:
    a120:	20800017 	ldw	r2,0(r4)
    a124:	deffff04 	addi	sp,sp,-4
    a128:	dfc00015 	stw	ra,0(sp)
    a12c:	10fffd17 	ldw	r3,-12(r2)
    a130:	00900034 	movhi	r2,16384
    a134:	10bfff04 	addi	r2,r2,-4
    a138:	1947c83a 	sub	r3,r3,r5
    a13c:	10c5c83a 	sub	r2,r2,r3
    a140:	11800336 	bltu	r2,r6,a150 <_ZNKSs15_M_check_lengthEmmPKc+0x30>
    a144:	dfc00017 	ldw	ra,0(sp)
    a148:	dec00104 	addi	sp,sp,4
    a14c:	f800283a 	ret
    a150:	3809883a 	mov	r4,r7
    a154:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>

0000a158 <_ZNKSs8_M_checkEmPKc>:
    a158:	20c00017 	ldw	r3,0(r4)
    a15c:	deffff04 	addi	sp,sp,-4
    a160:	dfc00015 	stw	ra,0(sp)
    a164:	18bffd17 	ldw	r2,-12(r3)
    a168:	11400436 	bltu	r2,r5,a17c <_ZNKSs8_M_checkEmPKc+0x24>
    a16c:	2805883a 	mov	r2,r5
    a170:	dfc00017 	ldw	ra,0(sp)
    a174:	dec00104 	addi	sp,sp,4
    a178:	f800283a 	ret
    a17c:	3009883a 	mov	r4,r6
    a180:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000a184 <_ZNSs9_M_assignEPcmc>:
    a184:	3011883a 	mov	r8,r6
    a188:	2807883a 	mov	r3,r5
    a18c:	280d883a 	mov	r6,r5
    a190:	41403fcc 	andi	r5,r8,255
    a194:	2940201c 	xori	r5,r5,128
    a198:	01c00044 	movi	r7,1
    a19c:	297fe004 	addi	r5,r5,-128
    a1a0:	19c00126 	beq	r3,r7,a1a8 <_ZNSs9_M_assignEPcmc+0x24>
    a1a4:	0013fb41 	jmpi	13fb4 <memset>
    a1a8:	22000005 	stb	r8,0(r4)
    a1ac:	f800283a 	ret

0000a1b0 <_ZNSs7_M_moveEPcPKcm>:
    a1b0:	00800044 	movi	r2,1
    a1b4:	30800126 	beq	r6,r2,a1bc <_ZNSs7_M_moveEPcPKcm+0xc>
    a1b8:	0013ed41 	jmpi	13ed4 <memmove>
    a1bc:	28800003 	ldbu	r2,0(r5)
    a1c0:	20800005 	stb	r2,0(r4)
    a1c4:	f800283a 	ret

0000a1c8 <_ZNSs7_M_copyEPcPKcm>:
    a1c8:	00800044 	movi	r2,1
    a1cc:	30800126 	beq	r6,r2,a1d4 <_ZNSs7_M_copyEPcPKcm+0xc>
    a1d0:	0013e341 	jmpi	13e34 <memcpy>
    a1d4:	28800003 	ldbu	r2,0(r5)
    a1d8:	20800005 	stb	r2,0(r4)
    a1dc:	f800283a 	ret

0000a1e0 <_ZNKSs5c_strEv>:
    a1e0:	20800017 	ldw	r2,0(r4)
    a1e4:	f800283a 	ret

0000a1e8 <_ZNKSsixEm>:
    a1e8:	20800017 	ldw	r2,0(r4)
    a1ec:	2885883a 	add	r2,r5,r2
    a1f0:	f800283a 	ret

0000a1f4 <_ZNKSs17find_first_not_ofEPKcmm>:
    a1f4:	20c00017 	ldw	r3,0(r4)
    a1f8:	defffb04 	addi	sp,sp,-20
    a1fc:	dcc00315 	stw	r19,12(sp)
    a200:	18bffd17 	ldw	r2,-12(r3)
    a204:	dc800215 	stw	r18,8(sp)
    a208:	dc400115 	stw	r17,4(sp)
    a20c:	dc000015 	stw	r16,0(sp)
    a210:	dfc00415 	stw	ra,16(sp)
    a214:	2027883a 	mov	r19,r4
    a218:	3021883a 	mov	r16,r6
    a21c:	2825883a 	mov	r18,r5
    a220:	3823883a 	mov	r17,r7
    a224:	30800536 	bltu	r6,r2,a23c <_ZNKSs17find_first_not_ofEPKcmm+0x48>
    a228:	00001206 	br	a274 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
    a22c:	98c00017 	ldw	r3,0(r19)
    a230:	84000044 	addi	r16,r16,1
    a234:	18bffd17 	ldw	r2,-12(r3)
    a238:	80800e2e 	bgeu	r16,r2,a274 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
    a23c:	1c05883a 	add	r2,r3,r16
    a240:	11400007 	ldb	r5,0(r2)
    a244:	9009883a 	mov	r4,r18
    a248:	880d883a 	mov	r6,r17
    a24c:	0013cdc0 	call	13cdc <memchr>
    a250:	103ff61e 	bne	r2,zero,a22c <_ZNKSs17find_first_not_ofEPKcmm+0x38>
    a254:	8005883a 	mov	r2,r16
    a258:	dfc00417 	ldw	ra,16(sp)
    a25c:	dcc00317 	ldw	r19,12(sp)
    a260:	dc800217 	ldw	r18,8(sp)
    a264:	dc400117 	ldw	r17,4(sp)
    a268:	dc000017 	ldw	r16,0(sp)
    a26c:	dec00504 	addi	sp,sp,20
    a270:	f800283a 	ret
    a274:	043fffc4 	movi	r16,-1
    a278:	8005883a 	mov	r2,r16
    a27c:	dfc00417 	ldw	ra,16(sp)
    a280:	dcc00317 	ldw	r19,12(sp)
    a284:	dc800217 	ldw	r18,8(sp)
    a288:	dc400117 	ldw	r17,4(sp)
    a28c:	dc000017 	ldw	r16,0(sp)
    a290:	dec00504 	addi	sp,sp,20
    a294:	f800283a 	ret

0000a298 <_ZNKSs4findEPKcmm>:
    a298:	defffb04 	addi	sp,sp,-20
    a29c:	dc000115 	stw	r16,4(sp)
    a2a0:	24000017 	ldw	r16,0(r4)
    a2a4:	31c7883a 	add	r3,r6,r7
    a2a8:	dc800315 	stw	r18,12(sp)
    a2ac:	823ffd17 	ldw	r8,-12(r16)
    a2b0:	8189883a 	add	r4,r16,r6
    a2b4:	280d883a 	mov	r6,r5
    a2b8:	8225883a 	add	r18,r16,r8
    a2bc:	dc400215 	stw	r17,8(sp)
    a2c0:	dfc00415 	stw	ra,16(sp)
    a2c4:	3823883a 	mov	r17,r7
    a2c8:	900b883a 	mov	r5,r18
    a2cc:	398f883a 	add	r7,r7,r6
    a2d0:	40c0082e 	bgeu	r8,r3,a2f4 <_ZNKSs4findEPKcmm+0x5c>
    a2d4:	00ffffc4 	movi	r3,-1
    a2d8:	1805883a 	mov	r2,r3
    a2dc:	dfc00417 	ldw	ra,16(sp)
    a2e0:	dc800317 	ldw	r18,12(sp)
    a2e4:	dc400217 	ldw	r17,8(sp)
    a2e8:	dc000117 	ldw	r16,4(sp)
    a2ec:	dec00504 	addi	sp,sp,20
    a2f0:	f800283a 	ret
    a2f4:	00800074 	movhi	r2,1
    a2f8:	10a77004 	addi	r2,r2,-25152
    a2fc:	d8800015 	stw	r2,0(sp)
    a300:	0009f000 	call	9f00 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>
    a304:	1407c83a 	sub	r3,r2,r16
    a308:	90bff31e 	bne	r18,r2,a2d8 <_ZNKSs4findEPKcmm+0x40>
    a30c:	883ff11e 	bne	r17,zero,a2d4 <_ZNKSs4findEPKcmm+0x3c>
    a310:	1805883a 	mov	r2,r3
    a314:	dfc00417 	ldw	ra,16(sp)
    a318:	dc800317 	ldw	r18,12(sp)
    a31c:	dc400217 	ldw	r17,8(sp)
    a320:	dc000117 	ldw	r16,4(sp)
    a324:	dec00504 	addi	sp,sp,20
    a328:	f800283a 	ret

0000a32c <_ZNKSs2atEm>:
    a32c:	21000017 	ldw	r4,0(r4)
    a330:	deffff04 	addi	sp,sp,-4
    a334:	dfc00015 	stw	ra,0(sp)
    a338:	20bffd17 	ldw	r2,-12(r4)
    a33c:	2880042e 	bgeu	r5,r2,a350 <_ZNKSs2atEm+0x24>
    a340:	2145883a 	add	r2,r4,r5
    a344:	dfc00017 	ldw	ra,0(sp)
    a348:	dec00104 	addi	sp,sp,4
    a34c:	f800283a 	ret
    a350:	010000b4 	movhi	r4,2
    a354:	213a5104 	addi	r4,r4,-5820
    a358:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000a35c <_ZNKSs5emptyEv>:
    a35c:	20c00017 	ldw	r3,0(r4)
    a360:	18bffd17 	ldw	r2,-12(r3)
    a364:	1005003a 	cmpeq	r2,r2,zero
    a368:	f800283a 	ret

0000a36c <_ZNKSs6lengthEv>:
    a36c:	20c00017 	ldw	r3,0(r4)
    a370:	18bffd17 	ldw	r2,-12(r3)
    a374:	f800283a 	ret

0000a378 <_ZNKSs4findERKSsm>:
    a378:	29400017 	ldw	r5,0(r5)
    a37c:	29fffd17 	ldw	r7,-12(r5)
    a380:	000a2981 	jmpi	a298 <_ZNKSs4findEPKcmm>

0000a384 <_ZNKSs17find_first_not_ofERKSsm>:
    a384:	29400017 	ldw	r5,0(r5)
    a388:	29fffd17 	ldw	r7,-12(r5)
    a38c:	000a1f41 	jmpi	a1f4 <_ZNKSs17find_first_not_ofEPKcmm>

0000a390 <_ZNKSs5rfindEPKcmm>:
    a390:	defff804 	addi	sp,sp,-32
    a394:	dc800415 	stw	r18,16(sp)
    a398:	24800017 	ldw	r18,0(r4)
    a39c:	dcc00515 	stw	r19,20(sp)
    a3a0:	dc400315 	stw	r17,12(sp)
    a3a4:	90bffd17 	ldw	r2,-12(r18)
    a3a8:	dfc00715 	stw	ra,28(sp)
    a3ac:	dd000615 	stw	r20,24(sp)
    a3b0:	dc000215 	stw	r16,8(sp)
    a3b4:	3823883a 	mov	r17,r7
    a3b8:	2827883a 	mov	r19,r5
    a3bc:	d9800115 	stw	r6,4(sp)
    a3c0:	11c01136 	bltu	r2,r7,a408 <_ZNKSs5rfindEPKcmm+0x78>
    a3c4:	11c5c83a 	sub	r2,r2,r7
    a3c8:	d8800015 	stw	r2,0(sp)
    a3cc:	3080182e 	bgeu	r6,r2,a430 <_ZNKSs5rfindEPKcmm+0xa0>
    a3d0:	d8800104 	addi	r2,sp,4
    a3d4:	10800017 	ldw	r2,0(r2)
    a3d8:	053fffc4 	movi	r20,-1
    a3dc:	d8800115 	stw	r2,4(sp)
    a3e0:	00000106 	br	a3e8 <_ZNKSs5rfindEPKcmm+0x58>
    a3e4:	d8c00115 	stw	r3,4(sp)
    a3e8:	dc000117 	ldw	r16,4(sp)
    a3ec:	980b883a 	mov	r5,r19
    a3f0:	880d883a 	mov	r6,r17
    a3f4:	9409883a 	add	r4,r18,r16
    a3f8:	0013dc00 	call	13dc0 <memcmp>
    a3fc:	80ffffc4 	addi	r3,r16,-1
    a400:	10000226 	beq	r2,zero,a40c <_ZNKSs5rfindEPKcmm+0x7c>
    a404:	1d3ff71e 	bne	r3,r20,a3e4 <_ZNKSs5rfindEPKcmm+0x54>
    a408:	043fffc4 	movi	r16,-1
    a40c:	8005883a 	mov	r2,r16
    a410:	dfc00717 	ldw	ra,28(sp)
    a414:	dd000617 	ldw	r20,24(sp)
    a418:	dcc00517 	ldw	r19,20(sp)
    a41c:	dc800417 	ldw	r18,16(sp)
    a420:	dc400317 	ldw	r17,12(sp)
    a424:	dc000217 	ldw	r16,8(sp)
    a428:	dec00804 	addi	sp,sp,32
    a42c:	f800283a 	ret
    a430:	d805883a 	mov	r2,sp
    a434:	003fe706 	br	a3d4 <_ZNKSs5rfindEPKcmm+0x44>

0000a438 <_ZNKSs5rfindEPKcm>:
    a438:	defffc04 	addi	sp,sp,-16
    a43c:	dd400215 	stw	r21,8(sp)
    a440:	dcc00115 	stw	r19,4(sp)
    a444:	dc400015 	stw	r17,0(sp)
    a448:	2027883a 	mov	r19,r4
    a44c:	dfc00315 	stw	ra,12(sp)
    a450:	2809883a 	mov	r4,r5
    a454:	2823883a 	mov	r17,r5
    a458:	302b883a 	mov	r21,r6
    a45c:	001511c0 	call	1511c <strlen>
    a460:	880b883a 	mov	r5,r17
    a464:	9809883a 	mov	r4,r19
    a468:	a80d883a 	mov	r6,r21
    a46c:	100f883a 	mov	r7,r2
    a470:	dfc00317 	ldw	ra,12(sp)
    a474:	dd400217 	ldw	r21,8(sp)
    a478:	dcc00117 	ldw	r19,4(sp)
    a47c:	dc400017 	ldw	r17,0(sp)
    a480:	dec00404 	addi	sp,sp,16
    a484:	000a3901 	jmpi	a390 <_ZNKSs5rfindEPKcmm>

0000a488 <_ZNKSs5rfindERKSsm>:
    a488:	29400017 	ldw	r5,0(r5)
    a48c:	29fffd17 	ldw	r7,-12(r5)
    a490:	000a3901 	jmpi	a390 <_ZNKSs5rfindEPKcmm>

0000a494 <_ZNSsC2Ev>:
    a494:	008000b4 	movhi	r2,2
    a498:	108a2704 	addi	r2,r2,10396
    a49c:	20800015 	stw	r2,0(r4)
    a4a0:	f800283a 	ret

0000a4a4 <_ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_>:
    a4a4:	20c00017 	ldw	r3,0(r4)
    a4a8:	28800017 	ldw	r2,0(r5)
    a4ac:	1885003a 	cmpeq	r2,r3,r2
    a4b0:	f800283a 	ret

0000a4b4 <_ZNKSs5rfindEcm>:
    a4b4:	21000017 	ldw	r4,0(r4)
    a4b8:	3007883a 	mov	r3,r6
    a4bc:	20bffd17 	ldw	r2,-12(r4)
    a4c0:	10001226 	beq	r2,zero,a50c <_ZNKSs5rfindEcm+0x58>
    a4c4:	11bfffc4 	addi	r6,r2,-1
    a4c8:	19800e36 	bltu	r3,r6,a504 <_ZNKSs5rfindEcm+0x50>
    a4cc:	29403fcc 	andi	r5,r5,255
    a4d0:	2940201c 	xori	r5,r5,128
    a4d4:	2189883a 	add	r4,r4,r6
    a4d8:	297fe004 	addi	r5,r5,-128
    a4dc:	0007883a 	mov	r3,zero
    a4e0:	32000044 	addi	r8,r6,1
    a4e4:	30cfc83a 	sub	r7,r6,r3
    a4e8:	40c00826 	beq	r8,r3,a50c <_ZNKSs5rfindEcm+0x58>
    a4ec:	20800007 	ldb	r2,0(r4)
    a4f0:	18c00044 	addi	r3,r3,1
    a4f4:	213fffc4 	addi	r4,r4,-1
    a4f8:	117ffa1e 	bne	r2,r5,a4e4 <_ZNKSs5rfindEcm+0x30>
    a4fc:	3805883a 	mov	r2,r7
    a500:	f800283a 	ret
    a504:	180d883a 	mov	r6,r3
    a508:	003ff006 	br	a4cc <_ZNKSs5rfindEcm+0x18>
    a50c:	01ffffc4 	movi	r7,-1
    a510:	3805883a 	mov	r2,r7
    a514:	f800283a 	ret

0000a518 <_ZNKSs12find_last_ofEcm>:
    a518:	29403fcc 	andi	r5,r5,255
    a51c:	2940201c 	xori	r5,r5,128
    a520:	297fe004 	addi	r5,r5,-128
    a524:	000a4b41 	jmpi	a4b4 <_ZNKSs5rfindEcm>

0000a528 <_ZNKSs16find_last_not_ofEcm>:
    a528:	21000017 	ldw	r4,0(r4)
    a52c:	20bffd17 	ldw	r2,-12(r4)
    a530:	10001026 	beq	r2,zero,a574 <_ZNKSs16find_last_not_ofEcm+0x4c>
    a534:	10ffffc4 	addi	r3,r2,-1
    a538:	30c00c36 	bltu	r6,r3,a56c <_ZNKSs16find_last_not_ofEcm+0x44>
    a53c:	29403fcc 	andi	r5,r5,255
    a540:	2940201c 	xori	r5,r5,128
    a544:	20c9883a 	add	r4,r4,r3
    a548:	297fe004 	addi	r5,r5,-128
    a54c:	01bfffc4 	movi	r6,-1
    a550:	20800007 	ldb	r2,0(r4)
    a554:	213fffc4 	addi	r4,r4,-1
    a558:	1140021e 	bne	r2,r5,a564 <_ZNKSs16find_last_not_ofEcm+0x3c>
    a55c:	18ffffc4 	addi	r3,r3,-1
    a560:	19bffb1e 	bne	r3,r6,a550 <_ZNKSs16find_last_not_ofEcm+0x28>
    a564:	1805883a 	mov	r2,r3
    a568:	f800283a 	ret
    a56c:	3007883a 	mov	r3,r6
    a570:	003ff206 	br	a53c <_ZNKSs16find_last_not_ofEcm+0x14>
    a574:	00ffffc4 	movi	r3,-1
    a578:	1805883a 	mov	r2,r3
    a57c:	f800283a 	ret

0000a580 <_ZNKSs17find_first_not_ofEcm>:
    a580:	21000017 	ldw	r4,0(r4)
    a584:	3007883a 	mov	r3,r6
    a588:	21bffd17 	ldw	r6,-12(r4)
    a58c:	19800f2e 	bgeu	r3,r6,a5cc <_ZNKSs17find_first_not_ofEcm+0x4c>
    a590:	20c9883a 	add	r4,r4,r3
    a594:	29403fcc 	andi	r5,r5,255
    a598:	20800007 	ldb	r2,0(r4)
    a59c:	2940201c 	xori	r5,r5,128
    a5a0:	297fe004 	addi	r5,r5,-128
    a5a4:	28800a1e 	bne	r5,r2,a5d0 <_ZNKSs17find_first_not_ofEcm+0x50>
    a5a8:	30cfc83a 	sub	r7,r6,r3
    a5ac:	180d883a 	mov	r6,r3
    a5b0:	00000306 	br	a5c0 <_ZNKSs17find_first_not_ofEcm+0x40>
    a5b4:	20800047 	ldb	r2,1(r4)
    a5b8:	21000044 	addi	r4,r4,1
    a5bc:	1140061e 	bne	r2,r5,a5d8 <_ZNKSs17find_first_not_ofEcm+0x58>
    a5c0:	31800044 	addi	r6,r6,1
    a5c4:	19c5883a 	add	r2,r3,r7
    a5c8:	11bffa1e 	bne	r2,r6,a5b4 <_ZNKSs17find_first_not_ofEcm+0x34>
    a5cc:	00ffffc4 	movi	r3,-1
    a5d0:	1805883a 	mov	r2,r3
    a5d4:	f800283a 	ret
    a5d8:	3007883a 	mov	r3,r6
    a5dc:	1805883a 	mov	r2,r3
    a5e0:	f800283a 	ret

0000a5e4 <_ZNSs4_Rep9_S_createEmmRKSaIcE>:
    a5e4:	deffed04 	addi	sp,sp,-76
    a5e8:	00800074 	movhi	r2,1
    a5ec:	10b9cd04 	addi	r2,r2,-6348
    a5f0:	00c000b4 	movhi	r3,2
    a5f4:	18f8fe44 	addi	r3,r3,-7175
    a5f8:	d8800615 	stw	r2,24(sp)
    a5fc:	d9000e15 	stw	r4,56(sp)
    a600:	00800074 	movhi	r2,1
    a604:	10a9c104 	addi	r2,r2,-22780
    a608:	d809883a 	mov	r4,sp
    a60c:	d8c00715 	stw	r3,28(sp)
    a610:	d8800915 	stw	r2,36(sp)
    a614:	dfc01215 	stw	ra,72(sp)
    a618:	df001115 	stw	fp,68(sp)
    a61c:	ddc01015 	stw	r23,64(sp)
    a620:	dec00815 	stw	sp,32(sp)
    a624:	dec00a15 	stw	sp,40(sp)
    a628:	d9400f15 	stw	r5,60(sp)
    a62c:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    a630:	d8c00e17 	ldw	r3,56(sp)
    a634:	00900034 	movhi	r2,16384
    a638:	10bfff04 	addi	r2,r2,-4
    a63c:	10c02c36 	bltu	r2,r3,a6f0 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x10c>
    a640:	d9800f17 	ldw	r6,60(sp)
    a644:	d9c00e17 	ldw	r7,56(sp)
    a648:	31c0032e 	bgeu	r6,r7,a658 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
    a64c:	3189883a 	add	r4,r6,r6
    a650:	3900012e 	bgeu	r7,r4,a658 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
    a654:	d9000e15 	stw	r4,56(sp)
    a658:	d8800e17 	ldw	r2,56(sp)
    a65c:	01400344 	movi	r5,13
    a660:	00c40004 	movi	r3,4096
    a664:	1149883a 	add	r4,r2,r5
    a668:	20800404 	addi	r2,r4,16
    a66c:	18800f36 	bltu	r3,r2,a6ac <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xc8>
    a670:	00800044 	movi	r2,1
    a674:	d8800115 	stw	r2,4(sp)
    a678:	000ef4c0 	call	ef4c <_Znwm>
    a67c:	d8c00e17 	ldw	r3,56(sp)
    a680:	10000215 	stw	zero,8(r2)
    a684:	d809883a 	mov	r4,sp
    a688:	10c00115 	stw	r3,4(r2)
    a68c:	d8800d15 	stw	r2,52(sp)
    a690:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    a694:	d8800d17 	ldw	r2,52(sp)
    a698:	dfc01217 	ldw	ra,72(sp)
    a69c:	df001117 	ldw	fp,68(sp)
    a6a0:	ddc01017 	ldw	r23,64(sp)
    a6a4:	dec01304 	addi	sp,sp,76
    a6a8:	f800283a 	ret
    a6ac:	d9800f17 	ldw	r6,60(sp)
    a6b0:	d9c00e17 	ldw	r7,56(sp)
    a6b4:	31ffee2e 	bgeu	r6,r7,a670 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
    a6b8:	1083ffcc 	andi	r2,r2,4095
    a6bc:	1885c83a 	sub	r2,r3,r2
    a6c0:	388f883a 	add	r7,r7,r2
    a6c4:	01100034 	movhi	r4,16384
    a6c8:	213fff04 	addi	r4,r4,-4
    a6cc:	d9c00e15 	stw	r7,56(sp)
    a6d0:	21c00336 	bltu	r4,r7,a6e0 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xfc>
    a6d4:	d8800e17 	ldw	r2,56(sp)
    a6d8:	1149883a 	add	r4,r2,r5
    a6dc:	003fe406 	br	a670 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
    a6e0:	d9000e15 	stw	r4,56(sp)
    a6e4:	d8800e17 	ldw	r2,56(sp)
    a6e8:	1149883a 	add	r4,r2,r5
    a6ec:	003fe006 	br	a670 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
    a6f0:	00bfffc4 	movi	r2,-1
    a6f4:	010000b4 	movhi	r4,2
    a6f8:	213a5604 	addi	r4,r4,-5800
    a6fc:	d8800115 	stw	r2,4(sp)
    a700:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>
    a704:	d9000217 	ldw	r4,8(sp)
    a708:	00bfffc4 	movi	r2,-1
    a70c:	d8800115 	stw	r2,4(sp)
    a710:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

0000a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
    a714:	000e01c1 	jmpi	e01c <_ZdlPv>

0000a718 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
    a718:	defffd04 	addi	sp,sp,-12
    a71c:	dc000015 	stw	r16,0(sp)
    a720:	008000b4 	movhi	r2,2
    a724:	108a2404 	addi	r2,r2,10384
    a728:	2021883a 	mov	r16,r4
    a72c:	dc400115 	stw	r17,4(sp)
    a730:	dfc00215 	stw	ra,8(sp)
    a734:	2823883a 	mov	r17,r5
    a738:	21000204 	addi	r4,r4,8
    a73c:	017fffc4 	movi	r5,-1
    a740:	8080051e 	bne	r16,r2,a758 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x40>
    a744:	dfc00217 	ldw	ra,8(sp)
    a748:	dc400117 	ldw	r17,4(sp)
    a74c:	dc000017 	ldw	r16,0(sp)
    a750:	dec00304 	addi	sp,sp,12
    a754:	f800283a 	ret
    a758:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    a75c:	8009883a 	mov	r4,r16
    a760:	880b883a 	mov	r5,r17
    a764:	00bff716 	blt	zero,r2,a744 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x2c>
    a768:	dfc00217 	ldw	ra,8(sp)
    a76c:	dc400117 	ldw	r17,4(sp)
    a770:	dc000017 	ldw	r16,0(sp)
    a774:	dec00304 	addi	sp,sp,12
    a778:	000a7141 	jmpi	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>

0000a77c <_ZNKSs12find_last_ofEPKcmm>:
    a77c:	20800017 	ldw	r2,0(r4)
    a780:	defffb04 	addi	sp,sp,-20
    a784:	dcc00315 	stw	r19,12(sp)
    a788:	10fffd17 	ldw	r3,-12(r2)
    a78c:	dc800215 	stw	r18,8(sp)
    a790:	dc400115 	stw	r17,4(sp)
    a794:	dfc00415 	stw	ra,16(sp)
    a798:	dc000015 	stw	r16,0(sp)
    a79c:	2027883a 	mov	r19,r4
    a7a0:	2825883a 	mov	r18,r5
    a7a4:	3823883a 	mov	r17,r7
    a7a8:	18002426 	beq	r3,zero,a83c <_ZNKSs12find_last_ofEPKcmm+0xc0>
    a7ac:	38002326 	beq	r7,zero,a83c <_ZNKSs12find_last_ofEPKcmm+0xc0>
    a7b0:	1c3fffc4 	addi	r16,r3,-1
    a7b4:	3400102e 	bgeu	r6,r16,a7f8 <_ZNKSs12find_last_ofEPKcmm+0x7c>
    a7b8:	3021883a 	mov	r16,r6
    a7bc:	1405883a 	add	r2,r2,r16
    a7c0:	11400007 	ldb	r5,0(r2)
    a7c4:	9009883a 	mov	r4,r18
    a7c8:	880d883a 	mov	r6,r17
    a7cc:	0013cdc0 	call	13cdc <memchr>
    a7d0:	10000f26 	beq	r2,zero,a810 <_ZNKSs12find_last_ofEPKcmm+0x94>
    a7d4:	8005883a 	mov	r2,r16
    a7d8:	dfc00417 	ldw	ra,16(sp)
    a7dc:	dcc00317 	ldw	r19,12(sp)
    a7e0:	dc800217 	ldw	r18,8(sp)
    a7e4:	dc400117 	ldw	r17,4(sp)
    a7e8:	dc000017 	ldw	r16,0(sp)
    a7ec:	dec00504 	addi	sp,sp,20
    a7f0:	f800283a 	ret
    a7f4:	98800017 	ldw	r2,0(r19)
    a7f8:	1405883a 	add	r2,r2,r16
    a7fc:	11400007 	ldb	r5,0(r2)
    a800:	9009883a 	mov	r4,r18
    a804:	880d883a 	mov	r6,r17
    a808:	0013cdc0 	call	13cdc <memchr>
    a80c:	103ff11e 	bne	r2,zero,a7d4 <_ZNKSs12find_last_ofEPKcmm+0x58>
    a810:	843fffc4 	addi	r16,r16,-1
    a814:	00bfffc4 	movi	r2,-1
    a818:	80bff61e 	bne	r16,r2,a7f4 <_ZNKSs12find_last_ofEPKcmm+0x78>
    a81c:	8005883a 	mov	r2,r16
    a820:	dfc00417 	ldw	ra,16(sp)
    a824:	dcc00317 	ldw	r19,12(sp)
    a828:	dc800217 	ldw	r18,8(sp)
    a82c:	dc400117 	ldw	r17,4(sp)
    a830:	dc000017 	ldw	r16,0(sp)
    a834:	dec00504 	addi	sp,sp,20
    a838:	f800283a 	ret
    a83c:	043fffc4 	movi	r16,-1
    a840:	8005883a 	mov	r2,r16
    a844:	dfc00417 	ldw	ra,16(sp)
    a848:	dcc00317 	ldw	r19,12(sp)
    a84c:	dc800217 	ldw	r18,8(sp)
    a850:	dc400117 	ldw	r17,4(sp)
    a854:	dc000017 	ldw	r16,0(sp)
    a858:	dec00504 	addi	sp,sp,20
    a85c:	f800283a 	ret

0000a860 <_ZNKSs12find_last_ofERKSsm>:
    a860:	29400017 	ldw	r5,0(r5)
    a864:	29fffd17 	ldw	r7,-12(r5)
    a868:	000a77c1 	jmpi	a77c <_ZNKSs12find_last_ofEPKcmm>

0000a86c <_ZNKSs13find_first_ofEPKcmm>:
    a86c:	defffb04 	addi	sp,sp,-20
    a870:	dcc00315 	stw	r19,12(sp)
    a874:	dc800215 	stw	r18,8(sp)
    a878:	dc400115 	stw	r17,4(sp)
    a87c:	dc000015 	stw	r16,0(sp)
    a880:	dfc00415 	stw	ra,16(sp)
    a884:	3823883a 	mov	r17,r7
    a888:	2027883a 	mov	r19,r4
    a88c:	2825883a 	mov	r18,r5
    a890:	3021883a 	mov	r16,r6
    a894:	3800091e 	bne	r7,zero,a8bc <_ZNKSs13find_first_ofEPKcmm+0x50>
    a898:	043fffc4 	movi	r16,-1
    a89c:	8005883a 	mov	r2,r16
    a8a0:	dfc00417 	ldw	ra,16(sp)
    a8a4:	dcc00317 	ldw	r19,12(sp)
    a8a8:	dc800217 	ldw	r18,8(sp)
    a8ac:	dc400117 	ldw	r17,4(sp)
    a8b0:	dc000017 	ldw	r16,0(sp)
    a8b4:	dec00504 	addi	sp,sp,20
    a8b8:	f800283a 	ret
    a8bc:	20c00017 	ldw	r3,0(r4)
    a8c0:	18bffd17 	ldw	r2,-12(r3)
    a8c4:	30bff42e 	bgeu	r6,r2,a898 <_ZNKSs13find_first_ofEPKcmm+0x2c>
    a8c8:	80c5883a 	add	r2,r16,r3
    a8cc:	11400007 	ldb	r5,0(r2)
    a8d0:	9009883a 	mov	r4,r18
    a8d4:	880d883a 	mov	r6,r17
    a8d8:	0013cdc0 	call	13cdc <memchr>
    a8dc:	103fef1e 	bne	r2,zero,a89c <_ZNKSs13find_first_ofEPKcmm+0x30>
    a8e0:	98c00017 	ldw	r3,0(r19)
    a8e4:	84000044 	addi	r16,r16,1
    a8e8:	18bffd17 	ldw	r2,-12(r3)
    a8ec:	80bff636 	bltu	r16,r2,a8c8 <_ZNKSs13find_first_ofEPKcmm+0x5c>
    a8f0:	003fe906 	br	a898 <_ZNKSs13find_first_ofEPKcmm+0x2c>

0000a8f4 <_ZNKSs13find_first_ofERKSsm>:
    a8f4:	29400017 	ldw	r5,0(r5)
    a8f8:	29fffd17 	ldw	r7,-12(r5)
    a8fc:	000a86c1 	jmpi	a86c <_ZNKSs13find_first_ofEPKcmm>

0000a900 <_ZNKSs4findEcm>:
    a900:	defffe04 	addi	sp,sp,-8
    a904:	dc000015 	stw	r16,0(sp)
    a908:	24000017 	ldw	r16,0(r4)
    a90c:	29403fcc 	andi	r5,r5,255
    a910:	3007883a 	mov	r3,r6
    a914:	81fffd17 	ldw	r7,-12(r16)
    a918:	2940201c 	xori	r5,r5,128
    a91c:	8189883a 	add	r4,r16,r6
    a920:	dfc00115 	stw	ra,4(sp)
    a924:	297fe004 	addi	r5,r5,-128
    a928:	398dc83a 	sub	r6,r7,r6
    a92c:	19c0082e 	bgeu	r3,r7,a950 <_ZNKSs4findEcm+0x50>
    a930:	0013cdc0 	call	13cdc <memchr>
    a934:	1407c83a 	sub	r3,r2,r16
    a938:	10000526 	beq	r2,zero,a950 <_ZNKSs4findEcm+0x50>
    a93c:	1805883a 	mov	r2,r3
    a940:	dfc00117 	ldw	ra,4(sp)
    a944:	dc000017 	ldw	r16,0(sp)
    a948:	dec00204 	addi	sp,sp,8
    a94c:	f800283a 	ret
    a950:	00ffffc4 	movi	r3,-1
    a954:	1805883a 	mov	r2,r3
    a958:	dfc00117 	ldw	ra,4(sp)
    a95c:	dc000017 	ldw	r16,0(sp)
    a960:	dec00204 	addi	sp,sp,8
    a964:	f800283a 	ret

0000a968 <_ZNKSs13find_first_ofEcm>:
    a968:	29403fcc 	andi	r5,r5,255
    a96c:	2940201c 	xori	r5,r5,128
    a970:	297fe004 	addi	r5,r5,-128
    a974:	000a9001 	jmpi	a900 <_ZNKSs4findEcm>

0000a978 <_ZNKSs16find_last_not_ofEPKcmm>:
    a978:	20800017 	ldw	r2,0(r4)
    a97c:	defffb04 	addi	sp,sp,-20
    a980:	dcc00315 	stw	r19,12(sp)
    a984:	10fffd17 	ldw	r3,-12(r2)
    a988:	dc800215 	stw	r18,8(sp)
    a98c:	dc400115 	stw	r17,4(sp)
    a990:	dfc00415 	stw	ra,16(sp)
    a994:	dc000015 	stw	r16,0(sp)
    a998:	2027883a 	mov	r19,r4
    a99c:	2825883a 	mov	r18,r5
    a9a0:	3823883a 	mov	r17,r7
    a9a4:	18002326 	beq	r3,zero,aa34 <_ZNKSs16find_last_not_ofEPKcmm+0xbc>
    a9a8:	1c3fffc4 	addi	r16,r3,-1
    a9ac:	3400102e 	bgeu	r6,r16,a9f0 <_ZNKSs16find_last_not_ofEPKcmm+0x78>
    a9b0:	3021883a 	mov	r16,r6
    a9b4:	1405883a 	add	r2,r2,r16
    a9b8:	11400007 	ldb	r5,0(r2)
    a9bc:	9009883a 	mov	r4,r18
    a9c0:	880d883a 	mov	r6,r17
    a9c4:	0013cdc0 	call	13cdc <memchr>
    a9c8:	10000f1e 	bne	r2,zero,aa08 <_ZNKSs16find_last_not_ofEPKcmm+0x90>
    a9cc:	8005883a 	mov	r2,r16
    a9d0:	dfc00417 	ldw	ra,16(sp)
    a9d4:	dcc00317 	ldw	r19,12(sp)
    a9d8:	dc800217 	ldw	r18,8(sp)
    a9dc:	dc400117 	ldw	r17,4(sp)
    a9e0:	dc000017 	ldw	r16,0(sp)
    a9e4:	dec00504 	addi	sp,sp,20
    a9e8:	f800283a 	ret
    a9ec:	98800017 	ldw	r2,0(r19)
    a9f0:	1405883a 	add	r2,r2,r16
    a9f4:	11400007 	ldb	r5,0(r2)
    a9f8:	9009883a 	mov	r4,r18
    a9fc:	880d883a 	mov	r6,r17
    aa00:	0013cdc0 	call	13cdc <memchr>
    aa04:	103ff126 	beq	r2,zero,a9cc <_ZNKSs16find_last_not_ofEPKcmm+0x54>
    aa08:	843fffc4 	addi	r16,r16,-1
    aa0c:	00bfffc4 	movi	r2,-1
    aa10:	80bff61e 	bne	r16,r2,a9ec <_ZNKSs16find_last_not_ofEPKcmm+0x74>
    aa14:	8005883a 	mov	r2,r16
    aa18:	dfc00417 	ldw	ra,16(sp)
    aa1c:	dcc00317 	ldw	r19,12(sp)
    aa20:	dc800217 	ldw	r18,8(sp)
    aa24:	dc400117 	ldw	r17,4(sp)
    aa28:	dc000017 	ldw	r16,0(sp)
    aa2c:	dec00504 	addi	sp,sp,20
    aa30:	f800283a 	ret
    aa34:	043fffc4 	movi	r16,-1
    aa38:	8005883a 	mov	r2,r16
    aa3c:	dfc00417 	ldw	ra,16(sp)
    aa40:	dcc00317 	ldw	r19,12(sp)
    aa44:	dc800217 	ldw	r18,8(sp)
    aa48:	dc400117 	ldw	r17,4(sp)
    aa4c:	dc000017 	ldw	r16,0(sp)
    aa50:	dec00504 	addi	sp,sp,20
    aa54:	f800283a 	ret

0000aa58 <_ZNKSs16find_last_not_ofERKSsm>:
    aa58:	29400017 	ldw	r5,0(r5)
    aa5c:	29fffd17 	ldw	r7,-12(r5)
    aa60:	000a9781 	jmpi	a978 <_ZNKSs16find_last_not_ofEPKcmm>

0000aa64 <_ZNKSs7compareERKSs>:
    aa64:	20800017 	ldw	r2,0(r4)
    aa68:	28c00017 	ldw	r3,0(r5)
    aa6c:	defffb04 	addi	sp,sp,-20
    aa70:	dc400315 	stw	r17,12(sp)
    aa74:	dc000215 	stw	r16,8(sp)
    aa78:	147ffd17 	ldw	r17,-12(r2)
    aa7c:	1c3ffd17 	ldw	r16,-12(r3)
    aa80:	dfc00415 	stw	ra,16(sp)
    aa84:	d80d883a 	mov	r6,sp
    aa88:	dc400015 	stw	r17,0(sp)
    aa8c:	dc000115 	stw	r16,4(sp)
    aa90:	8440012e 	bgeu	r16,r17,aa98 <_ZNKSs7compareERKSs+0x34>
    aa94:	d9800104 	addi	r6,sp,4
    aa98:	21000017 	ldw	r4,0(r4)
    aa9c:	29400017 	ldw	r5,0(r5)
    aaa0:	31800017 	ldw	r6,0(r6)
    aaa4:	0013dc00 	call	13dc0 <memcmp>
    aaa8:	1000011e 	bne	r2,zero,aab0 <_ZNKSs7compareERKSs+0x4c>
    aaac:	8c05c83a 	sub	r2,r17,r16
    aab0:	dfc00417 	ldw	ra,16(sp)
    aab4:	dc400317 	ldw	r17,12(sp)
    aab8:	dc000217 	ldw	r16,8(sp)
    aabc:	dec00504 	addi	sp,sp,20
    aac0:	f800283a 	ret

0000aac4 <_ZNKSs4findEPKcm>:
    aac4:	defffc04 	addi	sp,sp,-16
    aac8:	dd400215 	stw	r21,8(sp)
    aacc:	dcc00115 	stw	r19,4(sp)
    aad0:	dc400015 	stw	r17,0(sp)
    aad4:	2027883a 	mov	r19,r4
    aad8:	dfc00315 	stw	ra,12(sp)
    aadc:	2809883a 	mov	r4,r5
    aae0:	2823883a 	mov	r17,r5
    aae4:	302b883a 	mov	r21,r6
    aae8:	001511c0 	call	1511c <strlen>
    aaec:	880b883a 	mov	r5,r17
    aaf0:	9809883a 	mov	r4,r19
    aaf4:	a80d883a 	mov	r6,r21
    aaf8:	100f883a 	mov	r7,r2
    aafc:	dfc00317 	ldw	ra,12(sp)
    ab00:	dd400217 	ldw	r21,8(sp)
    ab04:	dcc00117 	ldw	r19,4(sp)
    ab08:	dc400017 	ldw	r17,0(sp)
    ab0c:	dec00404 	addi	sp,sp,16
    ab10:	000a2981 	jmpi	a298 <_ZNKSs4findEPKcmm>

0000ab14 <_ZNKSs7compareEPKc>:
    ab14:	20800017 	ldw	r2,0(r4)
    ab18:	defff904 	addi	sp,sp,-28
    ab1c:	dc400315 	stw	r17,12(sp)
    ab20:	147ffd17 	ldw	r17,-12(r2)
    ab24:	dcc00515 	stw	r19,20(sp)
    ab28:	dc800415 	stw	r18,16(sp)
    ab2c:	dc000215 	stw	r16,8(sp)
    ab30:	dfc00615 	stw	ra,24(sp)
    ab34:	2025883a 	mov	r18,r4
    ab38:	dc400015 	stw	r17,0(sp)
    ab3c:	2809883a 	mov	r4,r5
    ab40:	2827883a 	mov	r19,r5
    ab44:	001511c0 	call	1511c <strlen>
    ab48:	1021883a 	mov	r16,r2
    ab4c:	d80d883a 	mov	r6,sp
    ab50:	d8800115 	stw	r2,4(sp)
    ab54:	1440012e 	bgeu	r2,r17,ab5c <_ZNKSs7compareEPKc+0x48>
    ab58:	d9800104 	addi	r6,sp,4
    ab5c:	91000017 	ldw	r4,0(r18)
    ab60:	31800017 	ldw	r6,0(r6)
    ab64:	980b883a 	mov	r5,r19
    ab68:	0013dc00 	call	13dc0 <memcmp>
    ab6c:	1000011e 	bne	r2,zero,ab74 <_ZNKSs7compareEPKc+0x60>
    ab70:	8c05c83a 	sub	r2,r17,r16
    ab74:	dfc00617 	ldw	ra,24(sp)
    ab78:	dcc00517 	ldw	r19,20(sp)
    ab7c:	dc800417 	ldw	r18,16(sp)
    ab80:	dc400317 	ldw	r17,12(sp)
    ab84:	dc000217 	ldw	r16,8(sp)
    ab88:	dec00704 	addi	sp,sp,28
    ab8c:	f800283a 	ret

0000ab90 <_ZNKSs16find_last_not_ofEPKcm>:
    ab90:	defffc04 	addi	sp,sp,-16
    ab94:	dd400215 	stw	r21,8(sp)
    ab98:	dcc00115 	stw	r19,4(sp)
    ab9c:	dc400015 	stw	r17,0(sp)
    aba0:	2027883a 	mov	r19,r4
    aba4:	dfc00315 	stw	ra,12(sp)
    aba8:	2809883a 	mov	r4,r5
    abac:	2823883a 	mov	r17,r5
    abb0:	302b883a 	mov	r21,r6
    abb4:	001511c0 	call	1511c <strlen>
    abb8:	880b883a 	mov	r5,r17
    abbc:	9809883a 	mov	r4,r19
    abc0:	a80d883a 	mov	r6,r21
    abc4:	100f883a 	mov	r7,r2
    abc8:	dfc00317 	ldw	ra,12(sp)
    abcc:	dd400217 	ldw	r21,8(sp)
    abd0:	dcc00117 	ldw	r19,4(sp)
    abd4:	dc400017 	ldw	r17,0(sp)
    abd8:	dec00404 	addi	sp,sp,16
    abdc:	000a9781 	jmpi	a978 <_ZNKSs16find_last_not_ofEPKcmm>

0000abe0 <_ZNKSs17find_first_not_ofEPKcm>:
    abe0:	defffc04 	addi	sp,sp,-16
    abe4:	dd400215 	stw	r21,8(sp)
    abe8:	dcc00115 	stw	r19,4(sp)
    abec:	dc400015 	stw	r17,0(sp)
    abf0:	2027883a 	mov	r19,r4
    abf4:	dfc00315 	stw	ra,12(sp)
    abf8:	2809883a 	mov	r4,r5
    abfc:	2823883a 	mov	r17,r5
    ac00:	302b883a 	mov	r21,r6
    ac04:	001511c0 	call	1511c <strlen>
    ac08:	880b883a 	mov	r5,r17
    ac0c:	9809883a 	mov	r4,r19
    ac10:	a80d883a 	mov	r6,r21
    ac14:	100f883a 	mov	r7,r2
    ac18:	dfc00317 	ldw	ra,12(sp)
    ac1c:	dd400217 	ldw	r21,8(sp)
    ac20:	dcc00117 	ldw	r19,4(sp)
    ac24:	dc400017 	ldw	r17,0(sp)
    ac28:	dec00404 	addi	sp,sp,16
    ac2c:	000a1f41 	jmpi	a1f4 <_ZNKSs17find_first_not_ofEPKcmm>

0000ac30 <_ZNKSs12find_last_ofEPKcm>:
    ac30:	defffc04 	addi	sp,sp,-16
    ac34:	dd400215 	stw	r21,8(sp)
    ac38:	dcc00115 	stw	r19,4(sp)
    ac3c:	dc400015 	stw	r17,0(sp)
    ac40:	2027883a 	mov	r19,r4
    ac44:	dfc00315 	stw	ra,12(sp)
    ac48:	2809883a 	mov	r4,r5
    ac4c:	2823883a 	mov	r17,r5
    ac50:	302b883a 	mov	r21,r6
    ac54:	001511c0 	call	1511c <strlen>
    ac58:	880b883a 	mov	r5,r17
    ac5c:	9809883a 	mov	r4,r19
    ac60:	a80d883a 	mov	r6,r21
    ac64:	100f883a 	mov	r7,r2
    ac68:	dfc00317 	ldw	ra,12(sp)
    ac6c:	dd400217 	ldw	r21,8(sp)
    ac70:	dcc00117 	ldw	r19,4(sp)
    ac74:	dc400017 	ldw	r17,0(sp)
    ac78:	dec00404 	addi	sp,sp,16
    ac7c:	000a77c1 	jmpi	a77c <_ZNKSs12find_last_ofEPKcmm>

0000ac80 <_ZNKSs13find_first_ofEPKcm>:
    ac80:	defffc04 	addi	sp,sp,-16
    ac84:	dd400215 	stw	r21,8(sp)
    ac88:	dcc00115 	stw	r19,4(sp)
    ac8c:	dc400015 	stw	r17,0(sp)
    ac90:	2027883a 	mov	r19,r4
    ac94:	dfc00315 	stw	ra,12(sp)
    ac98:	2809883a 	mov	r4,r5
    ac9c:	2823883a 	mov	r17,r5
    aca0:	302b883a 	mov	r21,r6
    aca4:	001511c0 	call	1511c <strlen>
    aca8:	880b883a 	mov	r5,r17
    acac:	9809883a 	mov	r4,r19
    acb0:	a80d883a 	mov	r6,r21
    acb4:	100f883a 	mov	r7,r2
    acb8:	dfc00317 	ldw	ra,12(sp)
    acbc:	dd400217 	ldw	r21,8(sp)
    acc0:	dcc00117 	ldw	r19,4(sp)
    acc4:	dc400017 	ldw	r17,0(sp)
    acc8:	dec00404 	addi	sp,sp,16
    accc:	000a86c1 	jmpi	a86c <_ZNKSs13find_first_ofEPKcmm>

0000acd0 <_ZNKSs4rendEv>:
    acd0:	28c00017 	ldw	r3,0(r5)
    acd4:	2005883a 	mov	r2,r4
    acd8:	20c00015 	stw	r3,0(r4)
    acdc:	f800283a 	ret

0000ace0 <_ZNKSs6rbeginEv>:
    ace0:	28c00017 	ldw	r3,0(r5)
    ace4:	2005883a 	mov	r2,r4
    ace8:	197ffd17 	ldw	r5,-12(r3)
    acec:	1947883a 	add	r3,r3,r5
    acf0:	20c00015 	stw	r3,0(r4)
    acf4:	f800283a 	ret

0000acf8 <_ZNSs12_S_constructEmcRKSaIcE>:
    acf8:	defffb04 	addi	sp,sp,-20
    acfc:	dcc00315 	stw	r19,12(sp)
    ad00:	dc400115 	stw	r17,4(sp)
    ad04:	dc000015 	stw	r16,0(sp)
    ad08:	2823883a 	mov	r17,r5
    ad0c:	dfc00415 	stw	ra,16(sp)
    ad10:	dc800215 	stw	r18,8(sp)
    ad14:	2021883a 	mov	r16,r4
    ad18:	04c000b4 	movhi	r19,2
    ad1c:	9cca2704 	addi	r19,r19,10396
    ad20:	000b883a 	mov	r5,zero
    ad24:	2000081e 	bne	r4,zero,ad48 <_ZNSs12_S_constructEmcRKSaIcE+0x50>
    ad28:	9805883a 	mov	r2,r19
    ad2c:	dfc00417 	ldw	ra,16(sp)
    ad30:	dcc00317 	ldw	r19,12(sp)
    ad34:	dc800217 	ldw	r18,8(sp)
    ad38:	dc400117 	ldw	r17,4(sp)
    ad3c:	dc000017 	ldw	r16,0(sp)
    ad40:	dec00504 	addi	sp,sp,20
    ad44:	f800283a 	ret
    ad48:	000a5e40 	call	a5e4 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    ad4c:	88c03fcc 	andi	r3,r17,255
    ad50:	18c0201c 	xori	r3,r3,128
    ad54:	18ffe004 	addi	r3,r3,-128
    ad58:	19403fcc 	andi	r5,r3,255
    ad5c:	14c00304 	addi	r19,r2,12
    ad60:	1025883a 	mov	r18,r2
    ad64:	2940201c 	xori	r5,r5,128
    ad68:	00800044 	movi	r2,1
    ad6c:	800d883a 	mov	r6,r16
    ad70:	9809883a 	mov	r4,r19
    ad74:	297fe004 	addi	r5,r5,-128
    ad78:	80800d26 	beq	r16,r2,adb0 <_ZNSs12_S_constructEmcRKSaIcE+0xb8>
    ad7c:	0013fb40 	call	13fb4 <memset>
    ad80:	84c5883a 	add	r2,r16,r19
    ad84:	94000015 	stw	r16,0(r18)
    ad88:	90000215 	stw	zero,8(r18)
    ad8c:	10000005 	stb	zero,0(r2)
    ad90:	9805883a 	mov	r2,r19
    ad94:	dfc00417 	ldw	ra,16(sp)
    ad98:	dcc00317 	ldw	r19,12(sp)
    ad9c:	dc800217 	ldw	r18,8(sp)
    ada0:	dc400117 	ldw	r17,4(sp)
    ada4:	dc000017 	ldw	r16,0(sp)
    ada8:	dec00504 	addi	sp,sp,20
    adac:	f800283a 	ret
    adb0:	98c00005 	stb	r3,0(r19)
    adb4:	003ff206 	br	ad80 <_ZNSs12_S_constructEmcRKSaIcE+0x88>

0000adb8 <_ZNSsC1EmcRKSaIcE>:
    adb8:	defffe04 	addi	sp,sp,-8
    adbc:	dc400015 	stw	r17,0(sp)
    adc0:	2023883a 	mov	r17,r4
    adc4:	2809883a 	mov	r4,r5
    adc8:	31403fcc 	andi	r5,r6,255
    adcc:	2940201c 	xori	r5,r5,128
    add0:	297fe004 	addi	r5,r5,-128
    add4:	380d883a 	mov	r6,r7
    add8:	dfc00115 	stw	ra,4(sp)
    addc:	000acf80 	call	acf8 <_ZNSs12_S_constructEmcRKSaIcE>
    ade0:	88800015 	stw	r2,0(r17)
    ade4:	dfc00117 	ldw	ra,4(sp)
    ade8:	dc400017 	ldw	r17,0(sp)
    adec:	dec00204 	addi	sp,sp,8
    adf0:	f800283a 	ret

0000adf4 <_ZNSsC2EmcRKSaIcE>:
    adf4:	defffe04 	addi	sp,sp,-8
    adf8:	dc400015 	stw	r17,0(sp)
    adfc:	2023883a 	mov	r17,r4
    ae00:	2809883a 	mov	r4,r5
    ae04:	31403fcc 	andi	r5,r6,255
    ae08:	2940201c 	xori	r5,r5,128
    ae0c:	297fe004 	addi	r5,r5,-128
    ae10:	380d883a 	mov	r6,r7
    ae14:	dfc00115 	stw	ra,4(sp)
    ae18:	000acf80 	call	acf8 <_ZNSs12_S_constructEmcRKSaIcE>
    ae1c:	88800015 	stw	r2,0(r17)
    ae20:	dfc00117 	ldw	ra,4(sp)
    ae24:	dc400017 	ldw	r17,0(sp)
    ae28:	dec00204 	addi	sp,sp,8
    ae2c:	f800283a 	ret

0000ae30 <_ZNSsC1ERKSaIcE>:
    ae30:	defffe04 	addi	sp,sp,-8
    ae34:	dc400015 	stw	r17,0(sp)
    ae38:	280d883a 	mov	r6,r5
    ae3c:	2023883a 	mov	r17,r4
    ae40:	000b883a 	mov	r5,zero
    ae44:	0009883a 	mov	r4,zero
    ae48:	dfc00115 	stw	ra,4(sp)
    ae4c:	000acf80 	call	acf8 <_ZNSs12_S_constructEmcRKSaIcE>
    ae50:	88800015 	stw	r2,0(r17)
    ae54:	dfc00117 	ldw	ra,4(sp)
    ae58:	dc400017 	ldw	r17,0(sp)
    ae5c:	dec00204 	addi	sp,sp,8
    ae60:	f800283a 	ret

0000ae64 <_ZNSsC2ERKSaIcE>:
    ae64:	defffe04 	addi	sp,sp,-8
    ae68:	dc400015 	stw	r17,0(sp)
    ae6c:	280d883a 	mov	r6,r5
    ae70:	2023883a 	mov	r17,r4
    ae74:	000b883a 	mov	r5,zero
    ae78:	0009883a 	mov	r4,zero
    ae7c:	dfc00115 	stw	ra,4(sp)
    ae80:	000acf80 	call	acf8 <_ZNSs12_S_constructEmcRKSaIcE>
    ae84:	88800015 	stw	r2,0(r17)
    ae88:	dfc00117 	ldw	ra,4(sp)
    ae8c:	dc400017 	ldw	r17,0(sp)
    ae90:	dec00204 	addi	sp,sp,8
    ae94:	f800283a 	ret

0000ae98 <_ZNKSs7compareEmmPKcm>:
    ae98:	21000017 	ldw	r4,0(r4)
    ae9c:	defffc04 	addi	sp,sp,-16
    aea0:	d9800015 	stw	r6,0(sp)
    aea4:	20bffd17 	ldw	r2,-12(r4)
    aea8:	dfc00315 	stw	ra,12(sp)
    aeac:	dc400215 	stw	r17,8(sp)
    aeb0:	dc000115 	stw	r16,4(sp)
    aeb4:	11401936 	bltu	r2,r5,af1c <_ZNKSs7compareEmmPKcm+0x84>
    aeb8:	dc000017 	ldw	r16,0(sp)
    aebc:	1145c83a 	sub	r2,r2,r5
    aec0:	14001136 	bltu	r2,r16,af08 <_ZNKSs7compareEmmPKcm+0x70>
    aec4:	dc400417 	ldw	r17,16(sp)
    aec8:	dc000015 	stw	r16,0(sp)
    aecc:	8c000c36 	bltu	r17,r16,af00 <_ZNKSs7compareEmmPKcm+0x68>
    aed0:	d80d883a 	mov	r6,sp
    aed4:	31800017 	ldw	r6,0(r6)
    aed8:	2149883a 	add	r4,r4,r5
    aedc:	380b883a 	mov	r5,r7
    aee0:	0013dc00 	call	13dc0 <memcmp>
    aee4:	1000011e 	bne	r2,zero,aeec <_ZNKSs7compareEmmPKcm+0x54>
    aee8:	8445c83a 	sub	r2,r16,r17
    aeec:	dfc00317 	ldw	ra,12(sp)
    aef0:	dc400217 	ldw	r17,8(sp)
    aef4:	dc000117 	ldw	r16,4(sp)
    aef8:	dec00404 	addi	sp,sp,16
    aefc:	f800283a 	ret
    af00:	d9800404 	addi	r6,sp,16
    af04:	003ff306 	br	aed4 <_ZNKSs7compareEmmPKcm+0x3c>
    af08:	dc400417 	ldw	r17,16(sp)
    af0c:	1021883a 	mov	r16,r2
    af10:	dc000015 	stw	r16,0(sp)
    af14:	8c3ffa36 	bltu	r17,r16,af00 <_ZNKSs7compareEmmPKcm+0x68>
    af18:	003fed06 	br	aed0 <_ZNKSs7compareEmmPKcm+0x38>
    af1c:	010000b4 	movhi	r4,2
    af20:	213a5c04 	addi	r4,r4,-5776
    af24:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000af28 <_ZNKSs7compareEmmPKc>:
    af28:	defff804 	addi	sp,sp,-32
    af2c:	dd000615 	stw	r20,24(sp)
    af30:	25000017 	ldw	r20,0(r4)
    af34:	d9800115 	stw	r6,4(sp)
    af38:	dcc00515 	stw	r19,20(sp)
    af3c:	a0bffd17 	ldw	r2,-12(r20)
    af40:	dc800415 	stw	r18,16(sp)
    af44:	dfc00715 	stw	ra,28(sp)
    af48:	dc400315 	stw	r17,12(sp)
    af4c:	dc000215 	stw	r16,8(sp)
    af50:	2825883a 	mov	r18,r5
    af54:	3827883a 	mov	r19,r7
    af58:	11402236 	bltu	r2,r5,afe4 <_ZNKSs7compareEmmPKc+0xbc>
    af5c:	1145c83a 	sub	r2,r2,r5
    af60:	3023883a 	mov	r17,r6
    af64:	11801736 	bltu	r2,r6,afc4 <_ZNKSs7compareEmmPKc+0x9c>
    af68:	dc400115 	stw	r17,4(sp)
    af6c:	9809883a 	mov	r4,r19
    af70:	001511c0 	call	1511c <strlen>
    af74:	1021883a 	mov	r16,r2
    af78:	d8800015 	stw	r2,0(sp)
    af7c:	14400f36 	bltu	r2,r17,afbc <_ZNKSs7compareEmmPKc+0x94>
    af80:	d9800104 	addi	r6,sp,4
    af84:	31800017 	ldw	r6,0(r6)
    af88:	a489883a 	add	r4,r20,r18
    af8c:	980b883a 	mov	r5,r19
    af90:	0013dc00 	call	13dc0 <memcmp>
    af94:	1000011e 	bne	r2,zero,af9c <_ZNKSs7compareEmmPKc+0x74>
    af98:	8c05c83a 	sub	r2,r17,r16
    af9c:	dfc00717 	ldw	ra,28(sp)
    afa0:	dd000617 	ldw	r20,24(sp)
    afa4:	dcc00517 	ldw	r19,20(sp)
    afa8:	dc800417 	ldw	r18,16(sp)
    afac:	dc400317 	ldw	r17,12(sp)
    afb0:	dc000217 	ldw	r16,8(sp)
    afb4:	dec00804 	addi	sp,sp,32
    afb8:	f800283a 	ret
    afbc:	d80d883a 	mov	r6,sp
    afc0:	003ff006 	br	af84 <_ZNKSs7compareEmmPKc+0x5c>
    afc4:	1023883a 	mov	r17,r2
    afc8:	dc400115 	stw	r17,4(sp)
    afcc:	9809883a 	mov	r4,r19
    afd0:	001511c0 	call	1511c <strlen>
    afd4:	1021883a 	mov	r16,r2
    afd8:	d8800015 	stw	r2,0(sp)
    afdc:	147ff736 	bltu	r2,r17,afbc <_ZNKSs7compareEmmPKc+0x94>
    afe0:	003fe706 	br	af80 <_ZNKSs7compareEmmPKc+0x58>
    afe4:	010000b4 	movhi	r4,2
    afe8:	213a5c04 	addi	r4,r4,-5776
    afec:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000aff0 <_ZNKSs7compareEmmRKSsmm>:
    aff0:	21000017 	ldw	r4,0(r4)
    aff4:	defffc04 	addi	sp,sp,-16
    aff8:	d9800015 	stw	r6,0(sp)
    affc:	20bffd17 	ldw	r2,-12(r4)
    b000:	dfc00315 	stw	ra,12(sp)
    b004:	dc400215 	stw	r17,8(sp)
    b008:	dc000115 	stw	r16,4(sp)
    b00c:	da000417 	ldw	r8,16(sp)
    b010:	11402436 	bltu	r2,r5,b0a4 <_ZNKSs7compareEmmRKSsmm+0xb4>
    b014:	39c00017 	ldw	r7,0(r7)
    b018:	38fffd17 	ldw	r3,-12(r7)
    b01c:	1a002136 	bltu	r3,r8,b0a4 <_ZNKSs7compareEmmRKSsmm+0xb4>
    b020:	dc400017 	ldw	r17,0(sp)
    b024:	1145c83a 	sub	r2,r2,r5
    b028:	14401836 	bltu	r2,r17,b08c <_ZNKSs7compareEmmRKSsmm+0x9c>
    b02c:	dc000517 	ldw	r16,20(sp)
    b030:	1a05c83a 	sub	r2,r3,r8
    b034:	dc400015 	stw	r17,0(sp)
    b038:	14001036 	bltu	r2,r16,b07c <_ZNKSs7compareEmmRKSsmm+0x8c>
    b03c:	dc000515 	stw	r16,20(sp)
    b040:	84400c36 	bltu	r16,r17,b074 <_ZNKSs7compareEmmRKSsmm+0x84>
    b044:	d80d883a 	mov	r6,sp
    b048:	31800017 	ldw	r6,0(r6)
    b04c:	2149883a 	add	r4,r4,r5
    b050:	3a0b883a 	add	r5,r7,r8
    b054:	0013dc00 	call	13dc0 <memcmp>
    b058:	1000011e 	bne	r2,zero,b060 <_ZNKSs7compareEmmRKSsmm+0x70>
    b05c:	8c05c83a 	sub	r2,r17,r16
    b060:	dfc00317 	ldw	ra,12(sp)
    b064:	dc400217 	ldw	r17,8(sp)
    b068:	dc000117 	ldw	r16,4(sp)
    b06c:	dec00404 	addi	sp,sp,16
    b070:	f800283a 	ret
    b074:	d9800504 	addi	r6,sp,20
    b078:	003ff306 	br	b048 <_ZNKSs7compareEmmRKSsmm+0x58>
    b07c:	1021883a 	mov	r16,r2
    b080:	dc000515 	stw	r16,20(sp)
    b084:	847ffb36 	bltu	r16,r17,b074 <_ZNKSs7compareEmmRKSsmm+0x84>
    b088:	003fee06 	br	b044 <_ZNKSs7compareEmmRKSsmm+0x54>
    b08c:	dc000517 	ldw	r16,20(sp)
    b090:	1023883a 	mov	r17,r2
    b094:	1a05c83a 	sub	r2,r3,r8
    b098:	dc400015 	stw	r17,0(sp)
    b09c:	143fe72e 	bgeu	r2,r16,b03c <_ZNKSs7compareEmmRKSsmm+0x4c>
    b0a0:	003ff606 	br	b07c <_ZNKSs7compareEmmRKSsmm+0x8c>
    b0a4:	010000b4 	movhi	r4,2
    b0a8:	213a5c04 	addi	r4,r4,-5776
    b0ac:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000b0b0 <_ZNKSs7compareEmmRKSs>:
    b0b0:	21000017 	ldw	r4,0(r4)
    b0b4:	defffb04 	addi	sp,sp,-20
    b0b8:	d9800115 	stw	r6,4(sp)
    b0bc:	20bffd17 	ldw	r2,-12(r4)
    b0c0:	dfc00415 	stw	ra,16(sp)
    b0c4:	dc400315 	stw	r17,12(sp)
    b0c8:	dc000215 	stw	r16,8(sp)
    b0cc:	11401d36 	bltu	r2,r5,b144 <_ZNKSs7compareEmmRKSs+0x94>
    b0d0:	1145c83a 	sub	r2,r2,r5
    b0d4:	3021883a 	mov	r16,r6
    b0d8:	11801336 	bltu	r2,r6,b128 <_ZNKSs7compareEmmRKSs+0x78>
    b0dc:	38800017 	ldw	r2,0(r7)
    b0e0:	dc000115 	stw	r16,4(sp)
    b0e4:	147ffd17 	ldw	r17,-12(r2)
    b0e8:	dc400015 	stw	r17,0(sp)
    b0ec:	8c000c36 	bltu	r17,r16,b120 <_ZNKSs7compareEmmRKSs+0x70>
    b0f0:	d9800104 	addi	r6,sp,4
    b0f4:	31800017 	ldw	r6,0(r6)
    b0f8:	2149883a 	add	r4,r4,r5
    b0fc:	100b883a 	mov	r5,r2
    b100:	0013dc00 	call	13dc0 <memcmp>
    b104:	1000011e 	bne	r2,zero,b10c <_ZNKSs7compareEmmRKSs+0x5c>
    b108:	8445c83a 	sub	r2,r16,r17
    b10c:	dfc00417 	ldw	ra,16(sp)
    b110:	dc400317 	ldw	r17,12(sp)
    b114:	dc000217 	ldw	r16,8(sp)
    b118:	dec00504 	addi	sp,sp,20
    b11c:	f800283a 	ret
    b120:	d80d883a 	mov	r6,sp
    b124:	003ff306 	br	b0f4 <_ZNKSs7compareEmmRKSs+0x44>
    b128:	1021883a 	mov	r16,r2
    b12c:	38800017 	ldw	r2,0(r7)
    b130:	dc000115 	stw	r16,4(sp)
    b134:	147ffd17 	ldw	r17,-12(r2)
    b138:	dc400015 	stw	r17,0(sp)
    b13c:	8c3ff836 	bltu	r17,r16,b120 <_ZNKSs7compareEmmRKSs+0x70>
    b140:	003feb06 	br	b0f0 <_ZNKSs7compareEmmRKSs+0x40>
    b144:	010000b4 	movhi	r4,2
    b148:	213a5c04 	addi	r4,r4,-5776
    b14c:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000b150 <_ZNSs4_Rep8_M_cloneERKSaIcEm>:
    b150:	defffc04 	addi	sp,sp,-16
    b154:	dc000015 	stw	r16,0(sp)
    b158:	2021883a 	mov	r16,r4
    b15c:	21000017 	ldw	r4,0(r4)
    b160:	2807883a 	mov	r3,r5
    b164:	81400117 	ldw	r5,4(r16)
    b168:	3109883a 	add	r4,r6,r4
    b16c:	180d883a 	mov	r6,r3
    b170:	dc800215 	stw	r18,8(sp)
    b174:	dc400115 	stw	r17,4(sp)
    b178:	dfc00315 	stw	ra,12(sp)
    b17c:	000a5e40 	call	a5e4 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    b180:	80c00017 	ldw	r3,0(r16)
    b184:	1023883a 	mov	r17,r2
    b188:	14800304 	addi	r18,r2,12
    b18c:	18000826 	beq	r3,zero,b1b0 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>
    b190:	14800304 	addi	r18,r2,12
    b194:	00800044 	movi	r2,1
    b198:	180d883a 	mov	r6,r3
    b19c:	9009883a 	mov	r4,r18
    b1a0:	81400304 	addi	r5,r16,12
    b1a4:	18800d26 	beq	r3,r2,b1dc <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x8c>
    b1a8:	0013e340 	call	13e34 <memcpy>
    b1ac:	80c00017 	ldw	r3,0(r16)
    b1b0:	88c00015 	stw	r3,0(r17)
    b1b4:	88000215 	stw	zero,8(r17)
    b1b8:	1c87883a 	add	r3,r3,r18
    b1bc:	9005883a 	mov	r2,r18
    b1c0:	18000005 	stb	zero,0(r3)
    b1c4:	dfc00317 	ldw	ra,12(sp)
    b1c8:	dc800217 	ldw	r18,8(sp)
    b1cc:	dc400117 	ldw	r17,4(sp)
    b1d0:	dc000017 	ldw	r16,0(sp)
    b1d4:	dec00404 	addi	sp,sp,16
    b1d8:	f800283a 	ret
    b1dc:	80800303 	ldbu	r2,12(r16)
    b1e0:	88800305 	stb	r2,12(r17)
    b1e4:	80c00017 	ldw	r3,0(r16)
    b1e8:	003ff106 	br	b1b0 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>

0000b1ec <_ZNSs4_Rep7_M_grabERKSaIcES2_>:
    b1ec:	deffed04 	addi	sp,sp,-76
    b1f0:	00800074 	movhi	r2,1
    b1f4:	10b9cd04 	addi	r2,r2,-6348
    b1f8:	00c000b4 	movhi	r3,2
    b1fc:	18f90004 	addi	r3,r3,-7168
    b200:	d8800615 	stw	r2,24(sp)
    b204:	d9000e15 	stw	r4,56(sp)
    b208:	00800074 	movhi	r2,1
    b20c:	10acb304 	addi	r2,r2,-19764
    b210:	d809883a 	mov	r4,sp
    b214:	d8c00715 	stw	r3,28(sp)
    b218:	d8800915 	stw	r2,36(sp)
    b21c:	dfc01215 	stw	ra,72(sp)
    b220:	df001115 	stw	fp,68(sp)
    b224:	ddc01015 	stw	r23,64(sp)
    b228:	dec00815 	stw	sp,32(sp)
    b22c:	dec00a15 	stw	sp,40(sp)
    b230:	d9400f15 	stw	r5,60(sp)
    b234:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    b238:	d8c00e17 	ldw	r3,56(sp)
    b23c:	18800217 	ldw	r2,8(r3)
    b240:	10000e16 	blt	r2,zero,b27c <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x90>
    b244:	008000b4 	movhi	r2,2
    b248:	108a2404 	addi	r2,r2,10384
    b24c:	18801a1e 	bne	r3,r2,b2b8 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xcc>
    b250:	d8800e17 	ldw	r2,56(sp)
    b254:	d809883a 	mov	r4,sp
    b258:	10800304 	addi	r2,r2,12
    b25c:	d8800d15 	stw	r2,52(sp)
    b260:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    b264:	d8800d17 	ldw	r2,52(sp)
    b268:	dfc01217 	ldw	ra,72(sp)
    b26c:	df001117 	ldw	fp,68(sp)
    b270:	ddc01017 	ldw	r23,64(sp)
    b274:	dec01304 	addi	sp,sp,76
    b278:	f800283a 	ret
    b27c:	d9000e17 	ldw	r4,56(sp)
    b280:	d9400f17 	ldw	r5,60(sp)
    b284:	000d883a 	mov	r6,zero
    b288:	00bfffc4 	movi	r2,-1
    b28c:	d8800115 	stw	r2,4(sp)
    b290:	000b1500 	call	b150 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    b294:	d809883a 	mov	r4,sp
    b298:	d8800d15 	stw	r2,52(sp)
    b29c:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    b2a0:	d8800d17 	ldw	r2,52(sp)
    b2a4:	dfc01217 	ldw	ra,72(sp)
    b2a8:	df001117 	ldw	fp,68(sp)
    b2ac:	ddc01017 	ldw	r23,64(sp)
    b2b0:	dec01304 	addi	sp,sp,76
    b2b4:	f800283a 	ret
    b2b8:	01400044 	movi	r5,1
    b2bc:	d9400115 	stw	r5,4(sp)
    b2c0:	19000204 	addi	r4,r3,8
    b2c4:	000dc980 	call	dc98 <_ZN9__gnu_cxx12__atomic_addEPVii>
    b2c8:	003fe106 	br	b250 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x64>
    b2cc:	d8800317 	ldw	r2,12(sp)
    b2d0:	00ffffc4 	movi	r3,-1
    b2d4:	d9000217 	ldw	r4,8(sp)
    b2d8:	10c00226 	beq	r2,r3,b2e4 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xf8>
    b2dc:	d8c00115 	stw	r3,4(sp)
    b2e0:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    b2e4:	00bfffc4 	movi	r2,-1
    b2e8:	d8800115 	stw	r2,4(sp)
    b2ec:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

0000b2f0 <_ZNKSs4copyEPcmm>:
    b2f0:	21000017 	ldw	r4,0(r4)
    b2f4:	defffe04 	addi	sp,sp,-8
    b2f8:	dfc00115 	stw	ra,4(sp)
    b2fc:	20fffd17 	ldw	r3,-12(r4)
    b300:	dc000015 	stw	r16,0(sp)
    b304:	2811883a 	mov	r8,r5
    b308:	19c01836 	bltu	r3,r7,b36c <_ZNKSs4copyEPcmm+0x7c>
    b30c:	19c5c83a 	sub	r2,r3,r7
    b310:	3021883a 	mov	r16,r6
    b314:	11800c36 	bltu	r2,r6,b348 <_ZNKSs4copyEPcmm+0x58>
    b318:	80000626 	beq	r16,zero,b334 <_ZNKSs4copyEPcmm+0x44>
    b31c:	00800044 	movi	r2,1
    b320:	21cb883a 	add	r5,r4,r7
    b324:	80800a26 	beq	r16,r2,b350 <_ZNKSs4copyEPcmm+0x60>
    b328:	4009883a 	mov	r4,r8
    b32c:	800d883a 	mov	r6,r16
    b330:	0013e340 	call	13e34 <memcpy>
    b334:	8005883a 	mov	r2,r16
    b338:	dfc00117 	ldw	ra,4(sp)
    b33c:	dc000017 	ldw	r16,0(sp)
    b340:	dec00204 	addi	sp,sp,8
    b344:	f800283a 	ret
    b348:	1021883a 	mov	r16,r2
    b34c:	003ff206 	br	b318 <_ZNKSs4copyEPcmm+0x28>
    b350:	28800003 	ldbu	r2,0(r5)
    b354:	40800005 	stb	r2,0(r8)
    b358:	8005883a 	mov	r2,r16
    b35c:	dfc00117 	ldw	ra,4(sp)
    b360:	dc000017 	ldw	r16,0(sp)
    b364:	dec00204 	addi	sp,sp,8
    b368:	f800283a 	ret
    b36c:	010000b4 	movhi	r4,2
    b370:	213a6204 	addi	r4,r4,-5752
    b374:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000b378 <_ZNSs13_S_copy_charsEPcPKcS1_>:
    b378:	3147c83a 	sub	r3,r6,r5
    b37c:	00800044 	movi	r2,1
    b380:	180d883a 	mov	r6,r3
    b384:	18800126 	beq	r3,r2,b38c <_ZNSs13_S_copy_charsEPcPKcS1_+0x14>
    b388:	0013e341 	jmpi	13e34 <memcpy>
    b38c:	28800003 	ldbu	r2,0(r5)
    b390:	20800005 	stb	r2,0(r4)
    b394:	f800283a 	ret

0000b398 <_ZNSs13_S_copy_charsEPcS_S_>:
    b398:	3147c83a 	sub	r3,r6,r5
    b39c:	00800044 	movi	r2,1
    b3a0:	180d883a 	mov	r6,r3
    b3a4:	18800126 	beq	r3,r2,b3ac <_ZNSs13_S_copy_charsEPcS_S_+0x14>
    b3a8:	0013e341 	jmpi	13e34 <memcpy>
    b3ac:	28800003 	ldbu	r2,0(r5)
    b3b0:	20800005 	stb	r2,0(r4)
    b3b4:	f800283a 	ret

0000b3b8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>:
    b3b8:	defffb04 	addi	sp,sp,-20
    b3bc:	dc000015 	stw	r16,0(sp)
    b3c0:	dfc00415 	stw	ra,16(sp)
    b3c4:	dcc00315 	stw	r19,12(sp)
    b3c8:	dc800215 	stw	r18,8(sp)
    b3cc:	dc400115 	stw	r17,4(sp)
    b3d0:	2021883a 	mov	r16,r4
    b3d4:	21401c26 	beq	r4,r5,b448 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x90>
    b3d8:	20002526 	beq	r4,zero,b470 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0xb8>
    b3dc:	2c25c83a 	sub	r18,r5,r16
    b3e0:	9009883a 	mov	r4,r18
    b3e4:	000b883a 	mov	r5,zero
    b3e8:	000a5e40 	call	a5e4 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    b3ec:	1023883a 	mov	r17,r2
    b3f0:	14c00304 	addi	r19,r2,12
    b3f4:	00800044 	movi	r2,1
    b3f8:	90801026 	beq	r18,r2,b43c <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x84>
    b3fc:	800b883a 	mov	r5,r16
    b400:	9809883a 	mov	r4,r19
    b404:	900d883a 	mov	r6,r18
    b408:	0013e340 	call	13e34 <memcpy>
    b40c:	9c85883a 	add	r2,r19,r18
    b410:	8c800015 	stw	r18,0(r17)
    b414:	88000215 	stw	zero,8(r17)
    b418:	10000005 	stb	zero,0(r2)
    b41c:	9805883a 	mov	r2,r19
    b420:	dfc00417 	ldw	ra,16(sp)
    b424:	dcc00317 	ldw	r19,12(sp)
    b428:	dc800217 	ldw	r18,8(sp)
    b42c:	dc400117 	ldw	r17,4(sp)
    b430:	dc000017 	ldw	r16,0(sp)
    b434:	dec00504 	addi	sp,sp,20
    b438:	f800283a 	ret
    b43c:	80800003 	ldbu	r2,0(r16)
    b440:	88800305 	stb	r2,12(r17)
    b444:	003ff106 	br	b40c <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x54>
    b448:	04c000b4 	movhi	r19,2
    b44c:	9cca2704 	addi	r19,r19,10396
    b450:	9805883a 	mov	r2,r19
    b454:	dfc00417 	ldw	ra,16(sp)
    b458:	dcc00317 	ldw	r19,12(sp)
    b45c:	dc800217 	ldw	r18,8(sp)
    b460:	dc400117 	ldw	r17,4(sp)
    b464:	dc000017 	ldw	r16,0(sp)
    b468:	dec00504 	addi	sp,sp,20
    b46c:	f800283a 	ret
    b470:	010000b4 	movhi	r4,2
    b474:	213a6704 	addi	r4,r4,-5732
    b478:	0007d800 	call	7d80 <_ZSt19__throw_logic_errorPKc>

0000b47c <_ZNSsC2IPcEET_S1_RKSaIcE>:
    b47c:	defffe04 	addi	sp,sp,-8
    b480:	dc400015 	stw	r17,0(sp)
    b484:	2023883a 	mov	r17,r4
    b488:	2809883a 	mov	r4,r5
    b48c:	300b883a 	mov	r5,r6
    b490:	380d883a 	mov	r6,r7
    b494:	dfc00115 	stw	ra,4(sp)
    b498:	000b3b80 	call	b3b8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b49c:	88800015 	stw	r2,0(r17)
    b4a0:	dfc00117 	ldw	ra,4(sp)
    b4a4:	dc400017 	ldw	r17,0(sp)
    b4a8:	dec00204 	addi	sp,sp,8
    b4ac:	f800283a 	ret

0000b4b0 <_ZNSsC1ERKSsmmRKSaIcE>:
    b4b0:	29400017 	ldw	r5,0(r5)
    b4b4:	defffe04 	addi	sp,sp,-8
    b4b8:	dc000015 	stw	r16,0(sp)
    b4bc:	28bffd17 	ldw	r2,-12(r5)
    b4c0:	dfc00115 	stw	ra,4(sp)
    b4c4:	2021883a 	mov	r16,r4
    b4c8:	11800e36 	bltu	r2,r6,b504 <_ZNSsC1ERKSsmmRKSaIcE+0x54>
    b4cc:	1185c83a 	sub	r2,r2,r6
    b4d0:	2989883a 	add	r4,r5,r6
    b4d4:	11c00936 	bltu	r2,r7,b4fc <_ZNSsC1ERKSsmmRKSaIcE+0x4c>
    b4d8:	29cb883a 	add	r5,r5,r7
    b4dc:	314b883a 	add	r5,r6,r5
    b4e0:	d9800217 	ldw	r6,8(sp)
    b4e4:	000b3b80 	call	b3b8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b4e8:	80800015 	stw	r2,0(r16)
    b4ec:	dfc00117 	ldw	ra,4(sp)
    b4f0:	dc000017 	ldw	r16,0(sp)
    b4f4:	dec00204 	addi	sp,sp,8
    b4f8:	f800283a 	ret
    b4fc:	100f883a 	mov	r7,r2
    b500:	003ff506 	br	b4d8 <_ZNSsC1ERKSsmmRKSaIcE+0x28>
    b504:	010000b4 	movhi	r4,2
    b508:	213a7204 	addi	r4,r4,-5688
    b50c:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000b510 <_ZNSsC2ERKSsmmRKSaIcE>:
    b510:	29400017 	ldw	r5,0(r5)
    b514:	defffe04 	addi	sp,sp,-8
    b518:	dc000015 	stw	r16,0(sp)
    b51c:	28bffd17 	ldw	r2,-12(r5)
    b520:	dfc00115 	stw	ra,4(sp)
    b524:	2021883a 	mov	r16,r4
    b528:	11800e36 	bltu	r2,r6,b564 <_ZNSsC2ERKSsmmRKSaIcE+0x54>
    b52c:	1185c83a 	sub	r2,r2,r6
    b530:	2989883a 	add	r4,r5,r6
    b534:	11c00936 	bltu	r2,r7,b55c <_ZNSsC2ERKSsmmRKSaIcE+0x4c>
    b538:	29cb883a 	add	r5,r5,r7
    b53c:	314b883a 	add	r5,r6,r5
    b540:	d9800217 	ldw	r6,8(sp)
    b544:	000b3b80 	call	b3b8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b548:	80800015 	stw	r2,0(r16)
    b54c:	dfc00117 	ldw	ra,4(sp)
    b550:	dc000017 	ldw	r16,0(sp)
    b554:	dec00204 	addi	sp,sp,8
    b558:	f800283a 	ret
    b55c:	100f883a 	mov	r7,r2
    b560:	003ff506 	br	b538 <_ZNSsC2ERKSsmmRKSaIcE+0x28>
    b564:	010000b4 	movhi	r4,2
    b568:	213a7204 	addi	r4,r4,-5688
    b56c:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000b570 <_ZNSsC1ERKSsmm>:
    b570:	deffea04 	addi	sp,sp,-88
    b574:	00800074 	movhi	r2,1
    b578:	10b9cd04 	addi	r2,r2,-6348
    b57c:	00c000b4 	movhi	r3,2
    b580:	18f90344 	addi	r3,r3,-7155
    b584:	d8800715 	stw	r2,28(sp)
    b588:	d9000f15 	stw	r4,60(sp)
    b58c:	00800074 	movhi	r2,1
    b590:	10ad9304 	addi	r2,r2,-18868
    b594:	d9000104 	addi	r4,sp,4
    b598:	d8c00815 	stw	r3,32(sp)
    b59c:	d8800a15 	stw	r2,40(sp)
    b5a0:	d9401015 	stw	r5,64(sp)
    b5a4:	dfc01515 	stw	ra,84(sp)
    b5a8:	df001415 	stw	fp,80(sp)
    b5ac:	ddc01315 	stw	r23,76(sp)
    b5b0:	dec00915 	stw	sp,36(sp)
    b5b4:	dec00b15 	stw	sp,44(sp)
    b5b8:	d9801115 	stw	r6,68(sp)
    b5bc:	d9c01215 	stw	r7,72(sp)
    b5c0:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    b5c4:	d8801017 	ldw	r2,64(sp)
    b5c8:	d8c01117 	ldw	r3,68(sp)
    b5cc:	11400017 	ldw	r5,0(r2)
    b5d0:	28bffd17 	ldw	r2,-12(r5)
    b5d4:	10c01836 	bltu	r2,r3,b638 <_ZNSsC1ERKSsmm+0xc8>
    b5d8:	d8c01117 	ldw	r3,68(sp)
    b5dc:	d9c01217 	ldw	r7,72(sp)
    b5e0:	10c5c83a 	sub	r2,r2,r3
    b5e4:	28c9883a 	add	r4,r5,r3
    b5e8:	11c01136 	bltu	r2,r7,b630 <_ZNSsC1ERKSsmm+0xc0>
    b5ec:	00800044 	movi	r2,1
    b5f0:	d8800215 	stw	r2,8(sp)
    b5f4:	d8801117 	ldw	r2,68(sp)
    b5f8:	29cb883a 	add	r5,r5,r7
    b5fc:	d80d883a 	mov	r6,sp
    b600:	114b883a 	add	r5,r2,r5
    b604:	d9c00e03 	ldbu	r7,56(sp)
    b608:	000b3b80 	call	b3b8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b60c:	d8c00f17 	ldw	r3,60(sp)
    b610:	d9000104 	addi	r4,sp,4
    b614:	18800015 	stw	r2,0(r3)
    b618:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    b61c:	dfc01517 	ldw	ra,84(sp)
    b620:	df001417 	ldw	fp,80(sp)
    b624:	ddc01317 	ldw	r23,76(sp)
    b628:	dec01604 	addi	sp,sp,88
    b62c:	f800283a 	ret
    b630:	100f883a 	mov	r7,r2
    b634:	003fed06 	br	b5ec <_ZNSsC1ERKSsmm+0x7c>
    b638:	00bfffc4 	movi	r2,-1
    b63c:	010000b4 	movhi	r4,2
    b640:	213a7204 	addi	r4,r4,-5688
    b644:	d8800215 	stw	r2,8(sp)
    b648:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>
    b64c:	d9000317 	ldw	r4,12(sp)
    b650:	00bfffc4 	movi	r2,-1
    b654:	d8800215 	stw	r2,8(sp)
    b658:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

0000b65c <_ZNKSs6substrEmm>:
    b65c:	28c00017 	ldw	r3,0(r5)
    b660:	defffe04 	addi	sp,sp,-8
    b664:	dc000015 	stw	r16,0(sp)
    b668:	18bffd17 	ldw	r2,-12(r3)
    b66c:	dfc00115 	stw	ra,4(sp)
    b670:	2021883a 	mov	r16,r4
    b674:	11800636 	bltu	r2,r6,b690 <_ZNKSs6substrEmm+0x34>
    b678:	000b5700 	call	b570 <_ZNSsC1ERKSsmm>
    b67c:	8005883a 	mov	r2,r16
    b680:	dfc00117 	ldw	ra,4(sp)
    b684:	dc000017 	ldw	r16,0(sp)
    b688:	dec00204 	addi	sp,sp,8
    b68c:	f800283a 	ret
    b690:	010000b4 	movhi	r4,2
    b694:	213a7904 	addi	r4,r4,-5660
    b698:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000b69c <_ZNSsC2ERKSsmm>:
    b69c:	deffea04 	addi	sp,sp,-88
    b6a0:	00800074 	movhi	r2,1
    b6a4:	10b9cd04 	addi	r2,r2,-6348
    b6a8:	00c000b4 	movhi	r3,2
    b6ac:	18f904c4 	addi	r3,r3,-7149
    b6b0:	d8800715 	stw	r2,28(sp)
    b6b4:	d9000f15 	stw	r4,60(sp)
    b6b8:	00800074 	movhi	r2,1
    b6bc:	10adde04 	addi	r2,r2,-18568
    b6c0:	d9000104 	addi	r4,sp,4
    b6c4:	d8c00815 	stw	r3,32(sp)
    b6c8:	d8800a15 	stw	r2,40(sp)
    b6cc:	d9401015 	stw	r5,64(sp)
    b6d0:	dfc01515 	stw	ra,84(sp)
    b6d4:	df001415 	stw	fp,80(sp)
    b6d8:	ddc01315 	stw	r23,76(sp)
    b6dc:	dec00915 	stw	sp,36(sp)
    b6e0:	dec00b15 	stw	sp,44(sp)
    b6e4:	d9801115 	stw	r6,68(sp)
    b6e8:	d9c01215 	stw	r7,72(sp)
    b6ec:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    b6f0:	d8801017 	ldw	r2,64(sp)
    b6f4:	d8c01117 	ldw	r3,68(sp)
    b6f8:	11400017 	ldw	r5,0(r2)
    b6fc:	28bffd17 	ldw	r2,-12(r5)
    b700:	10c01836 	bltu	r2,r3,b764 <_ZNSsC2ERKSsmm+0xc8>
    b704:	d8c01117 	ldw	r3,68(sp)
    b708:	d9c01217 	ldw	r7,72(sp)
    b70c:	10c5c83a 	sub	r2,r2,r3
    b710:	28c9883a 	add	r4,r5,r3
    b714:	11c01136 	bltu	r2,r7,b75c <_ZNSsC2ERKSsmm+0xc0>
    b718:	00800044 	movi	r2,1
    b71c:	d8800215 	stw	r2,8(sp)
    b720:	d8801117 	ldw	r2,68(sp)
    b724:	29cb883a 	add	r5,r5,r7
    b728:	d80d883a 	mov	r6,sp
    b72c:	114b883a 	add	r5,r2,r5
    b730:	d9c00e03 	ldbu	r7,56(sp)
    b734:	000b3b80 	call	b3b8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b738:	d8c00f17 	ldw	r3,60(sp)
    b73c:	d9000104 	addi	r4,sp,4
    b740:	18800015 	stw	r2,0(r3)
    b744:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    b748:	dfc01517 	ldw	ra,84(sp)
    b74c:	df001417 	ldw	fp,80(sp)
    b750:	ddc01317 	ldw	r23,76(sp)
    b754:	dec01604 	addi	sp,sp,88
    b758:	f800283a 	ret
    b75c:	100f883a 	mov	r7,r2
    b760:	003fed06 	br	b718 <_ZNSsC2ERKSsmm+0x7c>
    b764:	00bfffc4 	movi	r2,-1
    b768:	010000b4 	movhi	r4,2
    b76c:	213a7204 	addi	r4,r4,-5688
    b770:	d8800215 	stw	r2,8(sp)
    b774:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>
    b778:	d9000317 	ldw	r4,12(sp)
    b77c:	00bfffc4 	movi	r2,-1
    b780:	d8800215 	stw	r2,8(sp)
    b784:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

0000b788 <_ZNSsC1IPcEET_S1_RKSaIcE>:
    b788:	defffe04 	addi	sp,sp,-8
    b78c:	dc400015 	stw	r17,0(sp)
    b790:	2023883a 	mov	r17,r4
    b794:	2809883a 	mov	r4,r5
    b798:	300b883a 	mov	r5,r6
    b79c:	380d883a 	mov	r6,r7
    b7a0:	dfc00115 	stw	ra,4(sp)
    b7a4:	000b3b80 	call	b3b8 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b7a8:	88800015 	stw	r2,0(r17)
    b7ac:	dfc00117 	ldw	ra,4(sp)
    b7b0:	dc400017 	ldw	r17,0(sp)
    b7b4:	dec00204 	addi	sp,sp,8
    b7b8:	f800283a 	ret

0000b7bc <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_>:
    b7bc:	3147c83a 	sub	r3,r6,r5
    b7c0:	00800044 	movi	r2,1
    b7c4:	180d883a 	mov	r6,r3
    b7c8:	18800126 	beq	r3,r2,b7d0 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_+0x14>
    b7cc:	0013e341 	jmpi	13e34 <memcpy>
    b7d0:	28800003 	ldbu	r2,0(r5)
    b7d4:	20800005 	stb	r2,0(r4)
    b7d8:	f800283a 	ret

0000b7dc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
    b7dc:	defffb04 	addi	sp,sp,-20
    b7e0:	dc000015 	stw	r16,0(sp)
    b7e4:	dfc00415 	stw	ra,16(sp)
    b7e8:	dcc00315 	stw	r19,12(sp)
    b7ec:	dc800215 	stw	r18,8(sp)
    b7f0:	dc400115 	stw	r17,4(sp)
    b7f4:	2021883a 	mov	r16,r4
    b7f8:	21401c26 	beq	r4,r5,b86c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x90>
    b7fc:	20002526 	beq	r4,zero,b894 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xb8>
    b800:	2c25c83a 	sub	r18,r5,r16
    b804:	9009883a 	mov	r4,r18
    b808:	000b883a 	mov	r5,zero
    b80c:	000a5e40 	call	a5e4 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    b810:	1023883a 	mov	r17,r2
    b814:	14c00304 	addi	r19,r2,12
    b818:	00800044 	movi	r2,1
    b81c:	90801026 	beq	r18,r2,b860 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x84>
    b820:	800b883a 	mov	r5,r16
    b824:	9809883a 	mov	r4,r19
    b828:	900d883a 	mov	r6,r18
    b82c:	0013e340 	call	13e34 <memcpy>
    b830:	9c85883a 	add	r2,r19,r18
    b834:	8c800015 	stw	r18,0(r17)
    b838:	88000215 	stw	zero,8(r17)
    b83c:	10000005 	stb	zero,0(r2)
    b840:	9805883a 	mov	r2,r19
    b844:	dfc00417 	ldw	ra,16(sp)
    b848:	dcc00317 	ldw	r19,12(sp)
    b84c:	dc800217 	ldw	r18,8(sp)
    b850:	dc400117 	ldw	r17,4(sp)
    b854:	dc000017 	ldw	r16,0(sp)
    b858:	dec00504 	addi	sp,sp,20
    b85c:	f800283a 	ret
    b860:	80800003 	ldbu	r2,0(r16)
    b864:	88800305 	stb	r2,12(r17)
    b868:	003ff106 	br	b830 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x54>
    b86c:	04c000b4 	movhi	r19,2
    b870:	9cca2704 	addi	r19,r19,10396
    b874:	9805883a 	mov	r2,r19
    b878:	dfc00417 	ldw	ra,16(sp)
    b87c:	dcc00317 	ldw	r19,12(sp)
    b880:	dc800217 	ldw	r18,8(sp)
    b884:	dc400117 	ldw	r17,4(sp)
    b888:	dc000017 	ldw	r16,0(sp)
    b88c:	dec00504 	addi	sp,sp,20
    b890:	f800283a 	ret
    b894:	010000b4 	movhi	r4,2
    b898:	213a6704 	addi	r4,r4,-5732
    b89c:	0007d800 	call	7d80 <_ZSt19__throw_logic_errorPKc>

0000b8a0 <_ZNSsC2IPKcEET_S2_RKSaIcE>:
    b8a0:	defffe04 	addi	sp,sp,-8
    b8a4:	dc400015 	stw	r17,0(sp)
    b8a8:	2023883a 	mov	r17,r4
    b8ac:	2809883a 	mov	r4,r5
    b8b0:	300b883a 	mov	r5,r6
    b8b4:	380d883a 	mov	r6,r7
    b8b8:	dfc00115 	stw	ra,4(sp)
    b8bc:	000b7dc0 	call	b7dc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b8c0:	88800015 	stw	r2,0(r17)
    b8c4:	dfc00117 	ldw	ra,4(sp)
    b8c8:	dc400017 	ldw	r17,0(sp)
    b8cc:	dec00204 	addi	sp,sp,8
    b8d0:	f800283a 	ret

0000b8d4 <_ZNSsC1EPKcmRKSaIcE>:
    b8d4:	defffe04 	addi	sp,sp,-8
    b8d8:	dc400015 	stw	r17,0(sp)
    b8dc:	2023883a 	mov	r17,r4
    b8e0:	2809883a 	mov	r4,r5
    b8e4:	314b883a 	add	r5,r6,r5
    b8e8:	380d883a 	mov	r6,r7
    b8ec:	dfc00115 	stw	ra,4(sp)
    b8f0:	000b7dc0 	call	b7dc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b8f4:	88800015 	stw	r2,0(r17)
    b8f8:	dfc00117 	ldw	ra,4(sp)
    b8fc:	dc400017 	ldw	r17,0(sp)
    b900:	dec00204 	addi	sp,sp,8
    b904:	f800283a 	ret

0000b908 <_ZNSsC2EPKcmRKSaIcE>:
    b908:	defffe04 	addi	sp,sp,-8
    b90c:	dc400015 	stw	r17,0(sp)
    b910:	2023883a 	mov	r17,r4
    b914:	2809883a 	mov	r4,r5
    b918:	314b883a 	add	r5,r6,r5
    b91c:	380d883a 	mov	r6,r7
    b920:	dfc00115 	stw	ra,4(sp)
    b924:	000b7dc0 	call	b7dc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b928:	88800015 	stw	r2,0(r17)
    b92c:	dfc00117 	ldw	ra,4(sp)
    b930:	dc400017 	ldw	r17,0(sp)
    b934:	dec00204 	addi	sp,sp,8
    b938:	f800283a 	ret

0000b93c <_ZNSsC1IPKcEET_S2_RKSaIcE>:
    b93c:	defffe04 	addi	sp,sp,-8
    b940:	dc400015 	stw	r17,0(sp)
    b944:	2023883a 	mov	r17,r4
    b948:	2809883a 	mov	r4,r5
    b94c:	300b883a 	mov	r5,r6
    b950:	380d883a 	mov	r6,r7
    b954:	dfc00115 	stw	ra,4(sp)
    b958:	000b7dc0 	call	b7dc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b95c:	88800015 	stw	r2,0(r17)
    b960:	dfc00117 	ldw	ra,4(sp)
    b964:	dc400017 	ldw	r17,0(sp)
    b968:	dec00204 	addi	sp,sp,8
    b96c:	f800283a 	ret

0000b970 <_ZNSsC1EPKcRKSaIcE>:
    b970:	defffc04 	addi	sp,sp,-16
    b974:	dc400215 	stw	r17,8(sp)
    b978:	dc000115 	stw	r16,4(sp)
    b97c:	2023883a 	mov	r17,r4
    b980:	dfc00315 	stw	ra,12(sp)
    b984:	00bfffc4 	movi	r2,-1
    b988:	2809883a 	mov	r4,r5
    b98c:	3021883a 	mov	r16,r6
    b990:	28000426 	beq	r5,zero,b9a4 <_ZNSsC1EPKcRKSaIcE+0x34>
    b994:	d9400015 	stw	r5,0(sp)
    b998:	001511c0 	call	1511c <strlen>
    b99c:	d9400017 	ldw	r5,0(sp)
    b9a0:	2885883a 	add	r2,r5,r2
    b9a4:	2809883a 	mov	r4,r5
    b9a8:	800d883a 	mov	r6,r16
    b9ac:	100b883a 	mov	r5,r2
    b9b0:	800f883a 	mov	r7,r16
    b9b4:	000b7dc0 	call	b7dc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b9b8:	88800015 	stw	r2,0(r17)
    b9bc:	dfc00317 	ldw	ra,12(sp)
    b9c0:	dc400217 	ldw	r17,8(sp)
    b9c4:	dc000117 	ldw	r16,4(sp)
    b9c8:	dec00404 	addi	sp,sp,16
    b9cc:	f800283a 	ret

0000b9d0 <_ZNSsC2EPKcRKSaIcE>:
    b9d0:	defffc04 	addi	sp,sp,-16
    b9d4:	dc400215 	stw	r17,8(sp)
    b9d8:	dc000115 	stw	r16,4(sp)
    b9dc:	2023883a 	mov	r17,r4
    b9e0:	dfc00315 	stw	ra,12(sp)
    b9e4:	00bfffc4 	movi	r2,-1
    b9e8:	2809883a 	mov	r4,r5
    b9ec:	3021883a 	mov	r16,r6
    b9f0:	28000426 	beq	r5,zero,ba04 <_ZNSsC2EPKcRKSaIcE+0x34>
    b9f4:	d9400015 	stw	r5,0(sp)
    b9f8:	001511c0 	call	1511c <strlen>
    b9fc:	d9400017 	ldw	r5,0(sp)
    ba00:	2885883a 	add	r2,r5,r2
    ba04:	2809883a 	mov	r4,r5
    ba08:	800d883a 	mov	r6,r16
    ba0c:	100b883a 	mov	r5,r2
    ba10:	800f883a 	mov	r7,r16
    ba14:	000b7dc0 	call	b7dc <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    ba18:	88800015 	stw	r2,0(r17)
    ba1c:	dfc00317 	ldw	ra,12(sp)
    ba20:	dc400217 	ldw	r17,8(sp)
    ba24:	dc000117 	ldw	r16,4(sp)
    ba28:	dec00404 	addi	sp,sp,16
    ba2c:	f800283a 	ret

0000ba30 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_>:
    ba30:	3147c83a 	sub	r3,r6,r5
    ba34:	00800044 	movi	r2,1
    ba38:	180d883a 	mov	r6,r3
    ba3c:	18800126 	beq	r3,r2,ba44 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_+0x14>
    ba40:	0013e341 	jmpi	13e34 <memcpy>
    ba44:	28800003 	ldbu	r2,0(r5)
    ba48:	20800005 	stb	r2,0(r4)
    ba4c:	f800283a 	ret

0000ba50 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>:
    ba50:	defffb04 	addi	sp,sp,-20
    ba54:	dc000015 	stw	r16,0(sp)
    ba58:	dfc00415 	stw	ra,16(sp)
    ba5c:	dcc00315 	stw	r19,12(sp)
    ba60:	dc800215 	stw	r18,8(sp)
    ba64:	dc400115 	stw	r17,4(sp)
    ba68:	2021883a 	mov	r16,r4
    ba6c:	29000a1e 	bne	r5,r4,ba98 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x48>
    ba70:	04c000b4 	movhi	r19,2
    ba74:	9cca2704 	addi	r19,r19,10396
    ba78:	9805883a 	mov	r2,r19
    ba7c:	dfc00417 	ldw	ra,16(sp)
    ba80:	dcc00317 	ldw	r19,12(sp)
    ba84:	dc800217 	ldw	r18,8(sp)
    ba88:	dc400117 	ldw	r17,4(sp)
    ba8c:	dc000017 	ldw	r16,0(sp)
    ba90:	dec00504 	addi	sp,sp,20
    ba94:	f800283a 	ret
    ba98:	2923c83a 	sub	r17,r5,r4
    ba9c:	8809883a 	mov	r4,r17
    baa0:	000b883a 	mov	r5,zero
    baa4:	000a5e40 	call	a5e4 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    baa8:	1025883a 	mov	r18,r2
    baac:	14c00304 	addi	r19,r2,12
    bab0:	00800044 	movi	r2,1
    bab4:	88801026 	beq	r17,r2,baf8 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0xa8>
    bab8:	800b883a 	mov	r5,r16
    babc:	9809883a 	mov	r4,r19
    bac0:	880d883a 	mov	r6,r17
    bac4:	0013e340 	call	13e34 <memcpy>
    bac8:	9c45883a 	add	r2,r19,r17
    bacc:	94400015 	stw	r17,0(r18)
    bad0:	90000215 	stw	zero,8(r18)
    bad4:	10000005 	stb	zero,0(r2)
    bad8:	9805883a 	mov	r2,r19
    badc:	dfc00417 	ldw	ra,16(sp)
    bae0:	dcc00317 	ldw	r19,12(sp)
    bae4:	dc800217 	ldw	r18,8(sp)
    bae8:	dc400117 	ldw	r17,4(sp)
    baec:	dc000017 	ldw	r16,0(sp)
    baf0:	dec00504 	addi	sp,sp,20
    baf4:	f800283a 	ret
    baf8:	80800003 	ldbu	r2,0(r16)
    bafc:	98800005 	stb	r2,0(r19)
    bb00:	003ff106 	br	bac8 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x78>

0000bb04 <_ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
    bb04:	defffe04 	addi	sp,sp,-8
    bb08:	dc400015 	stw	r17,0(sp)
    bb0c:	2023883a 	mov	r17,r4
    bb10:	2809883a 	mov	r4,r5
    bb14:	300b883a 	mov	r5,r6
    bb18:	380d883a 	mov	r6,r7
    bb1c:	dfc00115 	stw	ra,4(sp)
    bb20:	000ba500 	call	ba50 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
    bb24:	88800015 	stw	r2,0(r17)
    bb28:	dfc00117 	ldw	ra,4(sp)
    bb2c:	dc400017 	ldw	r17,0(sp)
    bb30:	dec00204 	addi	sp,sp,8
    bb34:	f800283a 	ret

0000bb38 <_ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
    bb38:	defffe04 	addi	sp,sp,-8
    bb3c:	dc400015 	stw	r17,0(sp)
    bb40:	2023883a 	mov	r17,r4
    bb44:	2809883a 	mov	r4,r5
    bb48:	300b883a 	mov	r5,r6
    bb4c:	380d883a 	mov	r6,r7
    bb50:	dfc00115 	stw	ra,4(sp)
    bb54:	000ba500 	call	ba50 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
    bb58:	88800015 	stw	r2,0(r17)
    bb5c:	dfc00117 	ldw	ra,4(sp)
    bb60:	dc400017 	ldw	r17,0(sp)
    bb64:	dec00204 	addi	sp,sp,8
    bb68:	f800283a 	ret

0000bb6c <_ZNSsC1ERKSs>:
    bb6c:	deffec04 	addi	sp,sp,-80
    bb70:	00800074 	movhi	r2,1
    bb74:	10b9cd04 	addi	r2,r2,-6348
    bb78:	d8800715 	stw	r2,28(sp)
    bb7c:	00c000b4 	movhi	r3,2
    bb80:	18f90704 	addi	r3,r3,-7140
    bb84:	00800074 	movhi	r2,1
    bb88:	10af0c04 	addi	r2,r2,-17360
    bb8c:	d9000e15 	stw	r4,56(sp)
    bb90:	d9000104 	addi	r4,sp,4
    bb94:	d8800a15 	stw	r2,40(sp)
    bb98:	dfc01315 	stw	ra,76(sp)
    bb9c:	df001215 	stw	fp,72(sp)
    bba0:	ddc01115 	stw	r23,68(sp)
    bba4:	d8c00815 	stw	r3,32(sp)
    bba8:	d9400f15 	stw	r5,60(sp)
    bbac:	dec00915 	stw	sp,36(sp)
    bbb0:	dec00b15 	stw	sp,44(sp)
    bbb4:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    bbb8:	d8800f17 	ldw	r2,60(sp)
    bbbc:	10800017 	ldw	r2,0(r2)
    bbc0:	113ffd04 	addi	r4,r2,-12
    bbc4:	d8801015 	stw	r2,64(sp)
    bbc8:	20800217 	ldw	r2,8(r4)
    bbcc:	10000d16 	blt	r2,zero,bc04 <_ZNSsC1ERKSs+0x98>
    bbd0:	008000b4 	movhi	r2,2
    bbd4:	108a2404 	addi	r2,r2,10384
    bbd8:	2080101e 	bne	r4,r2,bc1c <_ZNSsC1ERKSs+0xb0>
    bbdc:	d8801017 	ldw	r2,64(sp)
    bbe0:	d8c00e17 	ldw	r3,56(sp)
    bbe4:	d9000104 	addi	r4,sp,4
    bbe8:	18800015 	stw	r2,0(r3)
    bbec:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    bbf0:	dfc01317 	ldw	ra,76(sp)
    bbf4:	df001217 	ldw	fp,72(sp)
    bbf8:	ddc01117 	ldw	r23,68(sp)
    bbfc:	dec01404 	addi	sp,sp,80
    bc00:	f800283a 	ret
    bc04:	00800084 	movi	r2,2
    bc08:	d8800215 	stw	r2,8(sp)
    bc0c:	d80b883a 	mov	r5,sp
    bc10:	000d883a 	mov	r6,zero
    bc14:	000b1500 	call	b150 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    bc18:	003ff106 	br	bbe0 <_ZNSsC1ERKSs+0x74>
    bc1c:	01400044 	movi	r5,1
    bc20:	d9400215 	stw	r5,8(sp)
    bc24:	21000204 	addi	r4,r4,8
    bc28:	000dc980 	call	dc98 <_ZN9__gnu_cxx12__atomic_addEPVii>
    bc2c:	003feb06 	br	bbdc <_ZNSsC1ERKSs+0x70>
    bc30:	d8c00217 	ldw	r3,8(sp)
    bc34:	00800044 	movi	r2,1
    bc38:	d9000317 	ldw	r4,12(sp)
    bc3c:	d9400417 	ldw	r5,16(sp)
    bc40:	18800426 	beq	r3,r2,bc54 <_ZNSsC1ERKSs+0xe8>
    bc44:	00bfffc4 	movi	r2,-1
    bc48:	28800426 	beq	r5,r2,bc5c <_ZNSsC1ERKSs+0xf0>
    bc4c:	d8800215 	stw	r2,8(sp)
    bc50:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    bc54:	00bfffc4 	movi	r2,-1
    bc58:	003ffc06 	br	bc4c <_ZNSsC1ERKSs+0xe0>
    bc5c:	00bfffc4 	movi	r2,-1
    bc60:	d8800215 	stw	r2,8(sp)
    bc64:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

0000bc68 <_ZNSsC2ERKSs>:
    bc68:	deffec04 	addi	sp,sp,-80
    bc6c:	00800074 	movhi	r2,1
    bc70:	10b9cd04 	addi	r2,r2,-6348
    bc74:	d8800715 	stw	r2,28(sp)
    bc78:	00c000b4 	movhi	r3,2
    bc7c:	18f90b04 	addi	r3,r3,-7124
    bc80:	00800074 	movhi	r2,1
    bc84:	10af4b04 	addi	r2,r2,-17108
    bc88:	d9000e15 	stw	r4,56(sp)
    bc8c:	d9000104 	addi	r4,sp,4
    bc90:	d8800a15 	stw	r2,40(sp)
    bc94:	dfc01315 	stw	ra,76(sp)
    bc98:	df001215 	stw	fp,72(sp)
    bc9c:	ddc01115 	stw	r23,68(sp)
    bca0:	d8c00815 	stw	r3,32(sp)
    bca4:	d9400f15 	stw	r5,60(sp)
    bca8:	dec00915 	stw	sp,36(sp)
    bcac:	dec00b15 	stw	sp,44(sp)
    bcb0:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    bcb4:	d8800f17 	ldw	r2,60(sp)
    bcb8:	10800017 	ldw	r2,0(r2)
    bcbc:	113ffd04 	addi	r4,r2,-12
    bcc0:	d8801015 	stw	r2,64(sp)
    bcc4:	20800217 	ldw	r2,8(r4)
    bcc8:	10000d16 	blt	r2,zero,bd00 <_ZNSsC2ERKSs+0x98>
    bccc:	008000b4 	movhi	r2,2
    bcd0:	108a2404 	addi	r2,r2,10384
    bcd4:	2080101e 	bne	r4,r2,bd18 <_ZNSsC2ERKSs+0xb0>
    bcd8:	d8801017 	ldw	r2,64(sp)
    bcdc:	d8c00e17 	ldw	r3,56(sp)
    bce0:	d9000104 	addi	r4,sp,4
    bce4:	18800015 	stw	r2,0(r3)
    bce8:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    bcec:	dfc01317 	ldw	ra,76(sp)
    bcf0:	df001217 	ldw	fp,72(sp)
    bcf4:	ddc01117 	ldw	r23,68(sp)
    bcf8:	dec01404 	addi	sp,sp,80
    bcfc:	f800283a 	ret
    bd00:	00800084 	movi	r2,2
    bd04:	d8800215 	stw	r2,8(sp)
    bd08:	d80b883a 	mov	r5,sp
    bd0c:	000d883a 	mov	r6,zero
    bd10:	000b1500 	call	b150 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    bd14:	003ff106 	br	bcdc <_ZNSsC2ERKSs+0x74>
    bd18:	01400044 	movi	r5,1
    bd1c:	d9400215 	stw	r5,8(sp)
    bd20:	21000204 	addi	r4,r4,8
    bd24:	000dc980 	call	dc98 <_ZN9__gnu_cxx12__atomic_addEPVii>
    bd28:	003feb06 	br	bcd8 <_ZNSsC2ERKSs+0x70>
    bd2c:	d8c00217 	ldw	r3,8(sp)
    bd30:	00800044 	movi	r2,1
    bd34:	d9000317 	ldw	r4,12(sp)
    bd38:	d9400417 	ldw	r5,16(sp)
    bd3c:	18800426 	beq	r3,r2,bd50 <_ZNSsC2ERKSs+0xe8>
    bd40:	00bfffc4 	movi	r2,-1
    bd44:	28800426 	beq	r5,r2,bd58 <_ZNSsC2ERKSs+0xf0>
    bd48:	d8800215 	stw	r2,8(sp)
    bd4c:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    bd50:	00bfffc4 	movi	r2,-1
    bd54:	003ffc06 	br	bd48 <_ZNSsC2ERKSs+0xe0>
    bd58:	00bfffc4 	movi	r2,-1
    bd5c:	d8800215 	stw	r2,8(sp)
    bd60:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

0000bd64 <_ZNSs6assignERKSs>:
    bd64:	deffea04 	addi	sp,sp,-88
    bd68:	00800074 	movhi	r2,1
    bd6c:	10b9cd04 	addi	r2,r2,-6348
    bd70:	00c000b4 	movhi	r3,2
    bd74:	18f90f04 	addi	r3,r3,-7108
    bd78:	d8800715 	stw	r2,28(sp)
    bd7c:	d9001015 	stw	r4,64(sp)
    bd80:	00800074 	movhi	r2,1
    bd84:	10afa604 	addi	r2,r2,-16744
    bd88:	d9000104 	addi	r4,sp,4
    bd8c:	d8c00815 	stw	r3,32(sp)
    bd90:	d8800a15 	stw	r2,40(sp)
    bd94:	d9401115 	stw	r5,68(sp)
    bd98:	dfc01515 	stw	ra,84(sp)
    bd9c:	df001415 	stw	fp,80(sp)
    bda0:	ddc01315 	stw	r23,76(sp)
    bda4:	dec00915 	stw	sp,36(sp)
    bda8:	dec00b15 	stw	sp,44(sp)
    bdac:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    bdb0:	d8801117 	ldw	r2,68(sp)
    bdb4:	d8c01017 	ldw	r3,64(sp)
    bdb8:	10800017 	ldw	r2,0(r2)
    bdbc:	d8801215 	stw	r2,72(sp)
    bdc0:	d9401217 	ldw	r5,72(sp)
    bdc4:	18800017 	ldw	r2,0(r3)
    bdc8:	00fffd04 	movi	r3,-12
    bdcc:	28c9883a 	add	r4,r5,r3
    bdd0:	10c5883a 	add	r2,r2,r3
    bdd4:	11001126 	beq	r2,r4,be1c <_ZNSs6assignERKSs+0xb8>
    bdd8:	20800217 	ldw	r2,8(r4)
    bddc:	10001716 	blt	r2,zero,be3c <_ZNSs6assignERKSs+0xd8>
    bde0:	008000b4 	movhi	r2,2
    bde4:	108a2404 	addi	r2,r2,10384
    bde8:	2080261e 	bne	r4,r2,be84 <_ZNSs6assignERKSs+0x120>
    bdec:	d8c01217 	ldw	r3,72(sp)
    bdf0:	d8c00f15 	stw	r3,60(sp)
    bdf4:	d9401017 	ldw	r5,64(sp)
    bdf8:	00c000b4 	movhi	r3,2
    bdfc:	18ca2404 	addi	r3,r3,10384
    be00:	28800017 	ldw	r2,0(r5)
    be04:	10bffd04 	addi	r2,r2,-12
    be08:	d8800e15 	stw	r2,56(sp)
    be0c:	10c0121e 	bne	r2,r3,be58 <_ZNSs6assignERKSs+0xf4>
    be10:	d8c00f17 	ldw	r3,60(sp)
    be14:	d8801017 	ldw	r2,64(sp)
    be18:	10c00015 	stw	r3,0(r2)
    be1c:	d9000104 	addi	r4,sp,4
    be20:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    be24:	d8801017 	ldw	r2,64(sp)
    be28:	dfc01517 	ldw	ra,84(sp)
    be2c:	df001417 	ldw	fp,80(sp)
    be30:	ddc01317 	ldw	r23,76(sp)
    be34:	dec01604 	addi	sp,sp,88
    be38:	f800283a 	ret
    be3c:	00800084 	movi	r2,2
    be40:	d8800215 	stw	r2,8(sp)
    be44:	d80b883a 	mov	r5,sp
    be48:	000d883a 	mov	r6,zero
    be4c:	000b1500 	call	b150 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    be50:	d8800f15 	stw	r2,60(sp)
    be54:	003fe706 	br	bdf4 <_ZNSs6assignERKSs+0x90>
    be58:	d9400e17 	ldw	r5,56(sp)
    be5c:	008000c4 	movi	r2,3
    be60:	d8800215 	stw	r2,8(sp)
    be64:	29000204 	addi	r4,r5,8
    be68:	017fffc4 	movi	r5,-1
    be6c:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    be70:	00bfe716 	blt	zero,r2,be10 <_ZNSs6assignERKSs+0xac>
    be74:	d9000e17 	ldw	r4,56(sp)
    be78:	d80b883a 	mov	r5,sp
    be7c:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    be80:	003fe306 	br	be10 <_ZNSs6assignERKSs+0xac>
    be84:	01400044 	movi	r5,1
    be88:	d9400215 	stw	r5,8(sp)
    be8c:	21000204 	addi	r4,r4,8
    be90:	000dc980 	call	dc98 <_ZN9__gnu_cxx12__atomic_addEPVii>
    be94:	003fd506 	br	bdec <_ZNSs6assignERKSs+0x88>
    be98:	d8c00217 	ldw	r3,8(sp)
    be9c:	00800044 	movi	r2,1
    bea0:	d9000317 	ldw	r4,12(sp)
    bea4:	d9400417 	ldw	r5,16(sp)
    bea8:	18800626 	beq	r3,r2,bec4 <_ZNSs6assignERKSs+0x160>
    beac:	00800084 	movi	r2,2
    beb0:	18800426 	beq	r3,r2,bec4 <_ZNSs6assignERKSs+0x160>
    beb4:	00bfffc4 	movi	r2,-1
    beb8:	28800426 	beq	r5,r2,becc <_ZNSs6assignERKSs+0x168>
    bebc:	d8800215 	stw	r2,8(sp)
    bec0:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    bec4:	00bfffc4 	movi	r2,-1
    bec8:	003ffc06 	br	bebc <_ZNSs6assignERKSs+0x158>
    becc:	00bfffc4 	movi	r2,-1
    bed0:	d8800215 	stw	r2,8(sp)
    bed4:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

0000bed8 <_ZNSsaSERKSs>:
    bed8:	000bd641 	jmpi	bd64 <_ZNSs6assignERKSs>

0000bedc <_ZNSs7reserveEm>:
    bedc:	deffeb04 	addi	sp,sp,-84
    bee0:	00800074 	movhi	r2,1
    bee4:	10b9cd04 	addi	r2,r2,-6348
    bee8:	00c000b4 	movhi	r3,2
    beec:	18f91344 	addi	r3,r3,-7091
    bef0:	d8800715 	stw	r2,28(sp)
    bef4:	d9001015 	stw	r4,64(sp)
    bef8:	00800074 	movhi	r2,1
    befc:	10affd04 	addi	r2,r2,-16396
    bf00:	d9000104 	addi	r4,sp,4
    bf04:	d8c00815 	stw	r3,32(sp)
    bf08:	d8800a15 	stw	r2,40(sp)
    bf0c:	dfc01415 	stw	ra,80(sp)
    bf10:	df001315 	stw	fp,76(sp)
    bf14:	ddc01215 	stw	r23,72(sp)
    bf18:	dec00915 	stw	sp,36(sp)
    bf1c:	dec00b15 	stw	sp,44(sp)
    bf20:	d9401115 	stw	r5,68(sp)
    bf24:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    bf28:	d8801017 	ldw	r2,64(sp)
    bf2c:	10c00017 	ldw	r3,0(r2)
    bf30:	193ffd04 	addi	r4,r3,-12
    bf34:	20800117 	ldw	r2,4(r4)
    bf38:	d8c01117 	ldw	r3,68(sp)
    bf3c:	10c01c26 	beq	r2,r3,bfb0 <_ZNSs7reserveEm+0xd4>
    bf40:	20c00017 	ldw	r3,0(r4)
    bf44:	d9401117 	ldw	r5,68(sp)
    bf48:	28c01736 	bltu	r5,r3,bfa8 <_ZNSs7reserveEm+0xcc>
    bf4c:	00800044 	movi	r2,1
    bf50:	28cdc83a 	sub	r6,r5,r3
    bf54:	d8800215 	stw	r2,8(sp)
    bf58:	d80b883a 	mov	r5,sp
    bf5c:	000b1500 	call	b150 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    bf60:	d8c01017 	ldw	r3,64(sp)
    bf64:	d8800f15 	stw	r2,60(sp)
    bf68:	18800017 	ldw	r2,0(r3)
    bf6c:	00c000b4 	movhi	r3,2
    bf70:	18ca2404 	addi	r3,r3,10384
    bf74:	10bffd04 	addi	r2,r2,-12
    bf78:	d8800e15 	stw	r2,56(sp)
    bf7c:	10c0151e 	bne	r2,r3,bfd4 <_ZNSs7reserveEm+0xf8>
    bf80:	d8c00f17 	ldw	r3,60(sp)
    bf84:	d8801017 	ldw	r2,64(sp)
    bf88:	d9000104 	addi	r4,sp,4
    bf8c:	10c00015 	stw	r3,0(r2)
    bf90:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    bf94:	dfc01417 	ldw	ra,80(sp)
    bf98:	df001317 	ldw	fp,76(sp)
    bf9c:	ddc01217 	ldw	r23,72(sp)
    bfa0:	dec01504 	addi	sp,sp,84
    bfa4:	f800283a 	ret
    bfa8:	180b883a 	mov	r5,r3
    bfac:	003fe706 	br	bf4c <_ZNSs7reserveEm+0x70>
    bfb0:	20800217 	ldw	r2,8(r4)
    bfb4:	00bfe216 	blt	zero,r2,bf40 <_ZNSs7reserveEm+0x64>
    bfb8:	d9000104 	addi	r4,sp,4
    bfbc:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    bfc0:	dfc01417 	ldw	ra,80(sp)
    bfc4:	df001317 	ldw	fp,76(sp)
    bfc8:	ddc01217 	ldw	r23,72(sp)
    bfcc:	dec01504 	addi	sp,sp,84
    bfd0:	f800283a 	ret
    bfd4:	11000204 	addi	r4,r2,8
    bfd8:	017fffc4 	movi	r5,-1
    bfdc:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    bfe0:	00bfe716 	blt	zero,r2,bf80 <_ZNSs7reserveEm+0xa4>
    bfe4:	d9000e17 	ldw	r4,56(sp)
    bfe8:	d80b883a 	mov	r5,sp
    bfec:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    bff0:	003fe306 	br	bf80 <_ZNSs7reserveEm+0xa4>
    bff4:	d9000317 	ldw	r4,12(sp)
    bff8:	00bfffc4 	movi	r2,-1
    bffc:	d8800215 	stw	r2,8(sp)
    c000:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

0000c004 <_ZNSs9push_backEc>:
    c004:	21800017 	ldw	r6,0(r4)
    c008:	defffc04 	addi	sp,sp,-16
    c00c:	dc000015 	stw	r16,0(sp)
    c010:	30bffd17 	ldw	r2,-12(r6)
    c014:	31fffd04 	addi	r7,r6,-12
    c018:	38c00117 	ldw	r3,4(r7)
    c01c:	14000044 	addi	r16,r2,1
    c020:	dc800215 	stw	r18,8(sp)
    c024:	dc400115 	stw	r17,4(sp)
    c028:	2825883a 	mov	r18,r5
    c02c:	dfc00315 	stw	ra,12(sp)
    c030:	2023883a 	mov	r17,r4
    c034:	800b883a 	mov	r5,r16
    c038:	1c001136 	bltu	r3,r16,c080 <_ZNSs9push_backEc+0x7c>
    c03c:	38800217 	ldw	r2,8(r7)
    c040:	00800f16 	blt	zero,r2,c080 <_ZNSs9push_backEc+0x7c>
    c044:	30bffd17 	ldw	r2,-12(r6)
    c048:	3085883a 	add	r2,r6,r2
    c04c:	14800005 	stb	r18,0(r2)
    c050:	88c00017 	ldw	r3,0(r17)
    c054:	18bffd04 	addi	r2,r3,-12
    c058:	1c3ffd15 	stw	r16,-12(r3)
    c05c:	1409883a 	add	r4,r2,r16
    c060:	10000215 	stw	zero,8(r2)
    c064:	20000305 	stb	zero,12(r4)
    c068:	dfc00317 	ldw	ra,12(sp)
    c06c:	dc800217 	ldw	r18,8(sp)
    c070:	dc400117 	ldw	r17,4(sp)
    c074:	dc000017 	ldw	r16,0(sp)
    c078:	dec00404 	addi	sp,sp,16
    c07c:	f800283a 	ret
    c080:	000bedc0 	call	bedc <_ZNSs7reserveEm>
    c084:	89800017 	ldw	r6,0(r17)
    c088:	003fee06 	br	c044 <_ZNSs9push_backEc+0x40>

0000c08c <_ZNSs6appendEmc>:
    c08c:	defffb04 	addi	sp,sp,-20
    c090:	dcc00315 	stw	r19,12(sp)
    c094:	dc800215 	stw	r18,8(sp)
    c098:	dc000015 	stw	r16,0(sp)
    c09c:	dfc00415 	stw	ra,16(sp)
    c0a0:	dc400115 	stw	r17,4(sp)
    c0a4:	2821883a 	mov	r16,r5
    c0a8:	3027883a 	mov	r19,r6
    c0ac:	2025883a 	mov	r18,r4
    c0b0:	28001d26 	beq	r5,zero,c128 <_ZNSs6appendEmc+0x9c>
    c0b4:	20c00017 	ldw	r3,0(r4)
    c0b8:	00900034 	movhi	r2,16384
    c0bc:	10bfff04 	addi	r2,r2,-4
    c0c0:	197ffd17 	ldw	r5,-12(r3)
    c0c4:	19bffd04 	addi	r6,r3,-12
    c0c8:	1145c83a 	sub	r2,r2,r5
    c0cc:	14002436 	bltu	r2,r16,c160 <_ZNSs6appendEmc+0xd4>
    c0d0:	30800117 	ldw	r2,4(r6)
    c0d4:	8163883a 	add	r17,r16,r5
    c0d8:	14400236 	bltu	r2,r17,c0e4 <_ZNSs6appendEmc+0x58>
    c0dc:	30800217 	ldw	r2,8(r6)
    c0e0:	0080030e 	bge	zero,r2,c0f0 <_ZNSs6appendEmc+0x64>
    c0e4:	880b883a 	mov	r5,r17
    c0e8:	000bedc0 	call	bedc <_ZNSs7reserveEm>
    c0ec:	90c00017 	ldw	r3,0(r18)
    c0f0:	18bffd17 	ldw	r2,-12(r3)
    c0f4:	99803fcc 	andi	r6,r19,255
    c0f8:	3180201c 	xori	r6,r6,128
    c0fc:	1889883a 	add	r4,r3,r2
    c100:	00800044 	movi	r2,1
    c104:	31bfe004 	addi	r6,r6,-128
    c108:	80800f1e 	bne	r16,r2,c148 <_ZNSs6appendEmc+0xbc>
    c10c:	21800005 	stb	r6,0(r4)
    c110:	90800017 	ldw	r2,0(r18)
    c114:	10fffd04 	addi	r3,r2,-12
    c118:	147ffd15 	stw	r17,-12(r2)
    c11c:	1c49883a 	add	r4,r3,r17
    c120:	18000215 	stw	zero,8(r3)
    c124:	20000305 	stb	zero,12(r4)
    c128:	9005883a 	mov	r2,r18
    c12c:	dfc00417 	ldw	ra,16(sp)
    c130:	dcc00317 	ldw	r19,12(sp)
    c134:	dc800217 	ldw	r18,8(sp)
    c138:	dc400117 	ldw	r17,4(sp)
    c13c:	dc000017 	ldw	r16,0(sp)
    c140:	dec00504 	addi	sp,sp,20
    c144:	f800283a 	ret
    c148:	31403fcc 	andi	r5,r6,255
    c14c:	2940201c 	xori	r5,r5,128
    c150:	297fe004 	addi	r5,r5,-128
    c154:	800d883a 	mov	r6,r16
    c158:	0013fb40 	call	13fb4 <memset>
    c15c:	003fec06 	br	c110 <_ZNSs6appendEmc+0x84>
    c160:	010000b4 	movhi	r4,2
    c164:	213a7f04 	addi	r4,r4,-5636
    c168:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>

0000c16c <_ZNSs6appendEPKcm>:
    c16c:	defffa04 	addi	sp,sp,-24
    c170:	dd000415 	stw	r20,16(sp)
    c174:	dcc00315 	stw	r19,12(sp)
    c178:	dc400115 	stw	r17,4(sp)
    c17c:	dfc00515 	stw	ra,20(sp)
    c180:	dc800215 	stw	r18,8(sp)
    c184:	dc000015 	stw	r16,0(sp)
    c188:	3023883a 	mov	r17,r6
    c18c:	2829883a 	mov	r20,r5
    c190:	2027883a 	mov	r19,r4
    c194:	30001c26 	beq	r6,zero,c208 <_ZNSs6appendEPKcm+0x9c>
    c198:	24000017 	ldw	r16,0(r4)
    c19c:	00900034 	movhi	r2,16384
    c1a0:	10bfff04 	addi	r2,r2,-4
    c1a4:	80fffd17 	ldw	r3,-12(r16)
    c1a8:	817ffd04 	addi	r5,r16,-12
    c1ac:	10c5c83a 	sub	r2,r2,r3
    c1b0:	11802e36 	bltu	r2,r6,c26c <_ZNSs6appendEPKcm+0x100>
    c1b4:	28800117 	ldw	r2,4(r5)
    c1b8:	30e5883a 	add	r18,r6,r3
    c1bc:	14801b2e 	bgeu	r2,r18,c22c <_ZNSs6appendEPKcm+0xc0>
    c1c0:	a4000236 	bltu	r20,r16,c1cc <_ZNSs6appendEPKcm+0x60>
    c1c4:	80c5883a 	add	r2,r16,r3
    c1c8:	1500222e 	bgeu	r2,r20,c254 <_ZNSs6appendEPKcm+0xe8>
    c1cc:	900b883a 	mov	r5,r18
    c1d0:	000bedc0 	call	bedc <_ZNSs7reserveEm>
    c1d4:	9c000017 	ldw	r16,0(r19)
    c1d8:	80bffd17 	ldw	r2,-12(r16)
    c1dc:	00c00044 	movi	r3,1
    c1e0:	8089883a 	add	r4,r16,r2
    c1e4:	88c0171e 	bne	r17,r3,c244 <_ZNSs6appendEPKcm+0xd8>
    c1e8:	a0800003 	ldbu	r2,0(r20)
    c1ec:	20800005 	stb	r2,0(r4)
    c1f0:	98800017 	ldw	r2,0(r19)
    c1f4:	10fffd04 	addi	r3,r2,-12
    c1f8:	14bffd15 	stw	r18,-12(r2)
    c1fc:	1c89883a 	add	r4,r3,r18
    c200:	18000215 	stw	zero,8(r3)
    c204:	20000305 	stb	zero,12(r4)
    c208:	9805883a 	mov	r2,r19
    c20c:	dfc00517 	ldw	ra,20(sp)
    c210:	dd000417 	ldw	r20,16(sp)
    c214:	dcc00317 	ldw	r19,12(sp)
    c218:	dc800217 	ldw	r18,8(sp)
    c21c:	dc400117 	ldw	r17,4(sp)
    c220:	dc000017 	ldw	r16,0(sp)
    c224:	dec00604 	addi	sp,sp,24
    c228:	f800283a 	ret
    c22c:	28800217 	ldw	r2,8(r5)
    c230:	00bfe316 	blt	zero,r2,c1c0 <_ZNSs6appendEPKcm+0x54>
    c234:	80bffd17 	ldw	r2,-12(r16)
    c238:	00c00044 	movi	r3,1
    c23c:	8089883a 	add	r4,r16,r2
    c240:	88ffe926 	beq	r17,r3,c1e8 <_ZNSs6appendEPKcm+0x7c>
    c244:	a00b883a 	mov	r5,r20
    c248:	880d883a 	mov	r6,r17
    c24c:	0013e340 	call	13e34 <memcpy>
    c250:	003fe706 	br	c1f0 <_ZNSs6appendEPKcm+0x84>
    c254:	900b883a 	mov	r5,r18
    c258:	000bedc0 	call	bedc <_ZNSs7reserveEm>
    c25c:	a405c83a 	sub	r2,r20,r16
    c260:	9c000017 	ldw	r16,0(r19)
    c264:	1429883a 	add	r20,r2,r16
    c268:	003fdb06 	br	c1d8 <_ZNSs6appendEPKcm+0x6c>
    c26c:	010000b4 	movhi	r4,2
    c270:	213a7f04 	addi	r4,r4,-5636
    c274:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>

0000c278 <_ZNSs6appendEPKc>:
    c278:	defffd04 	addi	sp,sp,-12
    c27c:	dcc00115 	stw	r19,4(sp)
    c280:	dc400015 	stw	r17,0(sp)
    c284:	dfc00215 	stw	ra,8(sp)
    c288:	2023883a 	mov	r17,r4
    c28c:	2809883a 	mov	r4,r5
    c290:	2827883a 	mov	r19,r5
    c294:	001511c0 	call	1511c <strlen>
    c298:	980b883a 	mov	r5,r19
    c29c:	8809883a 	mov	r4,r17
    c2a0:	100d883a 	mov	r6,r2
    c2a4:	dfc00217 	ldw	ra,8(sp)
    c2a8:	dcc00117 	ldw	r19,4(sp)
    c2ac:	dc400017 	ldw	r17,0(sp)
    c2b0:	dec00304 	addi	sp,sp,12
    c2b4:	000c16c1 	jmpi	c16c <_ZNSs6appendEPKcm>

0000c2b8 <_ZNSspLEPKc>:
    c2b8:	defffd04 	addi	sp,sp,-12
    c2bc:	dcc00115 	stw	r19,4(sp)
    c2c0:	dc400015 	stw	r17,0(sp)
    c2c4:	dfc00215 	stw	ra,8(sp)
    c2c8:	2023883a 	mov	r17,r4
    c2cc:	2809883a 	mov	r4,r5
    c2d0:	2827883a 	mov	r19,r5
    c2d4:	001511c0 	call	1511c <strlen>
    c2d8:	980b883a 	mov	r5,r19
    c2dc:	8809883a 	mov	r4,r17
    c2e0:	100d883a 	mov	r6,r2
    c2e4:	dfc00217 	ldw	ra,8(sp)
    c2e8:	dcc00117 	ldw	r19,4(sp)
    c2ec:	dc400017 	ldw	r17,0(sp)
    c2f0:	dec00304 	addi	sp,sp,12
    c2f4:	000c16c1 	jmpi	c16c <_ZNSs6appendEPKcm>

0000c2f8 <_ZNSs6appendERKSsmm>:
    c2f8:	defffa04 	addi	sp,sp,-24
    c2fc:	dcc00415 	stw	r19,16(sp)
    c300:	2827883a 	mov	r19,r5
    c304:	29400017 	ldw	r5,0(r5)
    c308:	dc800315 	stw	r18,12(sp)
    c30c:	dc000115 	stw	r16,4(sp)
    c310:	28bffd17 	ldw	r2,-12(r5)
    c314:	dfc00515 	stw	ra,20(sp)
    c318:	dc400215 	stw	r17,8(sp)
    c31c:	3021883a 	mov	r16,r6
    c320:	2025883a 	mov	r18,r4
    c324:	11802b36 	bltu	r2,r6,c3d4 <_ZNSs6appendERKSsmm+0xdc>
    c328:	118dc83a 	sub	r6,r2,r6
    c32c:	31c02436 	bltu	r6,r7,c3c0 <_ZNSs6appendERKSsmm+0xc8>
    c330:	38001b26 	beq	r7,zero,c3a0 <_ZNSs6appendERKSsmm+0xa8>
    c334:	91800017 	ldw	r6,0(r18)
    c338:	323ffd04 	addi	r8,r6,-12
    c33c:	30bffd17 	ldw	r2,-12(r6)
    c340:	40c00117 	ldw	r3,4(r8)
    c344:	38a3883a 	add	r17,r7,r2
    c348:	1c400236 	bltu	r3,r17,c354 <_ZNSs6appendERKSsmm+0x5c>
    c34c:	40800217 	ldw	r2,8(r8)
    c350:	0080060e 	bge	zero,r2,c36c <_ZNSs6appendERKSsmm+0x74>
    c354:	880b883a 	mov	r5,r17
    c358:	d9c00015 	stw	r7,0(sp)
    c35c:	000bedc0 	call	bedc <_ZNSs7reserveEm>
    c360:	99400017 	ldw	r5,0(r19)
    c364:	91800017 	ldw	r6,0(r18)
    c368:	d9c00017 	ldw	r7,0(sp)
    c36c:	30fffd17 	ldw	r3,-12(r6)
    c370:	00800044 	movi	r2,1
    c374:	814b883a 	add	r5,r16,r5
    c378:	30c9883a 	add	r4,r6,r3
    c37c:	3880121e 	bne	r7,r2,c3c8 <_ZNSs6appendERKSsmm+0xd0>
    c380:	28800003 	ldbu	r2,0(r5)
    c384:	20800005 	stb	r2,0(r4)
    c388:	90800017 	ldw	r2,0(r18)
    c38c:	10fffd04 	addi	r3,r2,-12
    c390:	147ffd15 	stw	r17,-12(r2)
    c394:	1c49883a 	add	r4,r3,r17
    c398:	18000215 	stw	zero,8(r3)
    c39c:	20000305 	stb	zero,12(r4)
    c3a0:	9005883a 	mov	r2,r18
    c3a4:	dfc00517 	ldw	ra,20(sp)
    c3a8:	dcc00417 	ldw	r19,16(sp)
    c3ac:	dc800317 	ldw	r18,12(sp)
    c3b0:	dc400217 	ldw	r17,8(sp)
    c3b4:	dc000117 	ldw	r16,4(sp)
    c3b8:	dec00604 	addi	sp,sp,24
    c3bc:	f800283a 	ret
    c3c0:	300f883a 	mov	r7,r6
    c3c4:	003fda06 	br	c330 <_ZNSs6appendERKSsmm+0x38>
    c3c8:	380d883a 	mov	r6,r7
    c3cc:	0013e340 	call	13e34 <memcpy>
    c3d0:	003fed06 	br	c388 <_ZNSs6appendERKSsmm+0x90>
    c3d4:	010000b4 	movhi	r4,2
    c3d8:	213a7f04 	addi	r4,r4,-5636
    c3dc:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000c3e0 <_ZNSs6appendERKSs>:
    c3e0:	2a000017 	ldw	r8,0(r5)
    c3e4:	defffb04 	addi	sp,sp,-20
    c3e8:	dc000015 	stw	r16,0(sp)
    c3ec:	443ffd17 	ldw	r16,-12(r8)
    c3f0:	dcc00315 	stw	r19,12(sp)
    c3f4:	dc800215 	stw	r18,8(sp)
    c3f8:	dfc00415 	stw	ra,16(sp)
    c3fc:	dc400115 	stw	r17,4(sp)
    c400:	2827883a 	mov	r19,r5
    c404:	2025883a 	mov	r18,r4
    c408:	80001a26 	beq	r16,zero,c474 <_ZNSs6appendERKSs+0x94>
    c40c:	21c00017 	ldw	r7,0(r4)
    c410:	39bffd04 	addi	r6,r7,-12
    c414:	38bffd17 	ldw	r2,-12(r7)
    c418:	30c00117 	ldw	r3,4(r6)
    c41c:	80a3883a 	add	r17,r16,r2
    c420:	880b883a 	mov	r5,r17
    c424:	1c400236 	bltu	r3,r17,c430 <_ZNSs6appendERKSs+0x50>
    c428:	30800217 	ldw	r2,8(r6)
    c42c:	0080030e 	bge	zero,r2,c43c <_ZNSs6appendERKSs+0x5c>
    c430:	000bedc0 	call	bedc <_ZNSs7reserveEm>
    c434:	9a000017 	ldw	r8,0(r19)
    c438:	91c00017 	ldw	r7,0(r18)
    c43c:	38fffd17 	ldw	r3,-12(r7)
    c440:	00800044 	movi	r2,1
    c444:	400b883a 	mov	r5,r8
    c448:	800d883a 	mov	r6,r16
    c44c:	38c9883a 	add	r4,r7,r3
    c450:	8080101e 	bne	r16,r2,c494 <_ZNSs6appendERKSs+0xb4>
    c454:	40800003 	ldbu	r2,0(r8)
    c458:	20800005 	stb	r2,0(r4)
    c45c:	90800017 	ldw	r2,0(r18)
    c460:	10fffd04 	addi	r3,r2,-12
    c464:	147ffd15 	stw	r17,-12(r2)
    c468:	1c49883a 	add	r4,r3,r17
    c46c:	18000215 	stw	zero,8(r3)
    c470:	20000305 	stb	zero,12(r4)
    c474:	9005883a 	mov	r2,r18
    c478:	dfc00417 	ldw	ra,16(sp)
    c47c:	dcc00317 	ldw	r19,12(sp)
    c480:	dc800217 	ldw	r18,8(sp)
    c484:	dc400117 	ldw	r17,4(sp)
    c488:	dc000017 	ldw	r16,0(sp)
    c48c:	dec00504 	addi	sp,sp,20
    c490:	f800283a 	ret
    c494:	0013e340 	call	13e34 <memcpy>
    c498:	003ff006 	br	c45c <_ZNSs6appendERKSs+0x7c>

0000c49c <_ZNSspLERKSs>:
    c49c:	000c3e01 	jmpi	c3e0 <_ZNSs6appendERKSs>

0000c4a0 <_ZNSspLEc>:
    c4a0:	21800017 	ldw	r6,0(r4)
    c4a4:	defffc04 	addi	sp,sp,-16
    c4a8:	dc000015 	stw	r16,0(sp)
    c4ac:	30bffd17 	ldw	r2,-12(r6)
    c4b0:	31fffd04 	addi	r7,r6,-12
    c4b4:	38c00117 	ldw	r3,4(r7)
    c4b8:	14000044 	addi	r16,r2,1
    c4bc:	dc800215 	stw	r18,8(sp)
    c4c0:	dc400115 	stw	r17,4(sp)
    c4c4:	2825883a 	mov	r18,r5
    c4c8:	dfc00315 	stw	ra,12(sp)
    c4cc:	2023883a 	mov	r17,r4
    c4d0:	800b883a 	mov	r5,r16
    c4d4:	1c001236 	bltu	r3,r16,c520 <_ZNSspLEc+0x80>
    c4d8:	38800217 	ldw	r2,8(r7)
    c4dc:	00801016 	blt	zero,r2,c520 <_ZNSspLEc+0x80>
    c4e0:	30fffd17 	ldw	r3,-12(r6)
    c4e4:	8805883a 	mov	r2,r17
    c4e8:	30c7883a 	add	r3,r6,r3
    c4ec:	1c800005 	stb	r18,0(r3)
    c4f0:	89000017 	ldw	r4,0(r17)
    c4f4:	20fffd04 	addi	r3,r4,-12
    c4f8:	243ffd15 	stw	r16,-12(r4)
    c4fc:	1c0b883a 	add	r5,r3,r16
    c500:	18000215 	stw	zero,8(r3)
    c504:	28000305 	stb	zero,12(r5)
    c508:	dfc00317 	ldw	ra,12(sp)
    c50c:	dc800217 	ldw	r18,8(sp)
    c510:	dc400117 	ldw	r17,4(sp)
    c514:	dc000017 	ldw	r16,0(sp)
    c518:	dec00404 	addi	sp,sp,16
    c51c:	f800283a 	ret
    c520:	000bedc0 	call	bedc <_ZNSs7reserveEm>
    c524:	89800017 	ldw	r6,0(r17)
    c528:	003fed06 	br	c4e0 <_ZNSspLEc+0x40>

0000c52c <_ZNSsD1Ev>:
    c52c:	deffed04 	addi	sp,sp,-76
    c530:	00800074 	movhi	r2,1
    c534:	10b9cd04 	addi	r2,r2,-6348
    c538:	00c000b4 	movhi	r3,2
    c53c:	18f914c4 	addi	r3,r3,-7085
    c540:	d8800715 	stw	r2,28(sp)
    c544:	d9000f15 	stw	r4,60(sp)
    c548:	00800074 	movhi	r2,1
    c54c:	10b17604 	addi	r2,r2,-14888
    c550:	d9000104 	addi	r4,sp,4
    c554:	d8c00815 	stw	r3,32(sp)
    c558:	d8800a15 	stw	r2,40(sp)
    c55c:	dfc01215 	stw	ra,72(sp)
    c560:	df001115 	stw	fp,68(sp)
    c564:	ddc01015 	stw	r23,64(sp)
    c568:	dec00915 	stw	sp,36(sp)
    c56c:	dec00b15 	stw	sp,44(sp)
    c570:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    c574:	d8c00f17 	ldw	r3,60(sp)
    c578:	18800017 	ldw	r2,0(r3)
    c57c:	00c000b4 	movhi	r3,2
    c580:	18ca2404 	addi	r3,r3,10384
    c584:	10bffd04 	addi	r2,r2,-12
    c588:	d8800e15 	stw	r2,56(sp)
    c58c:	10c0071e 	bne	r2,r3,c5ac <_ZNSsD1Ev+0x80>
    c590:	d9000104 	addi	r4,sp,4
    c594:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    c598:	dfc01217 	ldw	ra,72(sp)
    c59c:	df001117 	ldw	fp,68(sp)
    c5a0:	ddc01017 	ldw	r23,64(sp)
    c5a4:	dec01304 	addi	sp,sp,76
    c5a8:	f800283a 	ret
    c5ac:	00800044 	movi	r2,1
    c5b0:	d8800215 	stw	r2,8(sp)
    c5b4:	d8800e17 	ldw	r2,56(sp)
    c5b8:	017fffc4 	movi	r5,-1
    c5bc:	11000204 	addi	r4,r2,8
    c5c0:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    c5c4:	00bff216 	blt	zero,r2,c590 <_ZNSsD1Ev+0x64>
    c5c8:	d9000e17 	ldw	r4,56(sp)
    c5cc:	d80b883a 	mov	r5,sp
    c5d0:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    c5d4:	003fee06 	br	c590 <_ZNSsD1Ev+0x64>
    c5d8:	d9000317 	ldw	r4,12(sp)
    c5dc:	00bfffc4 	movi	r2,-1
    c5e0:	d8800215 	stw	r2,8(sp)
    c5e4:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

0000c5e8 <_ZNSsD2Ev>:
    c5e8:	deffed04 	addi	sp,sp,-76
    c5ec:	00800074 	movhi	r2,1
    c5f0:	10b9cd04 	addi	r2,r2,-6348
    c5f4:	00c000b4 	movhi	r3,2
    c5f8:	18f91644 	addi	r3,r3,-7079
    c5fc:	d8800715 	stw	r2,28(sp)
    c600:	d9000f15 	stw	r4,60(sp)
    c604:	00800074 	movhi	r2,1
    c608:	10b1a504 	addi	r2,r2,-14700
    c60c:	d9000104 	addi	r4,sp,4
    c610:	d8c00815 	stw	r3,32(sp)
    c614:	d8800a15 	stw	r2,40(sp)
    c618:	dfc01215 	stw	ra,72(sp)
    c61c:	df001115 	stw	fp,68(sp)
    c620:	ddc01015 	stw	r23,64(sp)
    c624:	dec00915 	stw	sp,36(sp)
    c628:	dec00b15 	stw	sp,44(sp)
    c62c:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    c630:	d8c00f17 	ldw	r3,60(sp)
    c634:	18800017 	ldw	r2,0(r3)
    c638:	00c000b4 	movhi	r3,2
    c63c:	18ca2404 	addi	r3,r3,10384
    c640:	10bffd04 	addi	r2,r2,-12
    c644:	d8800e15 	stw	r2,56(sp)
    c648:	10c0071e 	bne	r2,r3,c668 <_ZNSsD2Ev+0x80>
    c64c:	d9000104 	addi	r4,sp,4
    c650:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    c654:	dfc01217 	ldw	ra,72(sp)
    c658:	df001117 	ldw	fp,68(sp)
    c65c:	ddc01017 	ldw	r23,64(sp)
    c660:	dec01304 	addi	sp,sp,76
    c664:	f800283a 	ret
    c668:	00800044 	movi	r2,1
    c66c:	d8800215 	stw	r2,8(sp)
    c670:	d8800e17 	ldw	r2,56(sp)
    c674:	017fffc4 	movi	r5,-1
    c678:	11000204 	addi	r4,r2,8
    c67c:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    c680:	00bff216 	blt	zero,r2,c64c <_ZNSsD2Ev+0x64>
    c684:	d9000e17 	ldw	r4,56(sp)
    c688:	d80b883a 	mov	r5,sp
    c68c:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    c690:	003fee06 	br	c64c <_ZNSsD2Ev+0x64>
    c694:	d9000317 	ldw	r4,12(sp)
    c698:	00bfffc4 	movi	r2,-1
    c69c:	d8800215 	stw	r2,8(sp)
    c6a0:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

0000c6a4 <_ZNSs9_M_mutateEmmm>:
    c6a4:	deffe704 	addi	sp,sp,-100
    c6a8:	00800074 	movhi	r2,1
    c6ac:	10b9cd04 	addi	r2,r2,-6348
    c6b0:	00c000b4 	movhi	r3,2
    c6b4:	18f917c4 	addi	r3,r3,-7073
    c6b8:	d8800715 	stw	r2,28(sp)
    c6bc:	d9001215 	stw	r4,72(sp)
    c6c0:	00800074 	movhi	r2,1
    c6c4:	10b23304 	addi	r2,r2,-14132
    c6c8:	d9000104 	addi	r4,sp,4
    c6cc:	d8c00815 	stw	r3,32(sp)
    c6d0:	d8800a15 	stw	r2,40(sp)
    c6d4:	d9801415 	stw	r6,80(sp)
    c6d8:	d9401315 	stw	r5,76(sp)
    c6dc:	d9c01515 	stw	r7,84(sp)
    c6e0:	dfc01815 	stw	ra,96(sp)
    c6e4:	df001715 	stw	fp,92(sp)
    c6e8:	ddc01615 	stw	r23,88(sp)
    c6ec:	dec00915 	stw	sp,36(sp)
    c6f0:	dec00b15 	stw	sp,44(sp)
    c6f4:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    c6f8:	d8801217 	ldw	r2,72(sp)
    c6fc:	d9c01517 	ldw	r7,84(sp)
    c700:	11800017 	ldw	r6,0(r2)
    c704:	313ffd04 	addi	r4,r6,-12
    c708:	20800017 	ldw	r2,0(r4)
    c70c:	21400117 	ldw	r5,4(r4)
    c710:	11c7883a 	add	r3,r2,r7
    c714:	d9c01317 	ldw	r7,76(sp)
    c718:	11c5c83a 	sub	r2,r2,r7
    c71c:	d9c01417 	ldw	r7,80(sp)
    c720:	19c7c83a 	sub	r3,r3,r7
    c724:	11c5c83a 	sub	r2,r2,r7
    c728:	d8c01115 	stw	r3,68(sp)
    c72c:	d8801015 	stw	r2,64(sp)
    c730:	28c00236 	bltu	r5,r3,c73c <_ZNSs9_M_mutateEmmm+0x98>
    c734:	20800217 	ldw	r2,8(r4)
    c738:	0080240e 	bge	zero,r2,c7cc <_ZNSs9_M_mutateEmmm+0x128>
    c73c:	00800044 	movi	r2,1
    c740:	d8800215 	stw	r2,8(sp)
    c744:	d9001117 	ldw	r4,68(sp)
    c748:	d80d883a 	mov	r6,sp
    c74c:	000a5e40 	call	a5e4 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    c750:	d8c01317 	ldw	r3,76(sp)
    c754:	d8800f15 	stw	r2,60(sp)
    c758:	18003c1e 	bne	r3,zero,c84c <_ZNSs9_M_mutateEmmm+0x1a8>
    c75c:	d8c01017 	ldw	r3,64(sp)
    c760:	1800291e 	bne	r3,zero,c808 <_ZNSs9_M_mutateEmmm+0x164>
    c764:	d8c01217 	ldw	r3,72(sp)
    c768:	18800017 	ldw	r2,0(r3)
    c76c:	00c000b4 	movhi	r3,2
    c770:	18ca2404 	addi	r3,r3,10384
    c774:	10bffd04 	addi	r2,r2,-12
    c778:	d8800e15 	stw	r2,56(sp)
    c77c:	10c0481e 	bne	r2,r3,c8a0 <_ZNSs9_M_mutateEmmm+0x1fc>
    c780:	d9c00f17 	ldw	r7,60(sp)
    c784:	d8c01217 	ldw	r3,72(sp)
    c788:	38800304 	addi	r2,r7,12
    c78c:	18800015 	stw	r2,0(r3)
    c790:	d9401217 	ldw	r5,72(sp)
    c794:	d9c01117 	ldw	r7,68(sp)
    c798:	d9000104 	addi	r4,sp,4
    c79c:	28800017 	ldw	r2,0(r5)
    c7a0:	10bffd04 	addi	r2,r2,-12
    c7a4:	11c7883a 	add	r3,r2,r7
    c7a8:	10000215 	stw	zero,8(r2)
    c7ac:	11c00015 	stw	r7,0(r2)
    c7b0:	18000305 	stb	zero,12(r3)
    c7b4:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    c7b8:	dfc01817 	ldw	ra,96(sp)
    c7bc:	df001717 	ldw	fp,92(sp)
    c7c0:	ddc01617 	ldw	r23,88(sp)
    c7c4:	dec01904 	addi	sp,sp,100
    c7c8:	f800283a 	ret
    c7cc:	d9001017 	ldw	r4,64(sp)
    c7d0:	203fef26 	beq	r4,zero,c790 <_ZNSs9_M_mutateEmmm+0xec>
    c7d4:	d9001517 	ldw	r4,84(sp)
    c7d8:	d9401417 	ldw	r5,80(sp)
    c7dc:	217fec26 	beq	r4,r5,c790 <_ZNSs9_M_mutateEmmm+0xec>
    c7e0:	d9c01317 	ldw	r7,76(sp)
    c7e4:	00800044 	movi	r2,1
    c7e8:	31c7883a 	add	r3,r6,r7
    c7ec:	194b883a 	add	r5,r3,r5
    c7f0:	1909883a 	add	r4,r3,r4
    c7f4:	d8c01017 	ldw	r3,64(sp)
    c7f8:	1880261e 	bne	r3,r2,c894 <_ZNSs9_M_mutateEmmm+0x1f0>
    c7fc:	28800003 	ldbu	r2,0(r5)
    c800:	20800005 	stb	r2,0(r4)
    c804:	003fe206 	br	c790 <_ZNSs9_M_mutateEmmm+0xec>
    c808:	d9001217 	ldw	r4,72(sp)
    c80c:	d9400f17 	ldw	r5,60(sp)
    c810:	d9c01317 	ldw	r7,76(sp)
    c814:	20800017 	ldw	r2,0(r4)
    c818:	28c00304 	addi	r3,r5,12
    c81c:	19c7883a 	add	r3,r3,r7
    c820:	3885883a 	add	r2,r7,r2
    c824:	d9401517 	ldw	r5,84(sp)
    c828:	d9c01417 	ldw	r7,80(sp)
    c82c:	1949883a 	add	r4,r3,r5
    c830:	11cb883a 	add	r5,r2,r7
    c834:	d8801017 	ldw	r2,64(sp)
    c838:	00c00044 	movi	r3,1
    c83c:	10c00d26 	beq	r2,r3,c874 <_ZNSs9_M_mutateEmmm+0x1d0>
    c840:	d9801017 	ldw	r6,64(sp)
    c844:	0013e340 	call	13e34 <memcpy>
    c848:	003fc606 	br	c764 <_ZNSs9_M_mutateEmmm+0xc0>
    c84c:	d9c01217 	ldw	r7,72(sp)
    c850:	11000304 	addi	r4,r2,12
    c854:	00800044 	movi	r2,1
    c858:	39400017 	ldw	r5,0(r7)
    c85c:	18800826 	beq	r3,r2,c880 <_ZNSs9_M_mutateEmmm+0x1dc>
    c860:	d9801317 	ldw	r6,76(sp)
    c864:	0013e340 	call	13e34 <memcpy>
    c868:	d8c01017 	ldw	r3,64(sp)
    c86c:	183fbd26 	beq	r3,zero,c764 <_ZNSs9_M_mutateEmmm+0xc0>
    c870:	003fe506 	br	c808 <_ZNSs9_M_mutateEmmm+0x164>
    c874:	28800003 	ldbu	r2,0(r5)
    c878:	20800005 	stb	r2,0(r4)
    c87c:	003fb906 	br	c764 <_ZNSs9_M_mutateEmmm+0xc0>
    c880:	28800003 	ldbu	r2,0(r5)
    c884:	20800005 	stb	r2,0(r4)
    c888:	d8c01017 	ldw	r3,64(sp)
    c88c:	183fb526 	beq	r3,zero,c764 <_ZNSs9_M_mutateEmmm+0xc0>
    c890:	003fdd06 	br	c808 <_ZNSs9_M_mutateEmmm+0x164>
    c894:	d9801017 	ldw	r6,64(sp)
    c898:	0013ed40 	call	13ed4 <memmove>
    c89c:	003fbc06 	br	c790 <_ZNSs9_M_mutateEmmm+0xec>
    c8a0:	d9400e17 	ldw	r5,56(sp)
    c8a4:	00800044 	movi	r2,1
    c8a8:	d8800215 	stw	r2,8(sp)
    c8ac:	29000204 	addi	r4,r5,8
    c8b0:	017fffc4 	movi	r5,-1
    c8b4:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    c8b8:	00bfb116 	blt	zero,r2,c780 <_ZNSs9_M_mutateEmmm+0xdc>
    c8bc:	d9000e17 	ldw	r4,56(sp)
    c8c0:	d80b883a 	mov	r5,sp
    c8c4:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    c8c8:	003fad06 	br	c780 <_ZNSs9_M_mutateEmmm+0xdc>
    c8cc:	d9000317 	ldw	r4,12(sp)
    c8d0:	00bfffc4 	movi	r2,-1
    c8d4:	d8800215 	stw	r2,8(sp)
    c8d8:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>

0000c8dc <_ZNSs15_M_replace_safeEmmPKcm>:
    c8dc:	defffb04 	addi	sp,sp,-20
    c8e0:	dc000015 	stw	r16,0(sp)
    c8e4:	dc000517 	ldw	r16,20(sp)
    c8e8:	dcc00315 	stw	r19,12(sp)
    c8ec:	3827883a 	mov	r19,r7
    c8f0:	800f883a 	mov	r7,r16
    c8f4:	dc800215 	stw	r18,8(sp)
    c8f8:	dc400115 	stw	r17,4(sp)
    c8fc:	dfc00415 	stw	ra,16(sp)
    c900:	2025883a 	mov	r18,r4
    c904:	2823883a 	mov	r17,r5
    c908:	000c6a40 	call	c6a4 <_ZNSs9_M_mutateEmmm>
    c90c:	80000826 	beq	r16,zero,c930 <_ZNSs15_M_replace_safeEmmPKcm+0x54>
    c910:	90800017 	ldw	r2,0(r18)
    c914:	980b883a 	mov	r5,r19
    c918:	800d883a 	mov	r6,r16
    c91c:	8887883a 	add	r3,r17,r2
    c920:	00800044 	movi	r2,1
    c924:	1809883a 	mov	r4,r3
    c928:	80800926 	beq	r16,r2,c950 <_ZNSs15_M_replace_safeEmmPKcm+0x74>
    c92c:	0013e340 	call	13e34 <memcpy>
    c930:	9005883a 	mov	r2,r18
    c934:	dfc00417 	ldw	ra,16(sp)
    c938:	dcc00317 	ldw	r19,12(sp)
    c93c:	dc800217 	ldw	r18,8(sp)
    c940:	dc400117 	ldw	r17,4(sp)
    c944:	dc000017 	ldw	r16,0(sp)
    c948:	dec00504 	addi	sp,sp,20
    c94c:	f800283a 	ret
    c950:	98800003 	ldbu	r2,0(r19)
    c954:	18800005 	stb	r2,0(r3)
    c958:	9005883a 	mov	r2,r18
    c95c:	dfc00417 	ldw	ra,16(sp)
    c960:	dcc00317 	ldw	r19,12(sp)
    c964:	dc800217 	ldw	r18,8(sp)
    c968:	dc400117 	ldw	r17,4(sp)
    c96c:	dc000017 	ldw	r16,0(sp)
    c970:	dec00504 	addi	sp,sp,20
    c974:	f800283a 	ret

0000c978 <_ZNSs6assignEPKcm>:
    c978:	defffc04 	addi	sp,sp,-16
    c97c:	00900034 	movhi	r2,16384
    c980:	10bfff04 	addi	r2,r2,-4
    c984:	dc400215 	stw	r17,8(sp)
    c988:	dc000115 	stw	r16,4(sp)
    c98c:	dfc00315 	stw	ra,12(sp)
    c990:	3023883a 	mov	r17,r6
    c994:	2021883a 	mov	r16,r4
    c998:	280f883a 	mov	r7,r5
    c99c:	11803136 	bltu	r2,r6,ca64 <_ZNSs6assignEPKcm+0xec>
    c9a0:	21000017 	ldw	r4,0(r4)
    c9a4:	29000c2e 	bgeu	r5,r4,c9d8 <_ZNSs6assignEPKcm+0x60>
    c9a8:	21bffd17 	ldw	r6,-12(r4)
    c9ac:	000b883a 	mov	r5,zero
    c9b0:	8009883a 	mov	r4,r16
    c9b4:	dc400015 	stw	r17,0(sp)
    c9b8:	000c8dc0 	call	c8dc <_ZNSs15_M_replace_safeEmmPKcm>
    c9bc:	1021883a 	mov	r16,r2
    c9c0:	8005883a 	mov	r2,r16
    c9c4:	dfc00317 	ldw	ra,12(sp)
    c9c8:	dc400217 	ldw	r17,8(sp)
    c9cc:	dc000117 	ldw	r16,4(sp)
    c9d0:	dec00404 	addi	sp,sp,16
    c9d4:	f800283a 	ret
    c9d8:	20bffd17 	ldw	r2,-12(r4)
    c9dc:	20fffd04 	addi	r3,r4,-12
    c9e0:	2085883a 	add	r2,r4,r2
    c9e4:	117ff036 	bltu	r2,r5,c9a8 <_ZNSs6assignEPKcm+0x30>
    c9e8:	18800217 	ldw	r2,8(r3)
    c9ec:	00bfee16 	blt	zero,r2,c9a8 <_ZNSs6assignEPKcm+0x30>
    c9f0:	2905c83a 	sub	r2,r5,r4
    c9f4:	11800f36 	bltu	r2,r6,ca34 <_ZNSs6assignEPKcm+0xbc>
    c9f8:	00800044 	movi	r2,1
    c9fc:	88801526 	beq	r17,r2,ca54 <_ZNSs6assignEPKcm+0xdc>
    ca00:	0013e340 	call	13e34 <memcpy>
    ca04:	81000017 	ldw	r4,0(r16)
    ca08:	20bffd04 	addi	r2,r4,-12
    ca0c:	1447883a 	add	r3,r2,r17
    ca10:	10000215 	stw	zero,8(r2)
    ca14:	247ffd15 	stw	r17,-12(r4)
    ca18:	8005883a 	mov	r2,r16
    ca1c:	18000305 	stb	zero,12(r3)
    ca20:	dfc00317 	ldw	ra,12(sp)
    ca24:	dc400217 	ldw	r17,8(sp)
    ca28:	dc000117 	ldw	r16,4(sp)
    ca2c:	dec00404 	addi	sp,sp,16
    ca30:	f800283a 	ret
    ca34:	103ff426 	beq	r2,zero,ca08 <_ZNSs6assignEPKcm+0x90>
    ca38:	00800044 	movi	r2,1
    ca3c:	88800526 	beq	r17,r2,ca54 <_ZNSs6assignEPKcm+0xdc>
    ca40:	380b883a 	mov	r5,r7
    ca44:	880d883a 	mov	r6,r17
    ca48:	0013ed40 	call	13ed4 <memmove>
    ca4c:	81000017 	ldw	r4,0(r16)
    ca50:	003fed06 	br	ca08 <_ZNSs6assignEPKcm+0x90>
    ca54:	38800003 	ldbu	r2,0(r7)
    ca58:	20800005 	stb	r2,0(r4)
    ca5c:	81000017 	ldw	r4,0(r16)
    ca60:	003fe906 	br	ca08 <_ZNSs6assignEPKcm+0x90>
    ca64:	010000b4 	movhi	r4,2
    ca68:	213a8504 	addi	r4,r4,-5612
    ca6c:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>

0000ca70 <_ZNSs6assignEPKc>:
    ca70:	defffd04 	addi	sp,sp,-12
    ca74:	dcc00115 	stw	r19,4(sp)
    ca78:	dc400015 	stw	r17,0(sp)
    ca7c:	dfc00215 	stw	ra,8(sp)
    ca80:	2023883a 	mov	r17,r4
    ca84:	2809883a 	mov	r4,r5
    ca88:	2827883a 	mov	r19,r5
    ca8c:	001511c0 	call	1511c <strlen>
    ca90:	980b883a 	mov	r5,r19
    ca94:	8809883a 	mov	r4,r17
    ca98:	100d883a 	mov	r6,r2
    ca9c:	dfc00217 	ldw	ra,8(sp)
    caa0:	dcc00117 	ldw	r19,4(sp)
    caa4:	dc400017 	ldw	r17,0(sp)
    caa8:	dec00304 	addi	sp,sp,12
    caac:	000c9781 	jmpi	c978 <_ZNSs6assignEPKcm>

0000cab0 <_ZNSs6assignERKSsmm>:
    cab0:	29400017 	ldw	r5,0(r5)
    cab4:	deffff04 	addi	sp,sp,-4
    cab8:	dfc00015 	stw	ra,0(sp)
    cabc:	28bffd17 	ldw	r2,-12(r5)
    cac0:	11800c36 	bltu	r2,r6,caf4 <_ZNSs6assignERKSsmm+0x44>
    cac4:	1185c83a 	sub	r2,r2,r6
    cac8:	298b883a 	add	r5,r5,r6
    cacc:	11c00436 	bltu	r2,r7,cae0 <_ZNSs6assignERKSsmm+0x30>
    cad0:	380d883a 	mov	r6,r7
    cad4:	dfc00017 	ldw	ra,0(sp)
    cad8:	dec00104 	addi	sp,sp,4
    cadc:	000c9781 	jmpi	c978 <_ZNSs6assignEPKcm>
    cae0:	100f883a 	mov	r7,r2
    cae4:	380d883a 	mov	r6,r7
    cae8:	dfc00017 	ldw	ra,0(sp)
    caec:	dec00104 	addi	sp,sp,4
    caf0:	000c9781 	jmpi	c978 <_ZNSs6assignEPKcm>
    caf4:	010000b4 	movhi	r4,2
    caf8:	213a8504 	addi	r4,r4,-5612
    cafc:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000cb00 <_ZNSsaSEPKc>:
    cb00:	defffd04 	addi	sp,sp,-12
    cb04:	dcc00115 	stw	r19,4(sp)
    cb08:	dc400015 	stw	r17,0(sp)
    cb0c:	dfc00215 	stw	ra,8(sp)
    cb10:	2023883a 	mov	r17,r4
    cb14:	2809883a 	mov	r4,r5
    cb18:	2827883a 	mov	r19,r5
    cb1c:	001511c0 	call	1511c <strlen>
    cb20:	980b883a 	mov	r5,r19
    cb24:	8809883a 	mov	r4,r17
    cb28:	100d883a 	mov	r6,r2
    cb2c:	dfc00217 	ldw	ra,8(sp)
    cb30:	dcc00117 	ldw	r19,4(sp)
    cb34:	dc400017 	ldw	r17,0(sp)
    cb38:	dec00304 	addi	sp,sp,12
    cb3c:	000c9781 	jmpi	c978 <_ZNSs6assignEPKcm>

0000cb40 <_ZNSs14_M_replace_auxEmmmc>:
    cb40:	20800017 	ldw	r2,0(r4)
    cb44:	defffb04 	addi	sp,sp,-20
    cb48:	dcc00315 	stw	r19,12(sp)
    cb4c:	10fffd17 	ldw	r3,-12(r2)
    cb50:	00900034 	movhi	r2,16384
    cb54:	10bfff04 	addi	r2,r2,-4
    cb58:	dc800215 	stw	r18,8(sp)
    cb5c:	1987c83a 	sub	r3,r3,r6
    cb60:	10c5c83a 	sub	r2,r2,r3
    cb64:	dc400115 	stw	r17,4(sp)
    cb68:	dc000015 	stw	r16,0(sp)
    cb6c:	dfc00415 	stw	ra,16(sp)
    cb70:	2023883a 	mov	r17,r4
    cb74:	3821883a 	mov	r16,r7
    cb78:	2827883a 	mov	r19,r5
    cb7c:	dc800503 	ldbu	r18,20(sp)
    cb80:	11c01f36 	bltu	r2,r7,cc00 <_ZNSs14_M_replace_auxEmmmc+0xc0>
    cb84:	000c6a40 	call	c6a4 <_ZNSs9_M_mutateEmmm>
    cb88:	80000c26 	beq	r16,zero,cbbc <_ZNSs14_M_replace_auxEmmmc+0x7c>
    cb8c:	88800017 	ldw	r2,0(r17)
    cb90:	90c03fcc 	andi	r3,r18,255
    cb94:	18c0201c 	xori	r3,r3,128
    cb98:	9889883a 	add	r4,r19,r2
    cb9c:	00800044 	movi	r2,1
    cba0:	18ffe004 	addi	r3,r3,-128
    cba4:	80800d26 	beq	r16,r2,cbdc <_ZNSs14_M_replace_auxEmmmc+0x9c>
    cba8:	19403fcc 	andi	r5,r3,255
    cbac:	2940201c 	xori	r5,r5,128
    cbb0:	297fe004 	addi	r5,r5,-128
    cbb4:	800d883a 	mov	r6,r16
    cbb8:	0013fb40 	call	13fb4 <memset>
    cbbc:	8805883a 	mov	r2,r17
    cbc0:	dfc00417 	ldw	ra,16(sp)
    cbc4:	dcc00317 	ldw	r19,12(sp)
    cbc8:	dc800217 	ldw	r18,8(sp)
    cbcc:	dc400117 	ldw	r17,4(sp)
    cbd0:	dc000017 	ldw	r16,0(sp)
    cbd4:	dec00504 	addi	sp,sp,20
    cbd8:	f800283a 	ret
    cbdc:	8805883a 	mov	r2,r17
    cbe0:	20c00005 	stb	r3,0(r4)
    cbe4:	dfc00417 	ldw	ra,16(sp)
    cbe8:	dcc00317 	ldw	r19,12(sp)
    cbec:	dc800217 	ldw	r18,8(sp)
    cbf0:	dc400117 	ldw	r17,4(sp)
    cbf4:	dc000017 	ldw	r16,0(sp)
    cbf8:	dec00504 	addi	sp,sp,20
    cbfc:	f800283a 	ret
    cc00:	010000b4 	movhi	r4,2
    cc04:	213a8b04 	addi	r4,r4,-5588
    cc08:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>

0000cc0c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc>:
    cc0c:	20800017 	ldw	r2,0(r4)
    cc10:	d8c00007 	ldb	r3,0(sp)
    cc14:	314dc83a 	sub	r6,r6,r5
    cc18:	288bc83a 	sub	r5,r5,r2
    cc1c:	d8c00015 	stw	r3,0(sp)
    cc20:	000cb401 	jmpi	cb40 <_ZNSs14_M_replace_auxEmmmc>

0000cc24 <_ZNSs7replaceEmmmc>:
    cc24:	20800017 	ldw	r2,0(r4)
    cc28:	deffff04 	addi	sp,sp,-4
    cc2c:	dfc00015 	stw	ra,0(sp)
    cc30:	10fffd17 	ldw	r3,-12(r2)
    cc34:	d8800103 	ldbu	r2,4(sp)
    cc38:	19401136 	bltu	r3,r5,cc80 <_ZNSs7replaceEmmmc+0x5c>
    cc3c:	1947c83a 	sub	r3,r3,r5
    cc40:	19800736 	bltu	r3,r6,cc60 <_ZNSs7replaceEmmmc+0x3c>
    cc44:	10803fcc 	andi	r2,r2,255
    cc48:	1080201c 	xori	r2,r2,128
    cc4c:	10bfe004 	addi	r2,r2,-128
    cc50:	d8800115 	stw	r2,4(sp)
    cc54:	dfc00017 	ldw	ra,0(sp)
    cc58:	dec00104 	addi	sp,sp,4
    cc5c:	000cb401 	jmpi	cb40 <_ZNSs14_M_replace_auxEmmmc>
    cc60:	10803fcc 	andi	r2,r2,255
    cc64:	1080201c 	xori	r2,r2,128
    cc68:	10bfe004 	addi	r2,r2,-128
    cc6c:	180d883a 	mov	r6,r3
    cc70:	d8800115 	stw	r2,4(sp)
    cc74:	dfc00017 	ldw	ra,0(sp)
    cc78:	dec00104 	addi	sp,sp,4
    cc7c:	000cb401 	jmpi	cb40 <_ZNSs14_M_replace_auxEmmmc>
    cc80:	010000b4 	movhi	r4,2
    cc84:	213a9304 	addi	r4,r4,-5556
    cc88:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000cc8c <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc>:
    cc8c:	20800017 	ldw	r2,0(r4)
    cc90:	defffc04 	addi	sp,sp,-16
    cc94:	30c03fcc 	andi	r3,r6,255
    cc98:	dc000115 	stw	r16,4(sp)
    cc9c:	18c0201c 	xori	r3,r3,128
    cca0:	28a1c83a 	sub	r16,r5,r2
    cca4:	dc400215 	stw	r17,8(sp)
    cca8:	18ffe004 	addi	r3,r3,-128
    ccac:	2023883a 	mov	r17,r4
    ccb0:	01c00044 	movi	r7,1
    ccb4:	800b883a 	mov	r5,r16
    ccb8:	000d883a 	mov	r6,zero
    ccbc:	d8c00015 	stw	r3,0(sp)
    ccc0:	dfc00315 	stw	ra,12(sp)
    ccc4:	000cb400 	call	cb40 <_ZNSs14_M_replace_auxEmmmc>
    ccc8:	88800017 	ldw	r2,0(r17)
    cccc:	00ffffc4 	movi	r3,-1
    ccd0:	10ffff15 	stw	r3,-4(r2)
    ccd4:	1405883a 	add	r2,r2,r16
    ccd8:	dfc00317 	ldw	ra,12(sp)
    ccdc:	dc400217 	ldw	r17,8(sp)
    cce0:	dc000117 	ldw	r16,4(sp)
    cce4:	dec00404 	addi	sp,sp,16
    cce8:	f800283a 	ret

0000ccec <_ZNSs6insertEmmc>:
    ccec:	20c00017 	ldw	r3,0(r4)
    ccf0:	defffe04 	addi	sp,sp,-8
    ccf4:	dfc00115 	stw	ra,4(sp)
    ccf8:	18bffd17 	ldw	r2,-12(r3)
    ccfc:	11400a36 	bltu	r2,r5,cd28 <_ZNSs6insertEmmc+0x3c>
    cd00:	38803fcc 	andi	r2,r7,255
    cd04:	1080201c 	xori	r2,r2,128
    cd08:	300f883a 	mov	r7,r6
    cd0c:	10bfe004 	addi	r2,r2,-128
    cd10:	000d883a 	mov	r6,zero
    cd14:	d8800015 	stw	r2,0(sp)
    cd18:	000cb400 	call	cb40 <_ZNSs14_M_replace_auxEmmmc>
    cd1c:	dfc00117 	ldw	ra,4(sp)
    cd20:	dec00204 	addi	sp,sp,8
    cd24:	f800283a 	ret
    cd28:	010000b4 	movhi	r4,2
    cd2c:	213a9904 	addi	r4,r4,-5532
    cd30:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000cd34 <_ZNSs6assignEmc>:
    cd34:	20800017 	ldw	r2,0(r4)
    cd38:	30c03fcc 	andi	r3,r6,255
    cd3c:	18c0201c 	xori	r3,r3,128
    cd40:	11bffd17 	ldw	r6,-12(r2)
    cd44:	defffe04 	addi	sp,sp,-8
    cd48:	280f883a 	mov	r7,r5
    cd4c:	18ffe004 	addi	r3,r3,-128
    cd50:	000b883a 	mov	r5,zero
    cd54:	dfc00115 	stw	ra,4(sp)
    cd58:	d8c00015 	stw	r3,0(sp)
    cd5c:	000cb400 	call	cb40 <_ZNSs14_M_replace_auxEmmmc>
    cd60:	dfc00117 	ldw	ra,4(sp)
    cd64:	dec00204 	addi	sp,sp,8
    cd68:	f800283a 	ret

0000cd6c <_ZNSsaSEc>:
    cd6c:	20800017 	ldw	r2,0(r4)
    cd70:	28c03fcc 	andi	r3,r5,255
    cd74:	18c0201c 	xori	r3,r3,128
    cd78:	11bffd17 	ldw	r6,-12(r2)
    cd7c:	defffd04 	addi	sp,sp,-12
    cd80:	18ffe004 	addi	r3,r3,-128
    cd84:	01c00044 	movi	r7,1
    cd88:	000b883a 	mov	r5,zero
    cd8c:	dc400115 	stw	r17,4(sp)
    cd90:	dfc00215 	stw	ra,8(sp)
    cd94:	2023883a 	mov	r17,r4
    cd98:	d8c00015 	stw	r3,0(sp)
    cd9c:	000cb400 	call	cb40 <_ZNSs14_M_replace_auxEmmmc>
    cda0:	8805883a 	mov	r2,r17
    cda4:	dfc00217 	ldw	ra,8(sp)
    cda8:	dc400117 	ldw	r17,4(sp)
    cdac:	dec00304 	addi	sp,sp,12
    cdb0:	f800283a 	ret

0000cdb4 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc>:
    cdb4:	20800017 	ldw	r2,0(r4)
    cdb8:	3a003fcc 	andi	r8,r7,255
    cdbc:	4200201c 	xori	r8,r8,128
    cdc0:	defffe04 	addi	sp,sp,-8
    cdc4:	423fe004 	addi	r8,r8,-128
    cdc8:	300f883a 	mov	r7,r6
    cdcc:	288bc83a 	sub	r5,r5,r2
    cdd0:	000d883a 	mov	r6,zero
    cdd4:	dfc00115 	stw	ra,4(sp)
    cdd8:	da000015 	stw	r8,0(sp)
    cddc:	000cb400 	call	cb40 <_ZNSs14_M_replace_auxEmmmc>
    cde0:	dfc00117 	ldw	ra,4(sp)
    cde4:	dec00204 	addi	sp,sp,8
    cde8:	f800283a 	ret

0000cdec <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_>:
    cdec:	20800017 	ldw	r2,0(r4)
    cdf0:	defffd04 	addi	sp,sp,-12
    cdf4:	dc400015 	stw	r17,0(sp)
    cdf8:	28a3c83a 	sub	r17,r5,r2
    cdfc:	dc800115 	stw	r18,4(sp)
    ce00:	314dc83a 	sub	r6,r6,r5
    ce04:	2025883a 	mov	r18,r4
    ce08:	880b883a 	mov	r5,r17
    ce0c:	000f883a 	mov	r7,zero
    ce10:	dfc00215 	stw	ra,8(sp)
    ce14:	000c6a40 	call	c6a4 <_ZNSs9_M_mutateEmmm>
    ce18:	90800017 	ldw	r2,0(r18)
    ce1c:	00ffffc4 	movi	r3,-1
    ce20:	10ffff15 	stw	r3,-4(r2)
    ce24:	1445883a 	add	r2,r2,r17
    ce28:	dfc00217 	ldw	ra,8(sp)
    ce2c:	dc800117 	ldw	r18,4(sp)
    ce30:	dc400017 	ldw	r17,0(sp)
    ce34:	dec00304 	addi	sp,sp,12
    ce38:	f800283a 	ret

0000ce3c <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE>:
    ce3c:	20800017 	ldw	r2,0(r4)
    ce40:	defffd04 	addi	sp,sp,-12
    ce44:	dc000015 	stw	r16,0(sp)
    ce48:	28a1c83a 	sub	r16,r5,r2
    ce4c:	dc400115 	stw	r17,4(sp)
    ce50:	01800044 	movi	r6,1
    ce54:	2023883a 	mov	r17,r4
    ce58:	000f883a 	mov	r7,zero
    ce5c:	800b883a 	mov	r5,r16
    ce60:	dfc00215 	stw	ra,8(sp)
    ce64:	000c6a40 	call	c6a4 <_ZNSs9_M_mutateEmmm>
    ce68:	88800017 	ldw	r2,0(r17)
    ce6c:	00ffffc4 	movi	r3,-1
    ce70:	10ffff15 	stw	r3,-4(r2)
    ce74:	1405883a 	add	r2,r2,r16
    ce78:	dfc00217 	ldw	ra,8(sp)
    ce7c:	dc400117 	ldw	r17,4(sp)
    ce80:	dc000017 	ldw	r16,0(sp)
    ce84:	dec00304 	addi	sp,sp,12
    ce88:	f800283a 	ret

0000ce8c <_ZNSs5eraseEmm>:
    ce8c:	20800017 	ldw	r2,0(r4)
    ce90:	defffe04 	addi	sp,sp,-8
    ce94:	dc000015 	stw	r16,0(sp)
    ce98:	10bffd17 	ldw	r2,-12(r2)
    ce9c:	dfc00115 	stw	ra,4(sp)
    cea0:	2021883a 	mov	r16,r4
    cea4:	11401136 	bltu	r2,r5,ceec <_ZNSs5eraseEmm+0x60>
    cea8:	1145c83a 	sub	r2,r2,r5
    ceac:	11800736 	bltu	r2,r6,cecc <_ZNSs5eraseEmm+0x40>
    ceb0:	000f883a 	mov	r7,zero
    ceb4:	000c6a40 	call	c6a4 <_ZNSs9_M_mutateEmmm>
    ceb8:	8005883a 	mov	r2,r16
    cebc:	dfc00117 	ldw	ra,4(sp)
    cec0:	dc000017 	ldw	r16,0(sp)
    cec4:	dec00204 	addi	sp,sp,8
    cec8:	f800283a 	ret
    cecc:	100d883a 	mov	r6,r2
    ced0:	000f883a 	mov	r7,zero
    ced4:	000c6a40 	call	c6a4 <_ZNSs9_M_mutateEmmm>
    ced8:	8005883a 	mov	r2,r16
    cedc:	dfc00117 	ldw	ra,4(sp)
    cee0:	dc000017 	ldw	r16,0(sp)
    cee4:	dec00204 	addi	sp,sp,8
    cee8:	f800283a 	ret
    ceec:	010000b4 	movhi	r4,2
    cef0:	213a9f04 	addi	r4,r4,-5508
    cef4:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000cef8 <_ZNSs6insertEmPKcm>:
    cef8:	defff904 	addi	sp,sp,-28
    cefc:	dc000115 	stw	r16,4(sp)
    cf00:	24000017 	ldw	r16,0(r4)
    cf04:	dd000515 	stw	r20,20(sp)
    cf08:	dcc00415 	stw	r19,16(sp)
    cf0c:	80fffd17 	ldw	r3,-12(r16)
    cf10:	dc800315 	stw	r18,12(sp)
    cf14:	dc400215 	stw	r17,8(sp)
    cf18:	dfc00615 	stw	ra,24(sp)
    cf1c:	3023883a 	mov	r17,r6
    cf20:	2029883a 	mov	r20,r4
    cf24:	2825883a 	mov	r18,r5
    cf28:	3827883a 	mov	r19,r7
    cf2c:	81bffd04 	addi	r6,r16,-12
    cf30:	19403d36 	bltu	r3,r5,d028 <_ZNSs6insertEmPKcm+0x130>
    cf34:	00900034 	movhi	r2,16384
    cf38:	10bfff04 	addi	r2,r2,-4
    cf3c:	10c5c83a 	sub	r2,r2,r3
    cf40:	11c03c36 	bltu	r2,r7,d034 <_ZNSs6insertEmPKcm+0x13c>
    cf44:	8c00102e 	bgeu	r17,r16,cf88 <_ZNSs6insertEmPKcm+0x90>
    cf48:	a009883a 	mov	r4,r20
    cf4c:	900b883a 	mov	r5,r18
    cf50:	880f883a 	mov	r7,r17
    cf54:	000d883a 	mov	r6,zero
    cf58:	dcc00015 	stw	r19,0(sp)
    cf5c:	000c8dc0 	call	c8dc <_ZNSs15_M_replace_safeEmmPKcm>
    cf60:	1029883a 	mov	r20,r2
    cf64:	a005883a 	mov	r2,r20
    cf68:	dfc00617 	ldw	ra,24(sp)
    cf6c:	dd000517 	ldw	r20,20(sp)
    cf70:	dcc00417 	ldw	r19,16(sp)
    cf74:	dc800317 	ldw	r18,12(sp)
    cf78:	dc400217 	ldw	r17,8(sp)
    cf7c:	dc000117 	ldw	r16,4(sp)
    cf80:	dec00704 	addi	sp,sp,28
    cf84:	f800283a 	ret
    cf88:	80c5883a 	add	r2,r16,r3
    cf8c:	147fee36 	bltu	r2,r17,cf48 <_ZNSs6insertEmPKcm+0x50>
    cf90:	30800217 	ldw	r2,8(r6)
    cf94:	00bfec16 	blt	zero,r2,cf48 <_ZNSs6insertEmPKcm+0x50>
    cf98:	000d883a 	mov	r6,zero
    cf9c:	000c6a40 	call	c6a4 <_ZNSs9_M_mutateEmmm>
    cfa0:	a0c00017 	ldw	r3,0(r20)
    cfa4:	8c05c83a 	sub	r2,r17,r16
    cfa8:	188b883a 	add	r5,r3,r2
    cfac:	1ca1883a 	add	r16,r3,r18
    cfb0:	2cc7883a 	add	r3,r5,r19
    cfb4:	80c0062e 	bgeu	r16,r3,cfd0 <_ZNSs6insertEmPKcm+0xd8>
    cfb8:	2c000e36 	bltu	r5,r16,cff4 <_ZNSs6insertEmPKcm+0xfc>
    cfbc:	00800044 	movi	r2,1
    cfc0:	98801f1e 	bne	r19,r2,d040 <_ZNSs6insertEmPKcm+0x148>
    cfc4:	18800003 	ldbu	r2,0(r3)
    cfc8:	80800005 	stb	r2,0(r16)
    cfcc:	003fe506 	br	cf64 <_ZNSs6insertEmPKcm+0x6c>
    cfd0:	00800044 	movi	r2,1
    cfd4:	9880031e 	bne	r19,r2,cfe4 <_ZNSs6insertEmPKcm+0xec>
    cfd8:	28800003 	ldbu	r2,0(r5)
    cfdc:	80800005 	stb	r2,0(r16)
    cfe0:	003fe006 	br	cf64 <_ZNSs6insertEmPKcm+0x6c>
    cfe4:	8009883a 	mov	r4,r16
    cfe8:	980d883a 	mov	r6,r19
    cfec:	0013e340 	call	13e34 <memcpy>
    cff0:	003fdc06 	br	cf64 <_ZNSs6insertEmPKcm+0x6c>
    cff4:	8163c83a 	sub	r17,r16,r5
    cff8:	00800044 	movi	r2,1
    cffc:	8880171e 	bne	r17,r2,d05c <_ZNSs6insertEmPKcm+0x164>
    d000:	28800003 	ldbu	r2,0(r5)
    d004:	80800005 	stb	r2,0(r16)
    d008:	9c4dc83a 	sub	r6,r19,r17
    d00c:	00800044 	movi	r2,1
    d010:	84cb883a 	add	r5,r16,r19
    d014:	8449883a 	add	r4,r16,r17
    d018:	30800e1e 	bne	r6,r2,d054 <_ZNSs6insertEmPKcm+0x15c>
    d01c:	28800003 	ldbu	r2,0(r5)
    d020:	20800005 	stb	r2,0(r4)
    d024:	003fcf06 	br	cf64 <_ZNSs6insertEmPKcm+0x6c>
    d028:	010000b4 	movhi	r4,2
    d02c:	213a9904 	addi	r4,r4,-5532
    d030:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>
    d034:	010000b4 	movhi	r4,2
    d038:	213a9904 	addi	r4,r4,-5532
    d03c:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>
    d040:	8009883a 	mov	r4,r16
    d044:	180b883a 	mov	r5,r3
    d048:	980d883a 	mov	r6,r19
    d04c:	0013e340 	call	13e34 <memcpy>
    d050:	003fc406 	br	cf64 <_ZNSs6insertEmPKcm+0x6c>
    d054:	0013e340 	call	13e34 <memcpy>
    d058:	003fc206 	br	cf64 <_ZNSs6insertEmPKcm+0x6c>
    d05c:	8009883a 	mov	r4,r16
    d060:	880d883a 	mov	r6,r17
    d064:	0013e340 	call	13e34 <memcpy>
    d068:	003fe706 	br	d008 <_ZNSs6insertEmPKcm+0x110>

0000d06c <_ZNSs6insertEmPKc>:
    d06c:	defffc04 	addi	sp,sp,-16
    d070:	dd400215 	stw	r21,8(sp)
    d074:	dcc00115 	stw	r19,4(sp)
    d078:	dc400015 	stw	r17,0(sp)
    d07c:	2027883a 	mov	r19,r4
    d080:	dfc00315 	stw	ra,12(sp)
    d084:	3009883a 	mov	r4,r6
    d088:	3023883a 	mov	r17,r6
    d08c:	282b883a 	mov	r21,r5
    d090:	001511c0 	call	1511c <strlen>
    d094:	a80b883a 	mov	r5,r21
    d098:	9809883a 	mov	r4,r19
    d09c:	880d883a 	mov	r6,r17
    d0a0:	100f883a 	mov	r7,r2
    d0a4:	dfc00317 	ldw	ra,12(sp)
    d0a8:	dd400217 	ldw	r21,8(sp)
    d0ac:	dcc00117 	ldw	r19,4(sp)
    d0b0:	dc400017 	ldw	r17,0(sp)
    d0b4:	dec00404 	addi	sp,sp,16
    d0b8:	000cef81 	jmpi	cef8 <_ZNSs6insertEmPKcm>

0000d0bc <_ZNSs6insertEmRKSsmm>:
    d0bc:	31800017 	ldw	r6,0(r6)
    d0c0:	deffff04 	addi	sp,sp,-4
    d0c4:	3805883a 	mov	r2,r7
    d0c8:	30fffd17 	ldw	r3,-12(r6)
    d0cc:	dfc00015 	stw	ra,0(sp)
    d0d0:	d9c00117 	ldw	r7,4(sp)
    d0d4:	18800a36 	bltu	r3,r2,d100 <_ZNSs6insertEmRKSsmm+0x44>
    d0d8:	1887c83a 	sub	r3,r3,r2
    d0dc:	308d883a 	add	r6,r6,r2
    d0e0:	19c00336 	bltu	r3,r7,d0f0 <_ZNSs6insertEmRKSsmm+0x34>
    d0e4:	dfc00017 	ldw	ra,0(sp)
    d0e8:	dec00104 	addi	sp,sp,4
    d0ec:	000cef81 	jmpi	cef8 <_ZNSs6insertEmPKcm>
    d0f0:	180f883a 	mov	r7,r3
    d0f4:	dfc00017 	ldw	ra,0(sp)
    d0f8:	dec00104 	addi	sp,sp,4
    d0fc:	000cef81 	jmpi	cef8 <_ZNSs6insertEmPKcm>
    d100:	010000b4 	movhi	r4,2
    d104:	213a9904 	addi	r4,r4,-5532
    d108:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000d10c <_ZNSs6insertEmRKSs>:
    d10c:	31800017 	ldw	r6,0(r6)
    d110:	31fffd17 	ldw	r7,-12(r6)
    d114:	000cef81 	jmpi	cef8 <_ZNSs6insertEmPKcm>

0000d118 <_ZNSs5clearEv>:
    d118:	20800017 	ldw	r2,0(r4)
    d11c:	000b883a 	mov	r5,zero
    d120:	000f883a 	mov	r7,zero
    d124:	11bffd17 	ldw	r6,-12(r2)
    d128:	000c6a41 	jmpi	c6a4 <_ZNSs9_M_mutateEmmm>

0000d12c <_ZNSs12_M_leak_hardEv>:
    d12c:	22000017 	ldw	r8,0(r4)
    d130:	defffe04 	addi	sp,sp,-8
    d134:	008000b4 	movhi	r2,2
    d138:	108a2404 	addi	r2,r2,10384
    d13c:	40fffd04 	addi	r3,r8,-12
    d140:	dc000015 	stw	r16,0(sp)
    d144:	dfc00115 	stw	ra,4(sp)
    d148:	2021883a 	mov	r16,r4
    d14c:	18800726 	beq	r3,r2,d16c <_ZNSs12_M_leak_hardEv+0x40>
    d150:	18800217 	ldw	r2,8(r3)
    d154:	000b883a 	mov	r5,zero
    d158:	000d883a 	mov	r6,zero
    d15c:	000f883a 	mov	r7,zero
    d160:	00800616 	blt	zero,r2,d17c <_ZNSs12_M_leak_hardEv+0x50>
    d164:	00bfffc4 	movi	r2,-1
    d168:	40bfff15 	stw	r2,-4(r8)
    d16c:	dfc00117 	ldw	ra,4(sp)
    d170:	dc000017 	ldw	r16,0(sp)
    d174:	dec00204 	addi	sp,sp,8
    d178:	f800283a 	ret
    d17c:	000c6a40 	call	c6a4 <_ZNSs9_M_mutateEmmm>
    d180:	82000017 	ldw	r8,0(r16)
    d184:	003ff706 	br	d164 <_ZNSs12_M_leak_hardEv+0x38>

0000d188 <_ZNSs7_M_leakEv>:
    d188:	20800017 	ldw	r2,0(r4)
    d18c:	10ffff17 	ldw	r3,-4(r2)
    d190:	1800010e 	bge	r3,zero,d198 <_ZNSs7_M_leakEv+0x10>
    d194:	f800283a 	ret
    d198:	000d12c1 	jmpi	d12c <_ZNSs12_M_leak_hardEv>

0000d19c <_ZNSs2atEm>:
    d19c:	20c00017 	ldw	r3,0(r4)
    d1a0:	defffd04 	addi	sp,sp,-12
    d1a4:	dc000015 	stw	r16,0(sp)
    d1a8:	18bffd17 	ldw	r2,-12(r3)
    d1ac:	2821883a 	mov	r16,r5
    d1b0:	dc400115 	stw	r17,4(sp)
    d1b4:	dfc00215 	stw	ra,8(sp)
    d1b8:	2023883a 	mov	r17,r4
    d1bc:	197ffd04 	addi	r5,r3,-12
    d1c0:	80800a2e 	bgeu	r16,r2,d1ec <_ZNSs2atEm+0x50>
    d1c4:	28800217 	ldw	r2,8(r5)
    d1c8:	10000216 	blt	r2,zero,d1d4 <_ZNSs2atEm+0x38>
    d1cc:	000d12c0 	call	d12c <_ZNSs12_M_leak_hardEv>
    d1d0:	88c00017 	ldw	r3,0(r17)
    d1d4:	80c5883a 	add	r2,r16,r3
    d1d8:	dfc00217 	ldw	ra,8(sp)
    d1dc:	dc400117 	ldw	r17,4(sp)
    d1e0:	dc000017 	ldw	r16,0(sp)
    d1e4:	dec00304 	addi	sp,sp,12
    d1e8:	f800283a 	ret
    d1ec:	010000b4 	movhi	r4,2
    d1f0:	213a5104 	addi	r4,r4,-5820
    d1f4:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000d1f8 <_ZNSsixEm>:
    d1f8:	20c00017 	ldw	r3,0(r4)
    d1fc:	defffd04 	addi	sp,sp,-12
    d200:	dc400115 	stw	r17,4(sp)
    d204:	18bfff17 	ldw	r2,-4(r3)
    d208:	dc000015 	stw	r16,0(sp)
    d20c:	dfc00215 	stw	ra,8(sp)
    d210:	2021883a 	mov	r16,r4
    d214:	2823883a 	mov	r17,r5
    d218:	10000216 	blt	r2,zero,d224 <_ZNSsixEm+0x2c>
    d21c:	000d12c0 	call	d12c <_ZNSs12_M_leak_hardEv>
    d220:	80c00017 	ldw	r3,0(r16)
    d224:	88c5883a 	add	r2,r17,r3
    d228:	dfc00217 	ldw	ra,8(sp)
    d22c:	dc400117 	ldw	r17,4(sp)
    d230:	dc000017 	ldw	r16,0(sp)
    d234:	dec00304 	addi	sp,sp,12
    d238:	f800283a 	ret

0000d23c <_ZNSs3endEv>:
    d23c:	20c00017 	ldw	r3,0(r4)
    d240:	defffe04 	addi	sp,sp,-8
    d244:	dc000015 	stw	r16,0(sp)
    d248:	18bfff17 	ldw	r2,-4(r3)
    d24c:	dfc00115 	stw	ra,4(sp)
    d250:	2021883a 	mov	r16,r4
    d254:	10000216 	blt	r2,zero,d260 <_ZNSs3endEv+0x24>
    d258:	000d12c0 	call	d12c <_ZNSs12_M_leak_hardEv>
    d25c:	80c00017 	ldw	r3,0(r16)
    d260:	18bffd17 	ldw	r2,-12(r3)
    d264:	1885883a 	add	r2,r3,r2
    d268:	dfc00117 	ldw	ra,4(sp)
    d26c:	dc000017 	ldw	r16,0(sp)
    d270:	dec00204 	addi	sp,sp,8
    d274:	f800283a 	ret

0000d278 <_ZNSs5beginEv>:
    d278:	20c00017 	ldw	r3,0(r4)
    d27c:	defffe04 	addi	sp,sp,-8
    d280:	dc000015 	stw	r16,0(sp)
    d284:	18bfff17 	ldw	r2,-4(r3)
    d288:	dfc00115 	stw	ra,4(sp)
    d28c:	2021883a 	mov	r16,r4
    d290:	10000216 	blt	r2,zero,d29c <_ZNSs5beginEv+0x24>
    d294:	000d12c0 	call	d12c <_ZNSs12_M_leak_hardEv>
    d298:	80c00017 	ldw	r3,0(r16)
    d29c:	1805883a 	mov	r2,r3
    d2a0:	dfc00117 	ldw	ra,4(sp)
    d2a4:	dc000017 	ldw	r16,0(sp)
    d2a8:	dec00204 	addi	sp,sp,8
    d2ac:	f800283a 	ret

0000d2b0 <_ZNSs4rendEv>:
    d2b0:	28c00017 	ldw	r3,0(r5)
    d2b4:	defffd04 	addi	sp,sp,-12
    d2b8:	dc400115 	stw	r17,4(sp)
    d2bc:	18bfff17 	ldw	r2,-4(r3)
    d2c0:	dc000015 	stw	r16,0(sp)
    d2c4:	2023883a 	mov	r17,r4
    d2c8:	dfc00215 	stw	ra,8(sp)
    d2cc:	2821883a 	mov	r16,r5
    d2d0:	2809883a 	mov	r4,r5
    d2d4:	10000216 	blt	r2,zero,d2e0 <_ZNSs4rendEv+0x30>
    d2d8:	000d12c0 	call	d12c <_ZNSs12_M_leak_hardEv>
    d2dc:	80c00017 	ldw	r3,0(r16)
    d2e0:	8805883a 	mov	r2,r17
    d2e4:	88c00015 	stw	r3,0(r17)
    d2e8:	dfc00217 	ldw	ra,8(sp)
    d2ec:	dc400117 	ldw	r17,4(sp)
    d2f0:	dc000017 	ldw	r16,0(sp)
    d2f4:	dec00304 	addi	sp,sp,12
    d2f8:	f800283a 	ret

0000d2fc <_ZNSs6rbeginEv>:
    d2fc:	defffd04 	addi	sp,sp,-12
    d300:	dc000015 	stw	r16,0(sp)
    d304:	2821883a 	mov	r16,r5
    d308:	29400017 	ldw	r5,0(r5)
    d30c:	dc400115 	stw	r17,4(sp)
    d310:	dfc00215 	stw	ra,8(sp)
    d314:	28bfff17 	ldw	r2,-4(r5)
    d318:	2023883a 	mov	r17,r4
    d31c:	8009883a 	mov	r4,r16
    d320:	10000216 	blt	r2,zero,d32c <_ZNSs6rbeginEv+0x30>
    d324:	000d12c0 	call	d12c <_ZNSs12_M_leak_hardEv>
    d328:	81400017 	ldw	r5,0(r16)
    d32c:	28fffd17 	ldw	r3,-12(r5)
    d330:	8805883a 	mov	r2,r17
    d334:	28c7883a 	add	r3,r5,r3
    d338:	88c00015 	stw	r3,0(r17)
    d33c:	dfc00217 	ldw	ra,8(sp)
    d340:	dc400117 	ldw	r17,4(sp)
    d344:	dc000017 	ldw	r16,0(sp)
    d348:	dec00304 	addi	sp,sp,12
    d34c:	f800283a 	ret

0000d350 <_ZNSs6resizeEmc>:
    d350:	20c00017 	ldw	r3,0(r4)
    d354:	deffff04 	addi	sp,sp,-4
    d358:	00900034 	movhi	r2,16384
    d35c:	10bfff04 	addi	r2,r2,-4
    d360:	3011883a 	mov	r8,r6
    d364:	dfc00015 	stw	ra,0(sp)
    d368:	19bffd17 	ldw	r6,-12(r3)
    d36c:	11401136 	bltu	r2,r5,d3b4 <_ZNSs6resizeEmc+0x64>
    d370:	31400936 	bltu	r6,r5,d398 <_ZNSs6resizeEmc+0x48>
    d374:	29800336 	bltu	r5,r6,d384 <_ZNSs6resizeEmc+0x34>
    d378:	dfc00017 	ldw	ra,0(sp)
    d37c:	dec00104 	addi	sp,sp,4
    d380:	f800283a 	ret
    d384:	314dc83a 	sub	r6,r6,r5
    d388:	000f883a 	mov	r7,zero
    d38c:	dfc00017 	ldw	ra,0(sp)
    d390:	dec00104 	addi	sp,sp,4
    d394:	000c6a41 	jmpi	c6a4 <_ZNSs9_M_mutateEmmm>
    d398:	298bc83a 	sub	r5,r5,r6
    d39c:	41803fcc 	andi	r6,r8,255
    d3a0:	3180201c 	xori	r6,r6,128
    d3a4:	31bfe004 	addi	r6,r6,-128
    d3a8:	dfc00017 	ldw	ra,0(sp)
    d3ac:	dec00104 	addi	sp,sp,4
    d3b0:	000c08c1 	jmpi	c08c <_ZNSs6appendEmc>
    d3b4:	010000b4 	movhi	r4,2
    d3b8:	213aa404 	addi	r4,r4,-5488
    d3bc:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>

0000d3c0 <_ZNSs6resizeEm>:
    d3c0:	000d883a 	mov	r6,zero
    d3c4:	000d3501 	jmpi	d350 <_ZNSs6resizeEmc>

0000d3c8 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>:
    d3c8:	deffe804 	addi	sp,sp,-96
    d3cc:	00800074 	movhi	r2,1
    d3d0:	10b9cd04 	addi	r2,r2,-6348
    d3d4:	00c000b4 	movhi	r3,2
    d3d8:	18f91944 	addi	r3,r3,-7067
    d3dc:	d8800715 	stw	r2,28(sp)
    d3e0:	d9001115 	stw	r4,68(sp)
    d3e4:	00800074 	movhi	r2,1
    d3e8:	10b52804 	addi	r2,r2,-11104
    d3ec:	d9000104 	addi	r4,sp,4
    d3f0:	d8c00815 	stw	r3,32(sp)
    d3f4:	d9401215 	stw	r5,72(sp)
    d3f8:	dfc01715 	stw	ra,92(sp)
    d3fc:	d8800a15 	stw	r2,40(sp)
    d400:	d9801315 	stw	r6,76(sp)
    d404:	df001615 	stw	fp,88(sp)
    d408:	ddc01515 	stw	r23,84(sp)
    d40c:	dec00915 	stw	sp,36(sp)
    d410:	dec00b15 	stw	sp,44(sp)
    d414:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    d418:	d9001217 	ldw	r4,72(sp)
    d41c:	001511c0 	call	1511c <strlen>
    d420:	00c000b4 	movhi	r3,2
    d424:	18ca2404 	addi	r3,r3,10384
    d428:	d8801415 	stw	r2,80(sp)
    d42c:	18800304 	addi	r2,r3,12
    d430:	d8c01117 	ldw	r3,68(sp)
    d434:	d9001117 	ldw	r4,68(sp)
    d438:	18800015 	stw	r2,0(r3)
    d43c:	d8801317 	ldw	r2,76(sp)
    d440:	10c00017 	ldw	r3,0(r2)
    d444:	d8801117 	ldw	r2,68(sp)
    d448:	197ffd17 	ldw	r5,-12(r3)
    d44c:	d8c01417 	ldw	r3,80(sp)
    d450:	d8800f15 	stw	r2,60(sp)
    d454:	00800084 	movi	r2,2
    d458:	d8800215 	stw	r2,8(sp)
    d45c:	194b883a 	add	r5,r3,r5
    d460:	000bedc0 	call	bedc <_ZNSs7reserveEm>
    d464:	d9001117 	ldw	r4,68(sp)
    d468:	d9401217 	ldw	r5,72(sp)
    d46c:	d9801417 	ldw	r6,80(sp)
    d470:	000c16c0 	call	c16c <_ZNSs6appendEPKcm>
    d474:	d9001117 	ldw	r4,68(sp)
    d478:	d9401317 	ldw	r5,76(sp)
    d47c:	000c3e00 	call	c3e0 <_ZNSs6appendERKSs>
    d480:	d9000104 	addi	r4,sp,4
    d484:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    d488:	d8801117 	ldw	r2,68(sp)
    d48c:	dfc01717 	ldw	ra,92(sp)
    d490:	df001617 	ldw	fp,88(sp)
    d494:	ddc01517 	ldw	r23,84(sp)
    d498:	dec01804 	addi	sp,sp,96
    d49c:	f800283a 	ret
    d4a0:	d8c00217 	ldw	r3,8(sp)
    d4a4:	00800044 	movi	r2,1
    d4a8:	d9000317 	ldw	r4,12(sp)
    d4ac:	18800326 	beq	r3,r2,d4bc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0xf4>
    d4b0:	00bfffc4 	movi	r2,-1
    d4b4:	d8800215 	stw	r2,8(sp)
    d4b8:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    d4bc:	d8c00f17 	ldw	r3,60(sp)
    d4c0:	d9001015 	stw	r4,64(sp)
    d4c4:	18800017 	ldw	r2,0(r3)
    d4c8:	00c000b4 	movhi	r3,2
    d4cc:	18ca2404 	addi	r3,r3,10384
    d4d0:	10bffd04 	addi	r2,r2,-12
    d4d4:	d8800e15 	stw	r2,56(sp)
    d4d8:	1880041e 	bne	r3,r2,d4ec <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x124>
    d4dc:	d9001017 	ldw	r4,64(sp)
    d4e0:	00bfffc4 	movi	r2,-1
    d4e4:	d8800215 	stw	r2,8(sp)
    d4e8:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    d4ec:	00800044 	movi	r2,1
    d4f0:	d8800215 	stw	r2,8(sp)
    d4f4:	d8800e17 	ldw	r2,56(sp)
    d4f8:	017fffc4 	movi	r5,-1
    d4fc:	11000204 	addi	r4,r2,8
    d500:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    d504:	00bff516 	blt	zero,r2,d4dc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>
    d508:	d9000e17 	ldw	r4,56(sp)
    d50c:	d80b883a 	mov	r5,sp
    d510:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    d514:	003ff106 	br	d4dc <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>

0000d518 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>:
    d518:	deffe904 	addi	sp,sp,-92
    d51c:	00800074 	movhi	r2,1
    d520:	10b9cd04 	addi	r2,r2,-6348
    d524:	00c000b4 	movhi	r3,2
    d528:	18f91b44 	addi	r3,r3,-7059
    d52c:	d8800715 	stw	r2,28(sp)
    d530:	d9001115 	stw	r4,68(sp)
    d534:	00800074 	movhi	r2,1
    d538:	10b56e04 	addi	r2,r2,-10824
    d53c:	d9000104 	addi	r4,sp,4
    d540:	dfc01615 	stw	ra,88(sp)
    d544:	d8c00815 	stw	r3,32(sp)
    d548:	d8800a15 	stw	r2,40(sp)
    d54c:	d9801315 	stw	r6,76(sp)
    d550:	d9401215 	stw	r5,72(sp)
    d554:	df001515 	stw	fp,84(sp)
    d558:	ddc01415 	stw	r23,80(sp)
    d55c:	dec00915 	stw	sp,36(sp)
    d560:	dec00b15 	stw	sp,44(sp)
    d564:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    d568:	d9401217 	ldw	r5,72(sp)
    d56c:	d9001117 	ldw	r4,68(sp)
    d570:	00bfffc4 	movi	r2,-1
    d574:	d8800215 	stw	r2,8(sp)
    d578:	000bb6c0 	call	bb6c <_ZNSsC1ERKSs>
    d57c:	00800084 	movi	r2,2
    d580:	d8800215 	stw	r2,8(sp)
    d584:	d8801117 	ldw	r2,68(sp)
    d588:	d9401317 	ldw	r5,76(sp)
    d58c:	d8801015 	stw	r2,64(sp)
    d590:	1009883a 	mov	r4,r2
    d594:	000c3e00 	call	c3e0 <_ZNSs6appendERKSs>
    d598:	d9000104 	addi	r4,sp,4
    d59c:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    d5a0:	d8801117 	ldw	r2,68(sp)
    d5a4:	dfc01617 	ldw	ra,88(sp)
    d5a8:	df001517 	ldw	fp,84(sp)
    d5ac:	ddc01417 	ldw	r23,80(sp)
    d5b0:	dec01704 	addi	sp,sp,92
    d5b4:	f800283a 	ret
    d5b8:	d8c00217 	ldw	r3,8(sp)
    d5bc:	00800044 	movi	r2,1
    d5c0:	d9000317 	ldw	r4,12(sp)
    d5c4:	18800326 	beq	r3,r2,d5d4 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xbc>
    d5c8:	00bfffc4 	movi	r2,-1
    d5cc:	d8800215 	stw	r2,8(sp)
    d5d0:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    d5d4:	d8801017 	ldw	r2,64(sp)
    d5d8:	d9000f15 	stw	r4,60(sp)
    d5dc:	10c00017 	ldw	r3,0(r2)
    d5e0:	008000b4 	movhi	r2,2
    d5e4:	108a2404 	addi	r2,r2,10384
    d5e8:	18fffd04 	addi	r3,r3,-12
    d5ec:	d8c00e15 	stw	r3,56(sp)
    d5f0:	1880041e 	bne	r3,r2,d604 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xec>
    d5f4:	d9000f17 	ldw	r4,60(sp)
    d5f8:	00bfffc4 	movi	r2,-1
    d5fc:	d8800215 	stw	r2,8(sp)
    d600:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    d604:	00800044 	movi	r2,1
    d608:	d8800215 	stw	r2,8(sp)
    d60c:	19000204 	addi	r4,r3,8
    d610:	017fffc4 	movi	r5,-1
    d614:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    d618:	00bff616 	blt	zero,r2,d5f4 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>
    d61c:	d9000e17 	ldw	r4,56(sp)
    d620:	d80b883a 	mov	r5,sp
    d624:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    d628:	003ff206 	br	d5f4 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>

0000d62c <_ZNSs4swapERSs>:
    d62c:	21c00017 	ldw	r7,0(r4)
    d630:	38fffd04 	addi	r3,r7,-12
    d634:	18800217 	ldw	r2,8(r3)
    d638:	1000010e 	bge	r2,zero,d640 <_ZNSs4swapERSs+0x14>
    d63c:	18000215 	stw	zero,8(r3)
    d640:	29800017 	ldw	r6,0(r5)
    d644:	30fffd04 	addi	r3,r6,-12
    d648:	18800217 	ldw	r2,8(r3)
    d64c:	1000010e 	bge	r2,zero,d654 <_ZNSs4swapERSs+0x28>
    d650:	18000215 	stw	zero,8(r3)
    d654:	21800015 	stw	r6,0(r4)
    d658:	29c00015 	stw	r7,0(r5)
    d65c:	f800283a 	ret

0000d660 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_>:
    d660:	deffe904 	addi	sp,sp,-92
    d664:	00800074 	movhi	r2,1
    d668:	10b9cd04 	addi	r2,r2,-6348
    d66c:	00c000b4 	movhi	r3,2
    d670:	18f91d44 	addi	r3,r3,-7051
    d674:	d8800715 	stw	r2,28(sp)
    d678:	d9001115 	stw	r4,68(sp)
    d67c:	00800074 	movhi	r2,1
    d680:	10b5cd04 	addi	r2,r2,-10444
    d684:	d9000104 	addi	r4,sp,4
    d688:	d8c00815 	stw	r3,32(sp)
    d68c:	d8800a15 	stw	r2,40(sp)
    d690:	d9401205 	stb	r5,72(sp)
    d694:	dfc01615 	stw	ra,88(sp)
    d698:	df001515 	stw	fp,84(sp)
    d69c:	ddc01415 	stw	r23,80(sp)
    d6a0:	dec00915 	stw	sp,36(sp)
    d6a4:	dec00b15 	stw	sp,44(sp)
    d6a8:	d9801315 	stw	r6,76(sp)
    d6ac:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    d6b0:	00c000b4 	movhi	r3,2
    d6b4:	18ca2404 	addi	r3,r3,10384
    d6b8:	18800304 	addi	r2,r3,12
    d6bc:	d8c01117 	ldw	r3,68(sp)
    d6c0:	18800015 	stw	r2,0(r3)
    d6c4:	d8801317 	ldw	r2,76(sp)
    d6c8:	10c00017 	ldw	r3,0(r2)
    d6cc:	00800084 	movi	r2,2
    d6d0:	197ffd17 	ldw	r5,-12(r3)
    d6d4:	d8c01117 	ldw	r3,68(sp)
    d6d8:	d8800215 	stw	r2,8(sp)
    d6dc:	29400044 	addi	r5,r5,1
    d6e0:	d8c00f15 	stw	r3,60(sp)
    d6e4:	1809883a 	mov	r4,r3
    d6e8:	000bedc0 	call	bedc <_ZNSs7reserveEm>
    d6ec:	d8801203 	ldbu	r2,72(sp)
    d6f0:	d9001117 	ldw	r4,68(sp)
    d6f4:	01400044 	movi	r5,1
    d6f8:	11803fcc 	andi	r6,r2,255
    d6fc:	3180201c 	xori	r6,r6,128
    d700:	31bfe004 	addi	r6,r6,-128
    d704:	000c08c0 	call	c08c <_ZNSs6appendEmc>
    d708:	d9001117 	ldw	r4,68(sp)
    d70c:	d9401317 	ldw	r5,76(sp)
    d710:	000c3e00 	call	c3e0 <_ZNSs6appendERKSs>
    d714:	d9000104 	addi	r4,sp,4
    d718:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    d71c:	d8801117 	ldw	r2,68(sp)
    d720:	dfc01617 	ldw	ra,88(sp)
    d724:	df001517 	ldw	fp,84(sp)
    d728:	ddc01417 	ldw	r23,80(sp)
    d72c:	dec01704 	addi	sp,sp,92
    d730:	f800283a 	ret
    d734:	d8c00217 	ldw	r3,8(sp)
    d738:	00800044 	movi	r2,1
    d73c:	d9000317 	ldw	r4,12(sp)
    d740:	18800326 	beq	r3,r2,d750 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0xf0>
    d744:	00bfffc4 	movi	r2,-1
    d748:	d8800215 	stw	r2,8(sp)
    d74c:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    d750:	d8c00f17 	ldw	r3,60(sp)
    d754:	d9001015 	stw	r4,64(sp)
    d758:	18800017 	ldw	r2,0(r3)
    d75c:	00c000b4 	movhi	r3,2
    d760:	18ca2404 	addi	r3,r3,10384
    d764:	10bffd04 	addi	r2,r2,-12
    d768:	d8800e15 	stw	r2,56(sp)
    d76c:	1880041e 	bne	r3,r2,d780 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x120>
    d770:	d9001017 	ldw	r4,64(sp)
    d774:	00bfffc4 	movi	r2,-1
    d778:	d8800215 	stw	r2,8(sp)
    d77c:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    d780:	00800044 	movi	r2,1
    d784:	d8800215 	stw	r2,8(sp)
    d788:	d8800e17 	ldw	r2,56(sp)
    d78c:	017fffc4 	movi	r5,-1
    d790:	11000204 	addi	r4,r2,8
    d794:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    d798:	00bff516 	blt	zero,r2,d770 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>
    d79c:	d9000e17 	ldw	r4,56(sp)
    d7a0:	d80b883a 	mov	r5,sp
    d7a4:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    d7a8:	003ff106 	br	d770 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>

0000d7ac <_ZNSs7replaceEmmPKcm>:
    d7ac:	deffe304 	addi	sp,sp,-116
    d7b0:	00800074 	movhi	r2,1
    d7b4:	10b68404 	addi	r2,r2,-9712
    d7b8:	d8800c15 	stw	r2,48(sp)
    d7bc:	d8800104 	addi	r2,sp,4
    d7c0:	00c000b4 	movhi	r3,2
    d7c4:	18f91f44 	addi	r3,r3,-7043
    d7c8:	d9001615 	stw	r4,88(sp)
    d7cc:	d8800b15 	stw	r2,44(sp)
    d7d0:	d9000304 	addi	r4,sp,12
    d7d4:	00800074 	movhi	r2,1
    d7d8:	10b9cd04 	addi	r2,r2,-6348
    d7dc:	d8c00a15 	stw	r3,40(sp)
    d7e0:	d9401715 	stw	r5,92(sp)
    d7e4:	d9801815 	stw	r6,96(sp)
    d7e8:	d9c01915 	stw	r7,100(sp)
    d7ec:	dfc01c15 	stw	ra,112(sp)
    d7f0:	df001b15 	stw	fp,108(sp)
    d7f4:	ddc01a15 	stw	r23,104(sp)
    d7f8:	dec00d15 	stw	sp,52(sp)
    d7fc:	d8800915 	stw	r2,36(sp)
    d800:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    d804:	d8c01617 	ldw	r3,88(sp)
    d808:	d9801717 	ldw	r6,92(sp)
    d80c:	19400017 	ldw	r5,0(r3)
    d810:	29fffd04 	addi	r7,r5,-12
    d814:	39000017 	ldw	r4,0(r7)
    d818:	21807336 	bltu	r4,r6,d9e8 <_ZNSs7replaceEmmPKcm+0x23c>
    d81c:	d8c01717 	ldw	r3,92(sp)
    d820:	d8801817 	ldw	r2,96(sp)
    d824:	20cdc83a 	sub	r6,r4,r3
    d828:	d8801015 	stw	r2,64(sp)
    d82c:	30801b36 	bltu	r6,r2,d89c <_ZNSs7replaceEmmPKcm+0xf0>
    d830:	d9801017 	ldw	r6,64(sp)
    d834:	00900034 	movhi	r2,16384
    d838:	10bfff04 	addi	r2,r2,-4
    d83c:	2187c83a 	sub	r3,r4,r6
    d840:	10c5c83a 	sub	r2,r2,r3
    d844:	d8c01d17 	ldw	r3,116(sp)
    d848:	10c06c36 	bltu	r2,r3,d9fc <_ZNSs7replaceEmmPKcm+0x250>
    d84c:	d9801917 	ldw	r6,100(sp)
    d850:	3140142e 	bgeu	r6,r5,d8a4 <_ZNSs7replaceEmmPKcm+0xf8>
    d854:	d8801d17 	ldw	r2,116(sp)
    d858:	d9001617 	ldw	r4,88(sp)
    d85c:	d9401717 	ldw	r5,92(sp)
    d860:	d9801017 	ldw	r6,64(sp)
    d864:	d9c01917 	ldw	r7,100(sp)
    d868:	d8800015 	stw	r2,0(sp)
    d86c:	00bfffc4 	movi	r2,-1
    d870:	d8800415 	stw	r2,16(sp)
    d874:	000c8dc0 	call	c8dc <_ZNSs15_M_replace_safeEmmPKcm>
    d878:	d8801615 	stw	r2,88(sp)
    d87c:	d9000304 	addi	r4,sp,12
    d880:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    d884:	d8801617 	ldw	r2,88(sp)
    d888:	dfc01c17 	ldw	ra,112(sp)
    d88c:	df001b17 	ldw	fp,108(sp)
    d890:	ddc01a17 	ldw	r23,104(sp)
    d894:	dec01d04 	addi	sp,sp,116
    d898:	f800283a 	ret
    d89c:	d9801015 	stw	r6,64(sp)
    d8a0:	003fe306 	br	d830 <_ZNSs7replaceEmmPKcm+0x84>
    d8a4:	2905883a 	add	r2,r5,r4
    d8a8:	11bfea36 	bltu	r2,r6,d854 <_ZNSs7replaceEmmPKcm+0xa8>
    d8ac:	38800217 	ldw	r2,8(r7)
    d8b0:	00bfe816 	blt	zero,r2,d854 <_ZNSs7replaceEmmPKcm+0xa8>
    d8b4:	d8801717 	ldw	r2,92(sp)
    d8b8:	d9001917 	ldw	r4,100(sp)
    d8bc:	d9801d17 	ldw	r6,116(sp)
    d8c0:	d8801515 	stw	r2,84(sp)
    d8c4:	2887883a 	add	r3,r5,r2
    d8c8:	2185883a 	add	r2,r4,r6
    d8cc:	18801636 	bltu	r3,r2,d928 <_ZNSs7replaceEmmPKcm+0x17c>
    d8d0:	d8c01917 	ldw	r3,100(sp)
    d8d4:	194bc83a 	sub	r5,r3,r5
    d8d8:	d9401415 	stw	r5,80(sp)
    d8dc:	d9401717 	ldw	r5,92(sp)
    d8e0:	d9801017 	ldw	r6,64(sp)
    d8e4:	d9001617 	ldw	r4,88(sp)
    d8e8:	d9c01d17 	ldw	r7,116(sp)
    d8ec:	00bfffc4 	movi	r2,-1
    d8f0:	d8800415 	stw	r2,16(sp)
    d8f4:	000c6a40 	call	c6a4 <_ZNSs9_M_mutateEmmm>
    d8f8:	d9801617 	ldw	r6,88(sp)
    d8fc:	d8801417 	ldw	r2,80(sp)
    d900:	30c00017 	ldw	r3,0(r6)
    d904:	d9801517 	ldw	r6,84(sp)
    d908:	188b883a 	add	r5,r3,r2
    d90c:	30c9883a 	add	r4,r6,r3
    d910:	d8c01d17 	ldw	r3,116(sp)
    d914:	00800044 	movi	r2,1
    d918:	18800d1e 	bne	r3,r2,d950 <_ZNSs7replaceEmmPKcm+0x1a4>
    d91c:	28800003 	ldbu	r2,0(r5)
    d920:	20800005 	stb	r2,0(r4)
    d924:	003fd506 	br	d87c <_ZNSs7replaceEmmPKcm+0xd0>
    d928:	d9001017 	ldw	r4,64(sp)
    d92c:	d9801917 	ldw	r6,100(sp)
    d930:	1905883a 	add	r2,r3,r4
    d934:	30800936 	bltu	r6,r2,d95c <_ZNSs7replaceEmmPKcm+0x1b0>
    d938:	3147c83a 	sub	r3,r6,r5
    d93c:	d9401d17 	ldw	r5,116(sp)
    d940:	2905c83a 	sub	r2,r5,r4
    d944:	1887883a 	add	r3,r3,r2
    d948:	d8c01415 	stw	r3,80(sp)
    d94c:	003fe306 	br	d8dc <_ZNSs7replaceEmmPKcm+0x130>
    d950:	d9801d17 	ldw	r6,116(sp)
    d954:	0013e340 	call	13e34 <memcpy>
    d958:	003fc806 	br	d87c <_ZNSs7replaceEmmPKcm+0xd0>
    d95c:	01000104 	movi	r4,4
    d960:	d905883a 	add	r2,sp,r4
    d964:	d9000415 	stw	r4,16(sp)
    d968:	d9401917 	ldw	r5,100(sp)
    d96c:	1109883a 	add	r4,r2,r4
    d970:	d9801d17 	ldw	r6,116(sp)
    d974:	d9c00184 	addi	r7,sp,6
    d978:	000b8d40 	call	b8d4 <_ZNSsC1EPKcmRKSaIcE>
    d97c:	d9001d17 	ldw	r4,116(sp)
    d980:	008000c4 	movi	r2,3
    d984:	d9c00217 	ldw	r7,8(sp)
    d988:	d9000015 	stw	r4,0(sp)
    d98c:	d8800415 	stw	r2,16(sp)
    d990:	d9001617 	ldw	r4,88(sp)
    d994:	d9401717 	ldw	r5,92(sp)
    d998:	d9801017 	ldw	r6,64(sp)
    d99c:	000c8dc0 	call	c8dc <_ZNSs15_M_replace_safeEmmPKcm>
    d9a0:	d8801615 	stw	r2,88(sp)
    d9a4:	d8800217 	ldw	r2,8(sp)
    d9a8:	00c000b4 	movhi	r3,2
    d9ac:	18ca2404 	addi	r3,r3,10384
    d9b0:	10bffd04 	addi	r2,r2,-12
    d9b4:	d8801215 	stw	r2,72(sp)
    d9b8:	10ffb026 	beq	r2,r3,d87c <_ZNSs7replaceEmmPKcm+0xd0>
    d9bc:	d9401217 	ldw	r5,72(sp)
    d9c0:	00800084 	movi	r2,2
    d9c4:	d8800415 	stw	r2,16(sp)
    d9c8:	29000204 	addi	r4,r5,8
    d9cc:	017fffc4 	movi	r5,-1
    d9d0:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    d9d4:	00bfa916 	blt	zero,r2,d87c <_ZNSs7replaceEmmPKcm+0xd0>
    d9d8:	d9001217 	ldw	r4,72(sp)
    d9dc:	d9400144 	addi	r5,sp,5
    d9e0:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    d9e4:	003fa506 	br	d87c <_ZNSs7replaceEmmPKcm+0xd0>
    d9e8:	00bfffc4 	movi	r2,-1
    d9ec:	010000b4 	movhi	r4,2
    d9f0:	213a9304 	addi	r4,r4,-5556
    d9f4:	d8800415 	stw	r2,16(sp)
    d9f8:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>
    d9fc:	00bfffc4 	movi	r2,-1
    da00:	010000b4 	movhi	r4,2
    da04:	213a9304 	addi	r4,r4,-5556
    da08:	d8800415 	stw	r2,16(sp)
    da0c:	0008a000 	call	8a00 <_ZSt20__throw_length_errorPKc>
    da10:	d8c00417 	ldw	r3,16(sp)
    da14:	00800044 	movi	r2,1
    da18:	d9000517 	ldw	r4,20(sp)
    da1c:	18800226 	beq	r3,r2,da28 <_ZNSs7replaceEmmPKcm+0x27c>
    da20:	00800084 	movi	r2,2
    da24:	18800326 	beq	r3,r2,da34 <_ZNSs7replaceEmmPKcm+0x288>
    da28:	00bfffc4 	movi	r2,-1
    da2c:	d8800415 	stw	r2,16(sp)
    da30:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    da34:	d8800217 	ldw	r2,8(sp)
    da38:	00c000b4 	movhi	r3,2
    da3c:	18ca2404 	addi	r3,r3,10384
    da40:	d9001315 	stw	r4,76(sp)
    da44:	10bffd04 	addi	r2,r2,-12
    da48:	d8801115 	stw	r2,68(sp)
    da4c:	10c0041e 	bne	r2,r3,da60 <_ZNSs7replaceEmmPKcm+0x2b4>
    da50:	d9001317 	ldw	r4,76(sp)
    da54:	00bfffc4 	movi	r2,-1
    da58:	d8800415 	stw	r2,16(sp)
    da5c:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    da60:	d9801117 	ldw	r6,68(sp)
    da64:	00800044 	movi	r2,1
    da68:	d8800415 	stw	r2,16(sp)
    da6c:	31000204 	addi	r4,r6,8
    da70:	017fffc4 	movi	r5,-1
    da74:	000dc840 	call	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    da78:	00bff516 	blt	zero,r2,da50 <_ZNSs7replaceEmmPKcm+0x2a4>
    da7c:	d9001117 	ldw	r4,68(sp)
    da80:	d9400104 	addi	r5,sp,4
    da84:	000a7140 	call	a714 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    da88:	003ff106 	br	da50 <_ZNSs7replaceEmmPKcm+0x2a4>

0000da8c <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_>:
    da8c:	d8800017 	ldw	r2,0(sp)
    da90:	20c00017 	ldw	r3,0(r4)
    da94:	314dc83a 	sub	r6,r6,r5
    da98:	11c5c83a 	sub	r2,r2,r7
    da9c:	28cbc83a 	sub	r5,r5,r3
    daa0:	d8800015 	stw	r2,0(sp)
    daa4:	000d7ac1 	jmpi	d7ac <_ZNSs7replaceEmmPKcm>

0000daa8 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_>:
    daa8:	d8800017 	ldw	r2,0(sp)
    daac:	20c00017 	ldw	r3,0(r4)
    dab0:	314dc83a 	sub	r6,r6,r5
    dab4:	11c5c83a 	sub	r2,r2,r7
    dab8:	28cbc83a 	sub	r5,r5,r3
    dabc:	d8800015 	stw	r2,0(sp)
    dac0:	000d7ac1 	jmpi	d7ac <_ZNSs7replaceEmmPKcm>

0000dac4 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_>:
    dac4:	d8800017 	ldw	r2,0(sp)
    dac8:	20c00017 	ldw	r3,0(r4)
    dacc:	314dc83a 	sub	r6,r6,r5
    dad0:	11c5c83a 	sub	r2,r2,r7
    dad4:	28cbc83a 	sub	r5,r5,r3
    dad8:	d8800015 	stw	r2,0(sp)
    dadc:	000d7ac1 	jmpi	d7ac <_ZNSs7replaceEmmPKcm>

0000dae0 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_>:
    dae0:	d8800017 	ldw	r2,0(sp)
    dae4:	20c00017 	ldw	r3,0(r4)
    dae8:	314dc83a 	sub	r6,r6,r5
    daec:	11c5c83a 	sub	r2,r2,r7
    daf0:	28cbc83a 	sub	r5,r5,r3
    daf4:	d8800015 	stw	r2,0(sp)
    daf8:	000d7ac1 	jmpi	d7ac <_ZNSs7replaceEmmPKcm>

0000dafc <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm>:
    dafc:	20800017 	ldw	r2,0(r4)
    db00:	314dc83a 	sub	r6,r6,r5
    db04:	288bc83a 	sub	r5,r5,r2
    db08:	000d7ac1 	jmpi	d7ac <_ZNSs7replaceEmmPKcm>

0000db0c <_ZNSs7replaceEmmPKc>:
    db0c:	defffa04 	addi	sp,sp,-24
    db10:	dfc00515 	stw	ra,20(sp)
    db14:	ddc00415 	stw	r23,16(sp)
    db18:	dd400315 	stw	r21,12(sp)
    db1c:	dcc00215 	stw	r19,8(sp)
    db20:	dc400115 	stw	r17,4(sp)
    db24:	202f883a 	mov	r23,r4
    db28:	3809883a 	mov	r4,r7
    db2c:	382b883a 	mov	r21,r7
    db30:	2823883a 	mov	r17,r5
    db34:	3027883a 	mov	r19,r6
    db38:	001511c0 	call	1511c <strlen>
    db3c:	880b883a 	mov	r5,r17
    db40:	b809883a 	mov	r4,r23
    db44:	980d883a 	mov	r6,r19
    db48:	a80f883a 	mov	r7,r21
    db4c:	d8800015 	stw	r2,0(sp)
    db50:	000d7ac0 	call	d7ac <_ZNSs7replaceEmmPKcm>
    db54:	dfc00517 	ldw	ra,20(sp)
    db58:	ddc00417 	ldw	r23,16(sp)
    db5c:	dd400317 	ldw	r21,12(sp)
    db60:	dcc00217 	ldw	r19,8(sp)
    db64:	dc400117 	ldw	r17,4(sp)
    db68:	dec00604 	addi	sp,sp,24
    db6c:	f800283a 	ret

0000db70 <_ZNSs7replaceEmmRKSsmm>:
    db70:	3a400017 	ldw	r9,0(r7)
    db74:	deffff04 	addi	sp,sp,-4
    db78:	d9c00117 	ldw	r7,4(sp)
    db7c:	48bffd17 	ldw	r2,-12(r9)
    db80:	dfc00015 	stw	ra,0(sp)
    db84:	da000217 	ldw	r8,8(sp)
    db88:	11c00d36 	bltu	r2,r7,dbc0 <_ZNSs7replaceEmmRKSsmm+0x50>
    db8c:	11c7c83a 	sub	r3,r2,r7
    db90:	4005883a 	mov	r2,r8
    db94:	49cf883a 	add	r7,r9,r7
    db98:	1a000436 	bltu	r3,r8,dbac <_ZNSs7replaceEmmRKSsmm+0x3c>
    db9c:	d8800115 	stw	r2,4(sp)
    dba0:	dfc00017 	ldw	ra,0(sp)
    dba4:	dec00104 	addi	sp,sp,4
    dba8:	000d7ac1 	jmpi	d7ac <_ZNSs7replaceEmmPKcm>
    dbac:	1805883a 	mov	r2,r3
    dbb0:	d8800115 	stw	r2,4(sp)
    dbb4:	dfc00017 	ldw	ra,0(sp)
    dbb8:	dec00104 	addi	sp,sp,4
    dbbc:	000d7ac1 	jmpi	d7ac <_ZNSs7replaceEmmPKcm>
    dbc0:	010000b4 	movhi	r4,2
    dbc4:	213a9304 	addi	r4,r4,-5556
    dbc8:	00088700 	call	8870 <_ZSt20__throw_out_of_rangePKc>

0000dbcc <_ZNSs7replaceEmmRKSs>:
    dbcc:	39c00017 	ldw	r7,0(r7)
    dbd0:	defffe04 	addi	sp,sp,-8
    dbd4:	dfc00115 	stw	ra,4(sp)
    dbd8:	38bffd17 	ldw	r2,-12(r7)
    dbdc:	d8800015 	stw	r2,0(sp)
    dbe0:	000d7ac0 	call	d7ac <_ZNSs7replaceEmmPKcm>
    dbe4:	dfc00117 	ldw	ra,4(sp)
    dbe8:	dec00204 	addi	sp,sp,8
    dbec:	f800283a 	ret

0000dbf0 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs>:
    dbf0:	39c00017 	ldw	r7,0(r7)
    dbf4:	20800017 	ldw	r2,0(r4)
    dbf8:	defffe04 	addi	sp,sp,-8
    dbfc:	38fffd17 	ldw	r3,-12(r7)
    dc00:	314dc83a 	sub	r6,r6,r5
    dc04:	288bc83a 	sub	r5,r5,r2
    dc08:	dfc00115 	stw	ra,4(sp)
    dc0c:	d8c00015 	stw	r3,0(sp)
    dc10:	000d7ac0 	call	d7ac <_ZNSs7replaceEmmPKcm>
    dc14:	dfc00117 	ldw	ra,4(sp)
    dc18:	dec00204 	addi	sp,sp,8
    dc1c:	f800283a 	ret

0000dc20 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc>:
    dc20:	20800017 	ldw	r2,0(r4)
    dc24:	defffa04 	addi	sp,sp,-24
    dc28:	dc400215 	stw	r17,8(sp)
    dc2c:	3163c83a 	sub	r17,r6,r5
    dc30:	288bc83a 	sub	r5,r5,r2
    dc34:	dfc00515 	stw	ra,20(sp)
    dc38:	dd400415 	stw	r21,16(sp)
    dc3c:	dcc00315 	stw	r19,12(sp)
    dc40:	d9400115 	stw	r5,4(sp)
    dc44:	2027883a 	mov	r19,r4
    dc48:	3809883a 	mov	r4,r7
    dc4c:	382b883a 	mov	r21,r7
    dc50:	001511c0 	call	1511c <strlen>
    dc54:	d9400117 	ldw	r5,4(sp)
    dc58:	9809883a 	mov	r4,r19
    dc5c:	880d883a 	mov	r6,r17
    dc60:	a80f883a 	mov	r7,r21
    dc64:	d8800015 	stw	r2,0(sp)
    dc68:	000d7ac0 	call	d7ac <_ZNSs7replaceEmmPKcm>
    dc6c:	dfc00517 	ldw	ra,20(sp)
    dc70:	dd400417 	ldw	r21,16(sp)
    dc74:	dcc00317 	ldw	r19,12(sp)
    dc78:	dc400217 	ldw	r17,8(sp)
    dc7c:	dec00604 	addi	sp,sp,24
    dc80:	f800283a 	ret

0000dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>:
    dc84:	20800017 	ldw	r2,0(r4)
    dc88:	20c00017 	ldw	r3,0(r4)
    dc8c:	1947883a 	add	r3,r3,r5
    dc90:	20c00015 	stw	r3,0(r4)
    dc94:	f800283a 	ret

0000dc98 <_ZN9__gnu_cxx12__atomic_addEPVii>:
    dc98:	000dc841 	jmpi	dc84 <_ZN9__gnu_cxx18__exchange_and_addEPVii>

0000dc9c <_ZNSt10bad_typeidD0Ev>:
    dc9c:	defffe04 	addi	sp,sp,-8
    dca0:	008000b4 	movhi	r2,2
    dca4:	10baac04 	addi	r2,r2,-5456
    dca8:	dc400015 	stw	r17,0(sp)
    dcac:	20800015 	stw	r2,0(r4)
    dcb0:	2023883a 	mov	r17,r4
    dcb4:	dfc00115 	stw	ra,4(sp)
    dcb8:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    dcbc:	8809883a 	mov	r4,r17
    dcc0:	dfc00117 	ldw	ra,4(sp)
    dcc4:	dc400017 	ldw	r17,0(sp)
    dcc8:	dec00204 	addi	sp,sp,8
    dccc:	000e01c1 	jmpi	e01c <_ZdlPv>

0000dcd0 <_ZNSt10bad_typeidD1Ev>:
    dcd0:	008000b4 	movhi	r2,2
    dcd4:	10baac04 	addi	r2,r2,-5456
    dcd8:	20800015 	stw	r2,0(r4)
    dcdc:	000f0c01 	jmpi	f0c0 <_ZNSt9exceptionD2Ev>

0000dce0 <_ZNSt10bad_typeidD2Ev>:
    dce0:	008000b4 	movhi	r2,2
    dce4:	10baac04 	addi	r2,r2,-5456
    dce8:	20800015 	stw	r2,0(r4)
    dcec:	000f0c01 	jmpi	f0c0 <_ZNSt9exceptionD2Ev>

0000dcf0 <__cxa_rethrow>:
    dcf0:	defffe04 	addi	sp,sp,-8
    dcf4:	dc400015 	stw	r17,0(sp)
    dcf8:	dfc00115 	stw	ra,4(sp)
    dcfc:	000ee380 	call	ee38 <__cxa_get_globals>
    dd00:	100b883a 	mov	r5,r2
    dd04:	10800117 	ldw	r2,4(r2)
    dd08:	2c400017 	ldw	r17,0(r5)
    dd0c:	10800044 	addi	r2,r2,1
    dd10:	28800115 	stw	r2,4(r5)
    dd14:	88000b26 	beq	r17,zero,dd44 <__cxa_rethrow+0x54>
    dd18:	88c00b17 	ldw	r3,44(r17)
    dd1c:	0090caf4 	movhi	r2,17195
    dd20:	108ac004 	addi	r2,r2,11008
    dd24:	89000c17 	ldw	r4,48(r17)
    dd28:	18800726 	beq	r3,r2,dd48 <__cxa_rethrow+0x58>
    dd2c:	28000015 	stw	zero,0(r5)
    dd30:	8c400b04 	addi	r17,r17,44
    dd34:	8809883a 	mov	r4,r17
    dd38:	0010f1c0 	call	10f1c <_Unwind_SjLj_Resume_or_Rethrow>
    dd3c:	8809883a 	mov	r4,r17
    dd40:	000df040 	call	df04 <__cxa_begin_catch>
    dd44:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    dd48:	0091d3b4 	movhi	r2,18254
    dd4c:	109550c4 	addi	r2,r2,21827
    dd50:	20bff61e 	bne	r4,r2,dd2c <__cxa_rethrow+0x3c>
    dd54:	88800517 	ldw	r2,20(r17)
    dd58:	0085c83a 	sub	r2,zero,r2
    dd5c:	88800515 	stw	r2,20(r17)
    dd60:	003ff306 	br	dd30 <__cxa_rethrow+0x40>

0000dd64 <__cxa_throw>:
    dd64:	008000b4 	movhi	r2,2
    dd68:	10833804 	addi	r2,r2,3296
    dd6c:	00c000b4 	movhi	r3,2
    dd70:	18c33704 	addi	r3,r3,3292
    dd74:	12000017 	ldw	r8,0(r2)
    dd78:	19c00017 	ldw	r7,0(r3)
    dd7c:	defffe04 	addi	sp,sp,-8
    dd80:	213ff004 	addi	r4,r4,-64
    dd84:	dfc00115 	stw	ra,4(sp)
    dd88:	dc400015 	stw	r17,0(sp)
    dd8c:	0090caf4 	movhi	r2,17195
    dd90:	108ac004 	addi	r2,r2,11008
    dd94:	20800b15 	stw	r2,44(r4)
    dd98:	00d1d3b4 	movhi	r3,18254
    dd9c:	18d550c4 	addi	r3,r3,21827
    dda0:	24400b04 	addi	r17,r4,44
    dda4:	00800074 	movhi	r2,1
    dda8:	10b77604 	addi	r2,r2,-8744
    ddac:	21400015 	stw	r5,0(r4)
    ddb0:	21800115 	stw	r6,4(r4)
    ddb4:	22000215 	stw	r8,8(r4)
    ddb8:	21c00315 	stw	r7,12(r4)
    ddbc:	20c00c15 	stw	r3,48(r4)
    ddc0:	20800d15 	stw	r2,52(r4)
    ddc4:	8809883a 	mov	r4,r17
    ddc8:	0010d540 	call	10d54 <_Unwind_SjLj_RaiseException>
    ddcc:	8809883a 	mov	r4,r17
    ddd0:	000df040 	call	df04 <__cxa_begin_catch>
    ddd4:	000ef0c0 	call	ef0c <_ZSt9terminatev>

0000ddd8 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    ddd8:	defffe04 	addi	sp,sp,-8
    dddc:	00800044 	movi	r2,1
    dde0:	dfc00115 	stw	ra,4(sp)
    dde4:	dc000015 	stw	r16,0(sp)
    dde8:	28fff504 	addi	r3,r5,-44
    ddec:	11001036 	bltu	r2,r4,de30 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
    ddf0:	18800117 	ldw	r2,4(r3)
    ddf4:	10000826 	beq	r2,zero,de18 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
    ddf8:	2c000504 	addi	r16,r5,20
    ddfc:	8009883a 	mov	r4,r16
    de00:	103ee83a 	callr	r2
    de04:	8009883a 	mov	r4,r16
    de08:	dfc00117 	ldw	ra,4(sp)
    de0c:	dc000017 	ldw	r16,0(sp)
    de10:	dec00204 	addi	sp,sp,8
    de14:	000f1841 	jmpi	f184 <__cxa_free_exception>
    de18:	2c000504 	addi	r16,r5,20
    de1c:	8009883a 	mov	r4,r16
    de20:	dfc00117 	ldw	ra,4(sp)
    de24:	dc000017 	ldw	r16,0(sp)
    de28:	dec00204 	addi	sp,sp,8
    de2c:	000f1841 	jmpi	f184 <__cxa_free_exception>
    de30:	19000317 	ldw	r4,12(r3)
    de34:	000ee680 	call	ee68 <_ZN10__cxxabiv111__terminateEPFvvE>

0000de38 <__cxa_get_exception_ptr>:
    de38:	20bfff17 	ldw	r2,-4(r4)
    de3c:	f800283a 	ret

0000de40 <_ZSt18uncaught_exceptionv>:
    de40:	deffff04 	addi	sp,sp,-4
    de44:	dfc00015 	stw	ra,0(sp)
    de48:	000ee380 	call	ee38 <__cxa_get_globals>
    de4c:	10800117 	ldw	r2,4(r2)
    de50:	1004c03a 	cmpne	r2,r2,zero
    de54:	dfc00017 	ldw	ra,0(sp)
    de58:	dec00104 	addi	sp,sp,4
    de5c:	f800283a 	ret

0000de60 <__cxa_end_catch>:
    de60:	deffff04 	addi	sp,sp,-4
    de64:	dfc00015 	stw	ra,0(sp)
    de68:	000ee300 	call	ee30 <__cxa_get_globals_fast>
    de6c:	11000017 	ldw	r4,0(r2)
    de70:	1007883a 	mov	r3,r2
    de74:	20001326 	beq	r4,zero,dec4 <__cxa_end_catch+0x64>
    de78:	21400b17 	ldw	r5,44(r4)
    de7c:	0090caf4 	movhi	r2,17195
    de80:	108ac004 	addi	r2,r2,11008
    de84:	21800c17 	ldw	r6,48(r4)
    de88:	28800526 	beq	r5,r2,dea0 <__cxa_end_catch+0x40>
    de8c:	21000b04 	addi	r4,r4,44
    de90:	18000015 	stw	zero,0(r3)
    de94:	dfc00017 	ldw	ra,0(sp)
    de98:	dec00104 	addi	sp,sp,4
    de9c:	0010bec1 	jmpi	10bec <_Unwind_DeleteException>
    dea0:	0091d3b4 	movhi	r2,18254
    dea4:	109550c4 	addi	r2,r2,21827
    dea8:	30bff81e 	bne	r6,r2,de8c <__cxa_end_catch+0x2c>
    deac:	20800517 	ldw	r2,20(r4)
    deb0:	10000e16 	blt	r2,zero,deec <__cxa_end_catch+0x8c>
    deb4:	117fffc4 	addi	r5,r2,-1
    deb8:	28000526 	beq	r5,zero,ded0 <__cxa_end_catch+0x70>
    debc:	28000a16 	blt	r5,zero,dee8 <__cxa_end_catch+0x88>
    dec0:	21400515 	stw	r5,20(r4)
    dec4:	dfc00017 	ldw	ra,0(sp)
    dec8:	dec00104 	addi	sp,sp,4
    decc:	f800283a 	ret
    ded0:	20800417 	ldw	r2,16(r4)
    ded4:	21000b04 	addi	r4,r4,44
    ded8:	18800015 	stw	r2,0(r3)
    dedc:	dfc00017 	ldw	ra,0(sp)
    dee0:	dec00104 	addi	sp,sp,4
    dee4:	0010bec1 	jmpi	10bec <_Unwind_DeleteException>
    dee8:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    deec:	11400044 	addi	r5,r2,1
    def0:	283ff31e 	bne	r5,zero,dec0 <__cxa_end_catch+0x60>
    def4:	20800417 	ldw	r2,16(r4)
    def8:	21400515 	stw	r5,20(r4)
    defc:	18800015 	stw	r2,0(r3)
    df00:	003ff006 	br	dec4 <__cxa_end_catch+0x64>

0000df04 <__cxa_begin_catch>:
    df04:	deffee04 	addi	sp,sp,-72
    df08:	00800074 	movhi	r2,1
    df0c:	10b9cd04 	addi	r2,r2,-6348
    df10:	00c000b4 	movhi	r3,2
    df14:	18f92304 	addi	r3,r3,-7028
    df18:	d8800615 	stw	r2,24(sp)
    df1c:	d9000e15 	stw	r4,56(sp)
    df20:	00800074 	movhi	r2,1
    df24:	10b7fe04 	addi	r2,r2,-8200
    df28:	d809883a 	mov	r4,sp
    df2c:	d8c00715 	stw	r3,28(sp)
    df30:	dfc01115 	stw	ra,68(sp)
    df34:	d8800915 	stw	r2,36(sp)
    df38:	df001015 	stw	fp,64(sp)
    df3c:	ddc00f15 	stw	r23,60(sp)
    df40:	dec00815 	stw	sp,32(sp)
    df44:	dec00a15 	stw	sp,40(sp)
    df48:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    df4c:	000ee380 	call	ee38 <__cxa_get_globals>
    df50:	100d883a 	mov	r6,r2
    df54:	d8800e17 	ldw	r2,56(sp)
    df58:	31c00017 	ldw	r7,0(r6)
    df5c:	117ff504 	addi	r5,r2,-44
    df60:	28c00b17 	ldw	r3,44(r5)
    df64:	0090caf4 	movhi	r2,17195
    df68:	108ac004 	addi	r2,r2,11008
    df6c:	29000c17 	ldw	r4,48(r5)
    df70:	18800b26 	beq	r3,r2,dfa0 <__cxa_begin_catch+0x9c>
    df74:	38001d1e 	bne	r7,zero,dfec <__cxa_begin_catch+0xe8>
    df78:	d8000d15 	stw	zero,52(sp)
    df7c:	31400015 	stw	r5,0(r6)
    df80:	d809883a 	mov	r4,sp
    df84:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    df88:	d8800d17 	ldw	r2,52(sp)
    df8c:	dfc01117 	ldw	ra,68(sp)
    df90:	df001017 	ldw	fp,64(sp)
    df94:	ddc00f17 	ldw	r23,60(sp)
    df98:	dec01204 	addi	sp,sp,72
    df9c:	f800283a 	ret
    dfa0:	0091d3b4 	movhi	r2,18254
    dfa4:	109550c4 	addi	r2,r2,21827
    dfa8:	20bff21e 	bne	r4,r2,df74 <__cxa_begin_catch+0x70>
    dfac:	28c00517 	ldw	r3,20(r5)
    dfb0:	18000b16 	blt	r3,zero,dfe0 <__cxa_begin_catch+0xdc>
    dfb4:	18800044 	addi	r2,r3,1
    dfb8:	28800515 	stw	r2,20(r5)
    dfbc:	30800117 	ldw	r2,4(r6)
    dfc0:	10bfffc4 	addi	r2,r2,-1
    dfc4:	30800115 	stw	r2,4(r6)
    dfc8:	39400226 	beq	r7,r5,dfd4 <__cxa_begin_catch+0xd0>
    dfcc:	29c00415 	stw	r7,16(r5)
    dfd0:	31400015 	stw	r5,0(r6)
    dfd4:	29400a17 	ldw	r5,40(r5)
    dfd8:	d9400d15 	stw	r5,52(sp)
    dfdc:	003fe806 	br	df80 <__cxa_begin_catch+0x7c>
    dfe0:	00800044 	movi	r2,1
    dfe4:	10c5c83a 	sub	r2,r2,r3
    dfe8:	003ff306 	br	dfb8 <__cxa_begin_catch+0xb4>
    dfec:	00800044 	movi	r2,1
    dff0:	d8800115 	stw	r2,4(sp)
    dff4:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    dff8:	d8800317 	ldw	r2,12(sp)
    dffc:	00ffffc4 	movi	r3,-1
    e000:	d9000217 	ldw	r4,8(sp)
    e004:	10c00226 	beq	r2,r3,e010 <__cxa_begin_catch+0x10c>
    e008:	d8c00115 	stw	r3,4(sp)
    e00c:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    e010:	00bfffc4 	movi	r2,-1
    e014:	d8800115 	stw	r2,4(sp)
    e018:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

0000e01c <_ZdlPv>:
    e01c:	20000126 	beq	r4,zero,e024 <_ZdlPv+0x8>
    e020:	00135741 	jmpi	13574 <free>
    e024:	f800283a 	ret

0000e028 <_Z12read_uleb128PKhPj>:
    e028:	000d883a 	mov	r6,zero
    e02c:	000f883a 	mov	r7,zero
    e030:	20c00007 	ldb	r3,0(r4)
    e034:	21000044 	addi	r4,r4,1
    e038:	18801fcc 	andi	r2,r3,127
    e03c:	1184983a 	sll	r2,r2,r6
    e040:	318001c4 	addi	r6,r6,7
    e044:	388eb03a 	or	r7,r7,r2
    e048:	183ff916 	blt	r3,zero,e030 <_Z12read_uleb128PKhPj+0x8>
    e04c:	2005883a 	mov	r2,r4
    e050:	29c00015 	stw	r7,0(r5)
    e054:	f800283a 	ret

0000e058 <_Z12read_sleb128PKhPi>:
    e058:	000f883a 	mov	r7,zero
    e05c:	0011883a 	mov	r8,zero
    e060:	20c00007 	ldb	r3,0(r4)
    e064:	21000044 	addi	r4,r4,1
    e068:	19803fcc 	andi	r6,r3,255
    e06c:	30801fcc 	andi	r2,r6,127
    e070:	11c4983a 	sll	r2,r2,r7
    e074:	39c001c4 	addi	r7,r7,7
    e078:	4090b03a 	or	r8,r8,r2
    e07c:	183ff816 	blt	r3,zero,e060 <_Z12read_sleb128PKhPi+0x8>
    e080:	008007c4 	movi	r2,31
    e084:	11c00636 	bltu	r2,r7,e0a0 <_Z12read_sleb128PKhPi+0x48>
    e088:	3080100c 	andi	r2,r6,64
    e08c:	10000426 	beq	r2,zero,e0a0 <_Z12read_sleb128PKhPi+0x48>
    e090:	00800044 	movi	r2,1
    e094:	11c4983a 	sll	r2,r2,r7
    e098:	0085c83a 	sub	r2,zero,r2
    e09c:	4090b03a 	or	r8,r8,r2
    e0a0:	2005883a 	mov	r2,r4
    e0a4:	2a000015 	stw	r8,0(r5)
    e0a8:	f800283a 	ret

0000e0ac <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
    e0ac:	28800017 	ldw	r2,0(r5)
    e0b0:	defffb04 	addi	sp,sp,-20
    e0b4:	30c00017 	ldw	r3,0(r6)
    e0b8:	dc400215 	stw	r17,8(sp)
    e0bc:	2823883a 	mov	r17,r5
    e0c0:	11400217 	ldw	r5,8(r2)
    e0c4:	dc800315 	stw	r18,12(sp)
    e0c8:	dc000115 	stw	r16,4(sp)
    e0cc:	dfc00415 	stw	ra,16(sp)
    e0d0:	2021883a 	mov	r16,r4
    e0d4:	d8c00015 	stw	r3,0(sp)
    e0d8:	8809883a 	mov	r4,r17
    e0dc:	3025883a 	mov	r18,r6
    e0e0:	283ee83a 	callr	r5
    e0e4:	10803fcc 	andi	r2,r2,255
    e0e8:	880b883a 	mov	r5,r17
    e0ec:	8009883a 	mov	r4,r16
    e0f0:	d80d883a 	mov	r6,sp
    e0f4:	01c00044 	movi	r7,1
    e0f8:	10000326 	beq	r2,zero,e108 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
    e0fc:	d8800017 	ldw	r2,0(sp)
    e100:	10c00017 	ldw	r3,0(r2)
    e104:	d8c00015 	stw	r3,0(sp)
    e108:	80800017 	ldw	r2,0(r16)
    e10c:	10c00417 	ldw	r3,16(r2)
    e110:	183ee83a 	callr	r3
    e114:	10803fcc 	andi	r2,r2,255
    e118:	0007883a 	mov	r3,zero
    e11c:	10000326 	beq	r2,zero,e12c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
    e120:	d8800017 	ldw	r2,0(sp)
    e124:	00c00044 	movi	r3,1
    e128:	90800015 	stw	r2,0(r18)
    e12c:	1805883a 	mov	r2,r3
    e130:	dfc00417 	ldw	ra,16(sp)
    e134:	dc800317 	ldw	r18,12(sp)
    e138:	dc400217 	ldw	r17,8(sp)
    e13c:	dc000117 	ldw	r16,4(sp)
    e140:	dec00504 	addi	sp,sp,20
    e144:	f800283a 	ret

0000e148 <_Z28read_encoded_value_with_basehjPKhPj>:
    e148:	defff904 	addi	sp,sp,-28
    e14c:	dc400215 	stw	r17,8(sp)
    e150:	00801404 	movi	r2,80
    e154:	24403fcc 	andi	r17,r4,255
    e158:	dd000515 	stw	r20,20(sp)
    e15c:	dcc00415 	stw	r19,16(sp)
    e160:	dc800315 	stw	r18,12(sp)
    e164:	dc000115 	stw	r16,4(sp)
    e168:	dfc00615 	stw	ra,24(sp)
    e16c:	2025883a 	mov	r18,r4
    e170:	2829883a 	mov	r20,r5
    e174:	3021883a 	mov	r16,r6
    e178:	3827883a 	mov	r19,r7
    e17c:	88801826 	beq	r17,r2,e1e0 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
    e180:	88c003cc 	andi	r3,r17,15
    e184:	00800304 	movi	r2,12
    e188:	10c0012e 	bgeu	r2,r3,e190 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
    e18c:	00118700 	call	11870 <abort>
    e190:	18c5883a 	add	r2,r3,r3
    e194:	1085883a 	add	r2,r2,r2
    e198:	00c00074 	movhi	r3,1
    e19c:	18f86b04 	addi	r3,r3,-7764
    e1a0:	10c5883a 	add	r2,r2,r3
    e1a4:	11000017 	ldw	r4,0(r2)
    e1a8:	2000683a 	jmp	r4
    e1ac:	0000e21c 	xori	zero,zero,904
    e1b0:	0000e304 	movi	zero,908
    e1b4:	0000e2b0 	cmpltui	zero,zero,906
    e1b8:	0000e21c 	xori	zero,zero,904
    e1bc:	0000e274 	movhi	zero,905
    e1c0:	0000e18c 	andi	zero,zero,902
    e1c4:	0000e18c 	andi	zero,zero,902
    e1c8:	0000e18c 	andi	zero,zero,902
    e1cc:	0000e18c 	andi	zero,zero,902
    e1d0:	0000e2ec 	andhi	zero,zero,907
    e1d4:	0000e2c8 	cmpgei	zero,zero,907
    e1d8:	0000e21c 	xori	zero,zero,904
    e1dc:	0000e274 	movhi	zero,905
    e1e0:	308000c4 	addi	r2,r6,3
    e1e4:	00ffff04 	movi	r3,-4
    e1e8:	10c4703a 	and	r2,r2,r3
    e1ec:	11000017 	ldw	r4,0(r2)
    e1f0:	11400104 	addi	r5,r2,4
    e1f4:	2805883a 	mov	r2,r5
    e1f8:	99000015 	stw	r4,0(r19)
    e1fc:	dfc00617 	ldw	ra,24(sp)
    e200:	dd000517 	ldw	r20,20(sp)
    e204:	dcc00417 	ldw	r19,16(sp)
    e208:	dc800317 	ldw	r18,12(sp)
    e20c:	dc400217 	ldw	r17,8(sp)
    e210:	dc000117 	ldw	r16,4(sp)
    e214:	dec00704 	addi	sp,sp,28
    e218:	f800283a 	ret
    e21c:	30800043 	ldbu	r2,1(r6)
    e220:	30c00083 	ldbu	r3,2(r6)
    e224:	310000c3 	ldbu	r4,3(r6)
    e228:	31400003 	ldbu	r5,0(r6)
    e22c:	1004923a 	slli	r2,r2,8
    e230:	1806943a 	slli	r3,r3,16
    e234:	2008963a 	slli	r4,r4,24
    e238:	1144b03a 	or	r2,r2,r5
    e23c:	1886b03a 	or	r3,r3,r2
    e240:	20c8b03a 	or	r4,r4,r3
    e244:	31400104 	addi	r5,r6,4
    e248:	203fea26 	beq	r4,zero,e1f4 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
    e24c:	88c01c0c 	andi	r3,r17,112
    e250:	00800404 	movi	r2,16
    e254:	18801426 	beq	r3,r2,e2a8 <_Z28read_encoded_value_with_basehjPKhPj+0x160>
    e258:	90803fcc 	andi	r2,r18,255
    e25c:	1080201c 	xori	r2,r2,128
    e260:	10bfe004 	addi	r2,r2,-128
    e264:	2509883a 	add	r4,r4,r20
    e268:	103fe20e 	bge	r2,zero,e1f4 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
    e26c:	21000017 	ldw	r4,0(r4)
    e270:	003fe006 	br	e1f4 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
    e274:	30800043 	ldbu	r2,1(r6)
    e278:	31800083 	ldbu	r6,2(r6)
    e27c:	820000c3 	ldbu	r8,3(r16)
    e280:	1004923a 	slli	r2,r2,8
    e284:	82400003 	ldbu	r9,0(r16)
    e288:	300c943a 	slli	r6,r6,16
    e28c:	4010963a 	slli	r8,r8,24
    e290:	1244b03a 	or	r2,r2,r9
    e294:	308cb03a 	or	r6,r6,r2
    e298:	4184b03a 	or	r2,r8,r6
    e29c:	1009883a 	mov	r4,r2
    e2a0:	81400204 	addi	r5,r16,8
    e2a4:	003fe806 	br	e248 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
    e2a8:	8029883a 	mov	r20,r16
    e2ac:	003fea06 	br	e258 <_Z28read_encoded_value_with_basehjPKhPj+0x110>
    e2b0:	30800043 	ldbu	r2,1(r6)
    e2b4:	30c00003 	ldbu	r3,0(r6)
    e2b8:	31400084 	addi	r5,r6,2
    e2bc:	1004923a 	slli	r2,r2,8
    e2c0:	10c8b03a 	or	r4,r2,r3
    e2c4:	003fe006 	br	e248 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
    e2c8:	30800043 	ldbu	r2,1(r6)
    e2cc:	30c00003 	ldbu	r3,0(r6)
    e2d0:	31400084 	addi	r5,r6,2
    e2d4:	1004923a 	slli	r2,r2,8
    e2d8:	10c4b03a 	or	r2,r2,r3
    e2dc:	113fffcc 	andi	r4,r2,65535
    e2e0:	2120001c 	xori	r4,r4,32768
    e2e4:	21200004 	addi	r4,r4,-32768
    e2e8:	003fd706 	br	e248 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
    e2ec:	3009883a 	mov	r4,r6
    e2f0:	d80b883a 	mov	r5,sp
    e2f4:	000e0580 	call	e058 <_Z12read_sleb128PKhPi>
    e2f8:	d9000017 	ldw	r4,0(sp)
    e2fc:	100b883a 	mov	r5,r2
    e300:	003fd106 	br	e248 <_Z28read_encoded_value_with_basehjPKhPj+0x100>
    e304:	3009883a 	mov	r4,r6
    e308:	d80b883a 	mov	r5,sp
    e30c:	000e0280 	call	e028 <_Z12read_uleb128PKhPj>
    e310:	d9000017 	ldw	r4,0(sp)
    e314:	100b883a 	mov	r5,r2
    e318:	003fcb06 	br	e248 <_Z28read_encoded_value_with_basehjPKhPj+0x100>

0000e31c <_Z21base_of_encoded_valuehP15_Unwind_Context>:
    e31c:	deffff04 	addi	sp,sp,-4
    e320:	21003fcc 	andi	r4,r4,255
    e324:	00803fc4 	movi	r2,255
    e328:	dfc00015 	stw	ra,0(sp)
    e32c:	20800c26 	beq	r4,r2,e360 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
    e330:	21001c0c 	andi	r4,r4,112
    e334:	00800804 	movi	r2,32
    e338:	20800d26 	beq	r4,r2,e370 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
    e33c:	1100070e 	bge	r2,r4,e35c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
    e340:	00801004 	movi	r2,64
    e344:	20801126 	beq	r4,r2,e38c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
    e348:	00801404 	movi	r2,80
    e34c:	20800426 	beq	r4,r2,e360 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
    e350:	00800c04 	movi	r2,48
    e354:	20801126 	beq	r4,r2,e39c <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
    e358:	00118700 	call	11870 <abort>
    e35c:	2000081e 	bne	r4,zero,e380 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
    e360:	0005883a 	mov	r2,zero
    e364:	dfc00017 	ldw	ra,0(sp)
    e368:	dec00104 	addi	sp,sp,4
    e36c:	f800283a 	ret
    e370:	2809883a 	mov	r4,r5
    e374:	dfc00017 	ldw	ra,0(sp)
    e378:	dec00104 	addi	sp,sp,4
    e37c:	0010ae41 	jmpi	10ae4 <_Unwind_GetTextRelBase>
    e380:	00800404 	movi	r2,16
    e384:	20bff626 	beq	r4,r2,e360 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
    e388:	00118700 	call	11870 <abort>
    e38c:	2809883a 	mov	r4,r5
    e390:	dfc00017 	ldw	ra,0(sp)
    e394:	dec00104 	addi	sp,sp,4
    e398:	0010acc1 	jmpi	10acc <_Unwind_GetRegionStart>
    e39c:	2809883a 	mov	r4,r5
    e3a0:	dfc00017 	ldw	ra,0(sp)
    e3a4:	dec00104 	addi	sp,sp,4
    e3a8:	0010adc1 	jmpi	10adc <_Unwind_GetDataRelBase>

0000e3ac <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    e3ac:	defffa04 	addi	sp,sp,-24
    e3b0:	dc800415 	stw	r18,16(sp)
    e3b4:	dc400315 	stw	r17,12(sp)
    e3b8:	dc000215 	stw	r16,8(sp)
    e3bc:	dfc00515 	stw	ra,20(sp)
    e3c0:	2021883a 	mov	r16,r4
    e3c4:	000f883a 	mov	r7,zero
    e3c8:	3023883a 	mov	r17,r6
    e3cc:	2825883a 	mov	r18,r5
    e3d0:	20000226 	beq	r4,zero,e3dc <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
    e3d4:	0010acc0 	call	10acc <_Unwind_GetRegionStart>
    e3d8:	100f883a 	mov	r7,r2
    e3dc:	89c00015 	stw	r7,0(r17)
    e3e0:	90c00003 	ldbu	r3,0(r18)
    e3e4:	800b883a 	mov	r5,r16
    e3e8:	00803fc4 	movi	r2,255
    e3ec:	1c003fcc 	andi	r16,r3,255
    e3f0:	91800044 	addi	r6,r18,1
    e3f4:	8009883a 	mov	r4,r16
    e3f8:	18802226 	beq	r3,r2,e484 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
    e3fc:	d9800115 	stw	r6,4(sp)
    e400:	000e31c0 	call	e31c <_Z21base_of_encoded_valuehP15_Unwind_Context>
    e404:	d9800117 	ldw	r6,4(sp)
    e408:	8009883a 	mov	r4,r16
    e40c:	100b883a 	mov	r5,r2
    e410:	89c00104 	addi	r7,r17,4
    e414:	000e1480 	call	e148 <_Z28read_encoded_value_with_basehjPKhPj>
    e418:	100d883a 	mov	r6,r2
    e41c:	30800003 	ldbu	r2,0(r6)
    e420:	31c00044 	addi	r7,r6,1
    e424:	00c03fc4 	movi	r3,255
    e428:	d80b883a 	mov	r5,sp
    e42c:	3809883a 	mov	r4,r7
    e430:	88800505 	stb	r2,20(r17)
    e434:	10c01b26 	beq	r2,r3,e4a4 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
    e438:	000e0280 	call	e028 <_Z12read_uleb128PKhPj>
    e43c:	100f883a 	mov	r7,r2
    e440:	d8800017 	ldw	r2,0(sp)
    e444:	3885883a 	add	r2,r7,r2
    e448:	88800315 	stw	r2,12(r17)
    e44c:	38800003 	ldbu	r2,0(r7)
    e450:	39000044 	addi	r4,r7,1
    e454:	d80b883a 	mov	r5,sp
    e458:	88800545 	stb	r2,21(r17)
    e45c:	000e0280 	call	e028 <_Z12read_uleb128PKhPj>
    e460:	d8c00017 	ldw	r3,0(sp)
    e464:	10c9883a 	add	r4,r2,r3
    e468:	89000415 	stw	r4,16(r17)
    e46c:	dfc00517 	ldw	ra,20(sp)
    e470:	dc800417 	ldw	r18,16(sp)
    e474:	dc400317 	ldw	r17,12(sp)
    e478:	dc000217 	ldw	r16,8(sp)
    e47c:	dec00604 	addi	sp,sp,24
    e480:	f800283a 	ret
    e484:	89c00115 	stw	r7,4(r17)
    e488:	30800003 	ldbu	r2,0(r6)
    e48c:	31c00044 	addi	r7,r6,1
    e490:	00c03fc4 	movi	r3,255
    e494:	d80b883a 	mov	r5,sp
    e498:	3809883a 	mov	r4,r7
    e49c:	88800505 	stb	r2,20(r17)
    e4a0:	10ffe51e 	bne	r2,r3,e438 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
    e4a4:	88000315 	stw	zero,12(r17)
    e4a8:	003fe806 	br	e44c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

0000e4ac <_Z15get_ttype_entryP16lsda_header_infoj>:
    e4ac:	defffe04 	addi	sp,sp,-8
    e4b0:	dfc00115 	stw	ra,4(sp)
    e4b4:	21c00503 	ldbu	r7,20(r4)
    e4b8:	00803fc4 	movi	r2,255
    e4bc:	38801a26 	beq	r7,r2,e528 <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
    e4c0:	38c001cc 	andi	r3,r7,7
    e4c4:	00800084 	movi	r2,2
    e4c8:	18801326 	beq	r3,r2,e518 <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
    e4cc:	10c0050e 	bge	r2,r3,e4e4 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
    e4d0:	008000c4 	movi	r2,3
    e4d4:	18800426 	beq	r3,r2,e4e8 <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
    e4d8:	00800104 	movi	r2,4
    e4dc:	18801026 	beq	r3,r2,e520 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
    e4e0:	00118700 	call	11870 <abort>
    e4e4:	183ffe1e 	bne	r3,zero,e4e0 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
    e4e8:	2945883a 	add	r2,r5,r5
    e4ec:	1085883a 	add	r2,r2,r2
    e4f0:	21800317 	ldw	r6,12(r4)
    e4f4:	21400217 	ldw	r5,8(r4)
    e4f8:	3809883a 	mov	r4,r7
    e4fc:	308dc83a 	sub	r6,r6,r2
    e500:	d80f883a 	mov	r7,sp
    e504:	000e1480 	call	e148 <_Z28read_encoded_value_with_basehjPKhPj>
    e508:	d8800017 	ldw	r2,0(sp)
    e50c:	dfc00117 	ldw	ra,4(sp)
    e510:	dec00204 	addi	sp,sp,8
    e514:	f800283a 	ret
    e518:	2945883a 	add	r2,r5,r5
    e51c:	003ff406 	br	e4f0 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
    e520:	280490fa 	slli	r2,r5,3
    e524:	003ff206 	br	e4f0 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
    e528:	0005883a 	mov	r2,zero
    e52c:	003ff006 	br	e4f0 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

0000e530 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
    e530:	20800317 	ldw	r2,12(r4)
    e534:	defffa04 	addi	sp,sp,-24
    e538:	dc800415 	stw	r18,16(sp)
    e53c:	11c5c83a 	sub	r2,r2,r7
    e540:	dc400315 	stw	r17,12(sp)
    e544:	dc000215 	stw	r16,8(sp)
    e548:	dfc00515 	stw	ra,20(sp)
    e54c:	2023883a 	mov	r17,r4
    e550:	d9800115 	stw	r6,4(sp)
    e554:	2825883a 	mov	r18,r5
    e558:	143fffc4 	addi	r16,r2,-1
    e55c:	8009883a 	mov	r4,r16
    e560:	d80b883a 	mov	r5,sp
    e564:	000e0280 	call	e028 <_Z12read_uleb128PKhPj>
    e568:	1021883a 	mov	r16,r2
    e56c:	d8800017 	ldw	r2,0(sp)
    e570:	8809883a 	mov	r4,r17
    e574:	100b883a 	mov	r5,r2
    e578:	10000826 	beq	r2,zero,e59c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
    e57c:	000e4ac0 	call	e4ac <_Z15get_ttype_entryP16lsda_header_infoj>
    e580:	1009883a 	mov	r4,r2
    e584:	900b883a 	mov	r5,r18
    e588:	d9800104 	addi	r6,sp,4
    e58c:	000e0ac0 	call	e0ac <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
    e590:	10803fcc 	andi	r2,r2,255
    e594:	103ff126 	beq	r2,zero,e55c <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
    e598:	00800044 	movi	r2,1
    e59c:	dfc00517 	ldw	ra,20(sp)
    e5a0:	dc800417 	ldw	r18,16(sp)
    e5a4:	dc400317 	ldw	r17,12(sp)
    e5a8:	dc000217 	ldw	r16,8(sp)
    e5ac:	dec00604 	addi	sp,sp,24
    e5b0:	f800283a 	ret

0000e5b4 <__cxa_call_unexpected>:
    e5b4:	deffe204 	addi	sp,sp,-120
    e5b8:	00800074 	movhi	r2,1
    e5bc:	10b9cd04 	addi	r2,r2,-6348
    e5c0:	00c000b4 	movhi	r3,2
    e5c4:	18f92704 	addi	r3,r3,-7012
    e5c8:	d8800c15 	stw	r2,48(sp)
    e5cc:	d9001815 	stw	r4,96(sp)
    e5d0:	00800074 	movhi	r2,1
    e5d4:	10b98f04 	addi	r2,r2,-6596
    e5d8:	d9000604 	addi	r4,sp,24
    e5dc:	d8c00d15 	stw	r3,52(sp)
    e5e0:	dfc01d15 	stw	ra,116(sp)
    e5e4:	d8800f15 	stw	r2,60(sp)
    e5e8:	df001c15 	stw	fp,112(sp)
    e5ec:	ddc01b15 	stw	r23,108(sp)
    e5f0:	dec00e15 	stw	sp,56(sp)
    e5f4:	dec01015 	stw	sp,64(sp)
    e5f8:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    e5fc:	d9001817 	ldw	r4,96(sp)
    e600:	000df040 	call	df04 <__cxa_begin_catch>
    e604:	d8801817 	ldw	r2,96(sp)
    e608:	10fff504 	addi	r3,r2,-44
    e60c:	18800917 	ldw	r2,36(r3)
    e610:	19400617 	ldw	r5,24(r3)
    e614:	19000217 	ldw	r4,8(r3)
    e618:	d8800215 	stw	r2,8(sp)
    e61c:	18800817 	ldw	r2,32(r3)
    e620:	18c00317 	ldw	r3,12(r3)
    e624:	d9401615 	stw	r5,88(sp)
    e628:	d8801715 	stw	r2,92(sp)
    e62c:	00800084 	movi	r2,2
    e630:	d8c01515 	stw	r3,84(sp)
    e634:	d8800715 	stw	r2,28(sp)
    e638:	000ef240 	call	ef24 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    e63c:	d8800717 	ldw	r2,28(sp)
    e640:	d8c00817 	ldw	r3,32(sp)
    e644:	d8801a15 	stw	r2,104(sp)
    e648:	d9401a17 	ldw	r5,104(sp)
    e64c:	00800044 	movi	r2,1
    e650:	d8c01915 	stw	r3,100(sp)
    e654:	28800826 	beq	r5,r2,e678 <__cxa_call_unexpected+0xc4>
    e658:	d8000715 	stw	zero,28(sp)
    e65c:	000de600 	call	de60 <__cxa_end_catch>
    e660:	d8000715 	stw	zero,28(sp)
    e664:	000de600 	call	de60 <__cxa_end_catch>
    e668:	d9001917 	ldw	r4,100(sp)
    e66c:	00bfffc4 	movi	r2,-1
    e670:	d8800715 	stw	r2,28(sp)
    e674:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    e678:	d9001917 	ldw	r4,100(sp)
    e67c:	000df040 	call	df04 <__cxa_begin_catch>
    e680:	000ee300 	call	ee30 <__cxa_get_globals_fast>
    e684:	10800017 	ldw	r2,0(r2)
    e688:	d8c01a17 	ldw	r3,104(sp)
    e68c:	0009883a 	mov	r4,zero
    e690:	11401004 	addi	r5,r2,64
    e694:	d9401315 	stw	r5,76(sp)
    e698:	d8801415 	stw	r2,80(sp)
    e69c:	d8c00715 	stw	r3,28(sp)
    e6a0:	d9401717 	ldw	r5,92(sp)
    e6a4:	d80d883a 	mov	r6,sp
    e6a8:	000e3ac0 	call	e3ac <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    e6ac:	d8801417 	ldw	r2,80(sp)
    e6b0:	d809883a 	mov	r4,sp
    e6b4:	d9801317 	ldw	r6,76(sp)
    e6b8:	11400017 	ldw	r5,0(r2)
    e6bc:	d9c01617 	ldw	r7,88(sp)
    e6c0:	000e5300 	call	e530 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
    e6c4:	10803fcc 	andi	r2,r2,255
    e6c8:	1000151e 	bne	r2,zero,e720 <__cxa_call_unexpected+0x16c>
    e6cc:	d8c01a17 	ldw	r3,104(sp)
    e6d0:	d809883a 	mov	r4,sp
    e6d4:	014000b4 	movhi	r5,2
    e6d8:	297ae804 	addi	r5,r5,-5216
    e6dc:	d8c00715 	stw	r3,28(sp)
    e6e0:	000d883a 	mov	r6,zero
    e6e4:	d9c01617 	ldw	r7,88(sp)
    e6e8:	000e5300 	call	e530 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
    e6ec:	10803fcc 	andi	r2,r2,255
    e6f0:	10000c26 	beq	r2,zero,e724 <__cxa_call_unexpected+0x170>
    e6f4:	01000104 	movi	r4,4
    e6f8:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    e6fc:	1009883a 	mov	r4,r2
    e700:	008000b4 	movhi	r2,2
    e704:	10badb04 	addi	r2,r2,-5268
    e708:	20800015 	stw	r2,0(r4)
    e70c:	014000b4 	movhi	r5,2
    e710:	297ae804 	addi	r5,r5,-5216
    e714:	01800074 	movhi	r6,1
    e718:	31bc4104 	addi	r6,r6,-3836
    e71c:	000dd640 	call	dd64 <__cxa_throw>
    e720:	000dcf00 	call	dcf0 <__cxa_rethrow>
    e724:	d9401a17 	ldw	r5,104(sp)
    e728:	d9001517 	ldw	r4,84(sp)
    e72c:	d9400715 	stw	r5,28(sp)
    e730:	000ee680 	call	ee68 <_ZN10__cxxabiv111__terminateEPFvvE>

0000e734 <__gxx_personality_sj0>:
    e734:	deffd304 	addi	sp,sp,-180
    e738:	00800074 	movhi	r2,1
    e73c:	10baf404 	addi	r2,r2,-5168
    e740:	00c000b4 	movhi	r3,2
    e744:	18f92b04 	addi	r3,r3,-6996
    e748:	d8801315 	stw	r2,76(sp)
    e74c:	d9002315 	stw	r4,140(sp)
    e750:	00800074 	movhi	r2,1
    e754:	10b9cd04 	addi	r2,r2,-6348
    e758:	d9000a04 	addi	r4,sp,40
    e75c:	d8801015 	stw	r2,64(sp)
    e760:	d8c01115 	stw	r3,68(sp)
    e764:	dfc02c15 	stw	ra,176(sp)
    e768:	df002b15 	stw	fp,172(sp)
    e76c:	ddc02a15 	stw	r23,168(sp)
    e770:	dec01215 	stw	sp,72(sp)
    e774:	dec01415 	stw	sp,80(sp)
    e778:	d9802515 	stw	r6,148(sp)
    e77c:	d9402415 	stw	r5,144(sp)
    e780:	d9c02615 	stw	r7,152(sp)
    e784:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    e788:	d8c02317 	ldw	r3,140(sp)
    e78c:	00800044 	movi	r2,1
    e790:	18800a26 	beq	r3,r2,e7bc <__gxx_personality_sj0+0x88>
    e794:	010000c4 	movi	r4,3
    e798:	d9002215 	stw	r4,136(sp)
    e79c:	d9000a04 	addi	r4,sp,40
    e7a0:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    e7a4:	d8802217 	ldw	r2,136(sp)
    e7a8:	dfc02c17 	ldw	ra,176(sp)
    e7ac:	df002b17 	ldw	fp,172(sp)
    e7b0:	ddc02a17 	ldw	r23,168(sp)
    e7b4:	dec02d04 	addi	sp,sp,180
    e7b8:	f800283a 	ret
    e7bc:	d9402d17 	ldw	r5,180(sp)
    e7c0:	d9002517 	ldw	r4,148(sp)
    e7c4:	0007883a 	mov	r3,zero
    e7c8:	28800504 	addi	r2,r5,20
    e7cc:	d8800015 	stw	r2,0(sp)
    e7d0:	28bff504 	addi	r2,r5,-44
    e7d4:	d8801a15 	stw	r2,104(sp)
    e7d8:	0090caf4 	movhi	r2,17195
    e7dc:	108ac004 	addi	r2,r2,11008
    e7e0:	2080ad26 	beq	r4,r2,ea98 <__gxx_personality_sj0+0x364>
    e7e4:	d8c02105 	stb	r3,132(sp)
    e7e8:	d8c02417 	ldw	r3,144(sp)
    e7ec:	00800184 	movi	r2,6
    e7f0:	1880281e 	bne	r3,r2,e894 <__gxx_personality_sj0+0x160>
    e7f4:	d8802103 	ldbu	r2,132(sp)
    e7f8:	10002626 	beq	r2,zero,e894 <__gxx_personality_sj0+0x160>
    e7fc:	d9001a17 	ldw	r4,104(sp)
    e800:	d9401a17 	ldw	r5,104(sp)
    e804:	d8801a17 	ldw	r2,104(sp)
    e808:	21000917 	ldw	r4,36(r4)
    e80c:	29400617 	ldw	r5,24(r5)
    e810:	10800817 	ldw	r2,32(r2)
    e814:	d9001d15 	stw	r4,116(sp)
    e818:	d9401b15 	stw	r5,108(sp)
    e81c:	d8802015 	stw	r2,128(sp)
    e820:	2000ad1e 	bne	r4,zero,ead8 <__gxx_personality_sj0+0x3a4>
    e824:	01000044 	movi	r4,1
    e828:	00800044 	movi	r2,1
    e82c:	2080e126 	beq	r4,r2,ebb4 <__gxx_personality_sj0+0x480>
    e830:	d8801b17 	ldw	r2,108(sp)
    e834:	1000d316 	blt	r2,zero,eb84 <__gxx_personality_sj0+0x450>
    e838:	d9802d17 	ldw	r6,180(sp)
    e83c:	d9002e17 	ldw	r4,184(sp)
    e840:	00bfffc4 	movi	r2,-1
    e844:	000b883a 	mov	r5,zero
    e848:	d8800b15 	stw	r2,44(sp)
    e84c:	0010a740 	call	10a74 <_Unwind_SetGR>
    e850:	d9801b17 	ldw	r6,108(sp)
    e854:	d9002e17 	ldw	r4,184(sp)
    e858:	01400044 	movi	r5,1
    e85c:	0010a740 	call	10a74 <_Unwind_SetGR>
    e860:	d9002e17 	ldw	r4,184(sp)
    e864:	d9401d17 	ldw	r5,116(sp)
    e868:	0010ab00 	call	10ab0 <_Unwind_SetIP>
    e86c:	010001c4 	movi	r4,7
    e870:	d9002215 	stw	r4,136(sp)
    e874:	d9000a04 	addi	r4,sp,40
    e878:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    e87c:	d8802217 	ldw	r2,136(sp)
    e880:	dfc02c17 	ldw	ra,176(sp)
    e884:	df002b17 	ldw	fp,172(sp)
    e888:	ddc02a17 	ldw	r23,168(sp)
    e88c:	dec02d04 	addi	sp,sp,180
    e890:	f800283a 	ret
    e894:	d9002e17 	ldw	r4,184(sp)
    e898:	00ffffc4 	movi	r3,-1
    e89c:	d8c00b15 	stw	r3,44(sp)
    e8a0:	0010ac00 	call	10ac0 <_Unwind_GetLanguageSpecificData>
    e8a4:	10007226 	beq	r2,zero,ea70 <__gxx_personality_sj0+0x33c>
    e8a8:	d9002e17 	ldw	r4,184(sp)
    e8ac:	d9800404 	addi	r6,sp,16
    e8b0:	100b883a 	mov	r5,r2
    e8b4:	d8802015 	stw	r2,128(sp)
    e8b8:	000e3ac0 	call	e3ac <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    e8bc:	d9000903 	ldbu	r4,36(sp)
    e8c0:	d9402e17 	ldw	r5,184(sp)
    e8c4:	d8801e15 	stw	r2,120(sp)
    e8c8:	000e31c0 	call	e31c <_Z21base_of_encoded_valuehP15_Unwind_Context>
    e8cc:	d9002e17 	ldw	r4,184(sp)
    e8d0:	d8800615 	stw	r2,24(sp)
    e8d4:	0010a8c0 	call	10a8c <_Unwind_GetIP>
    e8d8:	10bfffc4 	addi	r2,r2,-1
    e8dc:	d8801c15 	stw	r2,112(sp)
    e8e0:	10006316 	blt	r2,zero,ea70 <__gxx_personality_sj0+0x33c>
    e8e4:	10001b1e 	bne	r2,zero,e954 <__gxx_personality_sj0+0x220>
    e8e8:	01000044 	movi	r4,1
    e8ec:	d8001f15 	stw	zero,124(sp)
    e8f0:	d8001d15 	stw	zero,116(sp)
    e8f4:	d8001b15 	stw	zero,108(sp)
    e8f8:	d9402417 	ldw	r5,144(sp)
    e8fc:	00c00044 	movi	r3,1
    e900:	28c4703a 	and	r2,r5,r3
    e904:	1005003a 	cmpeq	r2,r2,zero
    e908:	10006a1e 	bne	r2,zero,eab4 <__gxx_personality_sj0+0x380>
    e90c:	00800084 	movi	r2,2
    e910:	20805726 	beq	r4,r2,ea70 <__gxx_personality_sj0+0x33c>
    e914:	d8802103 	ldbu	r2,132(sp)
    e918:	10008626 	beq	r2,zero,eb34 <__gxx_personality_sj0+0x400>
    e91c:	d9001a17 	ldw	r4,104(sp)
    e920:	d9401d17 	ldw	r5,116(sp)
    e924:	d8801b17 	ldw	r2,108(sp)
    e928:	00c00184 	movi	r3,6
    e92c:	d8c02215 	stw	r3,136(sp)
    e930:	21400915 	stw	r5,36(r4)
    e934:	20800615 	stw	r2,24(r4)
    e938:	d8c01f17 	ldw	r3,124(sp)
    e93c:	d9402017 	ldw	r5,128(sp)
    e940:	d8800017 	ldw	r2,0(sp)
    e944:	20c00715 	stw	r3,28(r4)
    e948:	21400815 	stw	r5,32(r4)
    e94c:	20800a15 	stw	r2,40(r4)
    e950:	003f9206 	br	e79c <__gxx_personality_sj0+0x68>
    e954:	d9001e17 	ldw	r4,120(sp)
    e958:	d9400204 	addi	r5,sp,8
    e95c:	000e0280 	call	e028 <_Z12read_uleb128PKhPj>
    e960:	d9401c17 	ldw	r5,112(sp)
    e964:	1009883a 	mov	r4,r2
    e968:	297fffc4 	addi	r5,r5,-1
    e96c:	d9401c15 	stw	r5,112(sp)
    e970:	d9400104 	addi	r5,sp,4
    e974:	000e0280 	call	e028 <_Z12read_uleb128PKhPj>
    e978:	d8801e15 	stw	r2,120(sp)
    e97c:	d8801c17 	ldw	r2,112(sp)
    e980:	103ff41e 	bne	r2,zero,e954 <__gxx_personality_sj0+0x220>
    e984:	d8800217 	ldw	r2,8(sp)
    e988:	d8c00117 	ldw	r3,4(sp)
    e98c:	01000044 	movi	r4,1
    e990:	1105883a 	add	r2,r2,r4
    e994:	d8801d15 	stw	r2,116(sp)
    e998:	1800541e 	bne	r3,zero,eaec <__gxx_personality_sj0+0x3b8>
    e99c:	d8001f15 	stw	zero,124(sp)
    e9a0:	d8c01d17 	ldw	r3,116(sp)
    e9a4:	18003226 	beq	r3,zero,ea70 <__gxx_personality_sj0+0x33c>
    e9a8:	d9001f17 	ldw	r4,124(sp)
    e9ac:	20007226 	beq	r4,zero,eb78 <__gxx_personality_sj0+0x444>
    e9b0:	d9402417 	ldw	r5,144(sp)
    e9b4:	2880020c 	andi	r2,r5,8
    e9b8:	10006a1e 	bne	r2,zero,eb64 <__gxx_personality_sj0+0x430>
    e9bc:	d8802103 	ldbu	r2,132(sp)
    e9c0:	10006826 	beq	r2,zero,eb64 <__gxx_personality_sj0+0x430>
    e9c4:	d8801a17 	ldw	r2,104(sp)
    e9c8:	10800017 	ldw	r2,0(r2)
    e9cc:	d8801915 	stw	r2,100(sp)
    e9d0:	d8c01917 	ldw	r3,100(sp)
    e9d4:	d8001805 	stb	zero,96(sp)
    e9d8:	1807003a 	cmpeq	r3,r3,zero
    e9dc:	d8c02715 	stw	r3,156(sp)
    e9e0:	00000706 	br	ea00 <__gxx_personality_sj0+0x2cc>
    e9e4:	01000044 	movi	r4,1
    e9e8:	d9001805 	stb	r4,96(sp)
    e9ec:	d8800217 	ldw	r2,8(sp)
    e9f0:	10005e26 	beq	r2,zero,eb6c <__gxx_personality_sj0+0x438>
    e9f4:	d8c01717 	ldw	r3,92(sp)
    e9f8:	1885883a 	add	r2,r3,r2
    e9fc:	d8801f15 	stw	r2,124(sp)
    ea00:	d9001f17 	ldw	r4,124(sp)
    ea04:	d9400104 	addi	r5,sp,4
    ea08:	000e0580 	call	e058 <_Z12read_sleb128PKhPi>
    ea0c:	1009883a 	mov	r4,r2
    ea10:	d9400204 	addi	r5,sp,8
    ea14:	d8801715 	stw	r2,92(sp)
    ea18:	000e0580 	call	e058 <_Z12read_sleb128PKhPi>
    ea1c:	d8800117 	ldw	r2,4(sp)
    ea20:	103ff026 	beq	r2,zero,e9e4 <__gxx_personality_sj0+0x2b0>
    ea24:	0080360e 	bge	zero,r2,eb00 <__gxx_personality_sj0+0x3cc>
    ea28:	017fffc4 	movi	r5,-1
    ea2c:	d9400b15 	stw	r5,44(sp)
    ea30:	d9000404 	addi	r4,sp,16
    ea34:	100b883a 	mov	r5,r2
    ea38:	000e4ac0 	call	e4ac <_Z15get_ttype_entryP16lsda_header_infoj>
    ea3c:	10000826 	beq	r2,zero,ea60 <__gxx_personality_sj0+0x32c>
    ea40:	d8c02717 	ldw	r3,156(sp)
    ea44:	183fe91e 	bne	r3,zero,e9ec <__gxx_personality_sj0+0x2b8>
    ea48:	d9401917 	ldw	r5,100(sp)
    ea4c:	1009883a 	mov	r4,r2
    ea50:	d80d883a 	mov	r6,sp
    ea54:	000e0ac0 	call	e0ac <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
    ea58:	10803fcc 	andi	r2,r2,255
    ea5c:	103fe326 	beq	r2,zero,e9ec <__gxx_personality_sj0+0x2b8>
    ea60:	d9000117 	ldw	r4,4(sp)
    ea64:	d9001b15 	stw	r4,108(sp)
    ea68:	010000c4 	movi	r4,3
    ea6c:	003fa206 	br	e8f8 <__gxx_personality_sj0+0x1c4>
    ea70:	01400204 	movi	r5,8
    ea74:	d9000a04 	addi	r4,sp,40
    ea78:	d9402215 	stw	r5,136(sp)
    ea7c:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    ea80:	d8802217 	ldw	r2,136(sp)
    ea84:	dfc02c17 	ldw	ra,176(sp)
    ea88:	df002b17 	ldw	fp,172(sp)
    ea8c:	ddc02a17 	ldw	r23,168(sp)
    ea90:	dec02d04 	addi	sp,sp,180
    ea94:	f800283a 	ret
    ea98:	d9402617 	ldw	r5,152(sp)
    ea9c:	0091d3b4 	movhi	r2,18254
    eaa0:	109550c4 	addi	r2,r2,21827
    eaa4:	28bf4f1e 	bne	r5,r2,e7e4 <__gxx_personality_sj0+0xb0>
    eaa8:	d8802317 	ldw	r2,140(sp)
    eaac:	1007883a 	mov	r3,r2
    eab0:	003f4c06 	br	e7e4 <__gxx_personality_sj0+0xb0>
    eab4:	d9402417 	ldw	r5,144(sp)
    eab8:	2880020c 	andi	r2,r5,8
    eabc:	10000826 	beq	r2,zero,eae0 <__gxx_personality_sj0+0x3ac>
    eac0:	20c04026 	beq	r4,r3,ebc4 <__gxx_personality_sj0+0x490>
    eac4:	d8801b17 	ldw	r2,108(sp)
    eac8:	103f5b0e 	bge	r2,zero,e838 <__gxx_personality_sj0+0x104>
    eacc:	00800084 	movi	r2,2
    ead0:	d8800b15 	stw	r2,44(sp)
    ead4:	000ef340 	call	ef34 <_ZSt10unexpectedv>
    ead8:	010000c4 	movi	r4,3
    eadc:	003f5206 	br	e828 <__gxx_personality_sj0+0xf4>
    eae0:	d8802103 	ldbu	r2,132(sp)
    eae4:	103f501e 	bne	r2,zero,e828 <__gxx_personality_sj0+0xf4>
    eae8:	003ff506 	br	eac0 <__gxx_personality_sj0+0x38c>
    eaec:	d8800817 	ldw	r2,32(sp)
    eaf0:	1885883a 	add	r2,r3,r2
    eaf4:	1105c83a 	sub	r2,r2,r4
    eaf8:	d8801f15 	stw	r2,124(sp)
    eafc:	003fa806 	br	e9a0 <__gxx_personality_sj0+0x26c>
    eb00:	d9002717 	ldw	r4,156(sp)
    eb04:	20000e1e 	bne	r4,zero,eb40 <__gxx_personality_sj0+0x40c>
    eb08:	017fffc4 	movi	r5,-1
    eb0c:	d9400b15 	stw	r5,44(sp)
    eb10:	d9800017 	ldw	r6,0(sp)
    eb14:	d9401917 	ldw	r5,100(sp)
    eb18:	100f883a 	mov	r7,r2
    eb1c:	d9000404 	addi	r4,sp,16
    eb20:	000e5300 	call	e530 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
    eb24:	1080005c 	xori	r2,r2,1
    eb28:	10803fcc 	andi	r2,r2,255
    eb2c:	103faf26 	beq	r2,zero,e9ec <__gxx_personality_sj0+0x2b8>
    eb30:	003fcb06 	br	ea60 <__gxx_personality_sj0+0x32c>
    eb34:	00800184 	movi	r2,6
    eb38:	d8802215 	stw	r2,136(sp)
    eb3c:	003f1706 	br	e79c <__gxx_personality_sj0+0x68>
    eb40:	d9000717 	ldw	r4,28(sp)
    eb44:	d9400304 	addi	r5,sp,12
    eb48:	2089c83a 	sub	r4,r4,r2
    eb4c:	213fffc4 	addi	r4,r4,-1
    eb50:	000e0280 	call	e028 <_Z12read_uleb128PKhPj>
    eb54:	d8c00317 	ldw	r3,12(sp)
    eb58:	1807003a 	cmpeq	r3,r3,zero
    eb5c:	1805883a 	mov	r2,r3
    eb60:	003ff106 	br	eb28 <__gxx_personality_sj0+0x3f4>
    eb64:	d8001915 	stw	zero,100(sp)
    eb68:	003f9906 	br	e9d0 <__gxx_personality_sj0+0x29c>
    eb6c:	d8801803 	ldbu	r2,96(sp)
    eb70:	1004c03a 	cmpne	r2,r2,zero
    eb74:	103fbe26 	beq	r2,zero,ea70 <__gxx_personality_sj0+0x33c>
    eb78:	01000084 	movi	r4,2
    eb7c:	d8001b15 	stw	zero,108(sp)
    eb80:	003f5d06 	br	e8f8 <__gxx_personality_sj0+0x1c4>
    eb84:	d9402017 	ldw	r5,128(sp)
    eb88:	d9002e17 	ldw	r4,184(sp)
    eb8c:	00bfffc4 	movi	r2,-1
    eb90:	d9800404 	addi	r6,sp,16
    eb94:	d8800b15 	stw	r2,44(sp)
    eb98:	000e3ac0 	call	e3ac <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    eb9c:	d9000903 	ldbu	r4,36(sp)
    eba0:	d9402e17 	ldw	r5,184(sp)
    eba4:	000e31c0 	call	e31c <_Z21base_of_encoded_valuehP15_Unwind_Context>
    eba8:	d8c01a17 	ldw	r3,104(sp)
    ebac:	18800915 	stw	r2,36(r3)
    ebb0:	003f2106 	br	e838 <__gxx_personality_sj0+0x104>
    ebb4:	d9002d17 	ldw	r4,180(sp)
    ebb8:	00bfffc4 	movi	r2,-1
    ebbc:	d8800b15 	stw	r2,44(sp)
    ebc0:	000f04c0 	call	f04c <__cxa_call_terminate>
    ebc4:	00bfffc4 	movi	r2,-1
    ebc8:	d8800b15 	stw	r2,44(sp)
    ebcc:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    ebd0:	d9000b17 	ldw	r4,44(sp)
    ebd4:	d9400c17 	ldw	r5,48(sp)
    ebd8:	00800044 	movi	r2,1
    ebdc:	d9002915 	stw	r4,164(sp)
    ebe0:	d9402815 	stw	r5,160(sp)
    ebe4:	20800626 	beq	r4,r2,ec00 <__gxx_personality_sj0+0x4cc>
    ebe8:	d8000b15 	stw	zero,44(sp)
    ebec:	000de600 	call	de60 <__cxa_end_catch>
    ebf0:	d9002817 	ldw	r4,160(sp)
    ebf4:	00bfffc4 	movi	r2,-1
    ebf8:	d8800b15 	stw	r2,44(sp)
    ebfc:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    ec00:	d9002817 	ldw	r4,160(sp)
    ec04:	000df040 	call	df04 <__cxa_begin_catch>
    ec08:	d8c02917 	ldw	r3,164(sp)
    ec0c:	d8c00b15 	stw	r3,44(sp)
    ec10:	000ef0c0 	call	ef0c <_ZSt9terminatev>

0000ec14 <_ZNSt8bad_castD0Ev>:
    ec14:	defffe04 	addi	sp,sp,-8
    ec18:	008000b4 	movhi	r2,2
    ec1c:	10bab804 	addi	r2,r2,-5408
    ec20:	dc400015 	stw	r17,0(sp)
    ec24:	20800015 	stw	r2,0(r4)
    ec28:	2023883a 	mov	r17,r4
    ec2c:	dfc00115 	stw	ra,4(sp)
    ec30:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    ec34:	8809883a 	mov	r4,r17
    ec38:	dfc00117 	ldw	ra,4(sp)
    ec3c:	dc400017 	ldw	r17,0(sp)
    ec40:	dec00204 	addi	sp,sp,8
    ec44:	000e01c1 	jmpi	e01c <_ZdlPv>

0000ec48 <_ZNSt8bad_castD1Ev>:
    ec48:	008000b4 	movhi	r2,2
    ec4c:	10bab804 	addi	r2,r2,-5408
    ec50:	20800015 	stw	r2,0(r4)
    ec54:	000f0c01 	jmpi	f0c0 <_ZNSt9exceptionD2Ev>

0000ec58 <_ZNSt8bad_castD2Ev>:
    ec58:	008000b4 	movhi	r2,2
    ec5c:	10bab804 	addi	r2,r2,-5408
    ec60:	20800015 	stw	r2,0(r4)
    ec64:	000f0c01 	jmpi	f0c0 <_ZNSt9exceptionD2Ev>

0000ec68 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    ec68:	defffb04 	addi	sp,sp,-20
    ec6c:	dd400315 	stw	r21,12(sp)
    ec70:	dcc00215 	stw	r19,8(sp)
    ec74:	dc400115 	stw	r17,4(sp)
    ec78:	dc000015 	stw	r16,0(sp)
    ec7c:	2823883a 	mov	r17,r5
    ec80:	3027883a 	mov	r19,r6
    ec84:	382b883a 	mov	r21,r7
    ec88:	dfc00415 	stw	ra,16(sp)
    ec8c:	2021883a 	mov	r16,r4
    ec90:	000f4900 	call	f490 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    ec94:	10803fcc 	andi	r2,r2,255
    ec98:	880b883a 	mov	r5,r17
    ec9c:	980d883a 	mov	r6,r19
    eca0:	a80f883a 	mov	r7,r21
    eca4:	00c00044 	movi	r3,1
    eca8:	1000051e 	bne	r2,zero,ecc0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
    ecac:	81000217 	ldw	r4,8(r16)
    ecb0:	20800017 	ldw	r2,0(r4)
    ecb4:	10c00617 	ldw	r3,24(r2)
    ecb8:	183ee83a 	callr	r3
    ecbc:	10c03fcc 	andi	r3,r2,255
    ecc0:	1805883a 	mov	r2,r3
    ecc4:	dfc00417 	ldw	ra,16(sp)
    ecc8:	dd400317 	ldw	r21,12(sp)
    eccc:	dcc00217 	ldw	r19,8(sp)
    ecd0:	dc400117 	ldw	r17,4(sp)
    ecd4:	dc000017 	ldw	r16,0(sp)
    ecd8:	dec00504 	addi	sp,sp,20
    ecdc:	f800283a 	ret

0000ece0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    ece0:	defffe04 	addi	sp,sp,-8
    ece4:	008000b4 	movhi	r2,2
    ece8:	10bac304 	addi	r2,r2,-5364
    ecec:	dc400015 	stw	r17,0(sp)
    ecf0:	20800015 	stw	r2,0(r4)
    ecf4:	2023883a 	mov	r17,r4
    ecf8:	dfc00115 	stw	ra,4(sp)
    ecfc:	000f4200 	call	f420 <_ZN10__cxxabiv117__class_type_infoD2Ev>
    ed00:	8809883a 	mov	r4,r17
    ed04:	dfc00117 	ldw	ra,4(sp)
    ed08:	dc400017 	ldw	r17,0(sp)
    ed0c:	dec00204 	addi	sp,sp,8
    ed10:	000e01c1 	jmpi	e01c <_ZdlPv>

0000ed14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    ed14:	008000b4 	movhi	r2,2
    ed18:	10bac304 	addi	r2,r2,-5364
    ed1c:	20800015 	stw	r2,0(r4)
    ed20:	000f4201 	jmpi	f420 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0000ed24 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
    ed24:	008000b4 	movhi	r2,2
    ed28:	10bac304 	addi	r2,r2,-5364
    ed2c:	20800015 	stw	r2,0(r4)
    ed30:	000f4201 	jmpi	f420 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0000ed34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
    ed34:	da400017 	ldw	r9,0(sp)
    ed38:	2011883a 	mov	r8,r4
    ed3c:	49800526 	beq	r9,r6,ed54 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
    ed40:	41000217 	ldw	r4,8(r8)
    ed44:	20800017 	ldw	r2,0(r4)
    ed48:	da400015 	stw	r9,0(sp)
    ed4c:	10c00817 	ldw	r3,32(r2)
    ed50:	1800683a 	jmp	r3
    ed54:	39000117 	ldw	r4,4(r7)
    ed58:	40c00117 	ldw	r3,4(r8)
    ed5c:	00800184 	movi	r2,6
    ed60:	193ff71e 	bne	r3,r4,ed40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
    ed64:	f800283a 	ret

0000ed68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    ed68:	20c00117 	ldw	r3,4(r4)
    ed6c:	38800117 	ldw	r2,4(r7)
    ed70:	defffb04 	addi	sp,sp,-20
    ed74:	dfc00415 	stw	ra,16(sp)
    ed78:	da000517 	ldw	r8,20(sp)
    ed7c:	dac00617 	ldw	r11,24(sp)
    ed80:	da400717 	ldw	r9,28(sp)
    ed84:	da800817 	ldw	r10,32(sp)
    ed88:	18800c1e 	bne	r3,r2,edbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
    ed8c:	51800115 	stw	r6,4(r10)
    ed90:	52000015 	stw	r8,0(r10)
    ed94:	28001c16 	blt	r5,zero,ee08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
    ed98:	4145883a 	add	r2,r8,r5
    ed9c:	48801e26 	beq	r9,r2,ee18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
    eda0:	00800044 	movi	r2,1
    eda4:	0007883a 	mov	r3,zero
    eda8:	50800315 	stw	r2,12(r10)
    edac:	1805883a 	mov	r2,r3
    edb0:	dfc00417 	ldw	ra,16(sp)
    edb4:	dec00504 	addi	sp,sp,20
    edb8:	f800283a 	ret
    edbc:	42400d26 	beq	r8,r9,edf4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    edc0:	21000217 	ldw	r4,8(r4)
    edc4:	20800017 	ldw	r2,0(r4)
    edc8:	da000015 	stw	r8,0(sp)
    edcc:	dac00115 	stw	r11,4(sp)
    edd0:	da400215 	stw	r9,8(sp)
    edd4:	da800315 	stw	r10,12(sp)
    edd8:	10c00717 	ldw	r3,28(r2)
    eddc:	183ee83a 	callr	r3
    ede0:	10c03fcc 	andi	r3,r2,255
    ede4:	1805883a 	mov	r2,r3
    ede8:	dfc00417 	ldw	ra,16(sp)
    edec:	dec00504 	addi	sp,sp,20
    edf0:	f800283a 	ret
    edf4:	58800117 	ldw	r2,4(r11)
    edf8:	18bff11e 	bne	r3,r2,edc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    edfc:	0007883a 	mov	r3,zero
    ee00:	51800215 	stw	r6,8(r10)
    ee04:	003fe906 	br	edac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
    ee08:	00bfff84 	movi	r2,-2
    ee0c:	28800426 	beq	r5,r2,ee20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
    ee10:	0007883a 	mov	r3,zero
    ee14:	003fe506 	br	edac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
    ee18:	00800184 	movi	r2,6
    ee1c:	003fe106 	br	eda4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
    ee20:	00800044 	movi	r2,1
    ee24:	0007883a 	mov	r3,zero
    ee28:	50800315 	stw	r2,12(r10)
    ee2c:	003fdf06 	br	edac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

0000ee30 <__cxa_get_globals_fast>:
    ee30:	d0a6de04 	addi	r2,gp,-25736
    ee34:	f800283a 	ret

0000ee38 <__cxa_get_globals>:
    ee38:	d0a6de04 	addi	r2,gp,-25736
    ee3c:	f800283a 	ret

0000ee40 <_ZSt13set_terminatePFvvE>:
    ee40:	00c000b4 	movhi	r3,2
    ee44:	18c33704 	addi	r3,r3,3292
    ee48:	18800017 	ldw	r2,0(r3)
    ee4c:	19000015 	stw	r4,0(r3)
    ee50:	f800283a 	ret

0000ee54 <_ZSt14set_unexpectedPFvvE>:
    ee54:	00c000b4 	movhi	r3,2
    ee58:	18c33804 	addi	r3,r3,3296
    ee5c:	18800017 	ldw	r2,0(r3)
    ee60:	19000015 	stw	r4,0(r3)
    ee64:	f800283a 	ret

0000ee68 <_ZN10__cxxabiv111__terminateEPFvvE>:
    ee68:	deffed04 	addi	sp,sp,-76
    ee6c:	00800074 	movhi	r2,1
    ee70:	10b9cd04 	addi	r2,r2,-6348
    ee74:	d8800615 	stw	r2,24(sp)
    ee78:	00c000b4 	movhi	r3,2
    ee7c:	18f92f04 	addi	r3,r3,-6980
    ee80:	00800074 	movhi	r2,1
    ee84:	10bbb104 	addi	r2,r2,-4412
    ee88:	d9000d15 	stw	r4,52(sp)
    ee8c:	d809883a 	mov	r4,sp
    ee90:	d8800915 	stw	r2,36(sp)
    ee94:	dfc01215 	stw	ra,72(sp)
    ee98:	df001115 	stw	fp,68(sp)
    ee9c:	ddc01015 	stw	r23,64(sp)
    eea0:	d8c00715 	stw	r3,28(sp)
    eea4:	dec00815 	stw	sp,32(sp)
    eea8:	dec00a15 	stw	sp,40(sp)
    eeac:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    eeb0:	00800084 	movi	r2,2
    eeb4:	d8800115 	stw	r2,4(sp)
    eeb8:	d8800d17 	ldw	r2,52(sp)
    eebc:	103ee83a 	callr	r2
    eec0:	00118700 	call	11870 <abort>
    eec4:	d8800117 	ldw	r2,4(sp)
    eec8:	d8c00217 	ldw	r3,8(sp)
    eecc:	d8800f15 	stw	r2,60(sp)
    eed0:	d8c00e15 	stw	r3,56(sp)
    eed4:	d8c00f17 	ldw	r3,60(sp)
    eed8:	00800044 	movi	r2,1
    eedc:	18800626 	beq	r3,r2,eef8 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
    eee0:	d8000115 	stw	zero,4(sp)
    eee4:	000de600 	call	de60 <__cxa_end_catch>
    eee8:	d9000e17 	ldw	r4,56(sp)
    eeec:	00bfffc4 	movi	r2,-1
    eef0:	d8800115 	stw	r2,4(sp)
    eef4:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    eef8:	d9000e17 	ldw	r4,56(sp)
    eefc:	000df040 	call	df04 <__cxa_begin_catch>
    ef00:	d8c00f17 	ldw	r3,60(sp)
    ef04:	d8c00115 	stw	r3,4(sp)
    ef08:	00118700 	call	11870 <abort>

0000ef0c <_ZSt9terminatev>:
    ef0c:	008000b4 	movhi	r2,2
    ef10:	10833704 	addi	r2,r2,3292
    ef14:	11000017 	ldw	r4,0(r2)
    ef18:	deffff04 	addi	sp,sp,-4
    ef1c:	dfc00015 	stw	ra,0(sp)
    ef20:	000ee680 	call	ee68 <_ZN10__cxxabiv111__terminateEPFvvE>

0000ef24 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    ef24:	deffff04 	addi	sp,sp,-4
    ef28:	dfc00015 	stw	ra,0(sp)
    ef2c:	203ee83a 	callr	r4
    ef30:	000ef0c0 	call	ef0c <_ZSt9terminatev>

0000ef34 <_ZSt10unexpectedv>:
    ef34:	008000b4 	movhi	r2,2
    ef38:	10833804 	addi	r2,r2,3296
    ef3c:	11000017 	ldw	r4,0(r2)
    ef40:	deffff04 	addi	sp,sp,-4
    ef44:	dfc00015 	stw	ra,0(sp)
    ef48:	000ef240 	call	ef24 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000ef4c <_Znwm>:
    ef4c:	deffee04 	addi	sp,sp,-72
    ef50:	00800074 	movhi	r2,1
    ef54:	10b9cd04 	addi	r2,r2,-6348
    ef58:	d8800615 	stw	r2,24(sp)
    ef5c:	00c000b4 	movhi	r3,2
    ef60:	18f93304 	addi	r3,r3,-6964
    ef64:	00800074 	movhi	r2,1
    ef68:	10bc0a04 	addi	r2,r2,-4056
    ef6c:	d9000e15 	stw	r4,56(sp)
    ef70:	d809883a 	mov	r4,sp
    ef74:	d8800915 	stw	r2,36(sp)
    ef78:	dfc01115 	stw	ra,68(sp)
    ef7c:	df001015 	stw	fp,64(sp)
    ef80:	ddc00f15 	stw	r23,60(sp)
    ef84:	d8c00715 	stw	r3,28(sp)
    ef88:	dec00815 	stw	sp,32(sp)
    ef8c:	dec00a15 	stw	sp,40(sp)
    ef90:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    ef94:	d8800e17 	ldw	r2,56(sp)
    ef98:	10000a1e 	bne	r2,zero,efc4 <_Znwm+0x78>
    ef9c:	00800044 	movi	r2,1
    efa0:	d8800e15 	stw	r2,56(sp)
    efa4:	00000706 	br	efc4 <_Znwm+0x78>
    efa8:	008000b4 	movhi	r2,2
    efac:	108a1404 	addi	r2,r2,10320
    efb0:	10c00017 	ldw	r3,0(r2)
    efb4:	18000f26 	beq	r3,zero,eff4 <_Znwm+0xa8>
    efb8:	00800044 	movi	r2,1
    efbc:	d8800115 	stw	r2,4(sp)
    efc0:	183ee83a 	callr	r3
    efc4:	d9000e17 	ldw	r4,56(sp)
    efc8:	00135880 	call	13588 <malloc>
    efcc:	d8800d15 	stw	r2,52(sp)
    efd0:	103ff526 	beq	r2,zero,efa8 <_Znwm+0x5c>
    efd4:	d809883a 	mov	r4,sp
    efd8:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    efdc:	d8800d17 	ldw	r2,52(sp)
    efe0:	dfc01117 	ldw	ra,68(sp)
    efe4:	df001017 	ldw	fp,64(sp)
    efe8:	ddc00f17 	ldw	r23,60(sp)
    efec:	dec01204 	addi	sp,sp,72
    eff0:	f800283a 	ret
    eff4:	01000104 	movi	r4,4
    eff8:	000f1c40 	call	f1c4 <__cxa_allocate_exception>
    effc:	1009883a 	mov	r4,r2
    f000:	008000b4 	movhi	r2,2
    f004:	10baf104 	addi	r2,r2,-5180
    f008:	20800015 	stw	r2,0(r4)
    f00c:	00c00044 	movi	r3,1
    f010:	d8c00115 	stw	r3,4(sp)
    f014:	014000b4 	movhi	r5,2
    f018:	297af804 	addi	r5,r5,-5152
    f01c:	01800074 	movhi	r6,1
    f020:	31bc5904 	addi	r6,r6,-3740
    f024:	000dd640 	call	dd64 <__cxa_throw>
    f028:	d8800317 	ldw	r2,12(sp)
    f02c:	00ffffc4 	movi	r3,-1
    f030:	d9000217 	ldw	r4,8(sp)
    f034:	10c00226 	beq	r2,r3,f040 <_Znwm+0xf4>
    f038:	d8c00115 	stw	r3,4(sp)
    f03c:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    f040:	00bfffc4 	movi	r2,-1
    f044:	d8800115 	stw	r2,4(sp)
    f048:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

0000f04c <__cxa_call_terminate>:
    f04c:	defffe04 	addi	sp,sp,-8
    f050:	dc000015 	stw	r16,0(sp)
    f054:	dfc00115 	stw	ra,4(sp)
    f058:	2021883a 	mov	r16,r4
    f05c:	20000626 	beq	r4,zero,f078 <__cxa_call_terminate+0x2c>
    f060:	000df040 	call	df04 <__cxa_begin_catch>
    f064:	80c00017 	ldw	r3,0(r16)
    f068:	0090caf4 	movhi	r2,17195
    f06c:	108ac004 	addi	r2,r2,11008
    f070:	81000117 	ldw	r4,4(r16)
    f074:	18800126 	beq	r3,r2,f07c <__cxa_call_terminate+0x30>
    f078:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    f07c:	0091d3b4 	movhi	r2,18254
    f080:	109550c4 	addi	r2,r2,21827
    f084:	20bffc1e 	bne	r4,r2,f078 <__cxa_call_terminate+0x2c>
    f088:	813ff817 	ldw	r4,-32(r16)
    f08c:	000ee680 	call	ee68 <_ZN10__cxxabiv111__terminateEPFvvE>

0000f090 <_ZNKSt9exception4whatEv>:
    f090:	20800017 	ldw	r2,0(r4)
    f094:	10ffff17 	ldw	r3,-4(r2)
    f098:	18800117 	ldw	r2,4(r3)
    f09c:	f800283a 	ret

0000f0a0 <_ZNSt9exceptionD0Ev>:
    f0a0:	008000b4 	movhi	r2,2
    f0a4:	10bae004 	addi	r2,r2,-5248
    f0a8:	20800015 	stw	r2,0(r4)
    f0ac:	000e01c1 	jmpi	e01c <_ZdlPv>

0000f0b0 <_ZNSt9exceptionD1Ev>:
    f0b0:	008000b4 	movhi	r2,2
    f0b4:	10bae004 	addi	r2,r2,-5248
    f0b8:	20800015 	stw	r2,0(r4)
    f0bc:	f800283a 	ret

0000f0c0 <_ZNSt9exceptionD2Ev>:
    f0c0:	008000b4 	movhi	r2,2
    f0c4:	10bae004 	addi	r2,r2,-5248
    f0c8:	20800015 	stw	r2,0(r4)
    f0cc:	f800283a 	ret

0000f0d0 <_ZNSt13bad_exceptionD0Ev>:
    f0d0:	defffe04 	addi	sp,sp,-8
    f0d4:	008000b4 	movhi	r2,2
    f0d8:	10badb04 	addi	r2,r2,-5268
    f0dc:	dc400015 	stw	r17,0(sp)
    f0e0:	20800015 	stw	r2,0(r4)
    f0e4:	2023883a 	mov	r17,r4
    f0e8:	dfc00115 	stw	ra,4(sp)
    f0ec:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    f0f0:	8809883a 	mov	r4,r17
    f0f4:	dfc00117 	ldw	ra,4(sp)
    f0f8:	dc400017 	ldw	r17,0(sp)
    f0fc:	dec00204 	addi	sp,sp,8
    f100:	000e01c1 	jmpi	e01c <_ZdlPv>

0000f104 <_ZNSt13bad_exceptionD1Ev>:
    f104:	008000b4 	movhi	r2,2
    f108:	10badb04 	addi	r2,r2,-5268
    f10c:	20800015 	stw	r2,0(r4)
    f110:	000f0c01 	jmpi	f0c0 <_ZNSt9exceptionD2Ev>

0000f114 <_ZNSt13bad_exceptionD2Ev>:
    f114:	008000b4 	movhi	r2,2
    f118:	10badb04 	addi	r2,r2,-5268
    f11c:	20800015 	stw	r2,0(r4)
    f120:	000f0c01 	jmpi	f0c0 <_ZNSt9exceptionD2Ev>

0000f124 <_ZSt15set_new_handlerPFvvE>:
    f124:	d0a6e017 	ldw	r2,-25728(gp)
    f128:	d126e015 	stw	r4,-25728(gp)
    f12c:	f800283a 	ret

0000f130 <_ZNSt9bad_allocD0Ev>:
    f130:	defffe04 	addi	sp,sp,-8
    f134:	008000b4 	movhi	r2,2
    f138:	10baf104 	addi	r2,r2,-5180
    f13c:	dc400015 	stw	r17,0(sp)
    f140:	20800015 	stw	r2,0(r4)
    f144:	2023883a 	mov	r17,r4
    f148:	dfc00115 	stw	ra,4(sp)
    f14c:	000f0c00 	call	f0c0 <_ZNSt9exceptionD2Ev>
    f150:	8809883a 	mov	r4,r17
    f154:	dfc00117 	ldw	ra,4(sp)
    f158:	dc400017 	ldw	r17,0(sp)
    f15c:	dec00204 	addi	sp,sp,8
    f160:	000e01c1 	jmpi	e01c <_ZdlPv>

0000f164 <_ZNSt9bad_allocD1Ev>:
    f164:	008000b4 	movhi	r2,2
    f168:	10baf104 	addi	r2,r2,-5180
    f16c:	20800015 	stw	r2,0(r4)
    f170:	000f0c01 	jmpi	f0c0 <_ZNSt9exceptionD2Ev>

0000f174 <_ZNSt9bad_allocD2Ev>:
    f174:	008000b4 	movhi	r2,2
    f178:	10baf104 	addi	r2,r2,-5180
    f17c:	20800015 	stw	r2,0(r4)
    f180:	000f0c01 	jmpi	f0c0 <_ZNSt9exceptionD2Ev>

0000f184 <__cxa_free_exception>:
    f184:	2007883a 	mov	r3,r4
    f188:	008000b4 	movhi	r2,2
    f18c:	108a2804 	addi	r2,r2,10400
    f190:	213ff004 	addi	r4,r4,-64
    f194:	11420004 	addi	r5,r2,2048
    f198:	18800336 	bltu	r3,r2,f1a8 <__cxa_free_exception+0x24>
    f19c:	1885c83a 	sub	r2,r3,r2
    f1a0:	1004d27a 	srli	r2,r2,9
    f1a4:	19400136 	bltu	r3,r5,f1ac <__cxa_free_exception+0x28>
    f1a8:	00135741 	jmpi	13574 <free>
    f1ac:	00ffff84 	movi	r3,-2
    f1b0:	1886183a 	rol	r3,r3,r2
    f1b4:	d0a6e117 	ldw	r2,-25724(gp)
    f1b8:	10c4703a 	and	r2,r2,r3
    f1bc:	d0a6e115 	stw	r2,-25724(gp)
    f1c0:	f800283a 	ret

0000f1c4 <__cxa_allocate_exception>:
    f1c4:	deffed04 	addi	sp,sp,-76
    f1c8:	00800074 	movhi	r2,1
    f1cc:	10b9cd04 	addi	r2,r2,-6348
    f1d0:	21001004 	addi	r4,r4,64
    f1d4:	00c000b4 	movhi	r3,2
    f1d8:	18f93804 	addi	r3,r3,-6944
    f1dc:	d8800615 	stw	r2,24(sp)
    f1e0:	d9000d15 	stw	r4,52(sp)
    f1e4:	00800074 	movhi	r2,1
    f1e8:	10bcb504 	addi	r2,r2,-3372
    f1ec:	d809883a 	mov	r4,sp
    f1f0:	dfc01215 	stw	ra,72(sp)
    f1f4:	d8c00715 	stw	r3,28(sp)
    f1f8:	d8800915 	stw	r2,36(sp)
    f1fc:	df001115 	stw	fp,68(sp)
    f200:	ddc01015 	stw	r23,64(sp)
    f204:	dec00815 	stw	sp,32(sp)
    f208:	dec00a15 	stw	sp,40(sp)
    f20c:	0010a2c0 	call	10a2c <_Unwind_SjLj_Register>
    f210:	d9000d17 	ldw	r4,52(sp)
    f214:	00135880 	call	13588 <malloc>
    f218:	d8800e15 	stw	r2,56(sp)
    f21c:	1000171e 	bne	r2,zero,f27c <__cxa_allocate_exception+0xb8>
    f220:	d8c00d17 	ldw	r3,52(sp)
    f224:	00808004 	movi	r2,512
    f228:	d1e6e117 	ldw	r7,-25724(gp)
    f22c:	10c02636 	bltu	r2,r3,f2c8 <__cxa_allocate_exception+0x104>
    f230:	3807883a 	mov	r3,r7
    f234:	01400044 	movi	r5,1
    f238:	1944703a 	and	r2,r3,r5
    f23c:	0009883a 	mov	r4,zero
    f240:	01800104 	movi	r6,4
    f244:	10000526 	beq	r2,zero,f25c <__cxa_allocate_exception+0x98>
    f248:	2149883a 	add	r4,r4,r5
    f24c:	21801e26 	beq	r4,r6,f2c8 <__cxa_allocate_exception+0x104>
    f250:	1806d07a 	srli	r3,r3,1
    f254:	1944703a 	and	r2,r3,r5
    f258:	103ffb1e 	bne	r2,zero,f248 <__cxa_allocate_exception+0x84>
    f25c:	2904983a 	sll	r2,r5,r4
    f260:	2008927a 	slli	r4,r4,9
    f264:	00c000b4 	movhi	r3,2
    f268:	18ca2804 	addi	r3,r3,10400
    f26c:	3884b03a 	or	r2,r7,r2
    f270:	20c9883a 	add	r4,r4,r3
    f274:	d9000e15 	stw	r4,56(sp)
    f278:	d0a6e115 	stw	r2,-25724(gp)
    f27c:	000ee380 	call	ee38 <__cxa_get_globals>
    f280:	10c00117 	ldw	r3,4(r2)
    f284:	d9000e17 	ldw	r4,56(sp)
    f288:	000b883a 	mov	r5,zero
    f28c:	18c00044 	addi	r3,r3,1
    f290:	10c00115 	stw	r3,4(r2)
    f294:	01801004 	movi	r6,64
    f298:	0013fb40 	call	13fb4 <memset>
    f29c:	d8800e17 	ldw	r2,56(sp)
    f2a0:	d809883a 	mov	r4,sp
    f2a4:	10801004 	addi	r2,r2,64
    f2a8:	d8800f15 	stw	r2,60(sp)
    f2ac:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
    f2b0:	d8800f17 	ldw	r2,60(sp)
    f2b4:	dfc01217 	ldw	ra,72(sp)
    f2b8:	df001117 	ldw	fp,68(sp)
    f2bc:	ddc01017 	ldw	r23,64(sp)
    f2c0:	dec01304 	addi	sp,sp,76
    f2c4:	f800283a 	ret
    f2c8:	00800044 	movi	r2,1
    f2cc:	d8800115 	stw	r2,4(sp)
    f2d0:	000ef0c0 	call	ef0c <_ZSt9terminatev>
    f2d4:	d8800317 	ldw	r2,12(sp)
    f2d8:	00ffffc4 	movi	r3,-1
    f2dc:	d9000217 	ldw	r4,8(sp)
    f2e0:	10c00226 	beq	r2,r3,f2ec <__cxa_allocate_exception+0x128>
    f2e4:	d8c00115 	stw	r3,4(sp)
    f2e8:	0010cf80 	call	10cf8 <_Unwind_SjLj_Resume>
    f2ec:	00bfffc4 	movi	r2,-1
    f2f0:	d8800115 	stw	r2,4(sp)
    f2f4:	000e5b40 	call	e5b4 <__cxa_call_unexpected>

0000f2f8 <_ZNKSt9type_info14__is_pointer_pEv>:
    f2f8:	0005883a 	mov	r2,zero
    f2fc:	f800283a 	ret

0000f300 <_ZNKSt9type_info15__is_function_pEv>:
    f300:	0005883a 	mov	r2,zero
    f304:	f800283a 	ret

0000f308 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    f308:	20c00117 	ldw	r3,4(r4)
    f30c:	28800117 	ldw	r2,4(r5)
    f310:	1885003a 	cmpeq	r2,r3,r2
    f314:	f800283a 	ret

0000f318 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    f318:	0005883a 	mov	r2,zero
    f31c:	f800283a 	ret

0000f320 <_ZNSt9type_infoD0Ev>:
    f320:	008000b4 	movhi	r2,2
    f324:	10bafd04 	addi	r2,r2,-5132
    f328:	20800015 	stw	r2,0(r4)
    f32c:	000e01c1 	jmpi	e01c <_ZdlPv>

0000f330 <_ZNSt9type_infoD1Ev>:
    f330:	008000b4 	movhi	r2,2
    f334:	10bafd04 	addi	r2,r2,-5132
    f338:	20800015 	stw	r2,0(r4)
    f33c:	f800283a 	ret

0000f340 <_ZNSt9type_infoD2Ev>:
    f340:	008000b4 	movhi	r2,2
    f344:	10bafd04 	addi	r2,r2,-5132
    f348:	20800015 	stw	r2,0(r4)
    f34c:	f800283a 	ret

0000f350 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    f350:	20c00017 	ldw	r3,0(r4)
    f354:	defffa04 	addi	sp,sp,-24
    f358:	dc000415 	stw	r16,16(sp)
    f35c:	1a000617 	ldw	r8,24(r3)
    f360:	3021883a 	mov	r16,r6
    f364:	31800017 	ldw	r6,0(r6)
    f368:	00800404 	movi	r2,16
    f36c:	dfc00515 	stw	ra,20(sp)
    f370:	d8800215 	stw	r2,8(sp)
    f374:	d8000015 	stw	zero,0(sp)
    f378:	d8000115 	stw	zero,4(sp)
    f37c:	d8000315 	stw	zero,12(sp)
    f380:	d80f883a 	mov	r7,sp
    f384:	403ee83a 	callr	r8
    f388:	d8800117 	ldw	r2,4(sp)
    f38c:	00c00184 	movi	r3,6
    f390:	0009883a 	mov	r4,zero
    f394:	1080018c 	andi	r2,r2,6
    f398:	10c0031e 	bne	r2,r3,f3a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
    f39c:	d8800017 	ldw	r2,0(sp)
    f3a0:	01000044 	movi	r4,1
    f3a4:	80800015 	stw	r2,0(r16)
    f3a8:	2005883a 	mov	r2,r4
    f3ac:	dfc00517 	ldw	ra,20(sp)
    f3b0:	dc000417 	ldw	r16,16(sp)
    f3b4:	dec00604 	addi	sp,sp,24
    f3b8:	f800283a 	ret

0000f3bc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
    f3bc:	d8800017 	ldw	r2,0(sp)
    f3c0:	00c00184 	movi	r3,6
    f3c4:	1180021e 	bne	r2,r6,f3d0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
    f3c8:	1805883a 	mov	r2,r3
    f3cc:	f800283a 	ret
    f3d0:	00c00044 	movi	r3,1
    f3d4:	1805883a 	mov	r2,r3
    f3d8:	f800283a 	ret

0000f3dc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    f3dc:	defffe04 	addi	sp,sp,-8
    f3e0:	008000b4 	movhi	r2,2
    f3e4:	10bb0904 	addi	r2,r2,-5084
    f3e8:	dc400015 	stw	r17,0(sp)
    f3ec:	20800015 	stw	r2,0(r4)
    f3f0:	2023883a 	mov	r17,r4
    f3f4:	dfc00115 	stw	ra,4(sp)
    f3f8:	000f3400 	call	f340 <_ZNSt9type_infoD2Ev>
    f3fc:	8809883a 	mov	r4,r17
    f400:	dfc00117 	ldw	ra,4(sp)
    f404:	dc400017 	ldw	r17,0(sp)
    f408:	dec00204 	addi	sp,sp,8
    f40c:	000e01c1 	jmpi	e01c <_ZdlPv>

0000f410 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    f410:	008000b4 	movhi	r2,2
    f414:	10bb0904 	addi	r2,r2,-5084
    f418:	20800015 	stw	r2,0(r4)
    f41c:	000f3401 	jmpi	f340 <_ZNSt9type_infoD2Ev>

0000f420 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
    f420:	008000b4 	movhi	r2,2
    f424:	10bb0904 	addi	r2,r2,-5084
    f428:	20800015 	stw	r2,0(r4)
    f42c:	000f3401 	jmpi	f340 <_ZNSt9type_infoD2Ev>

0000f430 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    f430:	2811883a 	mov	r8,r5
    f434:	20c00117 	ldw	r3,4(r4)
    f438:	40800117 	ldw	r2,4(r8)
    f43c:	deffff04 	addi	sp,sp,-4
    f440:	dfc00015 	stw	ra,0(sp)
    f444:	200b883a 	mov	r5,r4
    f448:	02400044 	movi	r9,1
    f44c:	18800426 	beq	r3,r2,f460 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
    f450:	008000c4 	movi	r2,3
    f454:	4009883a 	mov	r4,r8
    f458:	0013883a 	mov	r9,zero
    f45c:	11c0042e 	bgeu	r2,r7,f470 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
    f460:	4805883a 	mov	r2,r9
    f464:	dfc00017 	ldw	ra,0(sp)
    f468:	dec00104 	addi	sp,sp,4
    f46c:	f800283a 	ret
    f470:	40800017 	ldw	r2,0(r8)
    f474:	10c00517 	ldw	r3,20(r2)
    f478:	183ee83a 	callr	r3
    f47c:	12403fcc 	andi	r9,r2,255
    f480:	4805883a 	mov	r2,r9
    f484:	dfc00017 	ldw	ra,0(sp)
    f488:	dec00104 	addi	sp,sp,4
    f48c:	f800283a 	ret

0000f490 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    f490:	20c00117 	ldw	r3,4(r4)
    f494:	28800117 	ldw	r2,4(r5)
    f498:	0009883a 	mov	r4,zero
    f49c:	1880061e 	bne	r3,r2,f4b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
    f4a0:	00800184 	movi	r2,6
    f4a4:	38800115 	stw	r2,4(r7)
    f4a8:	00800204 	movi	r2,8
    f4ac:	39800015 	stw	r6,0(r7)
    f4b0:	38800315 	stw	r2,12(r7)
    f4b4:	01000044 	movi	r4,1
    f4b8:	2005883a 	mov	r2,r4
    f4bc:	f800283a 	ret

0000f4c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    f4c0:	da000017 	ldw	r8,0(sp)
    f4c4:	d8800217 	ldw	r2,8(sp)
    f4c8:	d9400317 	ldw	r5,12(sp)
    f4cc:	40800926 	beq	r8,r2,f4f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
    f4d0:	21000117 	ldw	r4,4(r4)
    f4d4:	38800117 	ldw	r2,4(r7)
    f4d8:	2080041e 	bne	r4,r2,f4ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
    f4dc:	00800044 	movi	r2,1
    f4e0:	28800315 	stw	r2,12(r5)
    f4e4:	2a000015 	stw	r8,0(r5)
    f4e8:	29800115 	stw	r6,4(r5)
    f4ec:	0005883a 	mov	r2,zero
    f4f0:	f800283a 	ret
    f4f4:	d8800117 	ldw	r2,4(sp)
    f4f8:	21000117 	ldw	r4,4(r4)
    f4fc:	10c00117 	ldw	r3,4(r2)
    f500:	20fff41e 	bne	r4,r3,f4d4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
    f504:	29800215 	stw	r6,8(r5)
    f508:	003ff806 	br	f4ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

0000f50c <_fpadd_parts>:
    f50c:	21c00017 	ldw	r7,0(r4)
    f510:	02000044 	movi	r8,1
    f514:	41c0332e 	bgeu	r8,r7,f5e4 <_fpadd_parts+0xd8>
    f518:	28800017 	ldw	r2,0(r5)
    f51c:	4080462e 	bgeu	r8,r2,f638 <_fpadd_parts+0x12c>
    f520:	00c00104 	movi	r3,4
    f524:	38c06b26 	beq	r7,r3,f6d4 <_fpadd_parts+0x1c8>
    f528:	10c04326 	beq	r2,r3,f638 <_fpadd_parts+0x12c>
    f52c:	00c00084 	movi	r3,2
    f530:	10c02e26 	beq	r2,r3,f5ec <_fpadd_parts+0xe0>
    f534:	38c04026 	beq	r7,r3,f638 <_fpadd_parts+0x12c>
    f538:	22800217 	ldw	r10,8(r4)
    f53c:	28c00217 	ldw	r3,8(r5)
    f540:	23000317 	ldw	r12,12(r4)
    f544:	2a400317 	ldw	r9,12(r5)
    f548:	50cfc83a 	sub	r7,r10,r3
    f54c:	3817883a 	mov	r11,r7
    f550:	38004f16 	blt	r7,zero,f690 <_fpadd_parts+0x184>
    f554:	008007c4 	movi	r2,31
    f558:	11c03316 	blt	r2,r7,f628 <_fpadd_parts+0x11c>
    f55c:	02c0540e 	bge	zero,r11,f6b0 <_fpadd_parts+0x1a4>
    f560:	41c4983a 	sll	r2,r8,r7
    f564:	49c6d83a 	srl	r3,r9,r7
    f568:	10bfffc4 	addi	r2,r2,-1
    f56c:	4884703a 	and	r2,r9,r2
    f570:	1004c03a 	cmpne	r2,r2,zero
    f574:	1892b03a 	or	r9,r3,r2
    f578:	20c00117 	ldw	r3,4(r4)
    f57c:	28800117 	ldw	r2,4(r5)
    f580:	18803c26 	beq	r3,r2,f674 <_fpadd_parts+0x168>
    f584:	18002f26 	beq	r3,zero,f644 <_fpadd_parts+0x138>
    f588:	4b05c83a 	sub	r2,r9,r12
    f58c:	10004216 	blt	r2,zero,f698 <_fpadd_parts+0x18c>
    f590:	32800215 	stw	r10,8(r6)
    f594:	30800315 	stw	r2,12(r6)
    f598:	30000115 	stw	zero,4(r6)
    f59c:	31000317 	ldw	r4,12(r6)
    f5a0:	01d00034 	movhi	r7,16384
    f5a4:	39ffff84 	addi	r7,r7,-2
    f5a8:	20bfffc4 	addi	r2,r4,-1
    f5ac:	2007883a 	mov	r3,r4
    f5b0:	38800836 	bltu	r7,r2,f5d4 <_fpadd_parts+0xc8>
    f5b4:	31400217 	ldw	r5,8(r6)
    f5b8:	18c9883a 	add	r4,r3,r3
    f5bc:	20bfffc4 	addi	r2,r4,-1
    f5c0:	297fffc4 	addi	r5,r5,-1
    f5c4:	2007883a 	mov	r3,r4
    f5c8:	38bffb2e 	bgeu	r7,r2,f5b8 <_fpadd_parts+0xac>
    f5cc:	31400215 	stw	r5,8(r6)
    f5d0:	31000315 	stw	r4,12(r6)
    f5d4:	008000c4 	movi	r2,3
    f5d8:	30800015 	stw	r2,0(r6)
    f5dc:	20001b16 	blt	r4,zero,f64c <_fpadd_parts+0x140>
    f5e0:	3009883a 	mov	r4,r6
    f5e4:	2005883a 	mov	r2,r4
    f5e8:	f800283a 	ret
    f5ec:	38fffd1e 	bne	r7,r3,f5e4 <_fpadd_parts+0xd8>
    f5f0:	31c00015 	stw	r7,0(r6)
    f5f4:	20800117 	ldw	r2,4(r4)
    f5f8:	30800115 	stw	r2,4(r6)
    f5fc:	20c00217 	ldw	r3,8(r4)
    f600:	30c00215 	stw	r3,8(r6)
    f604:	20800317 	ldw	r2,12(r4)
    f608:	30800315 	stw	r2,12(r6)
    f60c:	20c00117 	ldw	r3,4(r4)
    f610:	28800117 	ldw	r2,4(r5)
    f614:	3009883a 	mov	r4,r6
    f618:	1886703a 	and	r3,r3,r2
    f61c:	2005883a 	mov	r2,r4
    f620:	30c00115 	stw	r3,4(r6)
    f624:	f800283a 	ret
    f628:	1a801716 	blt	r3,r10,f688 <_fpadd_parts+0x17c>
    f62c:	1815883a 	mov	r10,r3
    f630:	0019883a 	mov	r12,zero
    f634:	003fd006 	br	f578 <_fpadd_parts+0x6c>
    f638:	2809883a 	mov	r4,r5
    f63c:	2005883a 	mov	r2,r4
    f640:	f800283a 	ret
    f644:	6245c83a 	sub	r2,r12,r9
    f648:	003fd006 	br	f58c <_fpadd_parts+0x80>
    f64c:	30800217 	ldw	r2,8(r6)
    f650:	2006d07a 	srli	r3,r4,1
    f654:	2100004c 	andi	r4,r4,1
    f658:	10800044 	addi	r2,r2,1
    f65c:	1906b03a 	or	r3,r3,r4
    f660:	3009883a 	mov	r4,r6
    f664:	30800215 	stw	r2,8(r6)
    f668:	2005883a 	mov	r2,r4
    f66c:	30c00315 	stw	r3,12(r6)
    f670:	f800283a 	ret
    f674:	4b09883a 	add	r4,r9,r12
    f678:	30c00115 	stw	r3,4(r6)
    f67c:	32800215 	stw	r10,8(r6)
    f680:	31000315 	stw	r4,12(r6)
    f684:	003fd306 	br	f5d4 <_fpadd_parts+0xc8>
    f688:	0013883a 	mov	r9,zero
    f68c:	003fba06 	br	f578 <_fpadd_parts+0x6c>
    f690:	01cfc83a 	sub	r7,zero,r7
    f694:	003faf06 	br	f554 <_fpadd_parts+0x48>
    f698:	0089c83a 	sub	r4,zero,r2
    f69c:	00800044 	movi	r2,1
    f6a0:	30800115 	stw	r2,4(r6)
    f6a4:	32800215 	stw	r10,8(r6)
    f6a8:	31000315 	stw	r4,12(r6)
    f6ac:	003fbb06 	br	f59c <_fpadd_parts+0x90>
    f6b0:	583fb126 	beq	r11,zero,f578 <_fpadd_parts+0x6c>
    f6b4:	41c4983a 	sll	r2,r8,r7
    f6b8:	61c6d83a 	srl	r3,r12,r7
    f6bc:	51d5883a 	add	r10,r10,r7
    f6c0:	10bfffc4 	addi	r2,r2,-1
    f6c4:	6084703a 	and	r2,r12,r2
    f6c8:	1004c03a 	cmpne	r2,r2,zero
    f6cc:	1898b03a 	or	r12,r3,r2
    f6d0:	003fa906 	br	f578 <_fpadd_parts+0x6c>
    f6d4:	11ffc31e 	bne	r2,r7,f5e4 <_fpadd_parts+0xd8>
    f6d8:	28c00117 	ldw	r3,4(r5)
    f6dc:	20800117 	ldw	r2,4(r4)
    f6e0:	10ffc026 	beq	r2,r3,f5e4 <_fpadd_parts+0xd8>
    f6e4:	010000b4 	movhi	r4,2
    f6e8:	213b1e04 	addi	r4,r4,-5000
    f6ec:	003fbd06 	br	f5e4 <_fpadd_parts+0xd8>

0000f6f0 <__subsf3>:
    f6f0:	deffef04 	addi	sp,sp,-68
    f6f4:	dcc00f15 	stw	r19,60(sp)
    f6f8:	dcc00204 	addi	r19,sp,8
    f6fc:	dc400e15 	stw	r17,56(sp)
    f700:	d9000015 	stw	r4,0(sp)
    f704:	d9400115 	stw	r5,4(sp)
    f708:	d809883a 	mov	r4,sp
    f70c:	980b883a 	mov	r5,r19
    f710:	dc400604 	addi	r17,sp,24
    f714:	dfc01015 	stw	ra,64(sp)
    f718:	00111ec0 	call	111ec <__unpack_f>
    f71c:	d9000104 	addi	r4,sp,4
    f720:	880b883a 	mov	r5,r17
    f724:	00111ec0 	call	111ec <__unpack_f>
    f728:	d8800717 	ldw	r2,28(sp)
    f72c:	9809883a 	mov	r4,r19
    f730:	880b883a 	mov	r5,r17
    f734:	d9800a04 	addi	r6,sp,40
    f738:	1080005c 	xori	r2,r2,1
    f73c:	d8800715 	stw	r2,28(sp)
    f740:	000f50c0 	call	f50c <_fpadd_parts>
    f744:	1009883a 	mov	r4,r2
    f748:	001108c0 	call	1108c <__pack_f>
    f74c:	dfc01017 	ldw	ra,64(sp)
    f750:	dcc00f17 	ldw	r19,60(sp)
    f754:	dc400e17 	ldw	r17,56(sp)
    f758:	dec01104 	addi	sp,sp,68
    f75c:	f800283a 	ret

0000f760 <__addsf3>:
    f760:	deffef04 	addi	sp,sp,-68
    f764:	dcc00f15 	stw	r19,60(sp)
    f768:	dcc00204 	addi	r19,sp,8
    f76c:	dc400e15 	stw	r17,56(sp)
    f770:	d9000015 	stw	r4,0(sp)
    f774:	d9400115 	stw	r5,4(sp)
    f778:	d809883a 	mov	r4,sp
    f77c:	980b883a 	mov	r5,r19
    f780:	dc400604 	addi	r17,sp,24
    f784:	dfc01015 	stw	ra,64(sp)
    f788:	00111ec0 	call	111ec <__unpack_f>
    f78c:	d9000104 	addi	r4,sp,4
    f790:	880b883a 	mov	r5,r17
    f794:	00111ec0 	call	111ec <__unpack_f>
    f798:	d9800a04 	addi	r6,sp,40
    f79c:	9809883a 	mov	r4,r19
    f7a0:	880b883a 	mov	r5,r17
    f7a4:	000f50c0 	call	f50c <_fpadd_parts>
    f7a8:	1009883a 	mov	r4,r2
    f7ac:	001108c0 	call	1108c <__pack_f>
    f7b0:	dfc01017 	ldw	ra,64(sp)
    f7b4:	dcc00f17 	ldw	r19,60(sp)
    f7b8:	dc400e17 	ldw	r17,56(sp)
    f7bc:	dec01104 	addi	sp,sp,68
    f7c0:	f800283a 	ret

0000f7c4 <__mulsf3>:
    f7c4:	deffef04 	addi	sp,sp,-68
    f7c8:	dc400f15 	stw	r17,60(sp)
    f7cc:	dc400204 	addi	r17,sp,8
    f7d0:	dc000e15 	stw	r16,56(sp)
    f7d4:	d9000015 	stw	r4,0(sp)
    f7d8:	d9400115 	stw	r5,4(sp)
    f7dc:	d809883a 	mov	r4,sp
    f7e0:	880b883a 	mov	r5,r17
    f7e4:	dc000604 	addi	r16,sp,24
    f7e8:	dfc01015 	stw	ra,64(sp)
    f7ec:	00111ec0 	call	111ec <__unpack_f>
    f7f0:	d9000104 	addi	r4,sp,4
    f7f4:	800b883a 	mov	r5,r16
    f7f8:	00111ec0 	call	111ec <__unpack_f>
    f7fc:	d9000217 	ldw	r4,8(sp)
    f800:	00800044 	movi	r2,1
    f804:	01400104 	movi	r5,4
    f808:	1100142e 	bgeu	r2,r4,f85c <__mulsf3+0x98>
    f80c:	d8c00617 	ldw	r3,24(sp)
    f810:	10c0052e 	bgeu	r2,r3,f828 <__mulsf3+0x64>
    f814:	21400f26 	beq	r4,r5,f854 <__mulsf3+0x90>
    f818:	19405d26 	beq	r3,r5,f990 <__mulsf3+0x1cc>
    f81c:	00800084 	movi	r2,2
    f820:	20800e26 	beq	r4,r2,f85c <__mulsf3+0x98>
    f824:	1880181e 	bne	r3,r2,f888 <__mulsf3+0xc4>
    f828:	d8c00717 	ldw	r3,28(sp)
    f82c:	d8800317 	ldw	r2,12(sp)
    f830:	8009883a 	mov	r4,r16
    f834:	10c4c03a 	cmpne	r2,r2,r3
    f838:	d8800715 	stw	r2,28(sp)
    f83c:	001108c0 	call	1108c <__pack_f>
    f840:	dfc01017 	ldw	ra,64(sp)
    f844:	dc400f17 	ldw	r17,60(sp)
    f848:	dc000e17 	ldw	r16,56(sp)
    f84c:	dec01104 	addi	sp,sp,68
    f850:	f800283a 	ret
    f854:	00800084 	movi	r2,2
    f858:	18804f26 	beq	r3,r2,f998 <__mulsf3+0x1d4>
    f85c:	d8800317 	ldw	r2,12(sp)
    f860:	d8c00717 	ldw	r3,28(sp)
    f864:	8809883a 	mov	r4,r17
    f868:	10c4c03a 	cmpne	r2,r2,r3
    f86c:	d8800315 	stw	r2,12(sp)
    f870:	001108c0 	call	1108c <__pack_f>
    f874:	dfc01017 	ldw	ra,64(sp)
    f878:	dc400f17 	ldw	r17,60(sp)
    f87c:	dc000e17 	ldw	r16,56(sp)
    f880:	dec01104 	addi	sp,sp,68
    f884:	f800283a 	ret
    f888:	d8800517 	ldw	r2,20(sp)
    f88c:	da000917 	ldw	r8,36(sp)
    f890:	0013883a 	mov	r9,zero
    f894:	0007883a 	mov	r3,zero
    f898:	480f883a 	mov	r7,r9
    f89c:	180b883a 	mov	r5,r3
    f8a0:	400d883a 	mov	r6,r8
    f8a4:	1009883a 	mov	r4,r2
    f8a8:	0010f740 	call	10f74 <__muldi3>
    f8ac:	da800417 	ldw	r10,16(sp)
    f8b0:	d9800817 	ldw	r6,32(sp)
    f8b4:	da400317 	ldw	r9,12(sp)
    f8b8:	52800084 	addi	r10,r10,2
    f8bc:	3295883a 	add	r10,r6,r10
    f8c0:	d9800717 	ldw	r6,28(sp)
    f8c4:	180b883a 	mov	r5,r3
    f8c8:	180f883a 	mov	r7,r3
    f8cc:	4992c03a 	cmpne	r9,r9,r6
    f8d0:	da400b15 	stw	r9,44(sp)
    f8d4:	1007883a 	mov	r3,r2
    f8d8:	da800c15 	stw	r10,48(sp)
    f8dc:	2800070e 	bge	r5,zero,f8fc <__mulsf3+0x138>
    f8e0:	2880004c 	andi	r2,r5,1
    f8e4:	1005003a 	cmpeq	r2,r2,zero
    f8e8:	500d883a 	mov	r6,r10
    f8ec:	10001e26 	beq	r2,zero,f968 <__mulsf3+0x1a4>
    f8f0:	380ed07a 	srli	r7,r7,1
    f8f4:	31800044 	addi	r6,r6,1
    f8f8:	d9800c15 	stw	r6,48(sp)
    f8fc:	01100034 	movhi	r4,16384
    f900:	213fffc4 	addi	r4,r4,-1
    f904:	21c00b36 	bltu	r4,r7,f934 <__mulsf3+0x170>
    f908:	d8800c17 	ldw	r2,48(sp)
    f90c:	00000206 	br	f918 <__mulsf3+0x154>
    f910:	18c7883a 	add	r3,r3,r3
    f914:	21c00636 	bltu	r4,r7,f930 <__mulsf3+0x16c>
    f918:	10bfffc4 	addi	r2,r2,-1
    f91c:	39cf883a 	add	r7,r7,r7
    f920:	183ffb0e 	bge	r3,zero,f910 <__mulsf3+0x14c>
    f924:	39c00054 	ori	r7,r7,1
    f928:	18c7883a 	add	r3,r3,r3
    f92c:	21fffa2e 	bgeu	r4,r7,f918 <__mulsf3+0x154>
    f930:	d8800c15 	stw	r2,48(sp)
    f934:	39001fcc 	andi	r4,r7,127
    f938:	00801004 	movi	r2,64
    f93c:	20800d26 	beq	r4,r2,f974 <__mulsf3+0x1b0>
    f940:	008000c4 	movi	r2,3
    f944:	d9000a04 	addi	r4,sp,40
    f948:	d9c00d15 	stw	r7,52(sp)
    f94c:	d8800a15 	stw	r2,40(sp)
    f950:	001108c0 	call	1108c <__pack_f>
    f954:	dfc01017 	ldw	ra,64(sp)
    f958:	dc400f17 	ldw	r17,60(sp)
    f95c:	dc000e17 	ldw	r16,56(sp)
    f960:	dec01104 	addi	sp,sp,68
    f964:	f800283a 	ret
    f968:	1804d07a 	srli	r2,r3,1
    f96c:	10e00034 	orhi	r3,r2,32768
    f970:	003fdf06 	br	f8f0 <__mulsf3+0x12c>
    f974:	3880200c 	andi	r2,r7,128
    f978:	103ff11e 	bne	r2,zero,f940 <__mulsf3+0x17c>
    f97c:	183ff026 	beq	r3,zero,f940 <__mulsf3+0x17c>
    f980:	3907883a 	add	r3,r7,r4
    f984:	00bfe004 	movi	r2,-128
    f988:	188e703a 	and	r7,r3,r2
    f98c:	003fec06 	br	f940 <__mulsf3+0x17c>
    f990:	00800084 	movi	r2,2
    f994:	20bfa41e 	bne	r4,r2,f828 <__mulsf3+0x64>
    f998:	010000b4 	movhi	r4,2
    f99c:	213b1e04 	addi	r4,r4,-5000
    f9a0:	003fb306 	br	f870 <__mulsf3+0xac>

0000f9a4 <__divsf3>:
    f9a4:	defff304 	addi	sp,sp,-52
    f9a8:	dc400b15 	stw	r17,44(sp)
    f9ac:	dc400204 	addi	r17,sp,8
    f9b0:	dc000a15 	stw	r16,40(sp)
    f9b4:	d9000015 	stw	r4,0(sp)
    f9b8:	d9400115 	stw	r5,4(sp)
    f9bc:	d809883a 	mov	r4,sp
    f9c0:	880b883a 	mov	r5,r17
    f9c4:	dc000604 	addi	r16,sp,24
    f9c8:	dfc00c15 	stw	ra,48(sp)
    f9cc:	00111ec0 	call	111ec <__unpack_f>
    f9d0:	d9000104 	addi	r4,sp,4
    f9d4:	800b883a 	mov	r5,r16
    f9d8:	00111ec0 	call	111ec <__unpack_f>
    f9dc:	d9000217 	ldw	r4,8(sp)
    f9e0:	00800044 	movi	r2,1
    f9e4:	01800104 	movi	r6,4
    f9e8:	11000a2e 	bgeu	r2,r4,fa14 <__divsf3+0x70>
    f9ec:	d9400617 	ldw	r5,24(sp)
    f9f0:	1140432e 	bgeu	r2,r5,fb00 <__divsf3+0x15c>
    f9f4:	d8800317 	ldw	r2,12(sp)
    f9f8:	d8c00717 	ldw	r3,28(sp)
    f9fc:	10c4f03a 	xor	r2,r2,r3
    fa00:	d8800315 	stw	r2,12(sp)
    fa04:	21800226 	beq	r4,r6,fa10 <__divsf3+0x6c>
    fa08:	00800084 	movi	r2,2
    fa0c:	2080101e 	bne	r4,r2,fa50 <__divsf3+0xac>
    fa10:	29000726 	beq	r5,r4,fa30 <__divsf3+0x8c>
    fa14:	8809883a 	mov	r4,r17
    fa18:	001108c0 	call	1108c <__pack_f>
    fa1c:	dfc00c17 	ldw	ra,48(sp)
    fa20:	dc400b17 	ldw	r17,44(sp)
    fa24:	dc000a17 	ldw	r16,40(sp)
    fa28:	dec00d04 	addi	sp,sp,52
    fa2c:	f800283a 	ret
    fa30:	010000b4 	movhi	r4,2
    fa34:	213b1e04 	addi	r4,r4,-5000
    fa38:	001108c0 	call	1108c <__pack_f>
    fa3c:	dfc00c17 	ldw	ra,48(sp)
    fa40:	dc400b17 	ldw	r17,44(sp)
    fa44:	dc000a17 	ldw	r16,40(sp)
    fa48:	dec00d04 	addi	sp,sp,52
    fa4c:	f800283a 	ret
    fa50:	29802d26 	beq	r5,r6,fb08 <__divsf3+0x164>
    fa54:	28801a26 	beq	r5,r2,fac0 <__divsf3+0x11c>
    fa58:	d8c00417 	ldw	r3,16(sp)
    fa5c:	d8800817 	ldw	r2,32(sp)
    fa60:	d9000517 	ldw	r4,20(sp)
    fa64:	d9800917 	ldw	r6,36(sp)
    fa68:	1885c83a 	sub	r2,r3,r2
    fa6c:	d8800415 	stw	r2,16(sp)
    fa70:	2180032e 	bgeu	r4,r6,fa80 <__divsf3+0xdc>
    fa74:	10bfffc4 	addi	r2,r2,-1
    fa78:	d8800415 	stw	r2,16(sp)
    fa7c:	2109883a 	add	r4,r4,r4
    fa80:	01500034 	movhi	r5,16384
    fa84:	0007883a 	mov	r3,zero
    fa88:	0005883a 	mov	r2,zero
    fa8c:	01c007c4 	movi	r7,31
    fa90:	10800044 	addi	r2,r2,1
    fa94:	21800236 	bltu	r4,r6,faa0 <__divsf3+0xfc>
    fa98:	1946b03a 	or	r3,r3,r5
    fa9c:	2189c83a 	sub	r4,r4,r6
    faa0:	280ad07a 	srli	r5,r5,1
    faa4:	2109883a 	add	r4,r4,r4
    faa8:	11fff91e 	bne	r2,r7,fa90 <__divsf3+0xec>
    faac:	19401fcc 	andi	r5,r3,127
    fab0:	00801004 	movi	r2,64
    fab4:	28800a26 	beq	r5,r2,fae0 <__divsf3+0x13c>
    fab8:	d8c00515 	stw	r3,20(sp)
    fabc:	003fd506 	br	fa14 <__divsf3+0x70>
    fac0:	8809883a 	mov	r4,r17
    fac4:	d9800215 	stw	r6,8(sp)
    fac8:	001108c0 	call	1108c <__pack_f>
    facc:	dfc00c17 	ldw	ra,48(sp)
    fad0:	dc400b17 	ldw	r17,44(sp)
    fad4:	dc000a17 	ldw	r16,40(sp)
    fad8:	dec00d04 	addi	sp,sp,52
    fadc:	f800283a 	ret
    fae0:	1880200c 	andi	r2,r3,128
    fae4:	103ff41e 	bne	r2,zero,fab8 <__divsf3+0x114>
    fae8:	203ff326 	beq	r4,zero,fab8 <__divsf3+0x114>
    faec:	1947883a 	add	r3,r3,r5
    faf0:	00bfe004 	movi	r2,-128
    faf4:	1886703a 	and	r3,r3,r2
    faf8:	d8c00515 	stw	r3,20(sp)
    fafc:	003fc506 	br	fa14 <__divsf3+0x70>
    fb00:	8009883a 	mov	r4,r16
    fb04:	003fc406 	br	fa18 <__divsf3+0x74>
    fb08:	8809883a 	mov	r4,r17
    fb0c:	d8000515 	stw	zero,20(sp)
    fb10:	d8000415 	stw	zero,16(sp)
    fb14:	003fc006 	br	fa18 <__divsf3+0x74>

0000fb18 <__gesf2>:
    fb18:	defff304 	addi	sp,sp,-52
    fb1c:	dc400b15 	stw	r17,44(sp)
    fb20:	dc400204 	addi	r17,sp,8
    fb24:	dc000a15 	stw	r16,40(sp)
    fb28:	d9000015 	stw	r4,0(sp)
    fb2c:	d9400115 	stw	r5,4(sp)
    fb30:	d809883a 	mov	r4,sp
    fb34:	880b883a 	mov	r5,r17
    fb38:	dc000604 	addi	r16,sp,24
    fb3c:	dfc00c15 	stw	ra,48(sp)
    fb40:	00111ec0 	call	111ec <__unpack_f>
    fb44:	d9000104 	addi	r4,sp,4
    fb48:	800b883a 	mov	r5,r16
    fb4c:	00111ec0 	call	111ec <__unpack_f>
    fb50:	d8800217 	ldw	r2,8(sp)
    fb54:	00c00044 	movi	r3,1
    fb58:	01bfffc4 	movi	r6,-1
    fb5c:	1880062e 	bgeu	r3,r2,fb78 <__gesf2+0x60>
    fb60:	d8800617 	ldw	r2,24(sp)
    fb64:	8809883a 	mov	r4,r17
    fb68:	800b883a 	mov	r5,r16
    fb6c:	1880022e 	bgeu	r3,r2,fb78 <__gesf2+0x60>
    fb70:	00112b40 	call	112b4 <__fpcmp_parts_f>
    fb74:	100d883a 	mov	r6,r2
    fb78:	3005883a 	mov	r2,r6
    fb7c:	dfc00c17 	ldw	ra,48(sp)
    fb80:	dc400b17 	ldw	r17,44(sp)
    fb84:	dc000a17 	ldw	r16,40(sp)
    fb88:	dec00d04 	addi	sp,sp,52
    fb8c:	f800283a 	ret

0000fb90 <__lesf2>:
    fb90:	defff304 	addi	sp,sp,-52
    fb94:	dc400b15 	stw	r17,44(sp)
    fb98:	dc400204 	addi	r17,sp,8
    fb9c:	dc000a15 	stw	r16,40(sp)
    fba0:	d9000015 	stw	r4,0(sp)
    fba4:	d9400115 	stw	r5,4(sp)
    fba8:	d809883a 	mov	r4,sp
    fbac:	880b883a 	mov	r5,r17
    fbb0:	dc000604 	addi	r16,sp,24
    fbb4:	dfc00c15 	stw	ra,48(sp)
    fbb8:	00111ec0 	call	111ec <__unpack_f>
    fbbc:	d9000104 	addi	r4,sp,4
    fbc0:	800b883a 	mov	r5,r16
    fbc4:	00111ec0 	call	111ec <__unpack_f>
    fbc8:	d8800217 	ldw	r2,8(sp)
    fbcc:	00c00044 	movi	r3,1
    fbd0:	180d883a 	mov	r6,r3
    fbd4:	1880062e 	bgeu	r3,r2,fbf0 <__lesf2+0x60>
    fbd8:	d8800617 	ldw	r2,24(sp)
    fbdc:	8809883a 	mov	r4,r17
    fbe0:	800b883a 	mov	r5,r16
    fbe4:	1880022e 	bgeu	r3,r2,fbf0 <__lesf2+0x60>
    fbe8:	00112b40 	call	112b4 <__fpcmp_parts_f>
    fbec:	100d883a 	mov	r6,r2
    fbf0:	3005883a 	mov	r2,r6
    fbf4:	dfc00c17 	ldw	ra,48(sp)
    fbf8:	dc400b17 	ldw	r17,44(sp)
    fbfc:	dc000a17 	ldw	r16,40(sp)
    fc00:	dec00d04 	addi	sp,sp,52
    fc04:	f800283a 	ret

0000fc08 <__floatsisf>:
    fc08:	2006d7fa 	srli	r3,r4,31
    fc0c:	defffa04 	addi	sp,sp,-24
    fc10:	008000c4 	movi	r2,3
    fc14:	dfc00515 	stw	ra,20(sp)
    fc18:	dc000415 	stw	r16,16(sp)
    fc1c:	d8800015 	stw	r2,0(sp)
    fc20:	d8c00115 	stw	r3,4(sp)
    fc24:	2000081e 	bne	r4,zero,fc48 <__floatsisf+0x40>
    fc28:	00800084 	movi	r2,2
    fc2c:	d8800015 	stw	r2,0(sp)
    fc30:	d809883a 	mov	r4,sp
    fc34:	001108c0 	call	1108c <__pack_f>
    fc38:	dfc00517 	ldw	ra,20(sp)
    fc3c:	dc000417 	ldw	r16,16(sp)
    fc40:	dec00604 	addi	sp,sp,24
    fc44:	f800283a 	ret
    fc48:	00800784 	movi	r2,30
    fc4c:	1807003a 	cmpeq	r3,r3,zero
    fc50:	d8800215 	stw	r2,8(sp)
    fc54:	18000e1e 	bne	r3,zero,fc90 <__floatsisf+0x88>
    fc58:	00a00034 	movhi	r2,32768
    fc5c:	20800e26 	beq	r4,r2,fc98 <__floatsisf+0x90>
    fc60:	0121c83a 	sub	r16,zero,r4
    fc64:	8009883a 	mov	r4,r16
    fc68:	dc000315 	stw	r16,12(sp)
    fc6c:	001100c0 	call	1100c <__clzsi2>
    fc70:	117fffc4 	addi	r5,r2,-1
    fc74:	017fee0e 	bge	zero,r5,fc30 <__floatsisf+0x28>
    fc78:	d8800217 	ldw	r2,8(sp)
    fc7c:	8146983a 	sll	r3,r16,r5
    fc80:	1145c83a 	sub	r2,r2,r5
    fc84:	d8c00315 	stw	r3,12(sp)
    fc88:	d8800215 	stw	r2,8(sp)
    fc8c:	003fe806 	br	fc30 <__floatsisf+0x28>
    fc90:	2021883a 	mov	r16,r4
    fc94:	003ff306 	br	fc64 <__floatsisf+0x5c>
    fc98:	00b3c034 	movhi	r2,52992
    fc9c:	003fe606 	br	fc38 <__floatsisf+0x30>

0000fca0 <__fixsfsi>:
    fca0:	defffa04 	addi	sp,sp,-24
    fca4:	d9000015 	stw	r4,0(sp)
    fca8:	d9400104 	addi	r5,sp,4
    fcac:	d809883a 	mov	r4,sp
    fcb0:	dfc00515 	stw	ra,20(sp)
    fcb4:	00111ec0 	call	111ec <__unpack_f>
    fcb8:	d8c00117 	ldw	r3,4(sp)
    fcbc:	00800084 	movi	r2,2
    fcc0:	1880041e 	bne	r3,r2,fcd4 <__fixsfsi+0x34>
    fcc4:	0005883a 	mov	r2,zero
    fcc8:	dfc00517 	ldw	ra,20(sp)
    fccc:	dec00604 	addi	sp,sp,24
    fcd0:	f800283a 	ret
    fcd4:	00800044 	movi	r2,1
    fcd8:	10fffa2e 	bgeu	r2,r3,fcc4 <__fixsfsi+0x24>
    fcdc:	00800104 	movi	r2,4
    fce0:	18800426 	beq	r3,r2,fcf4 <__fixsfsi+0x54>
    fce4:	d8800317 	ldw	r2,12(sp)
    fce8:	103ff616 	blt	r2,zero,fcc4 <__fixsfsi+0x24>
    fcec:	00c00784 	movi	r3,30
    fcf0:	1880070e 	bge	r3,r2,fd10 <__fixsfsi+0x70>
    fcf4:	d8800217 	ldw	r2,8(sp)
    fcf8:	10000c1e 	bne	r2,zero,fd2c <__fixsfsi+0x8c>
    fcfc:	00a00034 	movhi	r2,32768
    fd00:	10bfffc4 	addi	r2,r2,-1
    fd04:	dfc00517 	ldw	ra,20(sp)
    fd08:	dec00604 	addi	sp,sp,24
    fd0c:	f800283a 	ret
    fd10:	1885c83a 	sub	r2,r3,r2
    fd14:	d9000217 	ldw	r4,8(sp)
    fd18:	d8c00417 	ldw	r3,16(sp)
    fd1c:	1884d83a 	srl	r2,r3,r2
    fd20:	203fe926 	beq	r4,zero,fcc8 <__fixsfsi+0x28>
    fd24:	0085c83a 	sub	r2,zero,r2
    fd28:	003fe706 	br	fcc8 <__fixsfsi+0x28>
    fd2c:	00a00034 	movhi	r2,32768
    fd30:	003fe506 	br	fcc8 <__fixsfsi+0x28>

0000fd34 <__extendsfdf2>:
    fd34:	defff904 	addi	sp,sp,-28
    fd38:	d9000115 	stw	r4,4(sp)
    fd3c:	d9400204 	addi	r5,sp,8
    fd40:	d9000104 	addi	r4,sp,4
    fd44:	dfc00615 	stw	ra,24(sp)
    fd48:	00111ec0 	call	111ec <__unpack_f>
    fd4c:	d9c00517 	ldw	r7,20(sp)
    fd50:	0011883a 	mov	r8,zero
    fd54:	400697ba 	slli	r3,r8,30
    fd58:	3812d0ba 	srli	r9,r7,2
    fd5c:	380497ba 	slli	r2,r7,30
    fd60:	d9000217 	ldw	r4,8(sp)
    fd64:	d9400317 	ldw	r5,12(sp)
    fd68:	d9800417 	ldw	r6,16(sp)
    fd6c:	48c6b03a 	or	r3,r9,r3
    fd70:	100f883a 	mov	r7,r2
    fd74:	d8c00015 	stw	r3,0(sp)
    fd78:	00108a80 	call	108a8 <__make_dp>
    fd7c:	dfc00617 	ldw	ra,24(sp)
    fd80:	dec00704 	addi	sp,sp,28
    fd84:	f800283a 	ret

0000fd88 <_fpadd_parts>:
    fd88:	defff804 	addi	sp,sp,-32
    fd8c:	dcc00315 	stw	r19,12(sp)
    fd90:	2027883a 	mov	r19,r4
    fd94:	21000017 	ldw	r4,0(r4)
    fd98:	00c00044 	movi	r3,1
    fd9c:	dd400515 	stw	r21,20(sp)
    fda0:	dd000415 	stw	r20,16(sp)
    fda4:	ddc00715 	stw	r23,28(sp)
    fda8:	dd800615 	stw	r22,24(sp)
    fdac:	dc800215 	stw	r18,8(sp)
    fdb0:	dc400115 	stw	r17,4(sp)
    fdb4:	dc000015 	stw	r16,0(sp)
    fdb8:	282b883a 	mov	r21,r5
    fdbc:	3029883a 	mov	r20,r6
    fdc0:	1900632e 	bgeu	r3,r4,ff50 <_fpadd_parts+0x1c8>
    fdc4:	28800017 	ldw	r2,0(r5)
    fdc8:	1880812e 	bgeu	r3,r2,ffd0 <_fpadd_parts+0x248>
    fdcc:	00c00104 	movi	r3,4
    fdd0:	20c0dc26 	beq	r4,r3,10144 <_fpadd_parts+0x3bc>
    fdd4:	10c07e26 	beq	r2,r3,ffd0 <_fpadd_parts+0x248>
    fdd8:	00c00084 	movi	r3,2
    fddc:	10c06726 	beq	r2,r3,ff7c <_fpadd_parts+0x1f4>
    fde0:	20c07b26 	beq	r4,r3,ffd0 <_fpadd_parts+0x248>
    fde4:	9dc00217 	ldw	r23,8(r19)
    fde8:	28c00217 	ldw	r3,8(r5)
    fdec:	9c400317 	ldw	r17,12(r19)
    fdf0:	2bc00317 	ldw	r15,12(r5)
    fdf4:	b8cdc83a 	sub	r6,r23,r3
    fdf8:	9c800417 	ldw	r18,16(r19)
    fdfc:	2c000417 	ldw	r16,16(r5)
    fe00:	3009883a 	mov	r4,r6
    fe04:	30009716 	blt	r6,zero,10064 <_fpadd_parts+0x2dc>
    fe08:	00800fc4 	movi	r2,63
    fe0c:	11806b16 	blt	r2,r6,ffbc <_fpadd_parts+0x234>
    fe10:	0100a40e 	bge	zero,r4,100a4 <_fpadd_parts+0x31c>
    fe14:	35bff804 	addi	r22,r6,-32
    fe18:	b000bc16 	blt	r22,zero,1010c <_fpadd_parts+0x384>
    fe1c:	8596d83a 	srl	r11,r16,r22
    fe20:	0019883a 	mov	r12,zero
    fe24:	0013883a 	mov	r9,zero
    fe28:	01000044 	movi	r4,1
    fe2c:	0015883a 	mov	r10,zero
    fe30:	b000be16 	blt	r22,zero,1012c <_fpadd_parts+0x3a4>
    fe34:	2590983a 	sll	r8,r4,r22
    fe38:	000f883a 	mov	r7,zero
    fe3c:	00bfffc4 	movi	r2,-1
    fe40:	3889883a 	add	r4,r7,r2
    fe44:	408b883a 	add	r5,r8,r2
    fe48:	21cd803a 	cmpltu	r6,r4,r7
    fe4c:	314b883a 	add	r5,r6,r5
    fe50:	7904703a 	and	r2,r15,r4
    fe54:	8146703a 	and	r3,r16,r5
    fe58:	10c4b03a 	or	r2,r2,r3
    fe5c:	10000226 	beq	r2,zero,fe68 <_fpadd_parts+0xe0>
    fe60:	02400044 	movi	r9,1
    fe64:	0015883a 	mov	r10,zero
    fe68:	5a5eb03a 	or	r15,r11,r9
    fe6c:	62a0b03a 	or	r16,r12,r10
    fe70:	99400117 	ldw	r5,4(r19)
    fe74:	a8800117 	ldw	r2,4(r21)
    fe78:	28806e26 	beq	r5,r2,10034 <_fpadd_parts+0x2ac>
    fe7c:	28006626 	beq	r5,zero,10018 <_fpadd_parts+0x290>
    fe80:	7c45c83a 	sub	r2,r15,r17
    fe84:	7889803a 	cmpltu	r4,r15,r2
    fe88:	8487c83a 	sub	r3,r16,r18
    fe8c:	1909c83a 	sub	r4,r3,r4
    fe90:	100d883a 	mov	r6,r2
    fe94:	200f883a 	mov	r7,r4
    fe98:	38007716 	blt	r7,zero,10078 <_fpadd_parts+0x2f0>
    fe9c:	a5c00215 	stw	r23,8(r20)
    fea0:	a1c00415 	stw	r7,16(r20)
    fea4:	a0000115 	stw	zero,4(r20)
    fea8:	a1800315 	stw	r6,12(r20)
    feac:	a2000317 	ldw	r8,12(r20)
    feb0:	a2400417 	ldw	r9,16(r20)
    feb4:	00bfffc4 	movi	r2,-1
    feb8:	408b883a 	add	r5,r8,r2
    febc:	2a09803a 	cmpltu	r4,r5,r8
    fec0:	488d883a 	add	r6,r9,r2
    fec4:	01c40034 	movhi	r7,4096
    fec8:	39ffffc4 	addi	r7,r7,-1
    fecc:	218d883a 	add	r6,r4,r6
    fed0:	39801736 	bltu	r7,r6,ff30 <_fpadd_parts+0x1a8>
    fed4:	31c06526 	beq	r6,r7,1006c <_fpadd_parts+0x2e4>
    fed8:	a3000217 	ldw	r12,8(r20)
    fedc:	4209883a 	add	r4,r8,r8
    fee0:	00bfffc4 	movi	r2,-1
    fee4:	220f803a 	cmpltu	r7,r4,r8
    fee8:	4a4b883a 	add	r5,r9,r9
    feec:	394f883a 	add	r7,r7,r5
    fef0:	2095883a 	add	r10,r4,r2
    fef4:	3897883a 	add	r11,r7,r2
    fef8:	510d803a 	cmpltu	r6,r10,r4
    fefc:	6099883a 	add	r12,r12,r2
    ff00:	32d7883a 	add	r11,r6,r11
    ff04:	00840034 	movhi	r2,4096
    ff08:	10bfffc4 	addi	r2,r2,-1
    ff0c:	2011883a 	mov	r8,r4
    ff10:	3813883a 	mov	r9,r7
    ff14:	a1000315 	stw	r4,12(r20)
    ff18:	a1c00415 	stw	r7,16(r20)
    ff1c:	a3000215 	stw	r12,8(r20)
    ff20:	12c00336 	bltu	r2,r11,ff30 <_fpadd_parts+0x1a8>
    ff24:	58bfed1e 	bne	r11,r2,fedc <_fpadd_parts+0x154>
    ff28:	00bfff84 	movi	r2,-2
    ff2c:	12bfeb2e 	bgeu	r2,r10,fedc <_fpadd_parts+0x154>
    ff30:	a2800417 	ldw	r10,16(r20)
    ff34:	008000c4 	movi	r2,3
    ff38:	00c80034 	movhi	r3,8192
    ff3c:	18ffffc4 	addi	r3,r3,-1
    ff40:	a2400317 	ldw	r9,12(r20)
    ff44:	a0800015 	stw	r2,0(r20)
    ff48:	1a802336 	bltu	r3,r10,ffd8 <_fpadd_parts+0x250>
    ff4c:	a027883a 	mov	r19,r20
    ff50:	9805883a 	mov	r2,r19
    ff54:	ddc00717 	ldw	r23,28(sp)
    ff58:	dd800617 	ldw	r22,24(sp)
    ff5c:	dd400517 	ldw	r21,20(sp)
    ff60:	dd000417 	ldw	r20,16(sp)
    ff64:	dcc00317 	ldw	r19,12(sp)
    ff68:	dc800217 	ldw	r18,8(sp)
    ff6c:	dc400117 	ldw	r17,4(sp)
    ff70:	dc000017 	ldw	r16,0(sp)
    ff74:	dec00804 	addi	sp,sp,32
    ff78:	f800283a 	ret
    ff7c:	20fff41e 	bne	r4,r3,ff50 <_fpadd_parts+0x1c8>
    ff80:	31000015 	stw	r4,0(r6)
    ff84:	98800117 	ldw	r2,4(r19)
    ff88:	30800115 	stw	r2,4(r6)
    ff8c:	98c00217 	ldw	r3,8(r19)
    ff90:	30c00215 	stw	r3,8(r6)
    ff94:	98800317 	ldw	r2,12(r19)
    ff98:	30800315 	stw	r2,12(r6)
    ff9c:	98c00417 	ldw	r3,16(r19)
    ffa0:	30c00415 	stw	r3,16(r6)
    ffa4:	98800117 	ldw	r2,4(r19)
    ffa8:	28c00117 	ldw	r3,4(r5)
    ffac:	3027883a 	mov	r19,r6
    ffb0:	10c4703a 	and	r2,r2,r3
    ffb4:	30800115 	stw	r2,4(r6)
    ffb8:	003fe506 	br	ff50 <_fpadd_parts+0x1c8>
    ffbc:	1dc02616 	blt	r3,r23,10058 <_fpadd_parts+0x2d0>
    ffc0:	0023883a 	mov	r17,zero
    ffc4:	182f883a 	mov	r23,r3
    ffc8:	0025883a 	mov	r18,zero
    ffcc:	003fa806 	br	fe70 <_fpadd_parts+0xe8>
    ffd0:	a827883a 	mov	r19,r21
    ffd4:	003fde06 	br	ff50 <_fpadd_parts+0x1c8>
    ffd8:	01800044 	movi	r6,1
    ffdc:	500497fa 	slli	r2,r10,31
    ffe0:	4808d07a 	srli	r4,r9,1
    ffe4:	518ad83a 	srl	r5,r10,r6
    ffe8:	a2000217 	ldw	r8,8(r20)
    ffec:	1108b03a 	or	r4,r2,r4
    fff0:	0007883a 	mov	r3,zero
    fff4:	4984703a 	and	r2,r9,r6
    fff8:	208cb03a 	or	r6,r4,r2
    fffc:	28ceb03a 	or	r7,r5,r3
   10000:	42000044 	addi	r8,r8,1
   10004:	a027883a 	mov	r19,r20
   10008:	a1c00415 	stw	r7,16(r20)
   1000c:	a2000215 	stw	r8,8(r20)
   10010:	a1800315 	stw	r6,12(r20)
   10014:	003fce06 	br	ff50 <_fpadd_parts+0x1c8>
   10018:	8bc5c83a 	sub	r2,r17,r15
   1001c:	8889803a 	cmpltu	r4,r17,r2
   10020:	9407c83a 	sub	r3,r18,r16
   10024:	1909c83a 	sub	r4,r3,r4
   10028:	100d883a 	mov	r6,r2
   1002c:	200f883a 	mov	r7,r4
   10030:	003f9906 	br	fe98 <_fpadd_parts+0x110>
   10034:	7c45883a 	add	r2,r15,r17
   10038:	13c9803a 	cmpltu	r4,r2,r15
   1003c:	8487883a 	add	r3,r16,r18
   10040:	20c9883a 	add	r4,r4,r3
   10044:	a1400115 	stw	r5,4(r20)
   10048:	a5c00215 	stw	r23,8(r20)
   1004c:	a0800315 	stw	r2,12(r20)
   10050:	a1000415 	stw	r4,16(r20)
   10054:	003fb606 	br	ff30 <_fpadd_parts+0x1a8>
   10058:	001f883a 	mov	r15,zero
   1005c:	0021883a 	mov	r16,zero
   10060:	003f8306 	br	fe70 <_fpadd_parts+0xe8>
   10064:	018dc83a 	sub	r6,zero,r6
   10068:	003f6706 	br	fe08 <_fpadd_parts+0x80>
   1006c:	00bfff84 	movi	r2,-2
   10070:	117faf36 	bltu	r2,r5,ff30 <_fpadd_parts+0x1a8>
   10074:	003f9806 	br	fed8 <_fpadd_parts+0x150>
   10078:	0005883a 	mov	r2,zero
   1007c:	1189c83a 	sub	r4,r2,r6
   10080:	1105803a 	cmpltu	r2,r2,r4
   10084:	01cbc83a 	sub	r5,zero,r7
   10088:	2885c83a 	sub	r2,r5,r2
   1008c:	01800044 	movi	r6,1
   10090:	a1800115 	stw	r6,4(r20)
   10094:	a5c00215 	stw	r23,8(r20)
   10098:	a1000315 	stw	r4,12(r20)
   1009c:	a0800415 	stw	r2,16(r20)
   100a0:	003f8206 	br	feac <_fpadd_parts+0x124>
   100a4:	203f7226 	beq	r4,zero,fe70 <_fpadd_parts+0xe8>
   100a8:	35bff804 	addi	r22,r6,-32
   100ac:	b9af883a 	add	r23,r23,r6
   100b0:	b0003116 	blt	r22,zero,10178 <_fpadd_parts+0x3f0>
   100b4:	959ad83a 	srl	r13,r18,r22
   100b8:	001d883a 	mov	r14,zero
   100bc:	000f883a 	mov	r7,zero
   100c0:	01000044 	movi	r4,1
   100c4:	0011883a 	mov	r8,zero
   100c8:	b0002516 	blt	r22,zero,10160 <_fpadd_parts+0x3d8>
   100cc:	2594983a 	sll	r10,r4,r22
   100d0:	0013883a 	mov	r9,zero
   100d4:	00bfffc4 	movi	r2,-1
   100d8:	4889883a 	add	r4,r9,r2
   100dc:	508b883a 	add	r5,r10,r2
   100e0:	224d803a 	cmpltu	r6,r4,r9
   100e4:	314b883a 	add	r5,r6,r5
   100e8:	8904703a 	and	r2,r17,r4
   100ec:	9146703a 	and	r3,r18,r5
   100f0:	10c4b03a 	or	r2,r2,r3
   100f4:	10000226 	beq	r2,zero,10100 <_fpadd_parts+0x378>
   100f8:	01c00044 	movi	r7,1
   100fc:	0011883a 	mov	r8,zero
   10100:	69e2b03a 	or	r17,r13,r7
   10104:	7224b03a 	or	r18,r14,r8
   10108:	003f5906 	br	fe70 <_fpadd_parts+0xe8>
   1010c:	8407883a 	add	r3,r16,r16
   10110:	008007c4 	movi	r2,31
   10114:	1185c83a 	sub	r2,r2,r6
   10118:	1886983a 	sll	r3,r3,r2
   1011c:	7996d83a 	srl	r11,r15,r6
   10120:	8198d83a 	srl	r12,r16,r6
   10124:	1ad6b03a 	or	r11,r3,r11
   10128:	003f3e06 	br	fe24 <_fpadd_parts+0x9c>
   1012c:	2006d07a 	srli	r3,r4,1
   10130:	008007c4 	movi	r2,31
   10134:	1185c83a 	sub	r2,r2,r6
   10138:	1890d83a 	srl	r8,r3,r2
   1013c:	218e983a 	sll	r7,r4,r6
   10140:	003f3e06 	br	fe3c <_fpadd_parts+0xb4>
   10144:	113f821e 	bne	r2,r4,ff50 <_fpadd_parts+0x1c8>
   10148:	28c00117 	ldw	r3,4(r5)
   1014c:	98800117 	ldw	r2,4(r19)
   10150:	10ff7f26 	beq	r2,r3,ff50 <_fpadd_parts+0x1c8>
   10154:	04c000b4 	movhi	r19,2
   10158:	9cfb2204 	addi	r19,r19,-4984
   1015c:	003f7c06 	br	ff50 <_fpadd_parts+0x1c8>
   10160:	2006d07a 	srli	r3,r4,1
   10164:	008007c4 	movi	r2,31
   10168:	1185c83a 	sub	r2,r2,r6
   1016c:	1894d83a 	srl	r10,r3,r2
   10170:	2192983a 	sll	r9,r4,r6
   10174:	003fd706 	br	100d4 <_fpadd_parts+0x34c>
   10178:	9487883a 	add	r3,r18,r18
   1017c:	008007c4 	movi	r2,31
   10180:	1185c83a 	sub	r2,r2,r6
   10184:	1886983a 	sll	r3,r3,r2
   10188:	899ad83a 	srl	r13,r17,r6
   1018c:	919cd83a 	srl	r14,r18,r6
   10190:	1b5ab03a 	or	r13,r3,r13
   10194:	003fc906 	br	100bc <_fpadd_parts+0x334>

00010198 <__subdf3>:
   10198:	deffea04 	addi	sp,sp,-88
   1019c:	dcc01415 	stw	r19,80(sp)
   101a0:	dcc00404 	addi	r19,sp,16
   101a4:	2011883a 	mov	r8,r4
   101a8:	2813883a 	mov	r9,r5
   101ac:	dc401315 	stw	r17,76(sp)
   101b0:	d809883a 	mov	r4,sp
   101b4:	980b883a 	mov	r5,r19
   101b8:	dc400904 	addi	r17,sp,36
   101bc:	dfc01515 	stw	ra,84(sp)
   101c0:	da400115 	stw	r9,4(sp)
   101c4:	d9c00315 	stw	r7,12(sp)
   101c8:	da000015 	stw	r8,0(sp)
   101cc:	d9800215 	stw	r6,8(sp)
   101d0:	00116700 	call	11670 <__unpack_d>
   101d4:	d9000204 	addi	r4,sp,8
   101d8:	880b883a 	mov	r5,r17
   101dc:	00116700 	call	11670 <__unpack_d>
   101e0:	d8800a17 	ldw	r2,40(sp)
   101e4:	880b883a 	mov	r5,r17
   101e8:	9809883a 	mov	r4,r19
   101ec:	d9800e04 	addi	r6,sp,56
   101f0:	1080005c 	xori	r2,r2,1
   101f4:	d8800a15 	stw	r2,40(sp)
   101f8:	000fd880 	call	fd88 <_fpadd_parts>
   101fc:	1009883a 	mov	r4,r2
   10200:	001135c0 	call	1135c <__pack_d>
   10204:	dfc01517 	ldw	ra,84(sp)
   10208:	dcc01417 	ldw	r19,80(sp)
   1020c:	dc401317 	ldw	r17,76(sp)
   10210:	dec01604 	addi	sp,sp,88
   10214:	f800283a 	ret

00010218 <__adddf3>:
   10218:	deffea04 	addi	sp,sp,-88
   1021c:	dcc01415 	stw	r19,80(sp)
   10220:	dcc00404 	addi	r19,sp,16
   10224:	2011883a 	mov	r8,r4
   10228:	2813883a 	mov	r9,r5
   1022c:	dc401315 	stw	r17,76(sp)
   10230:	d809883a 	mov	r4,sp
   10234:	980b883a 	mov	r5,r19
   10238:	dc400904 	addi	r17,sp,36
   1023c:	dfc01515 	stw	ra,84(sp)
   10240:	da400115 	stw	r9,4(sp)
   10244:	d9c00315 	stw	r7,12(sp)
   10248:	da000015 	stw	r8,0(sp)
   1024c:	d9800215 	stw	r6,8(sp)
   10250:	00116700 	call	11670 <__unpack_d>
   10254:	d9000204 	addi	r4,sp,8
   10258:	880b883a 	mov	r5,r17
   1025c:	00116700 	call	11670 <__unpack_d>
   10260:	d9800e04 	addi	r6,sp,56
   10264:	9809883a 	mov	r4,r19
   10268:	880b883a 	mov	r5,r17
   1026c:	000fd880 	call	fd88 <_fpadd_parts>
   10270:	1009883a 	mov	r4,r2
   10274:	001135c0 	call	1135c <__pack_d>
   10278:	dfc01517 	ldw	ra,84(sp)
   1027c:	dcc01417 	ldw	r19,80(sp)
   10280:	dc401317 	ldw	r17,76(sp)
   10284:	dec01604 	addi	sp,sp,88
   10288:	f800283a 	ret

0001028c <__muldf3>:
   1028c:	deffe004 	addi	sp,sp,-128
   10290:	dc401815 	stw	r17,96(sp)
   10294:	dc400404 	addi	r17,sp,16
   10298:	2011883a 	mov	r8,r4
   1029c:	2813883a 	mov	r9,r5
   102a0:	dc001715 	stw	r16,92(sp)
   102a4:	d809883a 	mov	r4,sp
   102a8:	880b883a 	mov	r5,r17
   102ac:	dc000904 	addi	r16,sp,36
   102b0:	dfc01f15 	stw	ra,124(sp)
   102b4:	da400115 	stw	r9,4(sp)
   102b8:	d9c00315 	stw	r7,12(sp)
   102bc:	da000015 	stw	r8,0(sp)
   102c0:	d9800215 	stw	r6,8(sp)
   102c4:	ddc01e15 	stw	r23,120(sp)
   102c8:	dd801d15 	stw	r22,116(sp)
   102cc:	dd401c15 	stw	r21,112(sp)
   102d0:	dd001b15 	stw	r20,108(sp)
   102d4:	dcc01a15 	stw	r19,104(sp)
   102d8:	dc801915 	stw	r18,100(sp)
   102dc:	00116700 	call	11670 <__unpack_d>
   102e0:	d9000204 	addi	r4,sp,8
   102e4:	800b883a 	mov	r5,r16
   102e8:	00116700 	call	11670 <__unpack_d>
   102ec:	d9000417 	ldw	r4,16(sp)
   102f0:	00800044 	movi	r2,1
   102f4:	1100102e 	bgeu	r2,r4,10338 <__muldf3+0xac>
   102f8:	d8c00917 	ldw	r3,36(sp)
   102fc:	10c0062e 	bgeu	r2,r3,10318 <__muldf3+0x8c>
   10300:	00800104 	movi	r2,4
   10304:	20800a26 	beq	r4,r2,10330 <__muldf3+0xa4>
   10308:	1880cc26 	beq	r3,r2,1063c <__muldf3+0x3b0>
   1030c:	00800084 	movi	r2,2
   10310:	20800926 	beq	r4,r2,10338 <__muldf3+0xac>
   10314:	1880191e 	bne	r3,r2,1037c <__muldf3+0xf0>
   10318:	d8c00a17 	ldw	r3,40(sp)
   1031c:	d8800517 	ldw	r2,20(sp)
   10320:	8009883a 	mov	r4,r16
   10324:	10c4c03a 	cmpne	r2,r2,r3
   10328:	d8800a15 	stw	r2,40(sp)
   1032c:	00000706 	br	1034c <__muldf3+0xc0>
   10330:	00800084 	movi	r2,2
   10334:	1880c326 	beq	r3,r2,10644 <__muldf3+0x3b8>
   10338:	d8800517 	ldw	r2,20(sp)
   1033c:	d8c00a17 	ldw	r3,40(sp)
   10340:	8809883a 	mov	r4,r17
   10344:	10c4c03a 	cmpne	r2,r2,r3
   10348:	d8800515 	stw	r2,20(sp)
   1034c:	001135c0 	call	1135c <__pack_d>
   10350:	dfc01f17 	ldw	ra,124(sp)
   10354:	ddc01e17 	ldw	r23,120(sp)
   10358:	dd801d17 	ldw	r22,116(sp)
   1035c:	dd401c17 	ldw	r21,112(sp)
   10360:	dd001b17 	ldw	r20,108(sp)
   10364:	dcc01a17 	ldw	r19,104(sp)
   10368:	dc801917 	ldw	r18,100(sp)
   1036c:	dc401817 	ldw	r17,96(sp)
   10370:	dc001717 	ldw	r16,92(sp)
   10374:	dec02004 	addi	sp,sp,128
   10378:	f800283a 	ret
   1037c:	dd800717 	ldw	r22,28(sp)
   10380:	dc800c17 	ldw	r18,48(sp)
   10384:	002b883a 	mov	r21,zero
   10388:	0023883a 	mov	r17,zero
   1038c:	a80b883a 	mov	r5,r21
   10390:	b00d883a 	mov	r6,r22
   10394:	880f883a 	mov	r7,r17
   10398:	ddc00817 	ldw	r23,32(sp)
   1039c:	dcc00d17 	ldw	r19,52(sp)
   103a0:	9009883a 	mov	r4,r18
   103a4:	0010f740 	call	10f74 <__muldi3>
   103a8:	001b883a 	mov	r13,zero
   103ac:	680f883a 	mov	r7,r13
   103b0:	b009883a 	mov	r4,r22
   103b4:	000b883a 	mov	r5,zero
   103b8:	980d883a 	mov	r6,r19
   103bc:	b82d883a 	mov	r22,r23
   103c0:	002f883a 	mov	r23,zero
   103c4:	db401615 	stw	r13,88(sp)
   103c8:	d8801315 	stw	r2,76(sp)
   103cc:	d8c01415 	stw	r3,80(sp)
   103d0:	dcc01515 	stw	r19,84(sp)
   103d4:	0010f740 	call	10f74 <__muldi3>
   103d8:	b00d883a 	mov	r6,r22
   103dc:	000b883a 	mov	r5,zero
   103e0:	9009883a 	mov	r4,r18
   103e4:	b80f883a 	mov	r7,r23
   103e8:	1021883a 	mov	r16,r2
   103ec:	1823883a 	mov	r17,r3
   103f0:	0010f740 	call	10f74 <__muldi3>
   103f4:	8085883a 	add	r2,r16,r2
   103f8:	140d803a 	cmpltu	r6,r2,r16
   103fc:	88c7883a 	add	r3,r17,r3
   10400:	30cd883a 	add	r6,r6,r3
   10404:	1029883a 	mov	r20,r2
   10408:	302b883a 	mov	r21,r6
   1040c:	da801317 	ldw	r10,76(sp)
   10410:	dac01417 	ldw	r11,80(sp)
   10414:	db001517 	ldw	r12,84(sp)
   10418:	db401617 	ldw	r13,88(sp)
   1041c:	3440612e 	bgeu	r6,r17,105a4 <__muldf3+0x318>
   10420:	0009883a 	mov	r4,zero
   10424:	5105883a 	add	r2,r10,r4
   10428:	128d803a 	cmpltu	r6,r2,r10
   1042c:	5d07883a 	add	r3,r11,r20
   10430:	30cd883a 	add	r6,r6,r3
   10434:	0021883a 	mov	r16,zero
   10438:	04400044 	movi	r17,1
   1043c:	1025883a 	mov	r18,r2
   10440:	3027883a 	mov	r19,r6
   10444:	32c06236 	bltu	r6,r11,105d0 <__muldf3+0x344>
   10448:	59807a26 	beq	r11,r6,10634 <__muldf3+0x3a8>
   1044c:	680b883a 	mov	r5,r13
   10450:	b80f883a 	mov	r7,r23
   10454:	6009883a 	mov	r4,r12
   10458:	b00d883a 	mov	r6,r22
   1045c:	0010f740 	call	10f74 <__muldi3>
   10460:	1009883a 	mov	r4,r2
   10464:	000f883a 	mov	r7,zero
   10468:	1545883a 	add	r2,r2,r21
   1046c:	1111803a 	cmpltu	r8,r2,r4
   10470:	19c7883a 	add	r3,r3,r7
   10474:	40c7883a 	add	r3,r8,r3
   10478:	88cb883a 	add	r5,r17,r3
   1047c:	d8c00617 	ldw	r3,24(sp)
   10480:	8089883a 	add	r4,r16,r2
   10484:	d8800b17 	ldw	r2,44(sp)
   10488:	18c00104 	addi	r3,r3,4
   1048c:	240d803a 	cmpltu	r6,r4,r16
   10490:	10c7883a 	add	r3,r2,r3
   10494:	2013883a 	mov	r9,r4
   10498:	d8800a17 	ldw	r2,40(sp)
   1049c:	d9000517 	ldw	r4,20(sp)
   104a0:	314d883a 	add	r6,r6,r5
   104a4:	3015883a 	mov	r10,r6
   104a8:	2088c03a 	cmpne	r4,r4,r2
   104ac:	00880034 	movhi	r2,8192
   104b0:	10bfffc4 	addi	r2,r2,-1
   104b4:	d9000f15 	stw	r4,60(sp)
   104b8:	d8c01015 	stw	r3,64(sp)
   104bc:	1180162e 	bgeu	r2,r6,10518 <__muldf3+0x28c>
   104c0:	1811883a 	mov	r8,r3
   104c4:	101f883a 	mov	r15,r2
   104c8:	980497fa 	slli	r2,r19,31
   104cc:	9016d07a 	srli	r11,r18,1
   104d0:	500697fa 	slli	r3,r10,31
   104d4:	480cd07a 	srli	r6,r9,1
   104d8:	500ed07a 	srli	r7,r10,1
   104dc:	12d6b03a 	or	r11,r2,r11
   104e0:	00800044 	movi	r2,1
   104e4:	198cb03a 	or	r6,r3,r6
   104e8:	4888703a 	and	r4,r9,r2
   104ec:	9818d07a 	srli	r12,r19,1
   104f0:	001b883a 	mov	r13,zero
   104f4:	03a00034 	movhi	r14,32768
   104f8:	3013883a 	mov	r9,r6
   104fc:	3815883a 	mov	r10,r7
   10500:	4091883a 	add	r8,r8,r2
   10504:	20000226 	beq	r4,zero,10510 <__muldf3+0x284>
   10508:	5b64b03a 	or	r18,r11,r13
   1050c:	63a6b03a 	or	r19,r12,r14
   10510:	7abfed36 	bltu	r15,r10,104c8 <__muldf3+0x23c>
   10514:	da001015 	stw	r8,64(sp)
   10518:	00840034 	movhi	r2,4096
   1051c:	10bfffc4 	addi	r2,r2,-1
   10520:	12801436 	bltu	r2,r10,10574 <__muldf3+0x2e8>
   10524:	da001017 	ldw	r8,64(sp)
   10528:	101f883a 	mov	r15,r2
   1052c:	4a45883a 	add	r2,r9,r9
   10530:	124d803a 	cmpltu	r6,r2,r9
   10534:	5287883a 	add	r3,r10,r10
   10538:	9497883a 	add	r11,r18,r18
   1053c:	5c8f803a 	cmpltu	r7,r11,r18
   10540:	9cd9883a 	add	r12,r19,r19
   10544:	01000044 	movi	r4,1
   10548:	30cd883a 	add	r6,r6,r3
   1054c:	3b0f883a 	add	r7,r7,r12
   10550:	423fffc4 	addi	r8,r8,-1
   10554:	1013883a 	mov	r9,r2
   10558:	3015883a 	mov	r10,r6
   1055c:	111ab03a 	or	r13,r2,r4
   10560:	98003016 	blt	r19,zero,10624 <__muldf3+0x398>
   10564:	5825883a 	mov	r18,r11
   10568:	3827883a 	mov	r19,r7
   1056c:	7abfef2e 	bgeu	r15,r10,1052c <__muldf3+0x2a0>
   10570:	da001015 	stw	r8,64(sp)
   10574:	00803fc4 	movi	r2,255
   10578:	488e703a 	and	r7,r9,r2
   1057c:	00802004 	movi	r2,128
   10580:	0007883a 	mov	r3,zero
   10584:	0011883a 	mov	r8,zero
   10588:	38801826 	beq	r7,r2,105ec <__muldf3+0x360>
   1058c:	008000c4 	movi	r2,3
   10590:	d9000e04 	addi	r4,sp,56
   10594:	da801215 	stw	r10,72(sp)
   10598:	d8800e15 	stw	r2,56(sp)
   1059c:	da401115 	stw	r9,68(sp)
   105a0:	003f6a06 	br	1034c <__muldf3+0xc0>
   105a4:	89802126 	beq	r17,r6,1062c <__muldf3+0x3a0>
   105a8:	0009883a 	mov	r4,zero
   105ac:	5105883a 	add	r2,r10,r4
   105b0:	128d803a 	cmpltu	r6,r2,r10
   105b4:	5d07883a 	add	r3,r11,r20
   105b8:	30cd883a 	add	r6,r6,r3
   105bc:	0021883a 	mov	r16,zero
   105c0:	0023883a 	mov	r17,zero
   105c4:	1025883a 	mov	r18,r2
   105c8:	3027883a 	mov	r19,r6
   105cc:	32ff9e2e 	bgeu	r6,r11,10448 <__muldf3+0x1bc>
   105d0:	00800044 	movi	r2,1
   105d4:	8089883a 	add	r4,r16,r2
   105d8:	240d803a 	cmpltu	r6,r4,r16
   105dc:	344d883a 	add	r6,r6,r17
   105e0:	2021883a 	mov	r16,r4
   105e4:	3023883a 	mov	r17,r6
   105e8:	003f9806 	br	1044c <__muldf3+0x1c0>
   105ec:	403fe71e 	bne	r8,zero,1058c <__muldf3+0x300>
   105f0:	01004004 	movi	r4,256
   105f4:	4904703a 	and	r2,r9,r4
   105f8:	10c4b03a 	or	r2,r2,r3
   105fc:	103fe31e 	bne	r2,zero,1058c <__muldf3+0x300>
   10600:	94c4b03a 	or	r2,r18,r19
   10604:	103fe126 	beq	r2,zero,1058c <__muldf3+0x300>
   10608:	49c5883a 	add	r2,r9,r7
   1060c:	1251803a 	cmpltu	r8,r2,r9
   10610:	4291883a 	add	r8,r8,r10
   10614:	013fc004 	movi	r4,-256
   10618:	1112703a 	and	r9,r2,r4
   1061c:	4015883a 	mov	r10,r8
   10620:	003fda06 	br	1058c <__muldf3+0x300>
   10624:	6813883a 	mov	r9,r13
   10628:	003fce06 	br	10564 <__muldf3+0x2d8>
   1062c:	143f7c36 	bltu	r2,r16,10420 <__muldf3+0x194>
   10630:	003fdd06 	br	105a8 <__muldf3+0x31c>
   10634:	12bf852e 	bgeu	r2,r10,1044c <__muldf3+0x1c0>
   10638:	003fe506 	br	105d0 <__muldf3+0x344>
   1063c:	00800084 	movi	r2,2
   10640:	20bf351e 	bne	r4,r2,10318 <__muldf3+0x8c>
   10644:	010000b4 	movhi	r4,2
   10648:	213b2204 	addi	r4,r4,-4984
   1064c:	003f3f06 	br	1034c <__muldf3+0xc0>

00010650 <__ltdf2>:
   10650:	deffef04 	addi	sp,sp,-68
   10654:	dc400f15 	stw	r17,60(sp)
   10658:	dc400404 	addi	r17,sp,16
   1065c:	2005883a 	mov	r2,r4
   10660:	2807883a 	mov	r3,r5
   10664:	dc000e15 	stw	r16,56(sp)
   10668:	d809883a 	mov	r4,sp
   1066c:	880b883a 	mov	r5,r17
   10670:	dc000904 	addi	r16,sp,36
   10674:	d8c00115 	stw	r3,4(sp)
   10678:	d8800015 	stw	r2,0(sp)
   1067c:	d9800215 	stw	r6,8(sp)
   10680:	dfc01015 	stw	ra,64(sp)
   10684:	d9c00315 	stw	r7,12(sp)
   10688:	00116700 	call	11670 <__unpack_d>
   1068c:	d9000204 	addi	r4,sp,8
   10690:	800b883a 	mov	r5,r16
   10694:	00116700 	call	11670 <__unpack_d>
   10698:	d8800417 	ldw	r2,16(sp)
   1069c:	00c00044 	movi	r3,1
   106a0:	180d883a 	mov	r6,r3
   106a4:	1880062e 	bgeu	r3,r2,106c0 <__ltdf2+0x70>
   106a8:	d8800917 	ldw	r2,36(sp)
   106ac:	8809883a 	mov	r4,r17
   106b0:	800b883a 	mov	r5,r16
   106b4:	1880022e 	bgeu	r3,r2,106c0 <__ltdf2+0x70>
   106b8:	00117a80 	call	117a8 <__fpcmp_parts_d>
   106bc:	100d883a 	mov	r6,r2
   106c0:	3005883a 	mov	r2,r6
   106c4:	dfc01017 	ldw	ra,64(sp)
   106c8:	dc400f17 	ldw	r17,60(sp)
   106cc:	dc000e17 	ldw	r16,56(sp)
   106d0:	dec01104 	addi	sp,sp,68
   106d4:	f800283a 	ret

000106d8 <__floatsidf>:
   106d8:	2006d7fa 	srli	r3,r4,31
   106dc:	defff604 	addi	sp,sp,-40
   106e0:	008000c4 	movi	r2,3
   106e4:	dfc00915 	stw	ra,36(sp)
   106e8:	dcc00815 	stw	r19,32(sp)
   106ec:	dc800715 	stw	r18,28(sp)
   106f0:	dc400615 	stw	r17,24(sp)
   106f4:	dc000515 	stw	r16,20(sp)
   106f8:	d8800015 	stw	r2,0(sp)
   106fc:	d8c00115 	stw	r3,4(sp)
   10700:	20000f1e 	bne	r4,zero,10740 <__floatsidf+0x68>
   10704:	00800084 	movi	r2,2
   10708:	d8800015 	stw	r2,0(sp)
   1070c:	d809883a 	mov	r4,sp
   10710:	001135c0 	call	1135c <__pack_d>
   10714:	1009883a 	mov	r4,r2
   10718:	180b883a 	mov	r5,r3
   1071c:	2005883a 	mov	r2,r4
   10720:	2807883a 	mov	r3,r5
   10724:	dfc00917 	ldw	ra,36(sp)
   10728:	dcc00817 	ldw	r19,32(sp)
   1072c:	dc800717 	ldw	r18,28(sp)
   10730:	dc400617 	ldw	r17,24(sp)
   10734:	dc000517 	ldw	r16,20(sp)
   10738:	dec00a04 	addi	sp,sp,40
   1073c:	f800283a 	ret
   10740:	00800f04 	movi	r2,60
   10744:	1807003a 	cmpeq	r3,r3,zero
   10748:	d8800215 	stw	r2,8(sp)
   1074c:	18001126 	beq	r3,zero,10794 <__floatsidf+0xbc>
   10750:	0027883a 	mov	r19,zero
   10754:	2025883a 	mov	r18,r4
   10758:	d9000315 	stw	r4,12(sp)
   1075c:	dcc00415 	stw	r19,16(sp)
   10760:	001100c0 	call	1100c <__clzsi2>
   10764:	11000744 	addi	r4,r2,29
   10768:	013fe80e 	bge	zero,r4,1070c <__floatsidf+0x34>
   1076c:	10bfff44 	addi	r2,r2,-3
   10770:	10000c16 	blt	r2,zero,107a4 <__floatsidf+0xcc>
   10774:	90a2983a 	sll	r17,r18,r2
   10778:	0021883a 	mov	r16,zero
   1077c:	d8800217 	ldw	r2,8(sp)
   10780:	dc400415 	stw	r17,16(sp)
   10784:	dc000315 	stw	r16,12(sp)
   10788:	1105c83a 	sub	r2,r2,r4
   1078c:	d8800215 	stw	r2,8(sp)
   10790:	003fde06 	br	1070c <__floatsidf+0x34>
   10794:	00a00034 	movhi	r2,32768
   10798:	20800a26 	beq	r4,r2,107c4 <__floatsidf+0xec>
   1079c:	0109c83a 	sub	r4,zero,r4
   107a0:	003feb06 	br	10750 <__floatsidf+0x78>
   107a4:	9006d07a 	srli	r3,r18,1
   107a8:	008007c4 	movi	r2,31
   107ac:	1105c83a 	sub	r2,r2,r4
   107b0:	1886d83a 	srl	r3,r3,r2
   107b4:	9922983a 	sll	r17,r19,r4
   107b8:	9120983a 	sll	r16,r18,r4
   107bc:	1c62b03a 	or	r17,r3,r17
   107c0:	003fee06 	br	1077c <__floatsidf+0xa4>
   107c4:	0009883a 	mov	r4,zero
   107c8:	01707834 	movhi	r5,49632
   107cc:	003fd306 	br	1071c <__floatsidf+0x44>

000107d0 <__fixdfsi>:
   107d0:	defff804 	addi	sp,sp,-32
   107d4:	2005883a 	mov	r2,r4
   107d8:	2807883a 	mov	r3,r5
   107dc:	d809883a 	mov	r4,sp
   107e0:	d9400204 	addi	r5,sp,8
   107e4:	d8c00115 	stw	r3,4(sp)
   107e8:	d8800015 	stw	r2,0(sp)
   107ec:	dfc00715 	stw	ra,28(sp)
   107f0:	00116700 	call	11670 <__unpack_d>
   107f4:	d8c00217 	ldw	r3,8(sp)
   107f8:	00800084 	movi	r2,2
   107fc:	1880051e 	bne	r3,r2,10814 <__fixdfsi+0x44>
   10800:	0007883a 	mov	r3,zero
   10804:	1805883a 	mov	r2,r3
   10808:	dfc00717 	ldw	ra,28(sp)
   1080c:	dec00804 	addi	sp,sp,32
   10810:	f800283a 	ret
   10814:	00800044 	movi	r2,1
   10818:	10fff92e 	bgeu	r2,r3,10800 <__fixdfsi+0x30>
   1081c:	00800104 	movi	r2,4
   10820:	18800426 	beq	r3,r2,10834 <__fixdfsi+0x64>
   10824:	d8c00417 	ldw	r3,16(sp)
   10828:	183ff516 	blt	r3,zero,10800 <__fixdfsi+0x30>
   1082c:	00800784 	movi	r2,30
   10830:	10c0080e 	bge	r2,r3,10854 <__fixdfsi+0x84>
   10834:	d8800317 	ldw	r2,12(sp)
   10838:	1000121e 	bne	r2,zero,10884 <__fixdfsi+0xb4>
   1083c:	00e00034 	movhi	r3,32768
   10840:	18ffffc4 	addi	r3,r3,-1
   10844:	1805883a 	mov	r2,r3
   10848:	dfc00717 	ldw	ra,28(sp)
   1084c:	dec00804 	addi	sp,sp,32
   10850:	f800283a 	ret
   10854:	00800f04 	movi	r2,60
   10858:	10d1c83a 	sub	r8,r2,r3
   1085c:	40bff804 	addi	r2,r8,-32
   10860:	d9800517 	ldw	r6,20(sp)
   10864:	d9c00617 	ldw	r7,24(sp)
   10868:	10000816 	blt	r2,zero,1088c <__fixdfsi+0xbc>
   1086c:	3888d83a 	srl	r4,r7,r2
   10870:	d8800317 	ldw	r2,12(sp)
   10874:	2007883a 	mov	r3,r4
   10878:	103fe226 	beq	r2,zero,10804 <__fixdfsi+0x34>
   1087c:	0107c83a 	sub	r3,zero,r4
   10880:	003fe006 	br	10804 <__fixdfsi+0x34>
   10884:	00e00034 	movhi	r3,32768
   10888:	003fde06 	br	10804 <__fixdfsi+0x34>
   1088c:	39c7883a 	add	r3,r7,r7
   10890:	008007c4 	movi	r2,31
   10894:	1205c83a 	sub	r2,r2,r8
   10898:	1886983a 	sll	r3,r3,r2
   1089c:	3208d83a 	srl	r4,r6,r8
   108a0:	1908b03a 	or	r4,r3,r4
   108a4:	003ff206 	br	10870 <__fixdfsi+0xa0>

000108a8 <__make_dp>:
   108a8:	defff904 	addi	sp,sp,-28
   108ac:	d8c00717 	ldw	r3,28(sp)
   108b0:	d9000015 	stw	r4,0(sp)
   108b4:	d809883a 	mov	r4,sp
   108b8:	dfc00515 	stw	ra,20(sp)
   108bc:	d9c00615 	stw	r7,24(sp)
   108c0:	d9400115 	stw	r5,4(sp)
   108c4:	d9800215 	stw	r6,8(sp)
   108c8:	d8c00415 	stw	r3,16(sp)
   108cc:	d9c00315 	stw	r7,12(sp)
   108d0:	001135c0 	call	1135c <__pack_d>
   108d4:	dfc00517 	ldw	ra,20(sp)
   108d8:	dec00704 	addi	sp,sp,28
   108dc:	f800283a 	ret

000108e0 <udivmodsi4>:
   108e0:	29001b2e 	bgeu	r5,r4,10950 <udivmodsi4+0x70>
   108e4:	28001a16 	blt	r5,zero,10950 <udivmodsi4+0x70>
   108e8:	00800044 	movi	r2,1
   108ec:	0007883a 	mov	r3,zero
   108f0:	01c007c4 	movi	r7,31
   108f4:	00000306 	br	10904 <udivmodsi4+0x24>
   108f8:	19c01326 	beq	r3,r7,10948 <udivmodsi4+0x68>
   108fc:	18c00044 	addi	r3,r3,1
   10900:	28000416 	blt	r5,zero,10914 <udivmodsi4+0x34>
   10904:	294b883a 	add	r5,r5,r5
   10908:	1085883a 	add	r2,r2,r2
   1090c:	293ffa36 	bltu	r5,r4,108f8 <udivmodsi4+0x18>
   10910:	10000d26 	beq	r2,zero,10948 <udivmodsi4+0x68>
   10914:	0007883a 	mov	r3,zero
   10918:	21400236 	bltu	r4,r5,10924 <udivmodsi4+0x44>
   1091c:	2149c83a 	sub	r4,r4,r5
   10920:	1886b03a 	or	r3,r3,r2
   10924:	1004d07a 	srli	r2,r2,1
   10928:	280ad07a 	srli	r5,r5,1
   1092c:	103ffa1e 	bne	r2,zero,10918 <udivmodsi4+0x38>
   10930:	30000226 	beq	r6,zero,1093c <udivmodsi4+0x5c>
   10934:	2005883a 	mov	r2,r4
   10938:	f800283a 	ret
   1093c:	1809883a 	mov	r4,r3
   10940:	2005883a 	mov	r2,r4
   10944:	f800283a 	ret
   10948:	0007883a 	mov	r3,zero
   1094c:	003ff806 	br	10930 <udivmodsi4+0x50>
   10950:	00800044 	movi	r2,1
   10954:	0007883a 	mov	r3,zero
   10958:	003fef06 	br	10918 <udivmodsi4+0x38>

0001095c <__divsi3>:
   1095c:	defffe04 	addi	sp,sp,-8
   10960:	dc000015 	stw	r16,0(sp)
   10964:	dfc00115 	stw	ra,4(sp)
   10968:	0021883a 	mov	r16,zero
   1096c:	20000c16 	blt	r4,zero,109a0 <__divsi3+0x44>
   10970:	000d883a 	mov	r6,zero
   10974:	28000e16 	blt	r5,zero,109b0 <__divsi3+0x54>
   10978:	00108e00 	call	108e0 <udivmodsi4>
   1097c:	1007883a 	mov	r3,r2
   10980:	8005003a 	cmpeq	r2,r16,zero
   10984:	1000011e 	bne	r2,zero,1098c <__divsi3+0x30>
   10988:	00c7c83a 	sub	r3,zero,r3
   1098c:	1805883a 	mov	r2,r3
   10990:	dfc00117 	ldw	ra,4(sp)
   10994:	dc000017 	ldw	r16,0(sp)
   10998:	dec00204 	addi	sp,sp,8
   1099c:	f800283a 	ret
   109a0:	0109c83a 	sub	r4,zero,r4
   109a4:	04000044 	movi	r16,1
   109a8:	000d883a 	mov	r6,zero
   109ac:	283ff20e 	bge	r5,zero,10978 <__divsi3+0x1c>
   109b0:	014bc83a 	sub	r5,zero,r5
   109b4:	8021003a 	cmpeq	r16,r16,zero
   109b8:	003fef06 	br	10978 <__divsi3+0x1c>

000109bc <__modsi3>:
   109bc:	deffff04 	addi	sp,sp,-4
   109c0:	dfc00015 	stw	ra,0(sp)
   109c4:	01800044 	movi	r6,1
   109c8:	2807883a 	mov	r3,r5
   109cc:	20000416 	blt	r4,zero,109e0 <__modsi3+0x24>
   109d0:	28000c16 	blt	r5,zero,10a04 <__modsi3+0x48>
   109d4:	dfc00017 	ldw	ra,0(sp)
   109d8:	dec00104 	addi	sp,sp,4
   109dc:	00108e01 	jmpi	108e0 <udivmodsi4>
   109e0:	0109c83a 	sub	r4,zero,r4
   109e4:	28000b16 	blt	r5,zero,10a14 <__modsi3+0x58>
   109e8:	180b883a 	mov	r5,r3
   109ec:	01800044 	movi	r6,1
   109f0:	00108e00 	call	108e0 <udivmodsi4>
   109f4:	0085c83a 	sub	r2,zero,r2
   109f8:	dfc00017 	ldw	ra,0(sp)
   109fc:	dec00104 	addi	sp,sp,4
   10a00:	f800283a 	ret
   10a04:	014bc83a 	sub	r5,zero,r5
   10a08:	dfc00017 	ldw	ra,0(sp)
   10a0c:	dec00104 	addi	sp,sp,4
   10a10:	00108e01 	jmpi	108e0 <udivmodsi4>
   10a14:	0147c83a 	sub	r3,zero,r5
   10a18:	003ff306 	br	109e8 <__modsi3+0x2c>

00010a1c <__udivsi3>:
   10a1c:	000d883a 	mov	r6,zero
   10a20:	00108e01 	jmpi	108e0 <udivmodsi4>

00010a24 <__umodsi3>:
   10a24:	01800044 	movi	r6,1
   10a28:	00108e01 	jmpi	108e0 <udivmodsi4>

00010a2c <_Unwind_SjLj_Register>:
   10a2c:	d0a6e217 	ldw	r2,-25720(gp)
   10a30:	20800015 	stw	r2,0(r4)
   10a34:	d126e215 	stw	r4,-25720(gp)
   10a38:	f800283a 	ret

00010a3c <_Unwind_SjLj_Unregister>:
   10a3c:	20800017 	ldw	r2,0(r4)
   10a40:	d0a6e215 	stw	r2,-25720(gp)
   10a44:	f800283a 	ret

00010a48 <_Unwind_GetGR>:
   10a48:	20800017 	ldw	r2,0(r4)
   10a4c:	294b883a 	add	r5,r5,r5
   10a50:	294b883a 	add	r5,r5,r5
   10a54:	288b883a 	add	r5,r5,r2
   10a58:	28800217 	ldw	r2,8(r5)
   10a5c:	f800283a 	ret

00010a60 <_Unwind_GetCFA>:
   10a60:	21000017 	ldw	r4,0(r4)
   10a64:	0005883a 	mov	r2,zero
   10a68:	20000126 	beq	r4,zero,10a70 <_Unwind_GetCFA+0x10>
   10a6c:	20800a17 	ldw	r2,40(r4)
   10a70:	f800283a 	ret

00010a74 <_Unwind_SetGR>:
   10a74:	20800017 	ldw	r2,0(r4)
   10a78:	294b883a 	add	r5,r5,r5
   10a7c:	294b883a 	add	r5,r5,r5
   10a80:	288b883a 	add	r5,r5,r2
   10a84:	29800215 	stw	r6,8(r5)
   10a88:	f800283a 	ret

00010a8c <_Unwind_GetIP>:
   10a8c:	20c00017 	ldw	r3,0(r4)
   10a90:	18800117 	ldw	r2,4(r3)
   10a94:	10800044 	addi	r2,r2,1
   10a98:	f800283a 	ret

00010a9c <_Unwind_GetIPInfo>:
   10a9c:	20c00017 	ldw	r3,0(r4)
   10aa0:	28000015 	stw	zero,0(r5)
   10aa4:	18800117 	ldw	r2,4(r3)
   10aa8:	10800044 	addi	r2,r2,1
   10aac:	f800283a 	ret

00010ab0 <_Unwind_SetIP>:
   10ab0:	20800017 	ldw	r2,0(r4)
   10ab4:	297fffc4 	addi	r5,r5,-1
   10ab8:	11400115 	stw	r5,4(r2)
   10abc:	f800283a 	ret

00010ac0 <_Unwind_GetLanguageSpecificData>:
   10ac0:	20c00017 	ldw	r3,0(r4)
   10ac4:	18800717 	ldw	r2,28(r3)
   10ac8:	f800283a 	ret

00010acc <_Unwind_GetRegionStart>:
   10acc:	0005883a 	mov	r2,zero
   10ad0:	f800283a 	ret

00010ad4 <_Unwind_FindEnclosingFunction>:
   10ad4:	0005883a 	mov	r2,zero
   10ad8:	f800283a 	ret

00010adc <_Unwind_GetDataRelBase>:
   10adc:	0005883a 	mov	r2,zero
   10ae0:	f800283a 	ret

00010ae4 <_Unwind_GetTextRelBase>:
   10ae4:	0005883a 	mov	r2,zero
   10ae8:	f800283a 	ret

00010aec <_Unwind_ForcedUnwind_Phase2>:
   10aec:	defff604 	addi	sp,sp,-40
   10af0:	dd400815 	stw	r21,32(sp)
   10af4:	dd000715 	stw	r20,28(sp)
   10af8:	25400317 	ldw	r21,12(r4)
   10afc:	25000417 	ldw	r20,16(r4)
   10b00:	28800017 	ldw	r2,0(r5)
   10b04:	dc800515 	stw	r18,20(sp)
   10b08:	dc000315 	stw	r16,12(sp)
   10b0c:	2825883a 	mov	r18,r5
   10b10:	2021883a 	mov	r16,r4
   10b14:	dfc00915 	stw	ra,36(sp)
   10b18:	dcc00615 	stw	r19,24(sp)
   10b1c:	dc400415 	stw	r17,16(sp)
   10b20:	00001406 	br	10b74 <_Unwind_ForcedUnwind_Phase2+0x88>
   10b24:	00800144 	movi	r2,5
   10b28:	88802626 	beq	r17,r2,10bc4 <_Unwind_ForcedUnwind_Phase2+0xd8>
   10b2c:	98000c26 	beq	r19,zero,10b60 <_Unwind_ForcedUnwind_Phase2+0x74>
   10b30:	82000017 	ldw	r8,0(r16)
   10b34:	dc000015 	stw	r16,0(sp)
   10b38:	dc800115 	stw	r18,4(sp)
   10b3c:	82400117 	ldw	r9,4(r16)
   10b40:	400d883a 	mov	r6,r8
   10b44:	480f883a 	mov	r7,r9
   10b48:	983ee83a 	callr	r19
   10b4c:	1023883a 	mov	r17,r2
   10b50:	008001c4 	movi	r2,7
   10b54:	88801b26 	beq	r17,r2,10bc4 <_Unwind_ForcedUnwind_Phase2+0xd8>
   10b58:	00800204 	movi	r2,8
   10b5c:	8880181e 	bne	r17,r2,10bc0 <_Unwind_ForcedUnwind_Phase2+0xd4>
   10b60:	91000017 	ldw	r4,0(r18)
   10b64:	0010a3c0 	call	10a3c <_Unwind_SjLj_Unregister>
   10b68:	90800017 	ldw	r2,0(r18)
   10b6c:	10800017 	ldw	r2,0(r2)
   10b70:	90800015 	stw	r2,0(r18)
   10b74:	01400684 	movi	r5,26
   10b78:	04400144 	movi	r17,5
   10b7c:	0027883a 	mov	r19,zero
   10b80:	10000326 	beq	r2,zero,10b90 <_Unwind_ForcedUnwind_Phase2+0xa4>
   10b84:	14c00617 	ldw	r19,24(r2)
   10b88:	0023883a 	mov	r17,zero
   10b8c:	01400284 	movi	r5,10
   10b90:	dc000015 	stw	r16,0(sp)
   10b94:	dc800115 	stw	r18,4(sp)
   10b98:	80800017 	ldw	r2,0(r16)
   10b9c:	dd000215 	stw	r20,8(sp)
   10ba0:	80c00117 	ldw	r3,4(r16)
   10ba4:	01000044 	movi	r4,1
   10ba8:	100d883a 	mov	r6,r2
   10bac:	180f883a 	mov	r7,r3
   10bb0:	a83ee83a 	callr	r21
   10bb4:	01400284 	movi	r5,10
   10bb8:	01000044 	movi	r4,1
   10bbc:	103fd926 	beq	r2,zero,10b24 <_Unwind_ForcedUnwind_Phase2+0x38>
   10bc0:	04400084 	movi	r17,2
   10bc4:	8805883a 	mov	r2,r17
   10bc8:	dfc00917 	ldw	ra,36(sp)
   10bcc:	dd400817 	ldw	r21,32(sp)
   10bd0:	dd000717 	ldw	r20,28(sp)
   10bd4:	dcc00617 	ldw	r19,24(sp)
   10bd8:	dc800517 	ldw	r18,20(sp)
   10bdc:	dc400417 	ldw	r17,16(sp)
   10be0:	dc000317 	ldw	r16,12(sp)
   10be4:	dec00a04 	addi	sp,sp,40
   10be8:	f800283a 	ret

00010bec <_Unwind_DeleteException>:
   10bec:	20800217 	ldw	r2,8(r4)
   10bf0:	200b883a 	mov	r5,r4
   10bf4:	01000044 	movi	r4,1
   10bf8:	10000126 	beq	r2,zero,10c00 <_Unwind_DeleteException+0x14>
   10bfc:	1000683a 	jmp	r2
   10c00:	f800283a 	ret

00010c04 <_Unwind_RaiseException_Phase2>:
   10c04:	defffa04 	addi	sp,sp,-24
   10c08:	dc800415 	stw	r18,16(sp)
   10c0c:	2825883a 	mov	r18,r5
   10c10:	29400017 	ldw	r5,0(r5)
   10c14:	dc400315 	stw	r17,12(sp)
   10c18:	dfc00515 	stw	ra,20(sp)
   10c1c:	dc000215 	stw	r16,8(sp)
   10c20:	2023883a 	mov	r17,r4
   10c24:	28001b26 	beq	r5,zero,10c94 <_Unwind_RaiseException_Phase2+0x90>
   10c28:	88800417 	ldw	r2,16(r17)
   10c2c:	0007883a 	mov	r3,zero
   10c30:	2a000617 	ldw	r8,24(r5)
   10c34:	28a1003a 	cmpeq	r16,r5,r2
   10c38:	802090ba 	slli	r16,r16,2
   10c3c:	18001b1e 	bne	r3,zero,10cac <_Unwind_RaiseException_Phase2+0xa8>
   10c40:	40000e26 	beq	r8,zero,10c7c <_Unwind_RaiseException_Phase2+0x78>
   10c44:	88800017 	ldw	r2,0(r17)
   10c48:	dc400015 	stw	r17,0(sp)
   10c4c:	dc800115 	stw	r18,4(sp)
   10c50:	88c00117 	ldw	r3,4(r17)
   10c54:	01000044 	movi	r4,1
   10c58:	81400094 	ori	r5,r16,2
   10c5c:	180f883a 	mov	r7,r3
   10c60:	100d883a 	mov	r6,r2
   10c64:	403ee83a 	callr	r8
   10c68:	1007883a 	mov	r3,r2
   10c6c:	008001c4 	movi	r2,7
   10c70:	18800f26 	beq	r3,r2,10cb0 <_Unwind_RaiseException_Phase2+0xac>
   10c74:	00800204 	movi	r2,8
   10c78:	18800c1e 	bne	r3,r2,10cac <_Unwind_RaiseException_Phase2+0xa8>
   10c7c:	8000131e 	bne	r16,zero,10ccc <_Unwind_RaiseException_Phase2+0xc8>
   10c80:	91400017 	ldw	r5,0(r18)
   10c84:	28800017 	ldw	r2,0(r5)
   10c88:	100b883a 	mov	r5,r2
   10c8c:	90800015 	stw	r2,0(r18)
   10c90:	283fe51e 	bne	r5,zero,10c28 <_Unwind_RaiseException_Phase2+0x24>
   10c94:	88800417 	ldw	r2,16(r17)
   10c98:	00c00144 	movi	r3,5
   10c9c:	0011883a 	mov	r8,zero
   10ca0:	28a1003a 	cmpeq	r16,r5,r2
   10ca4:	802090ba 	slli	r16,r16,2
   10ca8:	183fe526 	beq	r3,zero,10c40 <_Unwind_RaiseException_Phase2+0x3c>
   10cac:	00c00084 	movi	r3,2
   10cb0:	1805883a 	mov	r2,r3
   10cb4:	dfc00517 	ldw	ra,20(sp)
   10cb8:	dc800417 	ldw	r18,16(sp)
   10cbc:	dc400317 	ldw	r17,12(sp)
   10cc0:	dc000217 	ldw	r16,8(sp)
   10cc4:	dec00604 	addi	sp,sp,24
   10cc8:	f800283a 	ret
   10ccc:	00118700 	call	11870 <abort>

00010cd0 <uw_install_context>:
   10cd0:	28800017 	ldw	r2,0(r5)
   10cd4:	deffff04 	addi	sp,sp,-4
   10cd8:	df000015 	stw	fp,0(sp)
   10cdc:	10c00804 	addi	r3,r2,32
   10ce0:	d839883a 	mov	fp,sp
   10ce4:	d0a6e215 	stw	r2,-25720(gp)
   10ce8:	19000117 	ldw	r4,4(r3)
   10cec:	1f000017 	ldw	fp,0(r3)
   10cf0:	1ec00217 	ldw	sp,8(r3)
   10cf4:	2000683a 	jmp	r4

00010cf8 <_Unwind_SjLj_Resume>:
   10cf8:	d0e6e217 	ldw	r3,-25720(gp)
   10cfc:	20800317 	ldw	r2,12(r4)
   10d00:	defffc04 	addi	sp,sp,-16
   10d04:	dfc00315 	stw	ra,12(sp)
   10d08:	dc000215 	stw	r16,8(sp)
   10d0c:	d8c00015 	stw	r3,0(sp)
   10d10:	d8c00115 	stw	r3,4(sp)
   10d14:	1000071e 	bne	r2,zero,10d34 <_Unwind_SjLj_Resume+0x3c>
   10d18:	dc000104 	addi	r16,sp,4
   10d1c:	800b883a 	mov	r5,r16
   10d20:	0010c040 	call	10c04 <_Unwind_RaiseException_Phase2>
   10d24:	1007883a 	mov	r3,r2
   10d28:	008001c4 	movi	r2,7
   10d2c:	18800626 	beq	r3,r2,10d48 <_Unwind_SjLj_Resume+0x50>
   10d30:	00118700 	call	11870 <abort>
   10d34:	dc000104 	addi	r16,sp,4
   10d38:	800b883a 	mov	r5,r16
   10d3c:	0010aec0 	call	10aec <_Unwind_ForcedUnwind_Phase2>
   10d40:	1007883a 	mov	r3,r2
   10d44:	003ff806 	br	10d28 <_Unwind_SjLj_Resume+0x30>
   10d48:	800b883a 	mov	r5,r16
   10d4c:	d809883a 	mov	r4,sp
   10d50:	0010cd00 	call	10cd0 <uw_install_context>

00010d54 <_Unwind_SjLj_RaiseException>:
   10d54:	d0a6e217 	ldw	r2,-25720(gp)
   10d58:	defff804 	addi	sp,sp,-32
   10d5c:	dc000415 	stw	r16,16(sp)
   10d60:	dfc00715 	stw	ra,28(sp)
   10d64:	dc800615 	stw	r18,24(sp)
   10d68:	dc400515 	stw	r17,20(sp)
   10d6c:	2021883a 	mov	r16,r4
   10d70:	d8800215 	stw	r2,8(sp)
   10d74:	d8800315 	stw	r2,12(sp)
   10d78:	10001626 	beq	r2,zero,10dd4 <_Unwind_SjLj_RaiseException+0x80>
   10d7c:	dc400304 	addi	r17,sp,12
   10d80:	04800184 	movi	r18,6
   10d84:	00000106 	br	10d8c <_Unwind_SjLj_RaiseException+0x38>
   10d88:	d8800315 	stw	r2,12(sp)
   10d8c:	12000617 	ldw	r8,24(r2)
   10d90:	40000d26 	beq	r8,zero,10dc8 <_Unwind_SjLj_RaiseException+0x74>
   10d94:	80800017 	ldw	r2,0(r16)
   10d98:	dc000015 	stw	r16,0(sp)
   10d9c:	80c00117 	ldw	r3,4(r16)
   10da0:	01000044 	movi	r4,1
   10da4:	dc400115 	stw	r17,4(sp)
   10da8:	180f883a 	mov	r7,r3
   10dac:	200b883a 	mov	r5,r4
   10db0:	100d883a 	mov	r6,r2
   10db4:	403ee83a 	callr	r8
   10db8:	1007883a 	mov	r3,r2
   10dbc:	14800d26 	beq	r2,r18,10df4 <_Unwind_SjLj_RaiseException+0xa0>
   10dc0:	00800204 	movi	r2,8
   10dc4:	1880191e 	bne	r3,r2,10e2c <_Unwind_SjLj_RaiseException+0xd8>
   10dc8:	d8800317 	ldw	r2,12(sp)
   10dcc:	10800017 	ldw	r2,0(r2)
   10dd0:	103fed1e 	bne	r2,zero,10d88 <_Unwind_SjLj_RaiseException+0x34>
   10dd4:	00c00144 	movi	r3,5
   10dd8:	1805883a 	mov	r2,r3
   10ddc:	dfc00717 	ldw	ra,28(sp)
   10de0:	dc800617 	ldw	r18,24(sp)
   10de4:	dc400517 	ldw	r17,20(sp)
   10de8:	dc000417 	ldw	r16,16(sp)
   10dec:	dec00804 	addi	sp,sp,32
   10df0:	f800283a 	ret
   10df4:	d8800317 	ldw	r2,12(sp)
   10df8:	80000315 	stw	zero,12(r16)
   10dfc:	8009883a 	mov	r4,r16
   10e00:	80800415 	stw	r2,16(r16)
   10e04:	d8800217 	ldw	r2,8(sp)
   10e08:	880b883a 	mov	r5,r17
   10e0c:	d8800315 	stw	r2,12(sp)
   10e10:	0010c040 	call	10c04 <_Unwind_RaiseException_Phase2>
   10e14:	1007883a 	mov	r3,r2
   10e18:	008001c4 	movi	r2,7
   10e1c:	18bfee1e 	bne	r3,r2,10dd8 <_Unwind_SjLj_RaiseException+0x84>
   10e20:	880b883a 	mov	r5,r17
   10e24:	d9000204 	addi	r4,sp,8
   10e28:	0010cd00 	call	10cd0 <uw_install_context>
   10e2c:	00c000c4 	movi	r3,3
   10e30:	1805883a 	mov	r2,r3
   10e34:	dfc00717 	ldw	ra,28(sp)
   10e38:	dc800617 	ldw	r18,24(sp)
   10e3c:	dc400517 	ldw	r17,20(sp)
   10e40:	dc000417 	ldw	r16,16(sp)
   10e44:	dec00804 	addi	sp,sp,32
   10e48:	f800283a 	ret

00010e4c <_Unwind_SjLj_ForcedUnwind>:
   10e4c:	defffc04 	addi	sp,sp,-16
   10e50:	d0a6e217 	ldw	r2,-25720(gp)
   10e54:	dc000215 	stw	r16,8(sp)
   10e58:	dc000104 	addi	r16,sp,4
   10e5c:	21400315 	stw	r5,12(r4)
   10e60:	21800415 	stw	r6,16(r4)
   10e64:	800b883a 	mov	r5,r16
   10e68:	dfc00315 	stw	ra,12(sp)
   10e6c:	d8800015 	stw	r2,0(sp)
   10e70:	d8800115 	stw	r2,4(sp)
   10e74:	0010aec0 	call	10aec <_Unwind_ForcedUnwind_Phase2>
   10e78:	00c001c4 	movi	r3,7
   10e7c:	10c00426 	beq	r2,r3,10e90 <_Unwind_SjLj_ForcedUnwind+0x44>
   10e80:	dfc00317 	ldw	ra,12(sp)
   10e84:	dc000217 	ldw	r16,8(sp)
   10e88:	dec00404 	addi	sp,sp,16
   10e8c:	f800283a 	ret
   10e90:	800b883a 	mov	r5,r16
   10e94:	d809883a 	mov	r4,sp
   10e98:	0010cd00 	call	10cd0 <uw_install_context>

00010e9c <_Unwind_Backtrace>:
   10e9c:	d0a6e217 	ldw	r2,-25720(gp)
   10ea0:	defffa04 	addi	sp,sp,-24
   10ea4:	dcc00415 	stw	r19,16(sp)
   10ea8:	dc800315 	stw	r18,12(sp)
   10eac:	dc400215 	stw	r17,8(sp)
   10eb0:	2025883a 	mov	r18,r4
   10eb4:	2823883a 	mov	r17,r5
   10eb8:	04c00144 	movi	r19,5
   10ebc:	dfc00515 	stw	ra,20(sp)
   10ec0:	dc000115 	stw	r16,4(sp)
   10ec4:	d8800015 	stw	r2,0(sp)
   10ec8:	00000406 	br	10edc <_Unwind_Backtrace+0x40>
   10ecc:	84c00b26 	beq	r16,r19,10efc <_Unwind_Backtrace+0x60>
   10ed0:	d8800017 	ldw	r2,0(sp)
   10ed4:	10800017 	ldw	r2,0(r2)
   10ed8:	d8800015 	stw	r2,0(sp)
   10edc:	04000144 	movi	r16,5
   10ee0:	10000126 	beq	r2,zero,10ee8 <_Unwind_Backtrace+0x4c>
   10ee4:	0021883a 	mov	r16,zero
   10ee8:	d809883a 	mov	r4,sp
   10eec:	880b883a 	mov	r5,r17
   10ef0:	903ee83a 	callr	r18
   10ef4:	103ff526 	beq	r2,zero,10ecc <_Unwind_Backtrace+0x30>
   10ef8:	040000c4 	movi	r16,3
   10efc:	8005883a 	mov	r2,r16
   10f00:	dfc00517 	ldw	ra,20(sp)
   10f04:	dcc00417 	ldw	r19,16(sp)
   10f08:	dc800317 	ldw	r18,12(sp)
   10f0c:	dc400217 	ldw	r17,8(sp)
   10f10:	dc000117 	ldw	r16,4(sp)
   10f14:	dec00604 	addi	sp,sp,24
   10f18:	f800283a 	ret

00010f1c <_Unwind_SjLj_Resume_or_Rethrow>:
   10f1c:	20800317 	ldw	r2,12(r4)
   10f20:	defffc04 	addi	sp,sp,-16
   10f24:	dfc00315 	stw	ra,12(sp)
   10f28:	dc000215 	stw	r16,8(sp)
   10f2c:	10000926 	beq	r2,zero,10f54 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
   10f30:	d0a6e217 	ldw	r2,-25720(gp)
   10f34:	dc000104 	addi	r16,sp,4
   10f38:	800b883a 	mov	r5,r16
   10f3c:	d8800015 	stw	r2,0(sp)
   10f40:	d8800115 	stw	r2,4(sp)
   10f44:	0010aec0 	call	10aec <_Unwind_ForcedUnwind_Phase2>
   10f48:	00c001c4 	movi	r3,7
   10f4c:	10c00626 	beq	r2,r3,10f68 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
   10f50:	00118700 	call	11870 <abort>
   10f54:	0010d540 	call	10d54 <_Unwind_SjLj_RaiseException>
   10f58:	dfc00317 	ldw	ra,12(sp)
   10f5c:	dc000217 	ldw	r16,8(sp)
   10f60:	dec00404 	addi	sp,sp,16
   10f64:	f800283a 	ret
   10f68:	800b883a 	mov	r5,r16
   10f6c:	d809883a 	mov	r4,sp
   10f70:	0010cd00 	call	10cd0 <uw_install_context>

00010f74 <__muldi3>:
   10f74:	2011883a 	mov	r8,r4
   10f78:	427fffcc 	andi	r9,r8,65535
   10f7c:	4018d43a 	srli	r12,r8,16
   10f80:	32bfffcc 	andi	r10,r6,65535
   10f84:	3016d43a 	srli	r11,r6,16
   10f88:	4a85383a 	mul	r2,r9,r10
   10f8c:	6295383a 	mul	r10,r12,r10
   10f90:	4ad3383a 	mul	r9,r9,r11
   10f94:	113fffcc 	andi	r4,r2,65535
   10f98:	1004d43a 	srli	r2,r2,16
   10f9c:	4a93883a 	add	r9,r9,r10
   10fa0:	3807883a 	mov	r3,r7
   10fa4:	1245883a 	add	r2,r2,r9
   10fa8:	280f883a 	mov	r7,r5
   10fac:	180b883a 	mov	r5,r3
   10fb0:	1006943a 	slli	r3,r2,16
   10fb4:	defffd04 	addi	sp,sp,-12
   10fb8:	dc800215 	stw	r18,8(sp)
   10fbc:	1907883a 	add	r3,r3,r4
   10fc0:	dc400115 	stw	r17,4(sp)
   10fc4:	dc000015 	stw	r16,0(sp)
   10fc8:	4165383a 	mul	r18,r8,r5
   10fcc:	31e3383a 	mul	r17,r6,r7
   10fd0:	1012d43a 	srli	r9,r2,16
   10fd4:	62d9383a 	mul	r12,r12,r11
   10fd8:	181f883a 	mov	r15,r3
   10fdc:	1280022e 	bgeu	r2,r10,10fe8 <__muldi3+0x74>
   10fe0:	00800074 	movhi	r2,1
   10fe4:	6099883a 	add	r12,r12,r2
   10fe8:	624d883a 	add	r6,r12,r9
   10fec:	9187883a 	add	r3,r18,r6
   10ff0:	88c7883a 	add	r3,r17,r3
   10ff4:	7805883a 	mov	r2,r15
   10ff8:	dc800217 	ldw	r18,8(sp)
   10ffc:	dc400117 	ldw	r17,4(sp)
   11000:	dc000017 	ldw	r16,0(sp)
   11004:	dec00304 	addi	sp,sp,12
   11008:	f800283a 	ret

0001100c <__clzsi2>:
   1100c:	00bfffd4 	movui	r2,65535
   11010:	11000e36 	bltu	r2,r4,1104c <__clzsi2+0x40>
   11014:	00803fc4 	movi	r2,255
   11018:	01400204 	movi	r5,8
   1101c:	0007883a 	mov	r3,zero
   11020:	11001036 	bltu	r2,r4,11064 <__clzsi2+0x58>
   11024:	000b883a 	mov	r5,zero
   11028:	20c6d83a 	srl	r3,r4,r3
   1102c:	008000b4 	movhi	r2,2
   11030:	10bb2704 	addi	r2,r2,-4964
   11034:	1887883a 	add	r3,r3,r2
   11038:	18800003 	ldbu	r2,0(r3)
   1103c:	00c00804 	movi	r3,32
   11040:	2885883a 	add	r2,r5,r2
   11044:	1885c83a 	sub	r2,r3,r2
   11048:	f800283a 	ret
   1104c:	01400404 	movi	r5,16
   11050:	00804034 	movhi	r2,256
   11054:	10bfffc4 	addi	r2,r2,-1
   11058:	2807883a 	mov	r3,r5
   1105c:	113ff22e 	bgeu	r2,r4,11028 <__clzsi2+0x1c>
   11060:	01400604 	movi	r5,24
   11064:	2807883a 	mov	r3,r5
   11068:	20c6d83a 	srl	r3,r4,r3
   1106c:	008000b4 	movhi	r2,2
   11070:	10bb2704 	addi	r2,r2,-4964
   11074:	1887883a 	add	r3,r3,r2
   11078:	18800003 	ldbu	r2,0(r3)
   1107c:	00c00804 	movi	r3,32
   11080:	2885883a 	add	r2,r5,r2
   11084:	1885c83a 	sub	r2,r3,r2
   11088:	f800283a 	ret

0001108c <__pack_f>:
   1108c:	20c00017 	ldw	r3,0(r4)
   11090:	01c00044 	movi	r7,1
   11094:	21800317 	ldw	r6,12(r4)
   11098:	21400117 	ldw	r5,4(r4)
   1109c:	38c02d2e 	bgeu	r7,r3,11154 <__pack_f+0xc8>
   110a0:	00800104 	movi	r2,4
   110a4:	18802826 	beq	r3,r2,11148 <__pack_f+0xbc>
   110a8:	00800084 	movi	r2,2
   110ac:	18800126 	beq	r3,r2,110b4 <__pack_f+0x28>
   110b0:	3000101e 	bne	r6,zero,110f4 <__pack_f+0x68>
   110b4:	000d883a 	mov	r6,zero
   110b8:	0007883a 	mov	r3,zero
   110bc:	19003fcc 	andi	r4,r3,255
   110c0:	200895fa 	slli	r4,r4,23
   110c4:	00c02034 	movhi	r3,128
   110c8:	18ffffc4 	addi	r3,r3,-1
   110cc:	30c6703a 	and	r3,r6,r3
   110d0:	10a0002c 	andhi	r2,r2,32768
   110d4:	10c4b03a 	or	r2,r2,r3
   110d8:	280a97fa 	slli	r5,r5,31
   110dc:	1104b03a 	or	r2,r2,r4
   110e0:	00e00034 	movhi	r3,32768
   110e4:	18ffffc4 	addi	r3,r3,-1
   110e8:	10c4703a 	and	r2,r2,r3
   110ec:	1144b03a 	or	r2,r2,r5
   110f0:	f800283a 	ret
   110f4:	21000217 	ldw	r4,8(r4)
   110f8:	00bfe084 	movi	r2,-126
   110fc:	20801b16 	blt	r4,r2,1116c <__pack_f+0xe0>
   11100:	00801fc4 	movi	r2,127
   11104:	11001016 	blt	r2,r4,11148 <__pack_f+0xbc>
   11108:	308e703a 	and	r7,r6,r2
   1110c:	2087883a 	add	r3,r4,r2
   11110:	00801004 	movi	r2,64
   11114:	38800526 	beq	r7,r2,1112c <__pack_f+0xa0>
   11118:	31800fc4 	addi	r6,r6,63
   1111c:	30000716 	blt	r6,zero,1113c <__pack_f+0xb0>
   11120:	300490ba 	slli	r2,r6,2
   11124:	100cd27a 	srli	r6,r2,9
   11128:	003fe406 	br	110bc <__pack_f+0x30>
   1112c:	3080200c 	andi	r2,r6,128
   11130:	103ffa26 	beq	r2,zero,1111c <__pack_f+0x90>
   11134:	31cd883a 	add	r6,r6,r7
   11138:	003ff806 	br	1111c <__pack_f+0x90>
   1113c:	300cd07a 	srli	r6,r6,1
   11140:	18c00044 	addi	r3,r3,1
   11144:	003ff606 	br	11120 <__pack_f+0x94>
   11148:	000d883a 	mov	r6,zero
   1114c:	00ffffc4 	movi	r3,-1
   11150:	003fda06 	br	110bc <__pack_f+0x30>
   11154:	31800434 	orhi	r6,r6,16
   11158:	00802034 	movhi	r2,128
   1115c:	10bfffc4 	addi	r2,r2,-1
   11160:	308c703a 	and	r6,r6,r2
   11164:	00ffffc4 	movi	r3,-1
   11168:	003fd406 	br	110bc <__pack_f+0x30>
   1116c:	1109c83a 	sub	r4,r2,r4
   11170:	00800644 	movi	r2,25
   11174:	11001216 	blt	r2,r4,111c0 <__pack_f+0x134>
   11178:	3904983a 	sll	r2,r7,r4
   1117c:	3106d83a 	srl	r3,r6,r4
   11180:	10bfffc4 	addi	r2,r2,-1
   11184:	3084703a 	and	r2,r6,r2
   11188:	1004c03a 	cmpne	r2,r2,zero
   1118c:	1886b03a 	or	r3,r3,r2
   11190:	19001fcc 	andi	r4,r3,127
   11194:	00801004 	movi	r2,64
   11198:	20800c26 	beq	r4,r2,111cc <__pack_f+0x140>
   1119c:	18c00fc4 	addi	r3,r3,63
   111a0:	00900034 	movhi	r2,16384
   111a4:	10bfffc4 	addi	r2,r2,-1
   111a8:	180cd1fa 	srli	r6,r3,7
   111ac:	10c7803a 	cmpltu	r3,r2,r3
   111b0:	00802034 	movhi	r2,128
   111b4:	10bfffc4 	addi	r2,r2,-1
   111b8:	308c703a 	and	r6,r6,r2
   111bc:	003fbf06 	br	110bc <__pack_f+0x30>
   111c0:	0007883a 	mov	r3,zero
   111c4:	000d883a 	mov	r6,zero
   111c8:	003ff906 	br	111b0 <__pack_f+0x124>
   111cc:	1880200c 	andi	r2,r3,128
   111d0:	10000126 	beq	r2,zero,111d8 <__pack_f+0x14c>
   111d4:	1907883a 	add	r3,r3,r4
   111d8:	180cd1fa 	srli	r6,r3,7
   111dc:	00900034 	movhi	r2,16384
   111e0:	10bfffc4 	addi	r2,r2,-1
   111e4:	10c7803a 	cmpltu	r3,r2,r3
   111e8:	003ff106 	br	111b0 <__pack_f+0x124>

000111ec <__unpack_f>:
   111ec:	21800017 	ldw	r6,0(r4)
   111f0:	00c02034 	movhi	r3,128
   111f4:	18ffffc4 	addi	r3,r3,-1
   111f8:	3004d5fa 	srli	r2,r6,23
   111fc:	3008d7fa 	srli	r4,r6,31
   11200:	30ce703a 	and	r7,r6,r3
   11204:	10c03fcc 	andi	r3,r2,255
   11208:	29000115 	stw	r4,4(r5)
   1120c:	1800131e 	bne	r3,zero,1125c <__unpack_f+0x70>
   11210:	38000f26 	beq	r7,zero,11250 <__unpack_f+0x64>
   11214:	380691fa 	slli	r3,r7,7
   11218:	01bfe084 	movi	r6,-126
   1121c:	008000c4 	movi	r2,3
   11220:	01100034 	movhi	r4,16384
   11224:	213fffc4 	addi	r4,r4,-1
   11228:	28800015 	stw	r2,0(r5)
   1122c:	29800215 	stw	r6,8(r5)
   11230:	20c00536 	bltu	r4,r3,11248 <__unpack_f+0x5c>
   11234:	3005883a 	mov	r2,r6
   11238:	18c7883a 	add	r3,r3,r3
   1123c:	10bfffc4 	addi	r2,r2,-1
   11240:	20fffd2e 	bgeu	r4,r3,11238 <__unpack_f+0x4c>
   11244:	28800215 	stw	r2,8(r5)
   11248:	28c00315 	stw	r3,12(r5)
   1124c:	f800283a 	ret
   11250:	00800084 	movi	r2,2
   11254:	28800015 	stw	r2,0(r5)
   11258:	f800283a 	ret
   1125c:	00803fc4 	movi	r2,255
   11260:	18800826 	beq	r3,r2,11284 <__unpack_f+0x98>
   11264:	380491fa 	slli	r2,r7,7
   11268:	18ffe044 	addi	r3,r3,-127
   1126c:	28c00215 	stw	r3,8(r5)
   11270:	10900034 	orhi	r2,r2,16384
   11274:	28800315 	stw	r2,12(r5)
   11278:	008000c4 	movi	r2,3
   1127c:	28800015 	stw	r2,0(r5)
   11280:	f800283a 	ret
   11284:	3800031e 	bne	r7,zero,11294 <__unpack_f+0xa8>
   11288:	00800104 	movi	r2,4
   1128c:	28800015 	stw	r2,0(r5)
   11290:	f800283a 	ret
   11294:	3080042c 	andhi	r2,r6,16
   11298:	10000426 	beq	r2,zero,112ac <__unpack_f+0xc0>
   1129c:	00800044 	movi	r2,1
   112a0:	28800015 	stw	r2,0(r5)
   112a4:	29c00315 	stw	r7,12(r5)
   112a8:	f800283a 	ret
   112ac:	28000015 	stw	zero,0(r5)
   112b0:	003ffc06 	br	112a4 <__unpack_f+0xb8>

000112b4 <__fpcmp_parts_f>:
   112b4:	21800017 	ldw	r6,0(r4)
   112b8:	00c00044 	movi	r3,1
   112bc:	19800a2e 	bgeu	r3,r6,112e8 <__fpcmp_parts_f+0x34>
   112c0:	28800017 	ldw	r2,0(r5)
   112c4:	1880082e 	bgeu	r3,r2,112e8 <__fpcmp_parts_f+0x34>
   112c8:	00c00104 	movi	r3,4
   112cc:	30c01e26 	beq	r6,r3,11348 <__fpcmp_parts_f+0x94>
   112d0:	10c01a26 	beq	r2,r3,1133c <__fpcmp_parts_f+0x88>
   112d4:	00c00084 	movi	r3,2
   112d8:	30c00526 	beq	r6,r3,112f0 <__fpcmp_parts_f+0x3c>
   112dc:	10c0071e 	bne	r2,r3,112fc <__fpcmp_parts_f+0x48>
   112e0:	20800117 	ldw	r2,4(r4)
   112e4:	1000091e 	bne	r2,zero,1130c <__fpcmp_parts_f+0x58>
   112e8:	00800044 	movi	r2,1
   112ec:	f800283a 	ret
   112f0:	10c0121e 	bne	r2,r3,1133c <__fpcmp_parts_f+0x88>
   112f4:	0005883a 	mov	r2,zero
   112f8:	f800283a 	ret
   112fc:	20c00117 	ldw	r3,4(r4)
   11300:	28800117 	ldw	r2,4(r5)
   11304:	18800326 	beq	r3,r2,11314 <__fpcmp_parts_f+0x60>
   11308:	183ff726 	beq	r3,zero,112e8 <__fpcmp_parts_f+0x34>
   1130c:	00bfffc4 	movi	r2,-1
   11310:	f800283a 	ret
   11314:	21800217 	ldw	r6,8(r4)
   11318:	28800217 	ldw	r2,8(r5)
   1131c:	11bffa16 	blt	r2,r6,11308 <__fpcmp_parts_f+0x54>
   11320:	30800416 	blt	r6,r2,11334 <__fpcmp_parts_f+0x80>
   11324:	21000317 	ldw	r4,12(r4)
   11328:	29400317 	ldw	r5,12(r5)
   1132c:	293ff636 	bltu	r5,r4,11308 <__fpcmp_parts_f+0x54>
   11330:	217ff02e 	bgeu	r4,r5,112f4 <__fpcmp_parts_f+0x40>
   11334:	183fec1e 	bne	r3,zero,112e8 <__fpcmp_parts_f+0x34>
   11338:	003ff406 	br	1130c <__fpcmp_parts_f+0x58>
   1133c:	28800117 	ldw	r2,4(r5)
   11340:	103fe91e 	bne	r2,zero,112e8 <__fpcmp_parts_f+0x34>
   11344:	003ff106 	br	1130c <__fpcmp_parts_f+0x58>
   11348:	11bfe51e 	bne	r2,r6,112e0 <__fpcmp_parts_f+0x2c>
   1134c:	28c00117 	ldw	r3,4(r5)
   11350:	20800117 	ldw	r2,4(r4)
   11354:	1885c83a 	sub	r2,r3,r2
   11358:	f800283a 	ret

0001135c <__pack_d>:
   1135c:	20c00017 	ldw	r3,0(r4)
   11360:	defffd04 	addi	sp,sp,-12
   11364:	dc000015 	stw	r16,0(sp)
   11368:	dc800215 	stw	r18,8(sp)
   1136c:	dc400115 	stw	r17,4(sp)
   11370:	00800044 	movi	r2,1
   11374:	22000317 	ldw	r8,12(r4)
   11378:	001f883a 	mov	r15,zero
   1137c:	22400417 	ldw	r9,16(r4)
   11380:	24000117 	ldw	r16,4(r4)
   11384:	10c0552e 	bgeu	r2,r3,114dc <__pack_d+0x180>
   11388:	00800104 	movi	r2,4
   1138c:	18804f26 	beq	r3,r2,114cc <__pack_d+0x170>
   11390:	00800084 	movi	r2,2
   11394:	18800226 	beq	r3,r2,113a0 <__pack_d+0x44>
   11398:	4244b03a 	or	r2,r8,r9
   1139c:	10001a1e 	bne	r2,zero,11408 <__pack_d+0xac>
   113a0:	000d883a 	mov	r6,zero
   113a4:	000f883a 	mov	r7,zero
   113a8:	0011883a 	mov	r8,zero
   113ac:	00800434 	movhi	r2,16
   113b0:	10bfffc4 	addi	r2,r2,-1
   113b4:	301d883a 	mov	r14,r6
   113b8:	3884703a 	and	r2,r7,r2
   113bc:	400a953a 	slli	r5,r8,20
   113c0:	79bffc2c 	andhi	r6,r15,65520
   113c4:	308cb03a 	or	r6,r6,r2
   113c8:	00e00434 	movhi	r3,32784
   113cc:	18ffffc4 	addi	r3,r3,-1
   113d0:	800497fa 	slli	r2,r16,31
   113d4:	30c6703a 	and	r3,r6,r3
   113d8:	1946b03a 	or	r3,r3,r5
   113dc:	01600034 	movhi	r5,32768
   113e0:	297fffc4 	addi	r5,r5,-1
   113e4:	194a703a 	and	r5,r3,r5
   113e8:	288ab03a 	or	r5,r5,r2
   113ec:	2807883a 	mov	r3,r5
   113f0:	7005883a 	mov	r2,r14
   113f4:	dc800217 	ldw	r18,8(sp)
   113f8:	dc400117 	ldw	r17,4(sp)
   113fc:	dc000017 	ldw	r16,0(sp)
   11400:	dec00304 	addi	sp,sp,12
   11404:	f800283a 	ret
   11408:	21000217 	ldw	r4,8(r4)
   1140c:	00bf0084 	movi	r2,-1022
   11410:	20803f16 	blt	r4,r2,11510 <__pack_d+0x1b4>
   11414:	0080ffc4 	movi	r2,1023
   11418:	11002c16 	blt	r2,r4,114cc <__pack_d+0x170>
   1141c:	00803fc4 	movi	r2,255
   11420:	408c703a 	and	r6,r8,r2
   11424:	00802004 	movi	r2,128
   11428:	0007883a 	mov	r3,zero
   1142c:	000f883a 	mov	r7,zero
   11430:	2280ffc4 	addi	r10,r4,1023
   11434:	30801e26 	beq	r6,r2,114b0 <__pack_d+0x154>
   11438:	00801fc4 	movi	r2,127
   1143c:	4089883a 	add	r4,r8,r2
   11440:	220d803a 	cmpltu	r6,r4,r8
   11444:	324d883a 	add	r6,r6,r9
   11448:	2011883a 	mov	r8,r4
   1144c:	3013883a 	mov	r9,r6
   11450:	00880034 	movhi	r2,8192
   11454:	10bfffc4 	addi	r2,r2,-1
   11458:	12400d36 	bltu	r2,r9,11490 <__pack_d+0x134>
   1145c:	4804963a 	slli	r2,r9,24
   11460:	400cd23a 	srli	r6,r8,8
   11464:	480ed23a 	srli	r7,r9,8
   11468:	013fffc4 	movi	r4,-1
   1146c:	118cb03a 	or	r6,r2,r6
   11470:	01400434 	movhi	r5,16
   11474:	297fffc4 	addi	r5,r5,-1
   11478:	3104703a 	and	r2,r6,r4
   1147c:	3946703a 	and	r3,r7,r5
   11480:	5201ffcc 	andi	r8,r10,2047
   11484:	100d883a 	mov	r6,r2
   11488:	180f883a 	mov	r7,r3
   1148c:	003fc706 	br	113ac <__pack_d+0x50>
   11490:	480897fa 	slli	r4,r9,31
   11494:	4004d07a 	srli	r2,r8,1
   11498:	4806d07a 	srli	r3,r9,1
   1149c:	52800044 	addi	r10,r10,1
   114a0:	2084b03a 	or	r2,r4,r2
   114a4:	1011883a 	mov	r8,r2
   114a8:	1813883a 	mov	r9,r3
   114ac:	003feb06 	br	1145c <__pack_d+0x100>
   114b0:	383fe11e 	bne	r7,zero,11438 <__pack_d+0xdc>
   114b4:	01004004 	movi	r4,256
   114b8:	4104703a 	and	r2,r8,r4
   114bc:	10c4b03a 	or	r2,r2,r3
   114c0:	103fe326 	beq	r2,zero,11450 <__pack_d+0xf4>
   114c4:	3005883a 	mov	r2,r6
   114c8:	003fdc06 	br	1143c <__pack_d+0xe0>
   114cc:	000d883a 	mov	r6,zero
   114d0:	000f883a 	mov	r7,zero
   114d4:	0201ffc4 	movi	r8,2047
   114d8:	003fb406 	br	113ac <__pack_d+0x50>
   114dc:	0005883a 	mov	r2,zero
   114e0:	00c00234 	movhi	r3,8
   114e4:	408cb03a 	or	r6,r8,r2
   114e8:	48ceb03a 	or	r7,r9,r3
   114ec:	013fffc4 	movi	r4,-1
   114f0:	01400434 	movhi	r5,16
   114f4:	297fffc4 	addi	r5,r5,-1
   114f8:	3104703a 	and	r2,r6,r4
   114fc:	3946703a 	and	r3,r7,r5
   11500:	100d883a 	mov	r6,r2
   11504:	180f883a 	mov	r7,r3
   11508:	0201ffc4 	movi	r8,2047
   1150c:	003fa706 	br	113ac <__pack_d+0x50>
   11510:	1109c83a 	sub	r4,r2,r4
   11514:	00800e04 	movi	r2,56
   11518:	11004316 	blt	r2,r4,11628 <__pack_d+0x2cc>
   1151c:	21fff804 	addi	r7,r4,-32
   11520:	38004516 	blt	r7,zero,11638 <__pack_d+0x2dc>
   11524:	49d8d83a 	srl	r12,r9,r7
   11528:	001b883a 	mov	r13,zero
   1152c:	0023883a 	mov	r17,zero
   11530:	01400044 	movi	r5,1
   11534:	0025883a 	mov	r18,zero
   11538:	38004716 	blt	r7,zero,11658 <__pack_d+0x2fc>
   1153c:	29d6983a 	sll	r11,r5,r7
   11540:	0015883a 	mov	r10,zero
   11544:	00bfffc4 	movi	r2,-1
   11548:	5089883a 	add	r4,r10,r2
   1154c:	588b883a 	add	r5,r11,r2
   11550:	228d803a 	cmpltu	r6,r4,r10
   11554:	314b883a 	add	r5,r6,r5
   11558:	4104703a 	and	r2,r8,r4
   1155c:	4946703a 	and	r3,r9,r5
   11560:	10c4b03a 	or	r2,r2,r3
   11564:	10000226 	beq	r2,zero,11570 <__pack_d+0x214>
   11568:	04400044 	movi	r17,1
   1156c:	0025883a 	mov	r18,zero
   11570:	00803fc4 	movi	r2,255
   11574:	644eb03a 	or	r7,r12,r17
   11578:	3892703a 	and	r9,r7,r2
   1157c:	00802004 	movi	r2,128
   11580:	6c90b03a 	or	r8,r13,r18
   11584:	0015883a 	mov	r10,zero
   11588:	48801626 	beq	r9,r2,115e4 <__pack_d+0x288>
   1158c:	01001fc4 	movi	r4,127
   11590:	3905883a 	add	r2,r7,r4
   11594:	11cd803a 	cmpltu	r6,r2,r7
   11598:	320d883a 	add	r6,r6,r8
   1159c:	100f883a 	mov	r7,r2
   115a0:	00840034 	movhi	r2,4096
   115a4:	10bfffc4 	addi	r2,r2,-1
   115a8:	3011883a 	mov	r8,r6
   115ac:	0007883a 	mov	r3,zero
   115b0:	11801b36 	bltu	r2,r6,11620 <__pack_d+0x2c4>
   115b4:	4004963a 	slli	r2,r8,24
   115b8:	3808d23a 	srli	r4,r7,8
   115bc:	400ad23a 	srli	r5,r8,8
   115c0:	1813883a 	mov	r9,r3
   115c4:	1108b03a 	or	r4,r2,r4
   115c8:	00bfffc4 	movi	r2,-1
   115cc:	00c00434 	movhi	r3,16
   115d0:	18ffffc4 	addi	r3,r3,-1
   115d4:	208c703a 	and	r6,r4,r2
   115d8:	28ce703a 	and	r7,r5,r3
   115dc:	4a01ffcc 	andi	r8,r9,2047
   115e0:	003f7206 	br	113ac <__pack_d+0x50>
   115e4:	503fe91e 	bne	r10,zero,1158c <__pack_d+0x230>
   115e8:	01004004 	movi	r4,256
   115ec:	3904703a 	and	r2,r7,r4
   115f0:	0007883a 	mov	r3,zero
   115f4:	10c4b03a 	or	r2,r2,r3
   115f8:	10000626 	beq	r2,zero,11614 <__pack_d+0x2b8>
   115fc:	3a45883a 	add	r2,r7,r9
   11600:	11cd803a 	cmpltu	r6,r2,r7
   11604:	320d883a 	add	r6,r6,r8
   11608:	100f883a 	mov	r7,r2
   1160c:	3011883a 	mov	r8,r6
   11610:	0007883a 	mov	r3,zero
   11614:	00840034 	movhi	r2,4096
   11618:	10bfffc4 	addi	r2,r2,-1
   1161c:	123fe52e 	bgeu	r2,r8,115b4 <__pack_d+0x258>
   11620:	00c00044 	movi	r3,1
   11624:	003fe306 	br	115b4 <__pack_d+0x258>
   11628:	0009883a 	mov	r4,zero
   1162c:	0013883a 	mov	r9,zero
   11630:	000b883a 	mov	r5,zero
   11634:	003fe406 	br	115c8 <__pack_d+0x26c>
   11638:	4a47883a 	add	r3,r9,r9
   1163c:	008007c4 	movi	r2,31
   11640:	1105c83a 	sub	r2,r2,r4
   11644:	1886983a 	sll	r3,r3,r2
   11648:	4118d83a 	srl	r12,r8,r4
   1164c:	491ad83a 	srl	r13,r9,r4
   11650:	1b18b03a 	or	r12,r3,r12
   11654:	003fb506 	br	1152c <__pack_d+0x1d0>
   11658:	2806d07a 	srli	r3,r5,1
   1165c:	008007c4 	movi	r2,31
   11660:	1105c83a 	sub	r2,r2,r4
   11664:	1896d83a 	srl	r11,r3,r2
   11668:	2914983a 	sll	r10,r5,r4
   1166c:	003fb506 	br	11544 <__pack_d+0x1e8>

00011670 <__unpack_d>:
   11670:	20c00117 	ldw	r3,4(r4)
   11674:	22400017 	ldw	r9,0(r4)
   11678:	00800434 	movhi	r2,16
   1167c:	10bfffc4 	addi	r2,r2,-1
   11680:	1808d53a 	srli	r4,r3,20
   11684:	180cd7fa 	srli	r6,r3,31
   11688:	1894703a 	and	r10,r3,r2
   1168c:	2201ffcc 	andi	r8,r4,2047
   11690:	281b883a 	mov	r13,r5
   11694:	4817883a 	mov	r11,r9
   11698:	29800115 	stw	r6,4(r5)
   1169c:	5019883a 	mov	r12,r10
   116a0:	40001e1e 	bne	r8,zero,1171c <__unpack_d+0xac>
   116a4:	4a84b03a 	or	r2,r9,r10
   116a8:	10001926 	beq	r2,zero,11710 <__unpack_d+0xa0>
   116ac:	4804d63a 	srli	r2,r9,24
   116b0:	500c923a 	slli	r6,r10,8
   116b4:	013f0084 	movi	r4,-1022
   116b8:	00c40034 	movhi	r3,4096
   116bc:	18ffffc4 	addi	r3,r3,-1
   116c0:	118cb03a 	or	r6,r2,r6
   116c4:	008000c4 	movi	r2,3
   116c8:	480a923a 	slli	r5,r9,8
   116cc:	68800015 	stw	r2,0(r13)
   116d0:	69000215 	stw	r4,8(r13)
   116d4:	19800b36 	bltu	r3,r6,11704 <__unpack_d+0x94>
   116d8:	200f883a 	mov	r7,r4
   116dc:	1811883a 	mov	r8,r3
   116e0:	2945883a 	add	r2,r5,r5
   116e4:	1149803a 	cmpltu	r4,r2,r5
   116e8:	3187883a 	add	r3,r6,r6
   116ec:	20c9883a 	add	r4,r4,r3
   116f0:	100b883a 	mov	r5,r2
   116f4:	200d883a 	mov	r6,r4
   116f8:	39ffffc4 	addi	r7,r7,-1
   116fc:	413ff82e 	bgeu	r8,r4,116e0 <__unpack_d+0x70>
   11700:	69c00215 	stw	r7,8(r13)
   11704:	69800415 	stw	r6,16(r13)
   11708:	69400315 	stw	r5,12(r13)
   1170c:	f800283a 	ret
   11710:	00800084 	movi	r2,2
   11714:	28800015 	stw	r2,0(r5)
   11718:	f800283a 	ret
   1171c:	0081ffc4 	movi	r2,2047
   11720:	40800f26 	beq	r8,r2,11760 <__unpack_d+0xf0>
   11724:	480cd63a 	srli	r6,r9,24
   11728:	5006923a 	slli	r3,r10,8
   1172c:	4804923a 	slli	r2,r9,8
   11730:	0009883a 	mov	r4,zero
   11734:	30c6b03a 	or	r3,r6,r3
   11738:	01440034 	movhi	r5,4096
   1173c:	110cb03a 	or	r6,r2,r4
   11740:	423f0044 	addi	r8,r8,-1023
   11744:	194eb03a 	or	r7,r3,r5
   11748:	008000c4 	movi	r2,3
   1174c:	69c00415 	stw	r7,16(r13)
   11750:	6a000215 	stw	r8,8(r13)
   11754:	68800015 	stw	r2,0(r13)
   11758:	69800315 	stw	r6,12(r13)
   1175c:	f800283a 	ret
   11760:	4a84b03a 	or	r2,r9,r10
   11764:	1000031e 	bne	r2,zero,11774 <__unpack_d+0x104>
   11768:	00800104 	movi	r2,4
   1176c:	28800015 	stw	r2,0(r5)
   11770:	f800283a 	ret
   11774:	0009883a 	mov	r4,zero
   11778:	01400234 	movhi	r5,8
   1177c:	4904703a 	and	r2,r9,r4
   11780:	5146703a 	and	r3,r10,r5
   11784:	10c4b03a 	or	r2,r2,r3
   11788:	10000526 	beq	r2,zero,117a0 <__unpack_d+0x130>
   1178c:	00800044 	movi	r2,1
   11790:	68800015 	stw	r2,0(r13)
   11794:	6b000415 	stw	r12,16(r13)
   11798:	6ac00315 	stw	r11,12(r13)
   1179c:	f800283a 	ret
   117a0:	68000015 	stw	zero,0(r13)
   117a4:	003ffb06 	br	11794 <__unpack_d+0x124>

000117a8 <__fpcmp_parts_d>:
   117a8:	21800017 	ldw	r6,0(r4)
   117ac:	00c00044 	movi	r3,1
   117b0:	19800a2e 	bgeu	r3,r6,117dc <__fpcmp_parts_d+0x34>
   117b4:	28800017 	ldw	r2,0(r5)
   117b8:	1880082e 	bgeu	r3,r2,117dc <__fpcmp_parts_d+0x34>
   117bc:	00c00104 	movi	r3,4
   117c0:	30c02626 	beq	r6,r3,1185c <__fpcmp_parts_d+0xb4>
   117c4:	10c02226 	beq	r2,r3,11850 <__fpcmp_parts_d+0xa8>
   117c8:	00c00084 	movi	r3,2
   117cc:	30c00526 	beq	r6,r3,117e4 <__fpcmp_parts_d+0x3c>
   117d0:	10c0071e 	bne	r2,r3,117f0 <__fpcmp_parts_d+0x48>
   117d4:	20800117 	ldw	r2,4(r4)
   117d8:	1000091e 	bne	r2,zero,11800 <__fpcmp_parts_d+0x58>
   117dc:	00800044 	movi	r2,1
   117e0:	f800283a 	ret
   117e4:	10c01a1e 	bne	r2,r3,11850 <__fpcmp_parts_d+0xa8>
   117e8:	0005883a 	mov	r2,zero
   117ec:	f800283a 	ret
   117f0:	22000117 	ldw	r8,4(r4)
   117f4:	28800117 	ldw	r2,4(r5)
   117f8:	40800326 	beq	r8,r2,11808 <__fpcmp_parts_d+0x60>
   117fc:	403ff726 	beq	r8,zero,117dc <__fpcmp_parts_d+0x34>
   11800:	00bfffc4 	movi	r2,-1
   11804:	f800283a 	ret
   11808:	20c00217 	ldw	r3,8(r4)
   1180c:	28800217 	ldw	r2,8(r5)
   11810:	10fffa16 	blt	r2,r3,117fc <__fpcmp_parts_d+0x54>
   11814:	18800916 	blt	r3,r2,1183c <__fpcmp_parts_d+0x94>
   11818:	21c00417 	ldw	r7,16(r4)
   1181c:	28c00417 	ldw	r3,16(r5)
   11820:	21800317 	ldw	r6,12(r4)
   11824:	28800317 	ldw	r2,12(r5)
   11828:	19fff436 	bltu	r3,r7,117fc <__fpcmp_parts_d+0x54>
   1182c:	38c00526 	beq	r7,r3,11844 <__fpcmp_parts_d+0x9c>
   11830:	38c00236 	bltu	r7,r3,1183c <__fpcmp_parts_d+0x94>
   11834:	19ffec1e 	bne	r3,r7,117e8 <__fpcmp_parts_d+0x40>
   11838:	30bfeb2e 	bgeu	r6,r2,117e8 <__fpcmp_parts_d+0x40>
   1183c:	403fe71e 	bne	r8,zero,117dc <__fpcmp_parts_d+0x34>
   11840:	003fef06 	br	11800 <__fpcmp_parts_d+0x58>
   11844:	11bffa2e 	bgeu	r2,r6,11830 <__fpcmp_parts_d+0x88>
   11848:	403fe426 	beq	r8,zero,117dc <__fpcmp_parts_d+0x34>
   1184c:	003fec06 	br	11800 <__fpcmp_parts_d+0x58>
   11850:	28800117 	ldw	r2,4(r5)
   11854:	103fe11e 	bne	r2,zero,117dc <__fpcmp_parts_d+0x34>
   11858:	003fe906 	br	11800 <__fpcmp_parts_d+0x58>
   1185c:	11bfdd1e 	bne	r2,r6,117d4 <__fpcmp_parts_d+0x2c>
   11860:	28c00117 	ldw	r3,4(r5)
   11864:	20800117 	ldw	r2,4(r4)
   11868:	1885c83a 	sub	r2,r3,r2
   1186c:	f800283a 	ret

00011870 <abort>:
   11870:	deffff04 	addi	sp,sp,-4
   11874:	01000184 	movi	r4,6
   11878:	dfc00015 	stw	ra,0(sp)
   1187c:	0014d4c0 	call	14d4c <raise>
   11880:	01000044 	movi	r4,1
   11884:	001b7180 	call	1b718 <_exit>

00011888 <_atoi_r>:
   11888:	000d883a 	mov	r6,zero
   1188c:	01c00284 	movi	r7,10
   11890:	00152541 	jmpi	15254 <_strtol_r>

00011894 <atoi>:
   11894:	000b883a 	mov	r5,zero
   11898:	01800284 	movi	r6,10
   1189c:	00154981 	jmpi	15498 <strtol>

000118a0 <_fclose_r>:
   118a0:	defffc04 	addi	sp,sp,-16
   118a4:	dc400115 	stw	r17,4(sp)
   118a8:	dc000015 	stw	r16,0(sp)
   118ac:	dfc00315 	stw	ra,12(sp)
   118b0:	dc800215 	stw	r18,8(sp)
   118b4:	2821883a 	mov	r16,r5
   118b8:	2023883a 	mov	r17,r4
   118bc:	28002926 	beq	r5,zero,11964 <_fclose_r+0xc4>
   118c0:	0011ee00 	call	11ee0 <__sfp_lock_acquire>
   118c4:	88000226 	beq	r17,zero,118d0 <_fclose_r+0x30>
   118c8:	88800e17 	ldw	r2,56(r17)
   118cc:	10002d26 	beq	r2,zero,11984 <_fclose_r+0xe4>
   118d0:	8080030f 	ldh	r2,12(r16)
   118d4:	10002226 	beq	r2,zero,11960 <_fclose_r+0xc0>
   118d8:	8809883a 	mov	r4,r17
   118dc:	800b883a 	mov	r5,r16
   118e0:	00119c40 	call	119c4 <_fflush_r>
   118e4:	1025883a 	mov	r18,r2
   118e8:	80800b17 	ldw	r2,44(r16)
   118ec:	10000426 	beq	r2,zero,11900 <_fclose_r+0x60>
   118f0:	81400717 	ldw	r5,28(r16)
   118f4:	8809883a 	mov	r4,r17
   118f8:	103ee83a 	callr	r2
   118fc:	10002a16 	blt	r2,zero,119a8 <_fclose_r+0x108>
   11900:	8080030b 	ldhu	r2,12(r16)
   11904:	1080200c 	andi	r2,r2,128
   11908:	1000231e 	bne	r2,zero,11998 <_fclose_r+0xf8>
   1190c:	81400c17 	ldw	r5,48(r16)
   11910:	28000526 	beq	r5,zero,11928 <_fclose_r+0x88>
   11914:	80801004 	addi	r2,r16,64
   11918:	28800226 	beq	r5,r2,11924 <_fclose_r+0x84>
   1191c:	8809883a 	mov	r4,r17
   11920:	00124d00 	call	124d0 <_free_r>
   11924:	80000c15 	stw	zero,48(r16)
   11928:	81401117 	ldw	r5,68(r16)
   1192c:	28000326 	beq	r5,zero,1193c <_fclose_r+0x9c>
   11930:	8809883a 	mov	r4,r17
   11934:	00124d00 	call	124d0 <_free_r>
   11938:	80001115 	stw	zero,68(r16)
   1193c:	8000030d 	sth	zero,12(r16)
   11940:	0011ee40 	call	11ee4 <__sfp_lock_release>
   11944:	9005883a 	mov	r2,r18
   11948:	dfc00317 	ldw	ra,12(sp)
   1194c:	dc800217 	ldw	r18,8(sp)
   11950:	dc400117 	ldw	r17,4(sp)
   11954:	dc000017 	ldw	r16,0(sp)
   11958:	dec00404 	addi	sp,sp,16
   1195c:	f800283a 	ret
   11960:	0011ee40 	call	11ee4 <__sfp_lock_release>
   11964:	0025883a 	mov	r18,zero
   11968:	9005883a 	mov	r2,r18
   1196c:	dfc00317 	ldw	ra,12(sp)
   11970:	dc800217 	ldw	r18,8(sp)
   11974:	dc400117 	ldw	r17,4(sp)
   11978:	dc000017 	ldw	r16,0(sp)
   1197c:	dec00404 	addi	sp,sp,16
   11980:	f800283a 	ret
   11984:	8809883a 	mov	r4,r17
   11988:	0011ef00 	call	11ef0 <__sinit>
   1198c:	8080030f 	ldh	r2,12(r16)
   11990:	103fd11e 	bne	r2,zero,118d8 <_fclose_r+0x38>
   11994:	003ff206 	br	11960 <_fclose_r+0xc0>
   11998:	81400417 	ldw	r5,16(r16)
   1199c:	8809883a 	mov	r4,r17
   119a0:	00124d00 	call	124d0 <_free_r>
   119a4:	003fd906 	br	1190c <_fclose_r+0x6c>
   119a8:	04bfffc4 	movi	r18,-1
   119ac:	003fd406 	br	11900 <_fclose_r+0x60>

000119b0 <fclose>:
   119b0:	008000b4 	movhi	r2,2
   119b4:	10833f04 	addi	r2,r2,3324
   119b8:	200b883a 	mov	r5,r4
   119bc:	11000017 	ldw	r4,0(r2)
   119c0:	00118a01 	jmpi	118a0 <_fclose_r>

000119c4 <_fflush_r>:
   119c4:	defffb04 	addi	sp,sp,-20
   119c8:	dcc00315 	stw	r19,12(sp)
   119cc:	dc800215 	stw	r18,8(sp)
   119d0:	dfc00415 	stw	ra,16(sp)
   119d4:	dc400115 	stw	r17,4(sp)
   119d8:	dc000015 	stw	r16,0(sp)
   119dc:	2027883a 	mov	r19,r4
   119e0:	2825883a 	mov	r18,r5
   119e4:	20000226 	beq	r4,zero,119f0 <_fflush_r+0x2c>
   119e8:	20800e17 	ldw	r2,56(r4)
   119ec:	10005626 	beq	r2,zero,11b48 <_fflush_r+0x184>
   119f0:	9100030b 	ldhu	r4,12(r18)
   119f4:	20ffffcc 	andi	r3,r4,65535
   119f8:	18e0001c 	xori	r3,r3,32768
   119fc:	18e00004 	addi	r3,r3,-32768
   11a00:	1880020c 	andi	r2,r3,8
   11a04:	1000261e 	bne	r2,zero,11aa0 <_fflush_r+0xdc>
   11a08:	90c00117 	ldw	r3,4(r18)
   11a0c:	20820014 	ori	r2,r4,2048
   11a10:	9080030d 	sth	r2,12(r18)
   11a14:	1009883a 	mov	r4,r2
   11a18:	00c0400e 	bge	zero,r3,11b1c <_fflush_r+0x158>
   11a1c:	92000a17 	ldw	r8,40(r18)
   11a20:	40004026 	beq	r8,zero,11b24 <_fflush_r+0x160>
   11a24:	2084000c 	andi	r2,r4,4096
   11a28:	10005326 	beq	r2,zero,11b78 <_fflush_r+0x1b4>
   11a2c:	94001417 	ldw	r16,80(r18)
   11a30:	9080030b 	ldhu	r2,12(r18)
   11a34:	1080010c 	andi	r2,r2,4
   11a38:	1000481e 	bne	r2,zero,11b5c <_fflush_r+0x198>
   11a3c:	91400717 	ldw	r5,28(r18)
   11a40:	9809883a 	mov	r4,r19
   11a44:	800d883a 	mov	r6,r16
   11a48:	000f883a 	mov	r7,zero
   11a4c:	403ee83a 	callr	r8
   11a50:	8080261e 	bne	r16,r2,11aec <_fflush_r+0x128>
   11a54:	9080030b 	ldhu	r2,12(r18)
   11a58:	91000417 	ldw	r4,16(r18)
   11a5c:	90000115 	stw	zero,4(r18)
   11a60:	10bdffcc 	andi	r2,r2,63487
   11a64:	10ffffcc 	andi	r3,r2,65535
   11a68:	18c4000c 	andi	r3,r3,4096
   11a6c:	9080030d 	sth	r2,12(r18)
   11a70:	91000015 	stw	r4,0(r18)
   11a74:	18002b26 	beq	r3,zero,11b24 <_fflush_r+0x160>
   11a78:	0007883a 	mov	r3,zero
   11a7c:	1805883a 	mov	r2,r3
   11a80:	94001415 	stw	r16,80(r18)
   11a84:	dfc00417 	ldw	ra,16(sp)
   11a88:	dcc00317 	ldw	r19,12(sp)
   11a8c:	dc800217 	ldw	r18,8(sp)
   11a90:	dc400117 	ldw	r17,4(sp)
   11a94:	dc000017 	ldw	r16,0(sp)
   11a98:	dec00504 	addi	sp,sp,20
   11a9c:	f800283a 	ret
   11aa0:	94400417 	ldw	r17,16(r18)
   11aa4:	88001f26 	beq	r17,zero,11b24 <_fflush_r+0x160>
   11aa8:	90800017 	ldw	r2,0(r18)
   11aac:	18c000cc 	andi	r3,r3,3
   11ab0:	94400015 	stw	r17,0(r18)
   11ab4:	1461c83a 	sub	r16,r2,r17
   11ab8:	18002526 	beq	r3,zero,11b50 <_fflush_r+0x18c>
   11abc:	0005883a 	mov	r2,zero
   11ac0:	90800215 	stw	r2,8(r18)
   11ac4:	0400170e 	bge	zero,r16,11b24 <_fflush_r+0x160>
   11ac8:	90c00917 	ldw	r3,36(r18)
   11acc:	91400717 	ldw	r5,28(r18)
   11ad0:	880d883a 	mov	r6,r17
   11ad4:	800f883a 	mov	r7,r16
   11ad8:	9809883a 	mov	r4,r19
   11adc:	183ee83a 	callr	r3
   11ae0:	88a3883a 	add	r17,r17,r2
   11ae4:	80a1c83a 	sub	r16,r16,r2
   11ae8:	00bff616 	blt	zero,r2,11ac4 <_fflush_r+0x100>
   11aec:	9080030b 	ldhu	r2,12(r18)
   11af0:	00ffffc4 	movi	r3,-1
   11af4:	10801014 	ori	r2,r2,64
   11af8:	9080030d 	sth	r2,12(r18)
   11afc:	1805883a 	mov	r2,r3
   11b00:	dfc00417 	ldw	ra,16(sp)
   11b04:	dcc00317 	ldw	r19,12(sp)
   11b08:	dc800217 	ldw	r18,8(sp)
   11b0c:	dc400117 	ldw	r17,4(sp)
   11b10:	dc000017 	ldw	r16,0(sp)
   11b14:	dec00504 	addi	sp,sp,20
   11b18:	f800283a 	ret
   11b1c:	90800f17 	ldw	r2,60(r18)
   11b20:	00bfbe16 	blt	zero,r2,11a1c <_fflush_r+0x58>
   11b24:	0007883a 	mov	r3,zero
   11b28:	1805883a 	mov	r2,r3
   11b2c:	dfc00417 	ldw	ra,16(sp)
   11b30:	dcc00317 	ldw	r19,12(sp)
   11b34:	dc800217 	ldw	r18,8(sp)
   11b38:	dc400117 	ldw	r17,4(sp)
   11b3c:	dc000017 	ldw	r16,0(sp)
   11b40:	dec00504 	addi	sp,sp,20
   11b44:	f800283a 	ret
   11b48:	0011ef00 	call	11ef0 <__sinit>
   11b4c:	003fa806 	br	119f0 <_fflush_r+0x2c>
   11b50:	90800517 	ldw	r2,20(r18)
   11b54:	90800215 	stw	r2,8(r18)
   11b58:	003fda06 	br	11ac4 <_fflush_r+0x100>
   11b5c:	90800117 	ldw	r2,4(r18)
   11b60:	90c00c17 	ldw	r3,48(r18)
   11b64:	80a1c83a 	sub	r16,r16,r2
   11b68:	183fb426 	beq	r3,zero,11a3c <_fflush_r+0x78>
   11b6c:	90800f17 	ldw	r2,60(r18)
   11b70:	80a1c83a 	sub	r16,r16,r2
   11b74:	003fb106 	br	11a3c <_fflush_r+0x78>
   11b78:	91400717 	ldw	r5,28(r18)
   11b7c:	9809883a 	mov	r4,r19
   11b80:	000d883a 	mov	r6,zero
   11b84:	01c00044 	movi	r7,1
   11b88:	403ee83a 	callr	r8
   11b8c:	1021883a 	mov	r16,r2
   11b90:	00bfffc4 	movi	r2,-1
   11b94:	80800226 	beq	r16,r2,11ba0 <_fflush_r+0x1dc>
   11b98:	92000a17 	ldw	r8,40(r18)
   11b9c:	003fa406 	br	11a30 <_fflush_r+0x6c>
   11ba0:	98c00017 	ldw	r3,0(r19)
   11ba4:	00800744 	movi	r2,29
   11ba8:	18bfde26 	beq	r3,r2,11b24 <_fflush_r+0x160>
   11bac:	9080030b 	ldhu	r2,12(r18)
   11bb0:	8007883a 	mov	r3,r16
   11bb4:	10801014 	ori	r2,r2,64
   11bb8:	9080030d 	sth	r2,12(r18)
   11bbc:	003fcf06 	br	11afc <_fflush_r+0x138>

00011bc0 <fflush>:
   11bc0:	01400074 	movhi	r5,1
   11bc4:	29467104 	addi	r5,r5,6596
   11bc8:	2007883a 	mov	r3,r4
   11bcc:	20000526 	beq	r4,zero,11be4 <fflush+0x24>
   11bd0:	008000b4 	movhi	r2,2
   11bd4:	10833f04 	addi	r2,r2,3324
   11bd8:	11000017 	ldw	r4,0(r2)
   11bdc:	180b883a 	mov	r5,r3
   11be0:	00119c41 	jmpi	119c4 <_fflush_r>
   11be4:	008000b4 	movhi	r2,2
   11be8:	10834004 	addi	r2,r2,3328
   11bec:	11000017 	ldw	r4,0(r2)
   11bf0:	00132601 	jmpi	13260 <_fwalk_reent>

00011bf4 <fgetc>:
   11bf4:	defffd04 	addi	sp,sp,-12
   11bf8:	dc400115 	stw	r17,4(sp)
   11bfc:	044000b4 	movhi	r17,2
   11c00:	8c433f04 	addi	r17,r17,3324
   11c04:	88c00017 	ldw	r3,0(r17)
   11c08:	dc000015 	stw	r16,0(sp)
   11c0c:	dfc00215 	stw	ra,8(sp)
   11c10:	2021883a 	mov	r16,r4
   11c14:	18000326 	beq	r3,zero,11c24 <fgetc+0x30>
   11c18:	18800e17 	ldw	r2,56(r3)
   11c1c:	1809883a 	mov	r4,r3
   11c20:	10000e26 	beq	r2,zero,11c5c <fgetc+0x68>
   11c24:	80800117 	ldw	r2,4(r16)
   11c28:	800b883a 	mov	r5,r16
   11c2c:	10bfffc4 	addi	r2,r2,-1
   11c30:	80800115 	stw	r2,4(r16)
   11c34:	10000f16 	blt	r2,zero,11c74 <fgetc+0x80>
   11c38:	80c00017 	ldw	r3,0(r16)
   11c3c:	18800003 	ldbu	r2,0(r3)
   11c40:	18c00044 	addi	r3,r3,1
   11c44:	80c00015 	stw	r3,0(r16)
   11c48:	dfc00217 	ldw	ra,8(sp)
   11c4c:	dc400117 	ldw	r17,4(sp)
   11c50:	dc000017 	ldw	r16,0(sp)
   11c54:	dec00304 	addi	sp,sp,12
   11c58:	f800283a 	ret
   11c5c:	0011ef00 	call	11ef0 <__sinit>
   11c60:	80800117 	ldw	r2,4(r16)
   11c64:	800b883a 	mov	r5,r16
   11c68:	10bfffc4 	addi	r2,r2,-1
   11c6c:	80800115 	stw	r2,4(r16)
   11c70:	103ff10e 	bge	r2,zero,11c38 <fgetc+0x44>
   11c74:	89000017 	ldw	r4,0(r17)
   11c78:	dfc00217 	ldw	ra,8(sp)
   11c7c:	dc400117 	ldw	r17,4(sp)
   11c80:	dc000017 	ldw	r16,0(sp)
   11c84:	dec00304 	addi	sp,sp,12
   11c88:	0014bb01 	jmpi	14bb0 <__srget_r>

00011c8c <_fgetc_r>:
   11c8c:	defffd04 	addi	sp,sp,-12
   11c90:	dc400115 	stw	r17,4(sp)
   11c94:	dc000015 	stw	r16,0(sp)
   11c98:	dfc00215 	stw	ra,8(sp)
   11c9c:	2021883a 	mov	r16,r4
   11ca0:	2823883a 	mov	r17,r5
   11ca4:	20000226 	beq	r4,zero,11cb0 <_fgetc_r+0x24>
   11ca8:	20800e17 	ldw	r2,56(r4)
   11cac:	10000f26 	beq	r2,zero,11cec <_fgetc_r+0x60>
   11cb0:	88800117 	ldw	r2,4(r17)
   11cb4:	8009883a 	mov	r4,r16
   11cb8:	880b883a 	mov	r5,r17
   11cbc:	10bfffc4 	addi	r2,r2,-1
   11cc0:	88800115 	stw	r2,4(r17)
   11cc4:	10001016 	blt	r2,zero,11d08 <_fgetc_r+0x7c>
   11cc8:	88c00017 	ldw	r3,0(r17)
   11ccc:	18800003 	ldbu	r2,0(r3)
   11cd0:	18c00044 	addi	r3,r3,1
   11cd4:	88c00015 	stw	r3,0(r17)
   11cd8:	dfc00217 	ldw	ra,8(sp)
   11cdc:	dc400117 	ldw	r17,4(sp)
   11ce0:	dc000017 	ldw	r16,0(sp)
   11ce4:	dec00304 	addi	sp,sp,12
   11ce8:	f800283a 	ret
   11cec:	0011ef00 	call	11ef0 <__sinit>
   11cf0:	88800117 	ldw	r2,4(r17)
   11cf4:	8009883a 	mov	r4,r16
   11cf8:	880b883a 	mov	r5,r17
   11cfc:	10bfffc4 	addi	r2,r2,-1
   11d00:	88800115 	stw	r2,4(r17)
   11d04:	103ff00e 	bge	r2,zero,11cc8 <_fgetc_r+0x3c>
   11d08:	dfc00217 	ldw	ra,8(sp)
   11d0c:	dc400117 	ldw	r17,4(sp)
   11d10:	dc000017 	ldw	r16,0(sp)
   11d14:	dec00304 	addi	sp,sp,12
   11d18:	0014bb01 	jmpi	14bb0 <__srget_r>

00011d1c <_fgets_r>:
   11d1c:	defff804 	addi	sp,sp,-32
   11d20:	00800044 	movi	r2,1
   11d24:	dd800615 	stw	r22,24(sp)
   11d28:	dd400515 	stw	r21,20(sp)
   11d2c:	dc400115 	stw	r17,4(sp)
   11d30:	dc000015 	stw	r16,0(sp)
   11d34:	dfc00715 	stw	ra,28(sp)
   11d38:	dd000415 	stw	r20,16(sp)
   11d3c:	dcc00315 	stw	r19,12(sp)
   11d40:	dc800215 	stw	r18,8(sp)
   11d44:	3021883a 	mov	r16,r6
   11d48:	282d883a 	mov	r22,r5
   11d4c:	3823883a 	mov	r17,r7
   11d50:	202b883a 	mov	r21,r4
   11d54:	1180410e 	bge	r2,r6,11e5c <_fgets_r+0x140>
   11d58:	20000226 	beq	r4,zero,11d64 <_fgets_r+0x48>
   11d5c:	20800e17 	ldw	r2,56(r4)
   11d60:	10002e26 	beq	r2,zero,11e1c <_fgets_r+0x100>
   11d64:	853fffc4 	addi	r20,r16,-1
   11d68:	b027883a 	mov	r19,r22
   11d6c:	88800117 	ldw	r2,4(r17)
   11d70:	a809883a 	mov	r4,r21
   11d74:	880b883a 	mov	r5,r17
   11d78:	100d883a 	mov	r6,r2
   11d7c:	1000031e 	bne	r2,zero,11d8c <_fgets_r+0x70>
   11d80:	00149d00 	call	149d0 <__srefill_r>
   11d84:	1000341e 	bne	r2,zero,11e58 <_fgets_r+0x13c>
   11d88:	89800117 	ldw	r6,4(r17)
   11d8c:	01400284 	movi	r5,10
   11d90:	3021883a 	mov	r16,r6
   11d94:	8c800017 	ldw	r18,0(r17)
   11d98:	a180012e 	bgeu	r20,r6,11da0 <_fgets_r+0x84>
   11d9c:	a021883a 	mov	r16,r20
   11da0:	9009883a 	mov	r4,r18
   11da4:	800d883a 	mov	r6,r16
   11da8:	0013cdc0 	call	13cdc <memchr>
   11dac:	1007883a 	mov	r3,r2
   11db0:	900b883a 	mov	r5,r18
   11db4:	9809883a 	mov	r4,r19
   11db8:	800d883a 	mov	r6,r16
   11dbc:	1000191e 	bne	r2,zero,11e24 <_fgets_r+0x108>
   11dc0:	88800117 	ldw	r2,4(r17)
   11dc4:	88c00017 	ldw	r3,0(r17)
   11dc8:	9c27883a 	add	r19,r19,r16
   11dcc:	1405c83a 	sub	r2,r2,r16
   11dd0:	1c07883a 	add	r3,r3,r16
   11dd4:	88c00015 	stw	r3,0(r17)
   11dd8:	88800115 	stw	r2,4(r17)
   11ddc:	0013e340 	call	13e34 <memcpy>
   11de0:	a407c83a 	sub	r3,r20,r16
   11de4:	1829883a 	mov	r20,r3
   11de8:	183fe01e 	bne	r3,zero,11d6c <_fgets_r+0x50>
   11dec:	98000005 	stb	zero,0(r19)
   11df0:	b005883a 	mov	r2,r22
   11df4:	dfc00717 	ldw	ra,28(sp)
   11df8:	dd800617 	ldw	r22,24(sp)
   11dfc:	dd400517 	ldw	r21,20(sp)
   11e00:	dd000417 	ldw	r20,16(sp)
   11e04:	dcc00317 	ldw	r19,12(sp)
   11e08:	dc800217 	ldw	r18,8(sp)
   11e0c:	dc400117 	ldw	r17,4(sp)
   11e10:	dc000017 	ldw	r16,0(sp)
   11e14:	dec00804 	addi	sp,sp,32
   11e18:	f800283a 	ret
   11e1c:	0011ef00 	call	11ef0 <__sinit>
   11e20:	003fd006 	br	11d64 <_fgets_r+0x48>
   11e24:	88800117 	ldw	r2,4(r17)
   11e28:	18c00044 	addi	r3,r3,1
   11e2c:	1ca1c83a 	sub	r16,r3,r18
   11e30:	1405c83a 	sub	r2,r2,r16
   11e34:	800d883a 	mov	r6,r16
   11e38:	88c00015 	stw	r3,0(r17)
   11e3c:	88800115 	stw	r2,4(r17)
   11e40:	900b883a 	mov	r5,r18
   11e44:	9809883a 	mov	r4,r19
   11e48:	0013e340 	call	13e34 <memcpy>
   11e4c:	9c21883a 	add	r16,r19,r16
   11e50:	80000005 	stb	zero,0(r16)
   11e54:	003fe606 	br	11df0 <_fgets_r+0xd4>
   11e58:	9dbfe41e 	bne	r19,r22,11dec <_fgets_r+0xd0>
   11e5c:	002d883a 	mov	r22,zero
   11e60:	003fe306 	br	11df0 <_fgets_r+0xd4>

00011e64 <fgets>:
   11e64:	008000b4 	movhi	r2,2
   11e68:	10833f04 	addi	r2,r2,3324
   11e6c:	2013883a 	mov	r9,r4
   11e70:	11000017 	ldw	r4,0(r2)
   11e74:	2805883a 	mov	r2,r5
   11e78:	300f883a 	mov	r7,r6
   11e7c:	480b883a 	mov	r5,r9
   11e80:	100d883a 	mov	r6,r2
   11e84:	0011d1c1 	jmpi	11d1c <_fgets_r>

00011e88 <std>:
   11e88:	00800074 	movhi	r2,1
   11e8c:	1093f404 	addi	r2,r2,20432
   11e90:	20800b15 	stw	r2,44(r4)
   11e94:	00800074 	movhi	r2,1
   11e98:	10942f04 	addi	r2,r2,20668
   11e9c:	20800815 	stw	r2,32(r4)
   11ea0:	00c00074 	movhi	r3,1
   11ea4:	18d41004 	addi	r3,r3,20544
   11ea8:	00800074 	movhi	r2,1
   11eac:	1093f604 	addi	r2,r2,20440
   11eb0:	2140030d 	sth	r5,12(r4)
   11eb4:	2180038d 	sth	r6,14(r4)
   11eb8:	20c00915 	stw	r3,36(r4)
   11ebc:	20800a15 	stw	r2,40(r4)
   11ec0:	20000015 	stw	zero,0(r4)
   11ec4:	20000115 	stw	zero,4(r4)
   11ec8:	20000215 	stw	zero,8(r4)
   11ecc:	20000415 	stw	zero,16(r4)
   11ed0:	20000515 	stw	zero,20(r4)
   11ed4:	20000615 	stw	zero,24(r4)
   11ed8:	21000715 	stw	r4,28(r4)
   11edc:	f800283a 	ret

00011ee0 <__sfp_lock_acquire>:
   11ee0:	f800283a 	ret

00011ee4 <__sfp_lock_release>:
   11ee4:	f800283a 	ret

00011ee8 <__sinit_lock_acquire>:
   11ee8:	f800283a 	ret

00011eec <__sinit_lock_release>:
   11eec:	f800283a 	ret

00011ef0 <__sinit>:
   11ef0:	20800e17 	ldw	r2,56(r4)
   11ef4:	defffd04 	addi	sp,sp,-12
   11ef8:	dc400115 	stw	r17,4(sp)
   11efc:	dc000015 	stw	r16,0(sp)
   11f00:	dfc00215 	stw	ra,8(sp)
   11f04:	04400044 	movi	r17,1
   11f08:	01400104 	movi	r5,4
   11f0c:	000d883a 	mov	r6,zero
   11f10:	2021883a 	mov	r16,r4
   11f14:	2200bb04 	addi	r8,r4,748
   11f18:	200f883a 	mov	r7,r4
   11f1c:	10000526 	beq	r2,zero,11f34 <__sinit+0x44>
   11f20:	dfc00217 	ldw	ra,8(sp)
   11f24:	dc400117 	ldw	r17,4(sp)
   11f28:	dc000017 	ldw	r16,0(sp)
   11f2c:	dec00304 	addi	sp,sp,12
   11f30:	f800283a 	ret
   11f34:	21000117 	ldw	r4,4(r4)
   11f38:	00800074 	movhi	r2,1
   11f3c:	1087f504 	addi	r2,r2,8148
   11f40:	00c000c4 	movi	r3,3
   11f44:	80800f15 	stw	r2,60(r16)
   11f48:	80c0b915 	stw	r3,740(r16)
   11f4c:	8200ba15 	stw	r8,744(r16)
   11f50:	84400e15 	stw	r17,56(r16)
   11f54:	8000b815 	stw	zero,736(r16)
   11f58:	0011e880 	call	11e88 <std>
   11f5c:	81000217 	ldw	r4,8(r16)
   11f60:	880d883a 	mov	r6,r17
   11f64:	800f883a 	mov	r7,r16
   11f68:	01400284 	movi	r5,10
   11f6c:	0011e880 	call	11e88 <std>
   11f70:	81000317 	ldw	r4,12(r16)
   11f74:	800f883a 	mov	r7,r16
   11f78:	01400484 	movi	r5,18
   11f7c:	01800084 	movi	r6,2
   11f80:	dfc00217 	ldw	ra,8(sp)
   11f84:	dc400117 	ldw	r17,4(sp)
   11f88:	dc000017 	ldw	r16,0(sp)
   11f8c:	dec00304 	addi	sp,sp,12
   11f90:	0011e881 	jmpi	11e88 <std>

00011f94 <__fp_lock>:
   11f94:	0005883a 	mov	r2,zero
   11f98:	f800283a 	ret

00011f9c <__fp_unlock>:
   11f9c:	0005883a 	mov	r2,zero
   11fa0:	f800283a 	ret

00011fa4 <__fp_unlock_all>:
   11fa4:	008000b4 	movhi	r2,2
   11fa8:	10833f04 	addi	r2,r2,3324
   11fac:	11000017 	ldw	r4,0(r2)
   11fb0:	01400074 	movhi	r5,1
   11fb4:	2947e704 	addi	r5,r5,8092
   11fb8:	00133281 	jmpi	13328 <_fwalk>

00011fbc <__fp_lock_all>:
   11fbc:	008000b4 	movhi	r2,2
   11fc0:	10833f04 	addi	r2,r2,3324
   11fc4:	11000017 	ldw	r4,0(r2)
   11fc8:	01400074 	movhi	r5,1
   11fcc:	2947e504 	addi	r5,r5,8084
   11fd0:	00133281 	jmpi	13328 <_fwalk>

00011fd4 <_cleanup_r>:
   11fd4:	01400074 	movhi	r5,1
   11fd8:	29466c04 	addi	r5,r5,6576
   11fdc:	00133281 	jmpi	13328 <_fwalk>

00011fe0 <_cleanup>:
   11fe0:	008000b4 	movhi	r2,2
   11fe4:	10834004 	addi	r2,r2,3328
   11fe8:	11000017 	ldw	r4,0(r2)
   11fec:	0011fd41 	jmpi	11fd4 <_cleanup_r>

00011ff0 <__sfmoreglue>:
   11ff0:	defffc04 	addi	sp,sp,-16
   11ff4:	dc400115 	stw	r17,4(sp)
   11ff8:	2c401724 	muli	r17,r5,92
   11ffc:	dc800215 	stw	r18,8(sp)
   12000:	2825883a 	mov	r18,r5
   12004:	89400304 	addi	r5,r17,12
   12008:	dc000015 	stw	r16,0(sp)
   1200c:	dfc00315 	stw	ra,12(sp)
   12010:	001359c0 	call	1359c <_malloc_r>
   12014:	0021883a 	mov	r16,zero
   12018:	880d883a 	mov	r6,r17
   1201c:	000b883a 	mov	r5,zero
   12020:	10000626 	beq	r2,zero,1203c <__sfmoreglue+0x4c>
   12024:	11000304 	addi	r4,r2,12
   12028:	14800115 	stw	r18,4(r2)
   1202c:	10000015 	stw	zero,0(r2)
   12030:	11000215 	stw	r4,8(r2)
   12034:	1021883a 	mov	r16,r2
   12038:	0013fb40 	call	13fb4 <memset>
   1203c:	8005883a 	mov	r2,r16
   12040:	dfc00317 	ldw	ra,12(sp)
   12044:	dc800217 	ldw	r18,8(sp)
   12048:	dc400117 	ldw	r17,4(sp)
   1204c:	dc000017 	ldw	r16,0(sp)
   12050:	dec00404 	addi	sp,sp,16
   12054:	f800283a 	ret

00012058 <__sfp>:
   12058:	defffd04 	addi	sp,sp,-12
   1205c:	008000b4 	movhi	r2,2
   12060:	10834004 	addi	r2,r2,3328
   12064:	dc000015 	stw	r16,0(sp)
   12068:	14000017 	ldw	r16,0(r2)
   1206c:	dc400115 	stw	r17,4(sp)
   12070:	dfc00215 	stw	ra,8(sp)
   12074:	80800e17 	ldw	r2,56(r16)
   12078:	2023883a 	mov	r17,r4
   1207c:	10002626 	beq	r2,zero,12118 <__sfp+0xc0>
   12080:	8400b804 	addi	r16,r16,736
   12084:	80800117 	ldw	r2,4(r16)
   12088:	81000217 	ldw	r4,8(r16)
   1208c:	10ffffc4 	addi	r3,r2,-1
   12090:	18000916 	blt	r3,zero,120b8 <__sfp+0x60>
   12094:	2080030f 	ldh	r2,12(r4)
   12098:	10000b26 	beq	r2,zero,120c8 <__sfp+0x70>
   1209c:	017fffc4 	movi	r5,-1
   120a0:	00000206 	br	120ac <__sfp+0x54>
   120a4:	2080030f 	ldh	r2,12(r4)
   120a8:	10000726 	beq	r2,zero,120c8 <__sfp+0x70>
   120ac:	18ffffc4 	addi	r3,r3,-1
   120b0:	21001704 	addi	r4,r4,92
   120b4:	197ffb1e 	bne	r3,r5,120a4 <__sfp+0x4c>
   120b8:	80800017 	ldw	r2,0(r16)
   120bc:	10001926 	beq	r2,zero,12124 <__sfp+0xcc>
   120c0:	1021883a 	mov	r16,r2
   120c4:	003fef06 	br	12084 <__sfp+0x2c>
   120c8:	00bfffc4 	movi	r2,-1
   120cc:	00c00044 	movi	r3,1
   120d0:	2080038d 	sth	r2,14(r4)
   120d4:	20c0030d 	sth	r3,12(r4)
   120d8:	20000015 	stw	zero,0(r4)
   120dc:	20000215 	stw	zero,8(r4)
   120e0:	20000115 	stw	zero,4(r4)
   120e4:	20000415 	stw	zero,16(r4)
   120e8:	20000515 	stw	zero,20(r4)
   120ec:	20000615 	stw	zero,24(r4)
   120f0:	20000c15 	stw	zero,48(r4)
   120f4:	20000d15 	stw	zero,52(r4)
   120f8:	20001115 	stw	zero,68(r4)
   120fc:	20001215 	stw	zero,72(r4)
   12100:	2005883a 	mov	r2,r4
   12104:	dfc00217 	ldw	ra,8(sp)
   12108:	dc400117 	ldw	r17,4(sp)
   1210c:	dc000017 	ldw	r16,0(sp)
   12110:	dec00304 	addi	sp,sp,12
   12114:	f800283a 	ret
   12118:	8009883a 	mov	r4,r16
   1211c:	0011ef00 	call	11ef0 <__sinit>
   12120:	003fd706 	br	12080 <__sfp+0x28>
   12124:	8809883a 	mov	r4,r17
   12128:	01400104 	movi	r5,4
   1212c:	0011ff00 	call	11ff0 <__sfmoreglue>
   12130:	80800015 	stw	r2,0(r16)
   12134:	103fe21e 	bne	r2,zero,120c0 <__sfp+0x68>
   12138:	00800304 	movi	r2,12
   1213c:	0009883a 	mov	r4,zero
   12140:	88800015 	stw	r2,0(r17)
   12144:	003fee06 	br	12100 <__sfp+0xa8>

00012148 <_fopen_r>:
   12148:	defffa04 	addi	sp,sp,-24
   1214c:	dcc00415 	stw	r19,16(sp)
   12150:	2827883a 	mov	r19,r5
   12154:	300b883a 	mov	r5,r6
   12158:	d80d883a 	mov	r6,sp
   1215c:	dc800315 	stw	r18,12(sp)
   12160:	dc400215 	stw	r17,8(sp)
   12164:	dc000115 	stw	r16,4(sp)
   12168:	dfc00515 	stw	ra,20(sp)
   1216c:	2021883a 	mov	r16,r4
   12170:	0018f200 	call	18f20 <__sflags>
   12174:	1025883a 	mov	r18,r2
   12178:	8009883a 	mov	r4,r16
   1217c:	0023883a 	mov	r17,zero
   12180:	1000081e 	bne	r2,zero,121a4 <_fopen_r+0x5c>
   12184:	8805883a 	mov	r2,r17
   12188:	dfc00517 	ldw	ra,20(sp)
   1218c:	dcc00417 	ldw	r19,16(sp)
   12190:	dc800317 	ldw	r18,12(sp)
   12194:	dc400217 	ldw	r17,8(sp)
   12198:	dc000117 	ldw	r16,4(sp)
   1219c:	dec00604 	addi	sp,sp,24
   121a0:	f800283a 	ret
   121a4:	00120580 	call	12058 <__sfp>
   121a8:	1023883a 	mov	r17,r2
   121ac:	980b883a 	mov	r5,r19
   121b0:	8009883a 	mov	r4,r16
   121b4:	01c06d84 	movi	r7,438
   121b8:	103ff226 	beq	r2,zero,12184 <_fopen_r+0x3c>
   121bc:	d9800017 	ldw	r6,0(sp)
   121c0:	001404c0 	call	1404c <_open_r>
   121c4:	10001816 	blt	r2,zero,12228 <_fopen_r+0xe0>
   121c8:	00c00074 	movhi	r3,1
   121cc:	18d41004 	addi	r3,r3,20544
   121d0:	923fffcc 	andi	r8,r18,65535
   121d4:	8880038d 	sth	r2,14(r17)
   121d8:	00800074 	movhi	r2,1
   121dc:	10942f04 	addi	r2,r2,20668
   121e0:	88800815 	stw	r2,32(r17)
   121e4:	88c00915 	stw	r3,36(r17)
   121e8:	00800074 	movhi	r2,1
   121ec:	1093f604 	addi	r2,r2,20440
   121f0:	00c00074 	movhi	r3,1
   121f4:	18d3f404 	addi	r3,r3,20432
   121f8:	4200400c 	andi	r8,r8,256
   121fc:	8c80030d 	sth	r18,12(r17)
   12200:	8009883a 	mov	r4,r16
   12204:	880b883a 	mov	r5,r17
   12208:	000d883a 	mov	r6,zero
   1220c:	01c00084 	movi	r7,2
   12210:	88800a15 	stw	r2,40(r17)
   12214:	88c00b15 	stw	r3,44(r17)
   12218:	8c400715 	stw	r17,28(r17)
   1221c:	403fd926 	beq	r8,zero,12184 <_fopen_r+0x3c>
   12220:	00127e40 	call	127e4 <_fseek_r>
   12224:	003fd706 	br	12184 <_fopen_r+0x3c>
   12228:	0011ee00 	call	11ee0 <__sfp_lock_acquire>
   1222c:	8800030d 	sth	zero,12(r17)
   12230:	0011ee40 	call	11ee4 <__sfp_lock_release>
   12234:	0023883a 	mov	r17,zero
   12238:	003fd206 	br	12184 <_fopen_r+0x3c>

0001223c <fopen>:
   1223c:	018000b4 	movhi	r6,2
   12240:	31833f04 	addi	r6,r6,3324
   12244:	2007883a 	mov	r3,r4
   12248:	31000017 	ldw	r4,0(r6)
   1224c:	280d883a 	mov	r6,r5
   12250:	180b883a 	mov	r5,r3
   12254:	00121481 	jmpi	12148 <_fopen_r>

00012258 <fputc>:
   12258:	defffc04 	addi	sp,sp,-16
   1225c:	dc800215 	stw	r18,8(sp)
   12260:	048000b4 	movhi	r18,2
   12264:	94833f04 	addi	r18,r18,3324
   12268:	90c00017 	ldw	r3,0(r18)
   1226c:	dc400115 	stw	r17,4(sp)
   12270:	dc000015 	stw	r16,0(sp)
   12274:	dfc00315 	stw	ra,12(sp)
   12278:	2021883a 	mov	r16,r4
   1227c:	2823883a 	mov	r17,r5
   12280:	18000326 	beq	r3,zero,12290 <fputc+0x38>
   12284:	18800e17 	ldw	r2,56(r3)
   12288:	1809883a 	mov	r4,r3
   1228c:	10000926 	beq	r2,zero,122b4 <fputc+0x5c>
   12290:	91000017 	ldw	r4,0(r18)
   12294:	800b883a 	mov	r5,r16
   12298:	880d883a 	mov	r6,r17
   1229c:	dfc00317 	ldw	ra,12(sp)
   122a0:	dc800217 	ldw	r18,8(sp)
   122a4:	dc400117 	ldw	r17,4(sp)
   122a8:	dc000017 	ldw	r16,0(sp)
   122ac:	dec00404 	addi	sp,sp,16
   122b0:	00142401 	jmpi	14240 <_putc_r>
   122b4:	0011ef00 	call	11ef0 <__sinit>
   122b8:	003ff506 	br	12290 <fputc+0x38>

000122bc <_fputc_r>:
   122bc:	defffc04 	addi	sp,sp,-16
   122c0:	dc800215 	stw	r18,8(sp)
   122c4:	dc400115 	stw	r17,4(sp)
   122c8:	dc000015 	stw	r16,0(sp)
   122cc:	dfc00315 	stw	ra,12(sp)
   122d0:	2021883a 	mov	r16,r4
   122d4:	2823883a 	mov	r17,r5
   122d8:	3025883a 	mov	r18,r6
   122dc:	20000226 	beq	r4,zero,122e8 <_fputc_r+0x2c>
   122e0:	20800e17 	ldw	r2,56(r4)
   122e4:	10000926 	beq	r2,zero,1230c <_fputc_r+0x50>
   122e8:	8009883a 	mov	r4,r16
   122ec:	880b883a 	mov	r5,r17
   122f0:	900d883a 	mov	r6,r18
   122f4:	dfc00317 	ldw	ra,12(sp)
   122f8:	dc800217 	ldw	r18,8(sp)
   122fc:	dc400117 	ldw	r17,4(sp)
   12300:	dc000017 	ldw	r16,0(sp)
   12304:	dec00404 	addi	sp,sp,16
   12308:	00142401 	jmpi	14240 <_putc_r>
   1230c:	0011ef00 	call	11ef0 <__sinit>
   12310:	003ff506 	br	122e8 <_fputc_r+0x2c>

00012314 <_fputs_r>:
   12314:	defff804 	addi	sp,sp,-32
   12318:	dc000515 	stw	r16,20(sp)
   1231c:	2021883a 	mov	r16,r4
   12320:	2809883a 	mov	r4,r5
   12324:	dc400615 	stw	r17,24(sp)
   12328:	dfc00715 	stw	ra,28(sp)
   1232c:	3023883a 	mov	r17,r6
   12330:	d9400015 	stw	r5,0(sp)
   12334:	001511c0 	call	1511c <strlen>
   12338:	00c00044 	movi	r3,1
   1233c:	d8800115 	stw	r2,4(sp)
   12340:	d8c00315 	stw	r3,12(sp)
   12344:	d8800415 	stw	r2,16(sp)
   12348:	dec00215 	stw	sp,8(sp)
   1234c:	80000326 	beq	r16,zero,1235c <_fputs_r+0x48>
   12350:	80800e17 	ldw	r2,56(r16)
   12354:	8009883a 	mov	r4,r16
   12358:	10000926 	beq	r2,zero,12380 <_fputs_r+0x6c>
   1235c:	8009883a 	mov	r4,r16
   12360:	880b883a 	mov	r5,r17
   12364:	d9800204 	addi	r6,sp,8
   12368:	0012dc40 	call	12dc4 <__sfvwrite_r>
   1236c:	dfc00717 	ldw	ra,28(sp)
   12370:	dc400617 	ldw	r17,24(sp)
   12374:	dc000517 	ldw	r16,20(sp)
   12378:	dec00804 	addi	sp,sp,32
   1237c:	f800283a 	ret
   12380:	0011ef00 	call	11ef0 <__sinit>
   12384:	003ff506 	br	1235c <_fputs_r+0x48>

00012388 <fputs>:
   12388:	018000b4 	movhi	r6,2
   1238c:	31833f04 	addi	r6,r6,3324
   12390:	2007883a 	mov	r3,r4
   12394:	31000017 	ldw	r4,0(r6)
   12398:	280d883a 	mov	r6,r5
   1239c:	180b883a 	mov	r5,r3
   123a0:	00123141 	jmpi	12314 <_fputs_r>

000123a4 <_malloc_trim_r>:
   123a4:	defffb04 	addi	sp,sp,-20
   123a8:	dcc00315 	stw	r19,12(sp)
   123ac:	04c000b4 	movhi	r19,2
   123b0:	9cfd9804 	addi	r19,r19,-2464
   123b4:	dc800215 	stw	r18,8(sp)
   123b8:	dc400115 	stw	r17,4(sp)
   123bc:	dc000015 	stw	r16,0(sp)
   123c0:	2823883a 	mov	r17,r5
   123c4:	2025883a 	mov	r18,r4
   123c8:	dfc00415 	stw	ra,16(sp)
   123cc:	001bdf40 	call	1bdf4 <__malloc_lock>
   123d0:	98800217 	ldw	r2,8(r19)
   123d4:	9009883a 	mov	r4,r18
   123d8:	000b883a 	mov	r5,zero
   123dc:	10c00117 	ldw	r3,4(r2)
   123e0:	00bfff04 	movi	r2,-4
   123e4:	18a0703a 	and	r16,r3,r2
   123e8:	8463c83a 	sub	r17,r16,r17
   123ec:	8c43fbc4 	addi	r17,r17,4079
   123f0:	8822d33a 	srli	r17,r17,12
   123f4:	0083ffc4 	movi	r2,4095
   123f8:	8c7fffc4 	addi	r17,r17,-1
   123fc:	8822933a 	slli	r17,r17,12
   12400:	1440060e 	bge	r2,r17,1241c <_malloc_trim_r+0x78>
   12404:	0014c100 	call	14c10 <_sbrk_r>
   12408:	98c00217 	ldw	r3,8(r19)
   1240c:	9009883a 	mov	r4,r18
   12410:	044bc83a 	sub	r5,zero,r17
   12414:	80c7883a 	add	r3,r16,r3
   12418:	10c00926 	beq	r2,r3,12440 <_malloc_trim_r+0x9c>
   1241c:	001be140 	call	1be14 <__malloc_unlock>
   12420:	0005883a 	mov	r2,zero
   12424:	dfc00417 	ldw	ra,16(sp)
   12428:	dcc00317 	ldw	r19,12(sp)
   1242c:	dc800217 	ldw	r18,8(sp)
   12430:	dc400117 	ldw	r17,4(sp)
   12434:	dc000017 	ldw	r16,0(sp)
   12438:	dec00504 	addi	sp,sp,20
   1243c:	f800283a 	ret
   12440:	9009883a 	mov	r4,r18
   12444:	0014c100 	call	14c10 <_sbrk_r>
   12448:	844dc83a 	sub	r6,r16,r17
   1244c:	00ffffc4 	movi	r3,-1
   12450:	9009883a 	mov	r4,r18
   12454:	000b883a 	mov	r5,zero
   12458:	01c000b4 	movhi	r7,2
   1245c:	39cc2804 	addi	r7,r7,12448
   12460:	31800054 	ori	r6,r6,1
   12464:	10c00926 	beq	r2,r3,1248c <_malloc_trim_r+0xe8>
   12468:	38800017 	ldw	r2,0(r7)
   1246c:	98c00217 	ldw	r3,8(r19)
   12470:	9009883a 	mov	r4,r18
   12474:	1445c83a 	sub	r2,r2,r17
   12478:	38800015 	stw	r2,0(r7)
   1247c:	19800115 	stw	r6,4(r3)
   12480:	001be140 	call	1be14 <__malloc_unlock>
   12484:	00800044 	movi	r2,1
   12488:	003fe606 	br	12424 <_malloc_trim_r+0x80>
   1248c:	0014c100 	call	14c10 <_sbrk_r>
   12490:	99800217 	ldw	r6,8(r19)
   12494:	100f883a 	mov	r7,r2
   12498:	9009883a 	mov	r4,r18
   1249c:	1187c83a 	sub	r3,r2,r6
   124a0:	008003c4 	movi	r2,15
   124a4:	19400054 	ori	r5,r3,1
   124a8:	10ffdc0e 	bge	r2,r3,1241c <_malloc_trim_r+0x78>
   124ac:	008000b4 	movhi	r2,2
   124b0:	10834204 	addi	r2,r2,3336
   124b4:	10c00017 	ldw	r3,0(r2)
   124b8:	008000b4 	movhi	r2,2
   124bc:	108c2804 	addi	r2,r2,12448
   124c0:	31400115 	stw	r5,4(r6)
   124c4:	38c7c83a 	sub	r3,r7,r3
   124c8:	10c00015 	stw	r3,0(r2)
   124cc:	003fd306 	br	1241c <_malloc_trim_r+0x78>

000124d0 <_free_r>:
   124d0:	defffd04 	addi	sp,sp,-12
   124d4:	dc400115 	stw	r17,4(sp)
   124d8:	dc000015 	stw	r16,0(sp)
   124dc:	dfc00215 	stw	ra,8(sp)
   124e0:	2821883a 	mov	r16,r5
   124e4:	2023883a 	mov	r17,r4
   124e8:	28005a26 	beq	r5,zero,12654 <_free_r+0x184>
   124ec:	001bdf40 	call	1bdf4 <__malloc_lock>
   124f0:	823ffe04 	addi	r8,r16,-8
   124f4:	41400117 	ldw	r5,4(r8)
   124f8:	00bfff84 	movi	r2,-2
   124fc:	028000b4 	movhi	r10,2
   12500:	52bd9804 	addi	r10,r10,-2464
   12504:	288e703a 	and	r7,r5,r2
   12508:	41cd883a 	add	r6,r8,r7
   1250c:	30c00117 	ldw	r3,4(r6)
   12510:	51000217 	ldw	r4,8(r10)
   12514:	00bfff04 	movi	r2,-4
   12518:	1892703a 	and	r9,r3,r2
   1251c:	5017883a 	mov	r11,r10
   12520:	31006726 	beq	r6,r4,126c0 <_free_r+0x1f0>
   12524:	2880004c 	andi	r2,r5,1
   12528:	1005003a 	cmpeq	r2,r2,zero
   1252c:	32400115 	stw	r9,4(r6)
   12530:	10001a1e 	bne	r2,zero,1259c <_free_r+0xcc>
   12534:	000b883a 	mov	r5,zero
   12538:	3247883a 	add	r3,r6,r9
   1253c:	18800117 	ldw	r2,4(r3)
   12540:	1080004c 	andi	r2,r2,1
   12544:	1000231e 	bne	r2,zero,125d4 <_free_r+0x104>
   12548:	280ac03a 	cmpne	r5,r5,zero
   1254c:	3a4f883a 	add	r7,r7,r9
   12550:	2800451e 	bne	r5,zero,12668 <_free_r+0x198>
   12554:	31000217 	ldw	r4,8(r6)
   12558:	008000b4 	movhi	r2,2
   1255c:	10bd9a04 	addi	r2,r2,-2456
   12560:	20807b26 	beq	r4,r2,12750 <_free_r+0x280>
   12564:	30800317 	ldw	r2,12(r6)
   12568:	3a07883a 	add	r3,r7,r8
   1256c:	19c00015 	stw	r7,0(r3)
   12570:	11000215 	stw	r4,8(r2)
   12574:	20800315 	stw	r2,12(r4)
   12578:	38800054 	ori	r2,r7,1
   1257c:	40800115 	stw	r2,4(r8)
   12580:	28001a26 	beq	r5,zero,125ec <_free_r+0x11c>
   12584:	8809883a 	mov	r4,r17
   12588:	dfc00217 	ldw	ra,8(sp)
   1258c:	dc400117 	ldw	r17,4(sp)
   12590:	dc000017 	ldw	r16,0(sp)
   12594:	dec00304 	addi	sp,sp,12
   12598:	001be141 	jmpi	1be14 <__malloc_unlock>
   1259c:	80bffe17 	ldw	r2,-8(r16)
   125a0:	50c00204 	addi	r3,r10,8
   125a4:	4091c83a 	sub	r8,r8,r2
   125a8:	41000217 	ldw	r4,8(r8)
   125ac:	388f883a 	add	r7,r7,r2
   125b0:	20c06126 	beq	r4,r3,12738 <_free_r+0x268>
   125b4:	40800317 	ldw	r2,12(r8)
   125b8:	3247883a 	add	r3,r6,r9
   125bc:	000b883a 	mov	r5,zero
   125c0:	11000215 	stw	r4,8(r2)
   125c4:	20800315 	stw	r2,12(r4)
   125c8:	18800117 	ldw	r2,4(r3)
   125cc:	1080004c 	andi	r2,r2,1
   125d0:	103fdd26 	beq	r2,zero,12548 <_free_r+0x78>
   125d4:	38800054 	ori	r2,r7,1
   125d8:	3a07883a 	add	r3,r7,r8
   125dc:	280ac03a 	cmpne	r5,r5,zero
   125e0:	40800115 	stw	r2,4(r8)
   125e4:	19c00015 	stw	r7,0(r3)
   125e8:	283fe61e 	bne	r5,zero,12584 <_free_r+0xb4>
   125ec:	00807fc4 	movi	r2,511
   125f0:	11c01f2e 	bgeu	r2,r7,12670 <_free_r+0x1a0>
   125f4:	3806d27a 	srli	r3,r7,9
   125f8:	1800481e 	bne	r3,zero,1271c <_free_r+0x24c>
   125fc:	3804d0fa 	srli	r2,r7,3
   12600:	100690fa 	slli	r3,r2,3
   12604:	1acd883a 	add	r6,r3,r11
   12608:	31400217 	ldw	r5,8(r6)
   1260c:	31405926 	beq	r6,r5,12774 <_free_r+0x2a4>
   12610:	28800117 	ldw	r2,4(r5)
   12614:	00ffff04 	movi	r3,-4
   12618:	10c4703a 	and	r2,r2,r3
   1261c:	3880022e 	bgeu	r7,r2,12628 <_free_r+0x158>
   12620:	29400217 	ldw	r5,8(r5)
   12624:	317ffa1e 	bne	r6,r5,12610 <_free_r+0x140>
   12628:	29800317 	ldw	r6,12(r5)
   1262c:	41800315 	stw	r6,12(r8)
   12630:	41400215 	stw	r5,8(r8)
   12634:	8809883a 	mov	r4,r17
   12638:	2a000315 	stw	r8,12(r5)
   1263c:	32000215 	stw	r8,8(r6)
   12640:	dfc00217 	ldw	ra,8(sp)
   12644:	dc400117 	ldw	r17,4(sp)
   12648:	dc000017 	ldw	r16,0(sp)
   1264c:	dec00304 	addi	sp,sp,12
   12650:	001be141 	jmpi	1be14 <__malloc_unlock>
   12654:	dfc00217 	ldw	ra,8(sp)
   12658:	dc400117 	ldw	r17,4(sp)
   1265c:	dc000017 	ldw	r16,0(sp)
   12660:	dec00304 	addi	sp,sp,12
   12664:	f800283a 	ret
   12668:	31000217 	ldw	r4,8(r6)
   1266c:	003fbd06 	br	12564 <_free_r+0x94>
   12670:	3806d0fa 	srli	r3,r7,3
   12674:	00800044 	movi	r2,1
   12678:	51400117 	ldw	r5,4(r10)
   1267c:	180890fa 	slli	r4,r3,3
   12680:	1807d0ba 	srai	r3,r3,2
   12684:	22c9883a 	add	r4,r4,r11
   12688:	21800217 	ldw	r6,8(r4)
   1268c:	10c4983a 	sll	r2,r2,r3
   12690:	41000315 	stw	r4,12(r8)
   12694:	41800215 	stw	r6,8(r8)
   12698:	288ab03a 	or	r5,r5,r2
   1269c:	22000215 	stw	r8,8(r4)
   126a0:	8809883a 	mov	r4,r17
   126a4:	51400115 	stw	r5,4(r10)
   126a8:	32000315 	stw	r8,12(r6)
   126ac:	dfc00217 	ldw	ra,8(sp)
   126b0:	dc400117 	ldw	r17,4(sp)
   126b4:	dc000017 	ldw	r16,0(sp)
   126b8:	dec00304 	addi	sp,sp,12
   126bc:	001be141 	jmpi	1be14 <__malloc_unlock>
   126c0:	2880004c 	andi	r2,r5,1
   126c4:	3a4d883a 	add	r6,r7,r9
   126c8:	1000071e 	bne	r2,zero,126e8 <_free_r+0x218>
   126cc:	80bffe17 	ldw	r2,-8(r16)
   126d0:	4091c83a 	sub	r8,r8,r2
   126d4:	41000317 	ldw	r4,12(r8)
   126d8:	40c00217 	ldw	r3,8(r8)
   126dc:	308d883a 	add	r6,r6,r2
   126e0:	20c00215 	stw	r3,8(r4)
   126e4:	19000315 	stw	r4,12(r3)
   126e8:	008000b4 	movhi	r2,2
   126ec:	10834104 	addi	r2,r2,3332
   126f0:	11000017 	ldw	r4,0(r2)
   126f4:	30c00054 	ori	r3,r6,1
   126f8:	52000215 	stw	r8,8(r10)
   126fc:	40c00115 	stw	r3,4(r8)
   12700:	313fa036 	bltu	r6,r4,12584 <_free_r+0xb4>
   12704:	008000b4 	movhi	r2,2
   12708:	108a1804 	addi	r2,r2,10336
   1270c:	11400017 	ldw	r5,0(r2)
   12710:	8809883a 	mov	r4,r17
   12714:	00123a40 	call	123a4 <_malloc_trim_r>
   12718:	003f9a06 	br	12584 <_free_r+0xb4>
   1271c:	00800104 	movi	r2,4
   12720:	10c0072e 	bgeu	r2,r3,12740 <_free_r+0x270>
   12724:	00800504 	movi	r2,20
   12728:	10c01936 	bltu	r2,r3,12790 <_free_r+0x2c0>
   1272c:	188016c4 	addi	r2,r3,91
   12730:	100690fa 	slli	r3,r2,3
   12734:	003fb306 	br	12604 <_free_r+0x134>
   12738:	01400044 	movi	r5,1
   1273c:	003f7e06 	br	12538 <_free_r+0x68>
   12740:	3804d1ba 	srli	r2,r7,6
   12744:	10800e04 	addi	r2,r2,56
   12748:	100690fa 	slli	r3,r2,3
   1274c:	003fad06 	br	12604 <_free_r+0x134>
   12750:	22000315 	stw	r8,12(r4)
   12754:	22000215 	stw	r8,8(r4)
   12758:	3a05883a 	add	r2,r7,r8
   1275c:	38c00054 	ori	r3,r7,1
   12760:	11c00015 	stw	r7,0(r2)
   12764:	41000215 	stw	r4,8(r8)
   12768:	40c00115 	stw	r3,4(r8)
   1276c:	41000315 	stw	r4,12(r8)
   12770:	003f8406 	br	12584 <_free_r+0xb4>
   12774:	1005d0ba 	srai	r2,r2,2
   12778:	00c00044 	movi	r3,1
   1277c:	51000117 	ldw	r4,4(r10)
   12780:	1886983a 	sll	r3,r3,r2
   12784:	20c8b03a 	or	r4,r4,r3
   12788:	51000115 	stw	r4,4(r10)
   1278c:	003fa706 	br	1262c <_free_r+0x15c>
   12790:	00801504 	movi	r2,84
   12794:	10c00436 	bltu	r2,r3,127a8 <_free_r+0x2d8>
   12798:	3804d33a 	srli	r2,r7,12
   1279c:	10801b84 	addi	r2,r2,110
   127a0:	100690fa 	slli	r3,r2,3
   127a4:	003f9706 	br	12604 <_free_r+0x134>
   127a8:	00805504 	movi	r2,340
   127ac:	10c00436 	bltu	r2,r3,127c0 <_free_r+0x2f0>
   127b0:	3804d3fa 	srli	r2,r7,15
   127b4:	10801dc4 	addi	r2,r2,119
   127b8:	100690fa 	slli	r3,r2,3
   127bc:	003f9106 	br	12604 <_free_r+0x134>
   127c0:	00815504 	movi	r2,1364
   127c4:	10c0032e 	bgeu	r2,r3,127d4 <_free_r+0x304>
   127c8:	00801f84 	movi	r2,126
   127cc:	00c0fc04 	movi	r3,1008
   127d0:	003f8c06 	br	12604 <_free_r+0x134>
   127d4:	3804d4ba 	srli	r2,r7,18
   127d8:	10801f04 	addi	r2,r2,124
   127dc:	100690fa 	slli	r3,r2,3
   127e0:	003f8806 	br	12604 <_free_r+0x134>

000127e4 <_fseek_r>:
   127e4:	deffe804 	addi	sp,sp,-96
   127e8:	dd801515 	stw	r22,84(sp)
   127ec:	dcc01215 	stw	r19,72(sp)
   127f0:	dc801115 	stw	r18,68(sp)
   127f4:	dc000f15 	stw	r16,60(sp)
   127f8:	dfc01715 	stw	ra,92(sp)
   127fc:	ddc01615 	stw	r23,88(sp)
   12800:	dd401415 	stw	r21,80(sp)
   12804:	dd001315 	stw	r20,76(sp)
   12808:	dc401015 	stw	r17,64(sp)
   1280c:	2025883a 	mov	r18,r4
   12810:	2821883a 	mov	r16,r5
   12814:	302d883a 	mov	r22,r6
   12818:	3827883a 	mov	r19,r7
   1281c:	20000226 	beq	r4,zero,12828 <_fseek_r+0x44>
   12820:	20800e17 	ldw	r2,56(r4)
   12824:	10007826 	beq	r2,zero,12a08 <_fseek_r+0x224>
   12828:	8080030b 	ldhu	r2,12(r16)
   1282c:	00c04204 	movi	r3,264
   12830:	1080420c 	andi	r2,r2,264
   12834:	10c07926 	beq	r2,r3,12a1c <_fseek_r+0x238>
   12838:	85400a17 	ldw	r21,40(r16)
   1283c:	a800ea26 	beq	r21,zero,12be8 <_fseek_r+0x404>
   12840:	00800044 	movi	r2,1
   12844:	98805f26 	beq	r19,r2,129c4 <_fseek_r+0x1e0>
   12848:	00800084 	movi	r2,2
   1284c:	98801026 	beq	r19,r2,12890 <_fseek_r+0xac>
   12850:	98000f26 	beq	r19,zero,12890 <_fseek_r+0xac>
   12854:	00800584 	movi	r2,22
   12858:	013fffc4 	movi	r4,-1
   1285c:	90800015 	stw	r2,0(r18)
   12860:	2005883a 	mov	r2,r4
   12864:	dfc01717 	ldw	ra,92(sp)
   12868:	ddc01617 	ldw	r23,88(sp)
   1286c:	dd801517 	ldw	r22,84(sp)
   12870:	dd401417 	ldw	r21,80(sp)
   12874:	dd001317 	ldw	r20,76(sp)
   12878:	dcc01217 	ldw	r19,72(sp)
   1287c:	dc801117 	ldw	r18,68(sp)
   12880:	dc401017 	ldw	r17,64(sp)
   12884:	dc000f17 	ldw	r16,60(sp)
   12888:	dec01804 	addi	sp,sp,96
   1288c:	f800283a 	ret
   12890:	81800417 	ldw	r6,16(r16)
   12894:	0023883a 	mov	r17,zero
   12898:	002f883a 	mov	r23,zero
   1289c:	3000a626 	beq	r6,zero,12b38 <_fseek_r+0x354>
   128a0:	8100030b 	ldhu	r4,12(r16)
   128a4:	2082068c 	andi	r2,r4,2074
   128a8:	1000081e 	bne	r2,zero,128cc <_fseek_r+0xe8>
   128ac:	2081000c 	andi	r2,r4,1024
   128b0:	10001b1e 	bne	r2,zero,12920 <_fseek_r+0x13c>
   128b4:	00800074 	movhi	r2,1
   128b8:	1093f604 	addi	r2,r2,20440
   128bc:	a8800926 	beq	r21,r2,128e4 <_fseek_r+0x100>
   128c0:	8080030b 	ldhu	r2,12(r16)
   128c4:	10820014 	ori	r2,r2,2048
   128c8:	8080030d 	sth	r2,12(r16)
   128cc:	9009883a 	mov	r4,r18
   128d0:	800b883a 	mov	r5,r16
   128d4:	00119c40 	call	119c4 <_fflush_r>
   128d8:	1000a326 	beq	r2,zero,12b68 <_fseek_r+0x384>
   128dc:	013fffc4 	movi	r4,-1
   128e0:	003fdf06 	br	12860 <_fseek_r+0x7c>
   128e4:	8140038f 	ldh	r5,14(r16)
   128e8:	283ff516 	blt	r5,zero,128c0 <_fseek_r+0xdc>
   128ec:	9009883a 	mov	r4,r18
   128f0:	d80d883a 	mov	r6,sp
   128f4:	0012c440 	call	12c44 <_fstat_r>
   128f8:	103ff11e 	bne	r2,zero,128c0 <_fseek_r+0xdc>
   128fc:	d8800117 	ldw	r2,4(sp)
   12900:	00e00014 	movui	r3,32768
   12904:	10bc000c 	andi	r2,r2,61440
   12908:	10ffed1e 	bne	r2,r3,128c0 <_fseek_r+0xdc>
   1290c:	80c0030b 	ldhu	r3,12(r16)
   12910:	00810004 	movi	r2,1024
   12914:	80801315 	stw	r2,76(r16)
   12918:	1886b03a 	or	r3,r3,r2
   1291c:	80c0030d 	sth	r3,12(r16)
   12920:	9800701e 	bne	r19,zero,12ae4 <_fseek_r+0x300>
   12924:	b029883a 	mov	r20,r22
   12928:	b804c03a 	cmpne	r2,r23,zero
   1292c:	10003f1e 	bne	r2,zero,12a2c <_fseek_r+0x248>
   12930:	8100030b 	ldhu	r4,12(r16)
   12934:	2084000c 	andi	r2,r4,4096
   12938:	1000a126 	beq	r2,zero,12bc0 <_fseek_r+0x3dc>
   1293c:	81801417 	ldw	r6,80(r16)
   12940:	80c00117 	ldw	r3,4(r16)
   12944:	81400c17 	ldw	r5,48(r16)
   12948:	30e3c83a 	sub	r17,r6,r3
   1294c:	28008026 	beq	r5,zero,12b50 <_fseek_r+0x36c>
   12950:	81c00f17 	ldw	r7,60(r16)
   12954:	89e3c83a 	sub	r17,r17,r7
   12958:	80800e17 	ldw	r2,56(r16)
   1295c:	81800417 	ldw	r6,16(r16)
   12960:	88c7883a 	add	r3,r17,r3
   12964:	1185c83a 	sub	r2,r2,r6
   12968:	11cf883a 	add	r7,r2,r7
   1296c:	1887c83a 	sub	r3,r3,r2
   12970:	2088000c 	andi	r2,r4,8192
   12974:	10003e1e 	bne	r2,zero,12a70 <_fseek_r+0x28c>
   12978:	a0c03d16 	blt	r20,r3,12a70 <_fseek_r+0x28c>
   1297c:	38c5883a 	add	r2,r7,r3
   12980:	a0803b2e 	bgeu	r20,r2,12a70 <_fseek_r+0x28c>
   12984:	a0c5c83a 	sub	r2,r20,r3
   12988:	3887c83a 	sub	r3,r7,r2
   1298c:	3085883a 	add	r2,r6,r2
   12990:	80800015 	stw	r2,0(r16)
   12994:	80c00115 	stw	r3,4(r16)
   12998:	28000526 	beq	r5,zero,129b0 <_fseek_r+0x1cc>
   1299c:	80801004 	addi	r2,r16,64
   129a0:	28800226 	beq	r5,r2,129ac <_fseek_r+0x1c8>
   129a4:	9009883a 	mov	r4,r18
   129a8:	00124d00 	call	124d0 <_free_r>
   129ac:	80000c15 	stw	zero,48(r16)
   129b0:	8080030b 	ldhu	r2,12(r16)
   129b4:	0009883a 	mov	r4,zero
   129b8:	10bff7cc 	andi	r2,r2,65503
   129bc:	8080030d 	sth	r2,12(r16)
   129c0:	003fa706 	br	12860 <_fseek_r+0x7c>
   129c4:	9009883a 	mov	r4,r18
   129c8:	800b883a 	mov	r5,r16
   129cc:	00119c40 	call	119c4 <_fflush_r>
   129d0:	8100030b 	ldhu	r4,12(r16)
   129d4:	2084000c 	andi	r2,r4,4096
   129d8:	10008726 	beq	r2,zero,12bf8 <_fseek_r+0x414>
   129dc:	84401417 	ldw	r17,80(r16)
   129e0:	2080010c 	andi	r2,r4,4
   129e4:	1000171e 	bne	r2,zero,12a44 <_fseek_r+0x260>
   129e8:	2080020c 	andi	r2,r4,8
   129ec:	10003b26 	beq	r2,zero,12adc <_fseek_r+0x2f8>
   129f0:	80800017 	ldw	r2,0(r16)
   129f4:	10003926 	beq	r2,zero,12adc <_fseek_r+0x2f8>
   129f8:	81800417 	ldw	r6,16(r16)
   129fc:	1185c83a 	sub	r2,r2,r6
   12a00:	88a3883a 	add	r17,r17,r2
   12a04:	00001606 	br	12a60 <_fseek_r+0x27c>
   12a08:	0011ef00 	call	11ef0 <__sinit>
   12a0c:	8080030b 	ldhu	r2,12(r16)
   12a10:	00c04204 	movi	r3,264
   12a14:	1080420c 	andi	r2,r2,264
   12a18:	10ff871e 	bne	r2,r3,12838 <_fseek_r+0x54>
   12a1c:	9009883a 	mov	r4,r18
   12a20:	800b883a 	mov	r5,r16
   12a24:	00119c40 	call	119c4 <_fflush_r>
   12a28:	003f8306 	br	12838 <_fseek_r+0x54>
   12a2c:	81400c17 	ldw	r5,48(r16)
   12a30:	28004526 	beq	r5,zero,12b48 <_fseek_r+0x364>
   12a34:	8100030b 	ldhu	r4,12(r16)
   12a38:	80c00117 	ldw	r3,4(r16)
   12a3c:	81c00f17 	ldw	r7,60(r16)
   12a40:	003fc506 	br	12958 <_fseek_r+0x174>
   12a44:	80c00117 	ldw	r3,4(r16)
   12a48:	80800c17 	ldw	r2,48(r16)
   12a4c:	88e3c83a 	sub	r17,r17,r3
   12a50:	10002226 	beq	r2,zero,12adc <_fseek_r+0x2f8>
   12a54:	81c00f17 	ldw	r7,60(r16)
   12a58:	81800417 	ldw	r6,16(r16)
   12a5c:	89e3c83a 	sub	r17,r17,r7
   12a60:	b46d883a 	add	r22,r22,r17
   12a64:	0027883a 	mov	r19,zero
   12a68:	05c00044 	movi	r23,1
   12a6c:	003f8b06 	br	1289c <_fseek_r+0xb8>
   12a70:	80801317 	ldw	r2,76(r16)
   12a74:	81400717 	ldw	r5,28(r16)
   12a78:	9009883a 	mov	r4,r18
   12a7c:	0085c83a 	sub	r2,zero,r2
   12a80:	a0a2703a 	and	r17,r20,r2
   12a84:	880d883a 	mov	r6,r17
   12a88:	000f883a 	mov	r7,zero
   12a8c:	a83ee83a 	callr	r21
   12a90:	00ffffc4 	movi	r3,-1
   12a94:	10ff8d26 	beq	r2,r3,128cc <_fseek_r+0xe8>
   12a98:	80800417 	ldw	r2,16(r16)
   12a9c:	81400c17 	ldw	r5,48(r16)
   12aa0:	80000115 	stw	zero,4(r16)
   12aa4:	80800015 	stw	r2,0(r16)
   12aa8:	28000526 	beq	r5,zero,12ac0 <_fseek_r+0x2dc>
   12aac:	80801004 	addi	r2,r16,64
   12ab0:	28800226 	beq	r5,r2,12abc <_fseek_r+0x2d8>
   12ab4:	9009883a 	mov	r4,r18
   12ab8:	00124d00 	call	124d0 <_free_r>
   12abc:	80000c15 	stw	zero,48(r16)
   12ac0:	8080030b 	ldhu	r2,12(r16)
   12ac4:	a463c83a 	sub	r17,r20,r17
   12ac8:	10bff7cc 	andi	r2,r2,65503
   12acc:	8080030d 	sth	r2,12(r16)
   12ad0:	88000c1e 	bne	r17,zero,12b04 <_fseek_r+0x320>
   12ad4:	0009883a 	mov	r4,zero
   12ad8:	003f6106 	br	12860 <_fseek_r+0x7c>
   12adc:	81800417 	ldw	r6,16(r16)
   12ae0:	003fdf06 	br	12a60 <_fseek_r+0x27c>
   12ae4:	8140038f 	ldh	r5,14(r16)
   12ae8:	9009883a 	mov	r4,r18
   12aec:	d80d883a 	mov	r6,sp
   12af0:	0012c440 	call	12c44 <_fstat_r>
   12af4:	103f751e 	bne	r2,zero,128cc <_fseek_r+0xe8>
   12af8:	d8800417 	ldw	r2,16(sp)
   12afc:	b0a9883a 	add	r20,r22,r2
   12b00:	003f8906 	br	12928 <_fseek_r+0x144>
   12b04:	9009883a 	mov	r4,r18
   12b08:	800b883a 	mov	r5,r16
   12b0c:	00149d00 	call	149d0 <__srefill_r>
   12b10:	103f6e1e 	bne	r2,zero,128cc <_fseek_r+0xe8>
   12b14:	80c00117 	ldw	r3,4(r16)
   12b18:	1c7f6c36 	bltu	r3,r17,128cc <_fseek_r+0xe8>
   12b1c:	80800017 	ldw	r2,0(r16)
   12b20:	1c47c83a 	sub	r3,r3,r17
   12b24:	0009883a 	mov	r4,zero
   12b28:	1445883a 	add	r2,r2,r17
   12b2c:	80c00115 	stw	r3,4(r16)
   12b30:	80800015 	stw	r2,0(r16)
   12b34:	003f4a06 	br	12860 <_fseek_r+0x7c>
   12b38:	9009883a 	mov	r4,r18
   12b3c:	800b883a 	mov	r5,r16
   12b40:	00133e00 	call	133e0 <__smakebuf_r>
   12b44:	003f5606 	br	128a0 <_fseek_r+0xbc>
   12b48:	8100030b 	ldhu	r4,12(r16)
   12b4c:	80c00117 	ldw	r3,4(r16)
   12b50:	80800017 	ldw	r2,0(r16)
   12b54:	81800417 	ldw	r6,16(r16)
   12b58:	1185c83a 	sub	r2,r2,r6
   12b5c:	10cf883a 	add	r7,r2,r3
   12b60:	8887c83a 	sub	r3,r17,r2
   12b64:	003f8206 	br	12970 <_fseek_r+0x18c>
   12b68:	81400717 	ldw	r5,28(r16)
   12b6c:	b00d883a 	mov	r6,r22
   12b70:	980f883a 	mov	r7,r19
   12b74:	9009883a 	mov	r4,r18
   12b78:	a83ee83a 	callr	r21
   12b7c:	00ffffc4 	movi	r3,-1
   12b80:	10ff5626 	beq	r2,r3,128dc <_fseek_r+0xf8>
   12b84:	81400c17 	ldw	r5,48(r16)
   12b88:	28000526 	beq	r5,zero,12ba0 <_fseek_r+0x3bc>
   12b8c:	80801004 	addi	r2,r16,64
   12b90:	28800226 	beq	r5,r2,12b9c <_fseek_r+0x3b8>
   12b94:	9009883a 	mov	r4,r18
   12b98:	00124d00 	call	124d0 <_free_r>
   12b9c:	80000c15 	stw	zero,48(r16)
   12ba0:	8080030b 	ldhu	r2,12(r16)
   12ba4:	80c00417 	ldw	r3,16(r16)
   12ba8:	0009883a 	mov	r4,zero
   12bac:	10bdf7cc 	andi	r2,r2,63455
   12bb0:	8080030d 	sth	r2,12(r16)
   12bb4:	80c00015 	stw	r3,0(r16)
   12bb8:	80000115 	stw	zero,4(r16)
   12bbc:	003f2806 	br	12860 <_fseek_r+0x7c>
   12bc0:	81400717 	ldw	r5,28(r16)
   12bc4:	000d883a 	mov	r6,zero
   12bc8:	9009883a 	mov	r4,r18
   12bcc:	01c00044 	movi	r7,1
   12bd0:	a83ee83a 	callr	r21
   12bd4:	100d883a 	mov	r6,r2
   12bd8:	00bfffc4 	movi	r2,-1
   12bdc:	30bf3b26 	beq	r6,r2,128cc <_fseek_r+0xe8>
   12be0:	8100030b 	ldhu	r4,12(r16)
   12be4:	003f5606 	br	12940 <_fseek_r+0x15c>
   12be8:	00800744 	movi	r2,29
   12bec:	013fffc4 	movi	r4,-1
   12bf0:	90800015 	stw	r2,0(r18)
   12bf4:	003f1a06 	br	12860 <_fseek_r+0x7c>
   12bf8:	81400717 	ldw	r5,28(r16)
   12bfc:	980f883a 	mov	r7,r19
   12c00:	9009883a 	mov	r4,r18
   12c04:	000d883a 	mov	r6,zero
   12c08:	a83ee83a 	callr	r21
   12c0c:	1023883a 	mov	r17,r2
   12c10:	00bfffc4 	movi	r2,-1
   12c14:	88bf3126 	beq	r17,r2,128dc <_fseek_r+0xf8>
   12c18:	8100030b 	ldhu	r4,12(r16)
   12c1c:	003f7006 	br	129e0 <_fseek_r+0x1fc>

00012c20 <fseek>:
   12c20:	008000b4 	movhi	r2,2
   12c24:	10833f04 	addi	r2,r2,3324
   12c28:	2013883a 	mov	r9,r4
   12c2c:	11000017 	ldw	r4,0(r2)
   12c30:	2805883a 	mov	r2,r5
   12c34:	300f883a 	mov	r7,r6
   12c38:	480b883a 	mov	r5,r9
   12c3c:	100d883a 	mov	r6,r2
   12c40:	00127e41 	jmpi	127e4 <_fseek_r>

00012c44 <_fstat_r>:
   12c44:	defffd04 	addi	sp,sp,-12
   12c48:	dc000015 	stw	r16,0(sp)
   12c4c:	040000b4 	movhi	r16,2
   12c50:	840a1704 	addi	r16,r16,10332
   12c54:	dc400115 	stw	r17,4(sp)
   12c58:	80000015 	stw	zero,0(r16)
   12c5c:	2023883a 	mov	r17,r4
   12c60:	2809883a 	mov	r4,r5
   12c64:	300b883a 	mov	r5,r6
   12c68:	dfc00215 	stw	ra,8(sp)
   12c6c:	001b7380 	call	1b738 <fstat>
   12c70:	1007883a 	mov	r3,r2
   12c74:	00bfffc4 	movi	r2,-1
   12c78:	18800626 	beq	r3,r2,12c94 <_fstat_r+0x50>
   12c7c:	1805883a 	mov	r2,r3
   12c80:	dfc00217 	ldw	ra,8(sp)
   12c84:	dc400117 	ldw	r17,4(sp)
   12c88:	dc000017 	ldw	r16,0(sp)
   12c8c:	dec00304 	addi	sp,sp,12
   12c90:	f800283a 	ret
   12c94:	80800017 	ldw	r2,0(r16)
   12c98:	103ff826 	beq	r2,zero,12c7c <_fstat_r+0x38>
   12c9c:	88800015 	stw	r2,0(r17)
   12ca0:	1805883a 	mov	r2,r3
   12ca4:	dfc00217 	ldw	ra,8(sp)
   12ca8:	dc400117 	ldw	r17,4(sp)
   12cac:	dc000017 	ldw	r16,0(sp)
   12cb0:	dec00304 	addi	sp,sp,12
   12cb4:	f800283a 	ret

00012cb8 <_ftell_r>:
   12cb8:	defffd04 	addi	sp,sp,-12
   12cbc:	dc400115 	stw	r17,4(sp)
   12cc0:	dc000015 	stw	r16,0(sp)
   12cc4:	dfc00215 	stw	ra,8(sp)
   12cc8:	2023883a 	mov	r17,r4
   12ccc:	2821883a 	mov	r16,r5
   12cd0:	20000226 	beq	r4,zero,12cdc <_ftell_r+0x24>
   12cd4:	20800e17 	ldw	r2,56(r4)
   12cd8:	10002426 	beq	r2,zero,12d6c <_ftell_r+0xb4>
   12cdc:	80800a17 	ldw	r2,40(r16)
   12ce0:	10002426 	beq	r2,zero,12d74 <_ftell_r+0xbc>
   12ce4:	8809883a 	mov	r4,r17
   12ce8:	800b883a 	mov	r5,r16
   12cec:	00119c40 	call	119c4 <_fflush_r>
   12cf0:	80c0030b 	ldhu	r3,12(r16)
   12cf4:	1884000c 	andi	r2,r3,4096
   12cf8:	10002226 	beq	r2,zero,12d84 <_ftell_r+0xcc>
   12cfc:	81001417 	ldw	r4,80(r16)
   12d00:	1880010c 	andi	r2,r3,4
   12d04:	10000d1e 	bne	r2,zero,12d3c <_ftell_r+0x84>
   12d08:	1880020c 	andi	r2,r3,8
   12d0c:	10001126 	beq	r2,zero,12d54 <_ftell_r+0x9c>
   12d10:	80c00017 	ldw	r3,0(r16)
   12d14:	18000f26 	beq	r3,zero,12d54 <_ftell_r+0x9c>
   12d18:	80800417 	ldw	r2,16(r16)
   12d1c:	1885c83a 	sub	r2,r3,r2
   12d20:	2089883a 	add	r4,r4,r2
   12d24:	2005883a 	mov	r2,r4
   12d28:	dfc00217 	ldw	ra,8(sp)
   12d2c:	dc400117 	ldw	r17,4(sp)
   12d30:	dc000017 	ldw	r16,0(sp)
   12d34:	dec00304 	addi	sp,sp,12
   12d38:	f800283a 	ret
   12d3c:	80800117 	ldw	r2,4(r16)
   12d40:	80c00c17 	ldw	r3,48(r16)
   12d44:	2089c83a 	sub	r4,r4,r2
   12d48:	18000226 	beq	r3,zero,12d54 <_ftell_r+0x9c>
   12d4c:	80800f17 	ldw	r2,60(r16)
   12d50:	2089c83a 	sub	r4,r4,r2
   12d54:	2005883a 	mov	r2,r4
   12d58:	dfc00217 	ldw	ra,8(sp)
   12d5c:	dc400117 	ldw	r17,4(sp)
   12d60:	dc000017 	ldw	r16,0(sp)
   12d64:	dec00304 	addi	sp,sp,12
   12d68:	f800283a 	ret
   12d6c:	0011ef00 	call	11ef0 <__sinit>
   12d70:	003fda06 	br	12cdc <_ftell_r+0x24>
   12d74:	00800744 	movi	r2,29
   12d78:	013fffc4 	movi	r4,-1
   12d7c:	88800015 	stw	r2,0(r17)
   12d80:	003ff406 	br	12d54 <_ftell_r+0x9c>
   12d84:	80c00a17 	ldw	r3,40(r16)
   12d88:	81400717 	ldw	r5,28(r16)
   12d8c:	8809883a 	mov	r4,r17
   12d90:	000d883a 	mov	r6,zero
   12d94:	01c00044 	movi	r7,1
   12d98:	183ee83a 	callr	r3
   12d9c:	1009883a 	mov	r4,r2
   12da0:	00bfffc4 	movi	r2,-1
   12da4:	20bfeb26 	beq	r4,r2,12d54 <_ftell_r+0x9c>
   12da8:	80c0030b 	ldhu	r3,12(r16)
   12dac:	003fd406 	br	12d00 <_ftell_r+0x48>

00012db0 <ftell>:
   12db0:	008000b4 	movhi	r2,2
   12db4:	10833f04 	addi	r2,r2,3324
   12db8:	200b883a 	mov	r5,r4
   12dbc:	11000017 	ldw	r4,0(r2)
   12dc0:	0012cb81 	jmpi	12cb8 <_ftell_r>

00012dc4 <__sfvwrite_r>:
   12dc4:	30800217 	ldw	r2,8(r6)
   12dc8:	defff504 	addi	sp,sp,-44
   12dcc:	df000915 	stw	fp,36(sp)
   12dd0:	dd800715 	stw	r22,28(sp)
   12dd4:	dc800315 	stw	r18,12(sp)
   12dd8:	dfc00a15 	stw	ra,40(sp)
   12ddc:	ddc00815 	stw	r23,32(sp)
   12de0:	dd400615 	stw	r21,24(sp)
   12de4:	dd000515 	stw	r20,20(sp)
   12de8:	dcc00415 	stw	r19,16(sp)
   12dec:	dc400215 	stw	r17,8(sp)
   12df0:	dc000115 	stw	r16,4(sp)
   12df4:	302d883a 	mov	r22,r6
   12df8:	2039883a 	mov	fp,r4
   12dfc:	2825883a 	mov	r18,r5
   12e00:	10001c26 	beq	r2,zero,12e74 <__sfvwrite_r+0xb0>
   12e04:	29c0030b 	ldhu	r7,12(r5)
   12e08:	3880020c 	andi	r2,r7,8
   12e0c:	10002726 	beq	r2,zero,12eac <__sfvwrite_r+0xe8>
   12e10:	28800417 	ldw	r2,16(r5)
   12e14:	10002526 	beq	r2,zero,12eac <__sfvwrite_r+0xe8>
   12e18:	3880008c 	andi	r2,r7,2
   12e1c:	b5400017 	ldw	r21,0(r22)
   12e20:	10002826 	beq	r2,zero,12ec4 <__sfvwrite_r+0x100>
   12e24:	0021883a 	mov	r16,zero
   12e28:	0023883a 	mov	r17,zero
   12e2c:	880d883a 	mov	r6,r17
   12e30:	e009883a 	mov	r4,fp
   12e34:	00810004 	movi	r2,1024
   12e38:	80006e26 	beq	r16,zero,12ff4 <__sfvwrite_r+0x230>
   12e3c:	800f883a 	mov	r7,r16
   12e40:	91400717 	ldw	r5,28(r18)
   12e44:	1400012e 	bgeu	r2,r16,12e4c <__sfvwrite_r+0x88>
   12e48:	100f883a 	mov	r7,r2
   12e4c:	90c00917 	ldw	r3,36(r18)
   12e50:	183ee83a 	callr	r3
   12e54:	1007883a 	mov	r3,r2
   12e58:	80a1c83a 	sub	r16,r16,r2
   12e5c:	88a3883a 	add	r17,r17,r2
   12e60:	00806d0e 	bge	zero,r2,13018 <__sfvwrite_r+0x254>
   12e64:	b0800217 	ldw	r2,8(r22)
   12e68:	10c5c83a 	sub	r2,r2,r3
   12e6c:	b0800215 	stw	r2,8(r22)
   12e70:	103fee1e 	bne	r2,zero,12e2c <__sfvwrite_r+0x68>
   12e74:	0009883a 	mov	r4,zero
   12e78:	2005883a 	mov	r2,r4
   12e7c:	dfc00a17 	ldw	ra,40(sp)
   12e80:	df000917 	ldw	fp,36(sp)
   12e84:	ddc00817 	ldw	r23,32(sp)
   12e88:	dd800717 	ldw	r22,28(sp)
   12e8c:	dd400617 	ldw	r21,24(sp)
   12e90:	dd000517 	ldw	r20,20(sp)
   12e94:	dcc00417 	ldw	r19,16(sp)
   12e98:	dc800317 	ldw	r18,12(sp)
   12e9c:	dc400217 	ldw	r17,8(sp)
   12ea0:	dc000117 	ldw	r16,4(sp)
   12ea4:	dec00b04 	addi	sp,sp,44
   12ea8:	f800283a 	ret
   12eac:	00175a80 	call	175a8 <__swsetup_r>
   12eb0:	1000e41e 	bne	r2,zero,13244 <__sfvwrite_r+0x480>
   12eb4:	91c0030b 	ldhu	r7,12(r18)
   12eb8:	b5400017 	ldw	r21,0(r22)
   12ebc:	3880008c 	andi	r2,r7,2
   12ec0:	103fd81e 	bne	r2,zero,12e24 <__sfvwrite_r+0x60>
   12ec4:	3880004c 	andi	r2,r7,1
   12ec8:	1005003a 	cmpeq	r2,r2,zero
   12ecc:	10005726 	beq	r2,zero,1302c <__sfvwrite_r+0x268>
   12ed0:	0029883a 	mov	r20,zero
   12ed4:	002f883a 	mov	r23,zero
   12ed8:	a0004226 	beq	r20,zero,12fe4 <__sfvwrite_r+0x220>
   12edc:	3880800c 	andi	r2,r7,512
   12ee0:	94000217 	ldw	r16,8(r18)
   12ee4:	10008b26 	beq	r2,zero,13114 <__sfvwrite_r+0x350>
   12ee8:	800d883a 	mov	r6,r16
   12eec:	a400a536 	bltu	r20,r16,13184 <__sfvwrite_r+0x3c0>
   12ef0:	3881200c 	andi	r2,r7,1152
   12ef4:	10002726 	beq	r2,zero,12f94 <__sfvwrite_r+0x1d0>
   12ef8:	90800517 	ldw	r2,20(r18)
   12efc:	92000417 	ldw	r8,16(r18)
   12f00:	91400017 	ldw	r5,0(r18)
   12f04:	1087883a 	add	r3,r2,r2
   12f08:	1887883a 	add	r3,r3,r2
   12f0c:	1808d7fa 	srli	r4,r3,31
   12f10:	2a21c83a 	sub	r16,r5,r8
   12f14:	80800044 	addi	r2,r16,1
   12f18:	20c9883a 	add	r4,r4,r3
   12f1c:	2027d07a 	srai	r19,r4,1
   12f20:	a085883a 	add	r2,r20,r2
   12f24:	980d883a 	mov	r6,r19
   12f28:	9880022e 	bgeu	r19,r2,12f34 <__sfvwrite_r+0x170>
   12f2c:	1027883a 	mov	r19,r2
   12f30:	100d883a 	mov	r6,r2
   12f34:	3881000c 	andi	r2,r7,1024
   12f38:	1000b826 	beq	r2,zero,1321c <__sfvwrite_r+0x458>
   12f3c:	300b883a 	mov	r5,r6
   12f40:	e009883a 	mov	r4,fp
   12f44:	001359c0 	call	1359c <_malloc_r>
   12f48:	10003126 	beq	r2,zero,13010 <__sfvwrite_r+0x24c>
   12f4c:	91400417 	ldw	r5,16(r18)
   12f50:	1009883a 	mov	r4,r2
   12f54:	800d883a 	mov	r6,r16
   12f58:	1023883a 	mov	r17,r2
   12f5c:	0013e340 	call	13e34 <memcpy>
   12f60:	90c0030b 	ldhu	r3,12(r18)
   12f64:	00beffc4 	movi	r2,-1025
   12f68:	1886703a 	and	r3,r3,r2
   12f6c:	18c02014 	ori	r3,r3,128
   12f70:	90c0030d 	sth	r3,12(r18)
   12f74:	9c07c83a 	sub	r3,r19,r16
   12f78:	8c05883a 	add	r2,r17,r16
   12f7c:	a00d883a 	mov	r6,r20
   12f80:	a021883a 	mov	r16,r20
   12f84:	90800015 	stw	r2,0(r18)
   12f88:	90c00215 	stw	r3,8(r18)
   12f8c:	94400415 	stw	r17,16(r18)
   12f90:	94c00515 	stw	r19,20(r18)
   12f94:	91000017 	ldw	r4,0(r18)
   12f98:	b80b883a 	mov	r5,r23
   12f9c:	a023883a 	mov	r17,r20
   12fa0:	0013ed40 	call	13ed4 <memmove>
   12fa4:	90c00217 	ldw	r3,8(r18)
   12fa8:	90800017 	ldw	r2,0(r18)
   12fac:	a027883a 	mov	r19,r20
   12fb0:	1c07c83a 	sub	r3,r3,r16
   12fb4:	1405883a 	add	r2,r2,r16
   12fb8:	90c00215 	stw	r3,8(r18)
   12fbc:	a021883a 	mov	r16,r20
   12fc0:	90800015 	stw	r2,0(r18)
   12fc4:	b0800217 	ldw	r2,8(r22)
   12fc8:	1405c83a 	sub	r2,r2,r16
   12fcc:	b0800215 	stw	r2,8(r22)
   12fd0:	103fa826 	beq	r2,zero,12e74 <__sfvwrite_r+0xb0>
   12fd4:	a469c83a 	sub	r20,r20,r17
   12fd8:	91c0030b 	ldhu	r7,12(r18)
   12fdc:	bcef883a 	add	r23,r23,r19
   12fe0:	a03fbe1e 	bne	r20,zero,12edc <__sfvwrite_r+0x118>
   12fe4:	adc00017 	ldw	r23,0(r21)
   12fe8:	ad000117 	ldw	r20,4(r21)
   12fec:	ad400204 	addi	r21,r21,8
   12ff0:	003fb906 	br	12ed8 <__sfvwrite_r+0x114>
   12ff4:	ac400017 	ldw	r17,0(r21)
   12ff8:	ac000117 	ldw	r16,4(r21)
   12ffc:	ad400204 	addi	r21,r21,8
   13000:	003f8a06 	br	12e2c <__sfvwrite_r+0x68>
   13004:	91400417 	ldw	r5,16(r18)
   13008:	e009883a 	mov	r4,fp
   1300c:	00124d00 	call	124d0 <_free_r>
   13010:	00800304 	movi	r2,12
   13014:	e0800015 	stw	r2,0(fp)
   13018:	9080030b 	ldhu	r2,12(r18)
   1301c:	013fffc4 	movi	r4,-1
   13020:	10801014 	ori	r2,r2,64
   13024:	9080030d 	sth	r2,12(r18)
   13028:	003f9306 	br	12e78 <__sfvwrite_r+0xb4>
   1302c:	0027883a 	mov	r19,zero
   13030:	002f883a 	mov	r23,zero
   13034:	d8000015 	stw	zero,0(sp)
   13038:	0029883a 	mov	r20,zero
   1303c:	98001e26 	beq	r19,zero,130b8 <__sfvwrite_r+0x2f4>
   13040:	d8c00017 	ldw	r3,0(sp)
   13044:	1804c03a 	cmpne	r2,r3,zero
   13048:	10005e26 	beq	r2,zero,131c4 <__sfvwrite_r+0x400>
   1304c:	9821883a 	mov	r16,r19
   13050:	a4c0012e 	bgeu	r20,r19,13058 <__sfvwrite_r+0x294>
   13054:	a021883a 	mov	r16,r20
   13058:	91000017 	ldw	r4,0(r18)
   1305c:	90800417 	ldw	r2,16(r18)
   13060:	91800217 	ldw	r6,8(r18)
   13064:	91c00517 	ldw	r7,20(r18)
   13068:	1100022e 	bgeu	r2,r4,13074 <__sfvwrite_r+0x2b0>
   1306c:	31e3883a 	add	r17,r6,r7
   13070:	8c001616 	blt	r17,r16,130cc <__sfvwrite_r+0x308>
   13074:	81c03816 	blt	r16,r7,13158 <__sfvwrite_r+0x394>
   13078:	90c00917 	ldw	r3,36(r18)
   1307c:	91400717 	ldw	r5,28(r18)
   13080:	e009883a 	mov	r4,fp
   13084:	b80d883a 	mov	r6,r23
   13088:	183ee83a 	callr	r3
   1308c:	1023883a 	mov	r17,r2
   13090:	00bfe10e 	bge	zero,r2,13018 <__sfvwrite_r+0x254>
   13094:	a469c83a 	sub	r20,r20,r17
   13098:	a0001826 	beq	r20,zero,130fc <__sfvwrite_r+0x338>
   1309c:	b0800217 	ldw	r2,8(r22)
   130a0:	1445c83a 	sub	r2,r2,r17
   130a4:	b0800215 	stw	r2,8(r22)
   130a8:	103f7226 	beq	r2,zero,12e74 <__sfvwrite_r+0xb0>
   130ac:	9c67c83a 	sub	r19,r19,r17
   130b0:	bc6f883a 	add	r23,r23,r17
   130b4:	983fe21e 	bne	r19,zero,13040 <__sfvwrite_r+0x27c>
   130b8:	adc00017 	ldw	r23,0(r21)
   130bc:	acc00117 	ldw	r19,4(r21)
   130c0:	ad400204 	addi	r21,r21,8
   130c4:	d8000015 	stw	zero,0(sp)
   130c8:	003fdc06 	br	1303c <__sfvwrite_r+0x278>
   130cc:	b80b883a 	mov	r5,r23
   130d0:	880d883a 	mov	r6,r17
   130d4:	0013ed40 	call	13ed4 <memmove>
   130d8:	90c00017 	ldw	r3,0(r18)
   130dc:	e009883a 	mov	r4,fp
   130e0:	900b883a 	mov	r5,r18
   130e4:	1c47883a 	add	r3,r3,r17
   130e8:	90c00015 	stw	r3,0(r18)
   130ec:	00119c40 	call	119c4 <_fflush_r>
   130f0:	103fc91e 	bne	r2,zero,13018 <__sfvwrite_r+0x254>
   130f4:	a469c83a 	sub	r20,r20,r17
   130f8:	a03fe81e 	bne	r20,zero,1309c <__sfvwrite_r+0x2d8>
   130fc:	e009883a 	mov	r4,fp
   13100:	900b883a 	mov	r5,r18
   13104:	00119c40 	call	119c4 <_fflush_r>
   13108:	103fc31e 	bne	r2,zero,13018 <__sfvwrite_r+0x254>
   1310c:	d8000015 	stw	zero,0(sp)
   13110:	003fe206 	br	1309c <__sfvwrite_r+0x2d8>
   13114:	91000017 	ldw	r4,0(r18)
   13118:	90800417 	ldw	r2,16(r18)
   1311c:	1100022e 	bgeu	r2,r4,13128 <__sfvwrite_r+0x364>
   13120:	8023883a 	mov	r17,r16
   13124:	85003136 	bltu	r16,r20,131ec <__sfvwrite_r+0x428>
   13128:	91c00517 	ldw	r7,20(r18)
   1312c:	a1c01836 	bltu	r20,r7,13190 <__sfvwrite_r+0x3cc>
   13130:	90c00917 	ldw	r3,36(r18)
   13134:	91400717 	ldw	r5,28(r18)
   13138:	e009883a 	mov	r4,fp
   1313c:	b80d883a 	mov	r6,r23
   13140:	183ee83a 	callr	r3
   13144:	1021883a 	mov	r16,r2
   13148:	00bfb30e 	bge	zero,r2,13018 <__sfvwrite_r+0x254>
   1314c:	1023883a 	mov	r17,r2
   13150:	1027883a 	mov	r19,r2
   13154:	003f9b06 	br	12fc4 <__sfvwrite_r+0x200>
   13158:	b80b883a 	mov	r5,r23
   1315c:	800d883a 	mov	r6,r16
   13160:	0013ed40 	call	13ed4 <memmove>
   13164:	90c00217 	ldw	r3,8(r18)
   13168:	90800017 	ldw	r2,0(r18)
   1316c:	8023883a 	mov	r17,r16
   13170:	1c07c83a 	sub	r3,r3,r16
   13174:	1405883a 	add	r2,r2,r16
   13178:	90c00215 	stw	r3,8(r18)
   1317c:	90800015 	stw	r2,0(r18)
   13180:	003fc406 	br	13094 <__sfvwrite_r+0x2d0>
   13184:	a00d883a 	mov	r6,r20
   13188:	a021883a 	mov	r16,r20
   1318c:	003f8106 	br	12f94 <__sfvwrite_r+0x1d0>
   13190:	b80b883a 	mov	r5,r23
   13194:	a00d883a 	mov	r6,r20
   13198:	0013ed40 	call	13ed4 <memmove>
   1319c:	90c00217 	ldw	r3,8(r18)
   131a0:	90800017 	ldw	r2,0(r18)
   131a4:	a021883a 	mov	r16,r20
   131a8:	1d07c83a 	sub	r3,r3,r20
   131ac:	1505883a 	add	r2,r2,r20
   131b0:	a023883a 	mov	r17,r20
   131b4:	a027883a 	mov	r19,r20
   131b8:	90c00215 	stw	r3,8(r18)
   131bc:	90800015 	stw	r2,0(r18)
   131c0:	003f8006 	br	12fc4 <__sfvwrite_r+0x200>
   131c4:	b809883a 	mov	r4,r23
   131c8:	01400284 	movi	r5,10
   131cc:	980d883a 	mov	r6,r19
   131d0:	0013cdc0 	call	13cdc <memchr>
   131d4:	10001726 	beq	r2,zero,13234 <__sfvwrite_r+0x470>
   131d8:	15c5c83a 	sub	r2,r2,r23
   131dc:	15000044 	addi	r20,r2,1
   131e0:	00800044 	movi	r2,1
   131e4:	d8800015 	stw	r2,0(sp)
   131e8:	003f9806 	br	1304c <__sfvwrite_r+0x288>
   131ec:	b80b883a 	mov	r5,r23
   131f0:	800d883a 	mov	r6,r16
   131f4:	0013ed40 	call	13ed4 <memmove>
   131f8:	90c00017 	ldw	r3,0(r18)
   131fc:	e009883a 	mov	r4,fp
   13200:	900b883a 	mov	r5,r18
   13204:	1c07883a 	add	r3,r3,r16
   13208:	90c00015 	stw	r3,0(r18)
   1320c:	8027883a 	mov	r19,r16
   13210:	00119c40 	call	119c4 <_fflush_r>
   13214:	103f6b26 	beq	r2,zero,12fc4 <__sfvwrite_r+0x200>
   13218:	003f7f06 	br	13018 <__sfvwrite_r+0x254>
   1321c:	400b883a 	mov	r5,r8
   13220:	e009883a 	mov	r4,fp
   13224:	00143dc0 	call	143dc <_realloc_r>
   13228:	103f7626 	beq	r2,zero,13004 <__sfvwrite_r+0x240>
   1322c:	1023883a 	mov	r17,r2
   13230:	003f5006 	br	12f74 <__sfvwrite_r+0x1b0>
   13234:	00c00044 	movi	r3,1
   13238:	9d000044 	addi	r20,r19,1
   1323c:	d8c00015 	stw	r3,0(sp)
   13240:	003f8206 	br	1304c <__sfvwrite_r+0x288>
   13244:	9080030b 	ldhu	r2,12(r18)
   13248:	00c00244 	movi	r3,9
   1324c:	013fffc4 	movi	r4,-1
   13250:	10801014 	ori	r2,r2,64
   13254:	9080030d 	sth	r2,12(r18)
   13258:	e0c00015 	stw	r3,0(fp)
   1325c:	003f0606 	br	12e78 <__sfvwrite_r+0xb4>

00013260 <_fwalk_reent>:
   13260:	defff704 	addi	sp,sp,-36
   13264:	dcc00315 	stw	r19,12(sp)
   13268:	24c0b804 	addi	r19,r4,736
   1326c:	dd800615 	stw	r22,24(sp)
   13270:	dd400515 	stw	r21,20(sp)
   13274:	dfc00815 	stw	ra,32(sp)
   13278:	ddc00715 	stw	r23,28(sp)
   1327c:	dd000415 	stw	r20,16(sp)
   13280:	dc800215 	stw	r18,8(sp)
   13284:	dc400115 	stw	r17,4(sp)
   13288:	dc000015 	stw	r16,0(sp)
   1328c:	202b883a 	mov	r21,r4
   13290:	282d883a 	mov	r22,r5
   13294:	0011ee00 	call	11ee0 <__sfp_lock_acquire>
   13298:	98002126 	beq	r19,zero,13320 <_fwalk_reent+0xc0>
   1329c:	002f883a 	mov	r23,zero
   132a0:	9c800117 	ldw	r18,4(r19)
   132a4:	9c000217 	ldw	r16,8(r19)
   132a8:	90bfffc4 	addi	r2,r18,-1
   132ac:	10000d16 	blt	r2,zero,132e4 <_fwalk_reent+0x84>
   132b0:	0023883a 	mov	r17,zero
   132b4:	053fffc4 	movi	r20,-1
   132b8:	8080030f 	ldh	r2,12(r16)
   132bc:	8c400044 	addi	r17,r17,1
   132c0:	10000626 	beq	r2,zero,132dc <_fwalk_reent+0x7c>
   132c4:	8080038f 	ldh	r2,14(r16)
   132c8:	800b883a 	mov	r5,r16
   132cc:	a809883a 	mov	r4,r21
   132d0:	15000226 	beq	r2,r20,132dc <_fwalk_reent+0x7c>
   132d4:	b03ee83a 	callr	r22
   132d8:	b8aeb03a 	or	r23,r23,r2
   132dc:	84001704 	addi	r16,r16,92
   132e0:	947ff51e 	bne	r18,r17,132b8 <_fwalk_reent+0x58>
   132e4:	9cc00017 	ldw	r19,0(r19)
   132e8:	983fed1e 	bne	r19,zero,132a0 <_fwalk_reent+0x40>
   132ec:	0011ee40 	call	11ee4 <__sfp_lock_release>
   132f0:	b805883a 	mov	r2,r23
   132f4:	dfc00817 	ldw	ra,32(sp)
   132f8:	ddc00717 	ldw	r23,28(sp)
   132fc:	dd800617 	ldw	r22,24(sp)
   13300:	dd400517 	ldw	r21,20(sp)
   13304:	dd000417 	ldw	r20,16(sp)
   13308:	dcc00317 	ldw	r19,12(sp)
   1330c:	dc800217 	ldw	r18,8(sp)
   13310:	dc400117 	ldw	r17,4(sp)
   13314:	dc000017 	ldw	r16,0(sp)
   13318:	dec00904 	addi	sp,sp,36
   1331c:	f800283a 	ret
   13320:	002f883a 	mov	r23,zero
   13324:	003ff106 	br	132ec <_fwalk_reent+0x8c>

00013328 <_fwalk>:
   13328:	defff804 	addi	sp,sp,-32
   1332c:	dcc00315 	stw	r19,12(sp)
   13330:	24c0b804 	addi	r19,r4,736
   13334:	dd400515 	stw	r21,20(sp)
   13338:	dfc00715 	stw	ra,28(sp)
   1333c:	dd800615 	stw	r22,24(sp)
   13340:	dd000415 	stw	r20,16(sp)
   13344:	dc800215 	stw	r18,8(sp)
   13348:	dc400115 	stw	r17,4(sp)
   1334c:	dc000015 	stw	r16,0(sp)
   13350:	282b883a 	mov	r21,r5
   13354:	0011ee00 	call	11ee0 <__sfp_lock_acquire>
   13358:	98001f26 	beq	r19,zero,133d8 <_fwalk+0xb0>
   1335c:	002d883a 	mov	r22,zero
   13360:	9c800117 	ldw	r18,4(r19)
   13364:	9c000217 	ldw	r16,8(r19)
   13368:	90bfffc4 	addi	r2,r18,-1
   1336c:	10000c16 	blt	r2,zero,133a0 <_fwalk+0x78>
   13370:	0023883a 	mov	r17,zero
   13374:	053fffc4 	movi	r20,-1
   13378:	8080030f 	ldh	r2,12(r16)
   1337c:	8c400044 	addi	r17,r17,1
   13380:	10000526 	beq	r2,zero,13398 <_fwalk+0x70>
   13384:	8080038f 	ldh	r2,14(r16)
   13388:	8009883a 	mov	r4,r16
   1338c:	15000226 	beq	r2,r20,13398 <_fwalk+0x70>
   13390:	a83ee83a 	callr	r21
   13394:	b0acb03a 	or	r22,r22,r2
   13398:	84001704 	addi	r16,r16,92
   1339c:	947ff61e 	bne	r18,r17,13378 <_fwalk+0x50>
   133a0:	9cc00017 	ldw	r19,0(r19)
   133a4:	983fee1e 	bne	r19,zero,13360 <_fwalk+0x38>
   133a8:	0011ee40 	call	11ee4 <__sfp_lock_release>
   133ac:	b005883a 	mov	r2,r22
   133b0:	dfc00717 	ldw	ra,28(sp)
   133b4:	dd800617 	ldw	r22,24(sp)
   133b8:	dd400517 	ldw	r21,20(sp)
   133bc:	dd000417 	ldw	r20,16(sp)
   133c0:	dcc00317 	ldw	r19,12(sp)
   133c4:	dc800217 	ldw	r18,8(sp)
   133c8:	dc400117 	ldw	r17,4(sp)
   133cc:	dc000017 	ldw	r16,0(sp)
   133d0:	dec00804 	addi	sp,sp,32
   133d4:	f800283a 	ret
   133d8:	002d883a 	mov	r22,zero
   133dc:	003ff206 	br	133a8 <_fwalk+0x80>

000133e0 <__smakebuf_r>:
   133e0:	2880030b 	ldhu	r2,12(r5)
   133e4:	deffed04 	addi	sp,sp,-76
   133e8:	dc401015 	stw	r17,64(sp)
   133ec:	1080008c 	andi	r2,r2,2
   133f0:	dc000f15 	stw	r16,60(sp)
   133f4:	dfc01215 	stw	ra,72(sp)
   133f8:	dc801115 	stw	r18,68(sp)
   133fc:	2821883a 	mov	r16,r5
   13400:	2023883a 	mov	r17,r4
   13404:	10000b26 	beq	r2,zero,13434 <__smakebuf_r+0x54>
   13408:	28c010c4 	addi	r3,r5,67
   1340c:	00800044 	movi	r2,1
   13410:	28800515 	stw	r2,20(r5)
   13414:	28c00415 	stw	r3,16(r5)
   13418:	28c00015 	stw	r3,0(r5)
   1341c:	dfc01217 	ldw	ra,72(sp)
   13420:	dc801117 	ldw	r18,68(sp)
   13424:	dc401017 	ldw	r17,64(sp)
   13428:	dc000f17 	ldw	r16,60(sp)
   1342c:	dec01304 	addi	sp,sp,76
   13430:	f800283a 	ret
   13434:	2940038f 	ldh	r5,14(r5)
   13438:	28002116 	blt	r5,zero,134c0 <__smakebuf_r+0xe0>
   1343c:	d80d883a 	mov	r6,sp
   13440:	0012c440 	call	12c44 <_fstat_r>
   13444:	10001e16 	blt	r2,zero,134c0 <__smakebuf_r+0xe0>
   13448:	d8800117 	ldw	r2,4(sp)
   1344c:	00e00014 	movui	r3,32768
   13450:	113c000c 	andi	r4,r2,61440
   13454:	20c03126 	beq	r4,r3,1351c <__smakebuf_r+0x13c>
   13458:	8080030b 	ldhu	r2,12(r16)
   1345c:	00c80004 	movi	r3,8192
   13460:	10820014 	ori	r2,r2,2048
   13464:	8080030d 	sth	r2,12(r16)
   13468:	20c01e26 	beq	r4,r3,134e4 <__smakebuf_r+0x104>
   1346c:	04810004 	movi	r18,1024
   13470:	8809883a 	mov	r4,r17
   13474:	900b883a 	mov	r5,r18
   13478:	001359c0 	call	1359c <_malloc_r>
   1347c:	1009883a 	mov	r4,r2
   13480:	10003126 	beq	r2,zero,13548 <__smakebuf_r+0x168>
   13484:	80c0030b 	ldhu	r3,12(r16)
   13488:	00800074 	movhi	r2,1
   1348c:	1087f504 	addi	r2,r2,8148
   13490:	88800f15 	stw	r2,60(r17)
   13494:	18c02014 	ori	r3,r3,128
   13498:	84800515 	stw	r18,20(r16)
   1349c:	80c0030d 	sth	r3,12(r16)
   134a0:	81000415 	stw	r4,16(r16)
   134a4:	81000015 	stw	r4,0(r16)
   134a8:	dfc01217 	ldw	ra,72(sp)
   134ac:	dc801117 	ldw	r18,68(sp)
   134b0:	dc401017 	ldw	r17,64(sp)
   134b4:	dc000f17 	ldw	r16,60(sp)
   134b8:	dec01304 	addi	sp,sp,76
   134bc:	f800283a 	ret
   134c0:	80c0030b 	ldhu	r3,12(r16)
   134c4:	1880200c 	andi	r2,r3,128
   134c8:	10000426 	beq	r2,zero,134dc <__smakebuf_r+0xfc>
   134cc:	04801004 	movi	r18,64
   134d0:	18820014 	ori	r2,r3,2048
   134d4:	8080030d 	sth	r2,12(r16)
   134d8:	003fe506 	br	13470 <__smakebuf_r+0x90>
   134dc:	04810004 	movi	r18,1024
   134e0:	003ffb06 	br	134d0 <__smakebuf_r+0xf0>
   134e4:	8140038f 	ldh	r5,14(r16)
   134e8:	8809883a 	mov	r4,r17
   134ec:	0018fc00 	call	18fc0 <_isatty_r>
   134f0:	103fde26 	beq	r2,zero,1346c <__smakebuf_r+0x8c>
   134f4:	8080030b 	ldhu	r2,12(r16)
   134f8:	80c010c4 	addi	r3,r16,67
   134fc:	04810004 	movi	r18,1024
   13500:	10800054 	ori	r2,r2,1
   13504:	8080030d 	sth	r2,12(r16)
   13508:	00800044 	movi	r2,1
   1350c:	80c00415 	stw	r3,16(r16)
   13510:	80800515 	stw	r2,20(r16)
   13514:	80c00015 	stw	r3,0(r16)
   13518:	003fd506 	br	13470 <__smakebuf_r+0x90>
   1351c:	80c00a17 	ldw	r3,40(r16)
   13520:	00800074 	movhi	r2,1
   13524:	1093f604 	addi	r2,r2,20440
   13528:	18bfcb1e 	bne	r3,r2,13458 <__smakebuf_r+0x78>
   1352c:	8080030b 	ldhu	r2,12(r16)
   13530:	00c10004 	movi	r3,1024
   13534:	1825883a 	mov	r18,r3
   13538:	10c4b03a 	or	r2,r2,r3
   1353c:	8080030d 	sth	r2,12(r16)
   13540:	80c01315 	stw	r3,76(r16)
   13544:	003fca06 	br	13470 <__smakebuf_r+0x90>
   13548:	8100030b 	ldhu	r4,12(r16)
   1354c:	2080800c 	andi	r2,r4,512
   13550:	103fb21e 	bne	r2,zero,1341c <__smakebuf_r+0x3c>
   13554:	80c010c4 	addi	r3,r16,67
   13558:	21000094 	ori	r4,r4,2
   1355c:	00800044 	movi	r2,1
   13560:	80800515 	stw	r2,20(r16)
   13564:	8100030d 	sth	r4,12(r16)
   13568:	80c00415 	stw	r3,16(r16)
   1356c:	80c00015 	stw	r3,0(r16)
   13570:	003faa06 	br	1341c <__smakebuf_r+0x3c>

00013574 <free>:
   13574:	008000b4 	movhi	r2,2
   13578:	10833f04 	addi	r2,r2,3324
   1357c:	200b883a 	mov	r5,r4
   13580:	11000017 	ldw	r4,0(r2)
   13584:	00124d01 	jmpi	124d0 <_free_r>

00013588 <malloc>:
   13588:	008000b4 	movhi	r2,2
   1358c:	10833f04 	addi	r2,r2,3324
   13590:	200b883a 	mov	r5,r4
   13594:	11000017 	ldw	r4,0(r2)
   13598:	001359c1 	jmpi	1359c <_malloc_r>

0001359c <_malloc_r>:
   1359c:	defff604 	addi	sp,sp,-40
   135a0:	28c002c4 	addi	r3,r5,11
   135a4:	00800584 	movi	r2,22
   135a8:	dc800215 	stw	r18,8(sp)
   135ac:	dfc00915 	stw	ra,36(sp)
   135b0:	df000815 	stw	fp,32(sp)
   135b4:	ddc00715 	stw	r23,28(sp)
   135b8:	dd800615 	stw	r22,24(sp)
   135bc:	dd400515 	stw	r21,20(sp)
   135c0:	dd000415 	stw	r20,16(sp)
   135c4:	dcc00315 	stw	r19,12(sp)
   135c8:	dc400115 	stw	r17,4(sp)
   135cc:	dc000015 	stw	r16,0(sp)
   135d0:	2025883a 	mov	r18,r4
   135d4:	10c01236 	bltu	r2,r3,13620 <_malloc_r+0x84>
   135d8:	04400404 	movi	r17,16
   135dc:	8940142e 	bgeu	r17,r5,13630 <_malloc_r+0x94>
   135e0:	00800304 	movi	r2,12
   135e4:	0007883a 	mov	r3,zero
   135e8:	90800015 	stw	r2,0(r18)
   135ec:	1805883a 	mov	r2,r3
   135f0:	dfc00917 	ldw	ra,36(sp)
   135f4:	df000817 	ldw	fp,32(sp)
   135f8:	ddc00717 	ldw	r23,28(sp)
   135fc:	dd800617 	ldw	r22,24(sp)
   13600:	dd400517 	ldw	r21,20(sp)
   13604:	dd000417 	ldw	r20,16(sp)
   13608:	dcc00317 	ldw	r19,12(sp)
   1360c:	dc800217 	ldw	r18,8(sp)
   13610:	dc400117 	ldw	r17,4(sp)
   13614:	dc000017 	ldw	r16,0(sp)
   13618:	dec00a04 	addi	sp,sp,40
   1361c:	f800283a 	ret
   13620:	00bffe04 	movi	r2,-8
   13624:	18a2703a 	and	r17,r3,r2
   13628:	883fed16 	blt	r17,zero,135e0 <_malloc_r+0x44>
   1362c:	897fec36 	bltu	r17,r5,135e0 <_malloc_r+0x44>
   13630:	9009883a 	mov	r4,r18
   13634:	001bdf40 	call	1bdf4 <__malloc_lock>
   13638:	00807dc4 	movi	r2,503
   1363c:	14402b2e 	bgeu	r2,r17,136ec <_malloc_r+0x150>
   13640:	8806d27a 	srli	r3,r17,9
   13644:	18003f1e 	bne	r3,zero,13744 <_malloc_r+0x1a8>
   13648:	880cd0fa 	srli	r6,r17,3
   1364c:	300490fa 	slli	r2,r6,3
   13650:	02c000b4 	movhi	r11,2
   13654:	5afd9804 	addi	r11,r11,-2464
   13658:	12cb883a 	add	r5,r2,r11
   1365c:	2c000317 	ldw	r16,12(r5)
   13660:	580f883a 	mov	r7,r11
   13664:	2c00041e 	bne	r5,r16,13678 <_malloc_r+0xdc>
   13668:	00000a06 	br	13694 <_malloc_r+0xf8>
   1366c:	1800860e 	bge	r3,zero,13888 <_malloc_r+0x2ec>
   13670:	84000317 	ldw	r16,12(r16)
   13674:	2c000726 	beq	r5,r16,13694 <_malloc_r+0xf8>
   13678:	80800117 	ldw	r2,4(r16)
   1367c:	00ffff04 	movi	r3,-4
   13680:	10c8703a 	and	r4,r2,r3
   13684:	2447c83a 	sub	r3,r4,r17
   13688:	008003c4 	movi	r2,15
   1368c:	10fff70e 	bge	r2,r3,1366c <_malloc_r+0xd0>
   13690:	31bfffc4 	addi	r6,r6,-1
   13694:	32400044 	addi	r9,r6,1
   13698:	028000b4 	movhi	r10,2
   1369c:	52bd9a04 	addi	r10,r10,-2456
   136a0:	54000217 	ldw	r16,8(r10)
   136a4:	8280a026 	beq	r16,r10,13928 <_malloc_r+0x38c>
   136a8:	80800117 	ldw	r2,4(r16)
   136ac:	00ffff04 	movi	r3,-4
   136b0:	10ca703a 	and	r5,r2,r3
   136b4:	2c4dc83a 	sub	r6,r5,r17
   136b8:	008003c4 	movi	r2,15
   136bc:	11808316 	blt	r2,r6,138cc <_malloc_r+0x330>
   136c0:	52800315 	stw	r10,12(r10)
   136c4:	52800215 	stw	r10,8(r10)
   136c8:	30002916 	blt	r6,zero,13770 <_malloc_r+0x1d4>
   136cc:	8147883a 	add	r3,r16,r5
   136d0:	18800117 	ldw	r2,4(r3)
   136d4:	9009883a 	mov	r4,r18
   136d8:	10800054 	ori	r2,r2,1
   136dc:	18800115 	stw	r2,4(r3)
   136e0:	001be140 	call	1be14 <__malloc_unlock>
   136e4:	80c00204 	addi	r3,r16,8
   136e8:	003fc006 	br	135ec <_malloc_r+0x50>
   136ec:	02c000b4 	movhi	r11,2
   136f0:	5afd9804 	addi	r11,r11,-2464
   136f4:	8ac5883a 	add	r2,r17,r11
   136f8:	14000317 	ldw	r16,12(r2)
   136fc:	580f883a 	mov	r7,r11
   13700:	8806d0fa 	srli	r3,r17,3
   13704:	14006c26 	beq	r2,r16,138b8 <_malloc_r+0x31c>
   13708:	80c00117 	ldw	r3,4(r16)
   1370c:	00bfff04 	movi	r2,-4
   13710:	81800317 	ldw	r6,12(r16)
   13714:	1886703a 	and	r3,r3,r2
   13718:	80c7883a 	add	r3,r16,r3
   1371c:	18800117 	ldw	r2,4(r3)
   13720:	81400217 	ldw	r5,8(r16)
   13724:	9009883a 	mov	r4,r18
   13728:	10800054 	ori	r2,r2,1
   1372c:	18800115 	stw	r2,4(r3)
   13730:	31400215 	stw	r5,8(r6)
   13734:	29800315 	stw	r6,12(r5)
   13738:	001be140 	call	1be14 <__malloc_unlock>
   1373c:	80c00204 	addi	r3,r16,8
   13740:	003faa06 	br	135ec <_malloc_r+0x50>
   13744:	00800104 	movi	r2,4
   13748:	10c0052e 	bgeu	r2,r3,13760 <_malloc_r+0x1c4>
   1374c:	00800504 	movi	r2,20
   13750:	10c07836 	bltu	r2,r3,13934 <_malloc_r+0x398>
   13754:	198016c4 	addi	r6,r3,91
   13758:	300490fa 	slli	r2,r6,3
   1375c:	003fbc06 	br	13650 <_malloc_r+0xb4>
   13760:	8804d1ba 	srli	r2,r17,6
   13764:	11800e04 	addi	r6,r2,56
   13768:	300490fa 	slli	r2,r6,3
   1376c:	003fb806 	br	13650 <_malloc_r+0xb4>
   13770:	00807fc4 	movi	r2,511
   13774:	1140bb36 	bltu	r2,r5,13a64 <_malloc_r+0x4c8>
   13778:	2806d0fa 	srli	r3,r5,3
   1377c:	573ffe04 	addi	fp,r10,-8
   13780:	00800044 	movi	r2,1
   13784:	180890fa 	slli	r4,r3,3
   13788:	1807d0ba 	srai	r3,r3,2
   1378c:	e1c00117 	ldw	r7,4(fp)
   13790:	5909883a 	add	r4,r11,r4
   13794:	21400217 	ldw	r5,8(r4)
   13798:	10c4983a 	sll	r2,r2,r3
   1379c:	81000315 	stw	r4,12(r16)
   137a0:	81400215 	stw	r5,8(r16)
   137a4:	388eb03a 	or	r7,r7,r2
   137a8:	2c000315 	stw	r16,12(r5)
   137ac:	24000215 	stw	r16,8(r4)
   137b0:	e1c00115 	stw	r7,4(fp)
   137b4:	4807883a 	mov	r3,r9
   137b8:	4800cd16 	blt	r9,zero,13af0 <_malloc_r+0x554>
   137bc:	1807d0ba 	srai	r3,r3,2
   137c0:	00800044 	movi	r2,1
   137c4:	10c8983a 	sll	r4,r2,r3
   137c8:	39004436 	bltu	r7,r4,138dc <_malloc_r+0x340>
   137cc:	21c4703a 	and	r2,r4,r7
   137d0:	10000a1e 	bne	r2,zero,137fc <_malloc_r+0x260>
   137d4:	2109883a 	add	r4,r4,r4
   137d8:	00bfff04 	movi	r2,-4
   137dc:	4884703a 	and	r2,r9,r2
   137e0:	3906703a 	and	r3,r7,r4
   137e4:	12400104 	addi	r9,r2,4
   137e8:	1800041e 	bne	r3,zero,137fc <_malloc_r+0x260>
   137ec:	2109883a 	add	r4,r4,r4
   137f0:	3904703a 	and	r2,r7,r4
   137f4:	4a400104 	addi	r9,r9,4
   137f8:	103ffc26 	beq	r2,zero,137ec <_malloc_r+0x250>
   137fc:	480490fa 	slli	r2,r9,3
   13800:	4819883a 	mov	r12,r9
   13804:	023fff04 	movi	r8,-4
   13808:	589b883a 	add	r13,r11,r2
   1380c:	6807883a 	mov	r3,r13
   13810:	014003c4 	movi	r5,15
   13814:	1c000317 	ldw	r16,12(r3)
   13818:	1c00041e 	bne	r3,r16,1382c <_malloc_r+0x290>
   1381c:	0000a706 	br	13abc <_malloc_r+0x520>
   13820:	3000ab0e 	bge	r6,zero,13ad0 <_malloc_r+0x534>
   13824:	84000317 	ldw	r16,12(r16)
   13828:	1c00a426 	beq	r3,r16,13abc <_malloc_r+0x520>
   1382c:	80800117 	ldw	r2,4(r16)
   13830:	1204703a 	and	r2,r2,r8
   13834:	144dc83a 	sub	r6,r2,r17
   13838:	29bff90e 	bge	r5,r6,13820 <_malloc_r+0x284>
   1383c:	81000317 	ldw	r4,12(r16)
   13840:	80c00217 	ldw	r3,8(r16)
   13844:	89400054 	ori	r5,r17,1
   13848:	8445883a 	add	r2,r16,r17
   1384c:	20c00215 	stw	r3,8(r4)
   13850:	19000315 	stw	r4,12(r3)
   13854:	81400115 	stw	r5,4(r16)
   13858:	1187883a 	add	r3,r2,r6
   1385c:	31000054 	ori	r4,r6,1
   13860:	50800315 	stw	r2,12(r10)
   13864:	50800215 	stw	r2,8(r10)
   13868:	19800015 	stw	r6,0(r3)
   1386c:	11000115 	stw	r4,4(r2)
   13870:	12800215 	stw	r10,8(r2)
   13874:	12800315 	stw	r10,12(r2)
   13878:	9009883a 	mov	r4,r18
   1387c:	001be140 	call	1be14 <__malloc_unlock>
   13880:	80c00204 	addi	r3,r16,8
   13884:	003f5906 	br	135ec <_malloc_r+0x50>
   13888:	8109883a 	add	r4,r16,r4
   1388c:	20800117 	ldw	r2,4(r4)
   13890:	80c00217 	ldw	r3,8(r16)
   13894:	81400317 	ldw	r5,12(r16)
   13898:	10800054 	ori	r2,r2,1
   1389c:	20800115 	stw	r2,4(r4)
   138a0:	28c00215 	stw	r3,8(r5)
   138a4:	19400315 	stw	r5,12(r3)
   138a8:	9009883a 	mov	r4,r18
   138ac:	001be140 	call	1be14 <__malloc_unlock>
   138b0:	80c00204 	addi	r3,r16,8
   138b4:	003f4d06 	br	135ec <_malloc_r+0x50>
   138b8:	80800204 	addi	r2,r16,8
   138bc:	14000317 	ldw	r16,12(r2)
   138c0:	143f911e 	bne	r2,r16,13708 <_malloc_r+0x16c>
   138c4:	1a400084 	addi	r9,r3,2
   138c8:	003f7306 	br	13698 <_malloc_r+0xfc>
   138cc:	88c00054 	ori	r3,r17,1
   138d0:	8445883a 	add	r2,r16,r17
   138d4:	80c00115 	stw	r3,4(r16)
   138d8:	003fdf06 	br	13858 <_malloc_r+0x2bc>
   138dc:	e4000217 	ldw	r16,8(fp)
   138e0:	00bfff04 	movi	r2,-4
   138e4:	80c00117 	ldw	r3,4(r16)
   138e8:	802d883a 	mov	r22,r16
   138ec:	18aa703a 	and	r21,r3,r2
   138f0:	ac401636 	bltu	r21,r17,1394c <_malloc_r+0x3b0>
   138f4:	ac49c83a 	sub	r4,r21,r17
   138f8:	008003c4 	movi	r2,15
   138fc:	1100130e 	bge	r2,r4,1394c <_malloc_r+0x3b0>
   13900:	88800054 	ori	r2,r17,1
   13904:	8447883a 	add	r3,r16,r17
   13908:	80800115 	stw	r2,4(r16)
   1390c:	20800054 	ori	r2,r4,1
   13910:	18800115 	stw	r2,4(r3)
   13914:	e0c00215 	stw	r3,8(fp)
   13918:	9009883a 	mov	r4,r18
   1391c:	001be140 	call	1be14 <__malloc_unlock>
   13920:	80c00204 	addi	r3,r16,8
   13924:	003f3106 	br	135ec <_malloc_r+0x50>
   13928:	39c00117 	ldw	r7,4(r7)
   1392c:	573ffe04 	addi	fp,r10,-8
   13930:	003fa006 	br	137b4 <_malloc_r+0x218>
   13934:	00801504 	movi	r2,84
   13938:	10c06736 	bltu	r2,r3,13ad8 <_malloc_r+0x53c>
   1393c:	8804d33a 	srli	r2,r17,12
   13940:	11801b84 	addi	r6,r2,110
   13944:	300490fa 	slli	r2,r6,3
   13948:	003f4106 	br	13650 <_malloc_r+0xb4>
   1394c:	d0a6e417 	ldw	r2,-25712(gp)
   13950:	d0e00e17 	ldw	r3,-32712(gp)
   13954:	053fffc4 	movi	r20,-1
   13958:	10800404 	addi	r2,r2,16
   1395c:	88a7883a 	add	r19,r17,r2
   13960:	1d000326 	beq	r3,r20,13970 <_malloc_r+0x3d4>
   13964:	98c3ffc4 	addi	r3,r19,4095
   13968:	00bc0004 	movi	r2,-4096
   1396c:	18a6703a 	and	r19,r3,r2
   13970:	9009883a 	mov	r4,r18
   13974:	980b883a 	mov	r5,r19
   13978:	0014c100 	call	14c10 <_sbrk_r>
   1397c:	1009883a 	mov	r4,r2
   13980:	15000426 	beq	r2,r20,13994 <_malloc_r+0x3f8>
   13984:	854b883a 	add	r5,r16,r21
   13988:	1029883a 	mov	r20,r2
   1398c:	11405a2e 	bgeu	r2,r5,13af8 <_malloc_r+0x55c>
   13990:	87000c26 	beq	r16,fp,139c4 <_malloc_r+0x428>
   13994:	e4000217 	ldw	r16,8(fp)
   13998:	80c00117 	ldw	r3,4(r16)
   1399c:	00bfff04 	movi	r2,-4
   139a0:	1884703a 	and	r2,r3,r2
   139a4:	14400336 	bltu	r2,r17,139b4 <_malloc_r+0x418>
   139a8:	1449c83a 	sub	r4,r2,r17
   139ac:	008003c4 	movi	r2,15
   139b0:	113fd316 	blt	r2,r4,13900 <_malloc_r+0x364>
   139b4:	9009883a 	mov	r4,r18
   139b8:	001be140 	call	1be14 <__malloc_unlock>
   139bc:	0007883a 	mov	r3,zero
   139c0:	003f0a06 	br	135ec <_malloc_r+0x50>
   139c4:	05c000b4 	movhi	r23,2
   139c8:	bdcc2804 	addi	r23,r23,12448
   139cc:	b8800017 	ldw	r2,0(r23)
   139d0:	988d883a 	add	r6,r19,r2
   139d4:	b9800015 	stw	r6,0(r23)
   139d8:	d0e00e17 	ldw	r3,-32712(gp)
   139dc:	00bfffc4 	movi	r2,-1
   139e0:	18808e26 	beq	r3,r2,13c1c <_malloc_r+0x680>
   139e4:	2145c83a 	sub	r2,r4,r5
   139e8:	3085883a 	add	r2,r6,r2
   139ec:	b8800015 	stw	r2,0(r23)
   139f0:	20c001cc 	andi	r3,r4,7
   139f4:	18005f1e 	bne	r3,zero,13b74 <_malloc_r+0x5d8>
   139f8:	000b883a 	mov	r5,zero
   139fc:	a4c5883a 	add	r2,r20,r19
   13a00:	1083ffcc 	andi	r2,r2,4095
   13a04:	00c40004 	movi	r3,4096
   13a08:	1887c83a 	sub	r3,r3,r2
   13a0c:	28e7883a 	add	r19,r5,r3
   13a10:	9009883a 	mov	r4,r18
   13a14:	980b883a 	mov	r5,r19
   13a18:	0014c100 	call	14c10 <_sbrk_r>
   13a1c:	1007883a 	mov	r3,r2
   13a20:	00bfffc4 	movi	r2,-1
   13a24:	18807a26 	beq	r3,r2,13c10 <_malloc_r+0x674>
   13a28:	1d05c83a 	sub	r2,r3,r20
   13a2c:	9885883a 	add	r2,r19,r2
   13a30:	10c00054 	ori	r3,r2,1
   13a34:	b8800017 	ldw	r2,0(r23)
   13a38:	a021883a 	mov	r16,r20
   13a3c:	a0c00115 	stw	r3,4(r20)
   13a40:	9885883a 	add	r2,r19,r2
   13a44:	b8800015 	stw	r2,0(r23)
   13a48:	e5000215 	stw	r20,8(fp)
   13a4c:	b7003626 	beq	r22,fp,13b28 <_malloc_r+0x58c>
   13a50:	018003c4 	movi	r6,15
   13a54:	35404b36 	bltu	r6,r21,13b84 <_malloc_r+0x5e8>
   13a58:	00800044 	movi	r2,1
   13a5c:	a0800115 	stw	r2,4(r20)
   13a60:	003fcd06 	br	13998 <_malloc_r+0x3fc>
   13a64:	2808d27a 	srli	r4,r5,9
   13a68:	2000371e 	bne	r4,zero,13b48 <_malloc_r+0x5ac>
   13a6c:	2808d0fa 	srli	r4,r5,3
   13a70:	200690fa 	slli	r3,r4,3
   13a74:	1ad1883a 	add	r8,r3,r11
   13a78:	41800217 	ldw	r6,8(r8)
   13a7c:	41805b26 	beq	r8,r6,13bec <_malloc_r+0x650>
   13a80:	30800117 	ldw	r2,4(r6)
   13a84:	00ffff04 	movi	r3,-4
   13a88:	10c4703a 	and	r2,r2,r3
   13a8c:	2880022e 	bgeu	r5,r2,13a98 <_malloc_r+0x4fc>
   13a90:	31800217 	ldw	r6,8(r6)
   13a94:	41bffa1e 	bne	r8,r6,13a80 <_malloc_r+0x4e4>
   13a98:	32000317 	ldw	r8,12(r6)
   13a9c:	39c00117 	ldw	r7,4(r7)
   13aa0:	82000315 	stw	r8,12(r16)
   13aa4:	81800215 	stw	r6,8(r16)
   13aa8:	070000b4 	movhi	fp,2
   13aac:	e73d9804 	addi	fp,fp,-2464
   13ab0:	34000315 	stw	r16,12(r6)
   13ab4:	44000215 	stw	r16,8(r8)
   13ab8:	003f3e06 	br	137b4 <_malloc_r+0x218>
   13abc:	63000044 	addi	r12,r12,1
   13ac0:	608000cc 	andi	r2,r12,3
   13ac4:	10005d26 	beq	r2,zero,13c3c <_malloc_r+0x6a0>
   13ac8:	18c00204 	addi	r3,r3,8
   13acc:	003f5106 	br	13814 <_malloc_r+0x278>
   13ad0:	8089883a 	add	r4,r16,r2
   13ad4:	003f6d06 	br	1388c <_malloc_r+0x2f0>
   13ad8:	00805504 	movi	r2,340
   13adc:	10c02036 	bltu	r2,r3,13b60 <_malloc_r+0x5c4>
   13ae0:	8804d3fa 	srli	r2,r17,15
   13ae4:	11801dc4 	addi	r6,r2,119
   13ae8:	300490fa 	slli	r2,r6,3
   13aec:	003ed806 	br	13650 <_malloc_r+0xb4>
   13af0:	48c000c4 	addi	r3,r9,3
   13af4:	003f3106 	br	137bc <_malloc_r+0x220>
   13af8:	05c000b4 	movhi	r23,2
   13afc:	bdcc2804 	addi	r23,r23,12448
   13b00:	b8800017 	ldw	r2,0(r23)
   13b04:	988d883a 	add	r6,r19,r2
   13b08:	b9800015 	stw	r6,0(r23)
   13b0c:	293fb21e 	bne	r5,r4,139d8 <_malloc_r+0x43c>
   13b10:	2083ffcc 	andi	r2,r4,4095
   13b14:	103fb01e 	bne	r2,zero,139d8 <_malloc_r+0x43c>
   13b18:	e4000217 	ldw	r16,8(fp)
   13b1c:	9d45883a 	add	r2,r19,r21
   13b20:	10800054 	ori	r2,r2,1
   13b24:	80800115 	stw	r2,4(r16)
   13b28:	b8c00017 	ldw	r3,0(r23)
   13b2c:	d0a6e517 	ldw	r2,-25708(gp)
   13b30:	10c0012e 	bgeu	r2,r3,13b38 <_malloc_r+0x59c>
   13b34:	d0e6e515 	stw	r3,-25708(gp)
   13b38:	d0a6e617 	ldw	r2,-25704(gp)
   13b3c:	10ff962e 	bgeu	r2,r3,13998 <_malloc_r+0x3fc>
   13b40:	d0e6e615 	stw	r3,-25704(gp)
   13b44:	003f9406 	br	13998 <_malloc_r+0x3fc>
   13b48:	00800104 	movi	r2,4
   13b4c:	11001e36 	bltu	r2,r4,13bc8 <_malloc_r+0x62c>
   13b50:	2804d1ba 	srli	r2,r5,6
   13b54:	11000e04 	addi	r4,r2,56
   13b58:	200690fa 	slli	r3,r4,3
   13b5c:	003fc506 	br	13a74 <_malloc_r+0x4d8>
   13b60:	00815504 	movi	r2,1364
   13b64:	10c01d2e 	bgeu	r2,r3,13bdc <_malloc_r+0x640>
   13b68:	01801f84 	movi	r6,126
   13b6c:	0080fc04 	movi	r2,1008
   13b70:	003eb706 	br	13650 <_malloc_r+0xb4>
   13b74:	00800204 	movi	r2,8
   13b78:	10cbc83a 	sub	r5,r2,r3
   13b7c:	2169883a 	add	r20,r4,r5
   13b80:	003f9e06 	br	139fc <_malloc_r+0x460>
   13b84:	00bffe04 	movi	r2,-8
   13b88:	a93ffd04 	addi	r4,r21,-12
   13b8c:	2088703a 	and	r4,r4,r2
   13b90:	b10b883a 	add	r5,r22,r4
   13b94:	00c00144 	movi	r3,5
   13b98:	28c00215 	stw	r3,8(r5)
   13b9c:	28c00115 	stw	r3,4(r5)
   13ba0:	b0800117 	ldw	r2,4(r22)
   13ba4:	1080004c 	andi	r2,r2,1
   13ba8:	2084b03a 	or	r2,r4,r2
   13bac:	b0800115 	stw	r2,4(r22)
   13bb0:	313fdd2e 	bgeu	r6,r4,13b28 <_malloc_r+0x58c>
   13bb4:	b1400204 	addi	r5,r22,8
   13bb8:	9009883a 	mov	r4,r18
   13bbc:	00124d00 	call	124d0 <_free_r>
   13bc0:	e4000217 	ldw	r16,8(fp)
   13bc4:	003fd806 	br	13b28 <_malloc_r+0x58c>
   13bc8:	00800504 	movi	r2,20
   13bcc:	11001536 	bltu	r2,r4,13c24 <_malloc_r+0x688>
   13bd0:	210016c4 	addi	r4,r4,91
   13bd4:	200690fa 	slli	r3,r4,3
   13bd8:	003fa606 	br	13a74 <_malloc_r+0x4d8>
   13bdc:	8804d4ba 	srli	r2,r17,18
   13be0:	11801f04 	addi	r6,r2,124
   13be4:	300490fa 	slli	r2,r6,3
   13be8:	003e9906 	br	13650 <_malloc_r+0xb4>
   13bec:	2009d0ba 	srai	r4,r4,2
   13bf0:	014000b4 	movhi	r5,2
   13bf4:	297d9804 	addi	r5,r5,-2464
   13bf8:	00c00044 	movi	r3,1
   13bfc:	28800117 	ldw	r2,4(r5)
   13c00:	1906983a 	sll	r3,r3,r4
   13c04:	10c4b03a 	or	r2,r2,r3
   13c08:	28800115 	stw	r2,4(r5)
   13c0c:	003fa306 	br	13a9c <_malloc_r+0x500>
   13c10:	0027883a 	mov	r19,zero
   13c14:	00c00044 	movi	r3,1
   13c18:	003f8606 	br	13a34 <_malloc_r+0x498>
   13c1c:	d1200e15 	stw	r4,-32712(gp)
   13c20:	003f7306 	br	139f0 <_malloc_r+0x454>
   13c24:	00801504 	movi	r2,84
   13c28:	11001936 	bltu	r2,r4,13c90 <_malloc_r+0x6f4>
   13c2c:	2804d33a 	srli	r2,r5,12
   13c30:	11001b84 	addi	r4,r2,110
   13c34:	200690fa 	slli	r3,r4,3
   13c38:	003f8e06 	br	13a74 <_malloc_r+0x4d8>
   13c3c:	480b883a 	mov	r5,r9
   13c40:	6807883a 	mov	r3,r13
   13c44:	288000cc 	andi	r2,r5,3
   13c48:	18fffe04 	addi	r3,r3,-8
   13c4c:	297fffc4 	addi	r5,r5,-1
   13c50:	10001526 	beq	r2,zero,13ca8 <_malloc_r+0x70c>
   13c54:	18800217 	ldw	r2,8(r3)
   13c58:	10fffa26 	beq	r2,r3,13c44 <_malloc_r+0x6a8>
   13c5c:	2109883a 	add	r4,r4,r4
   13c60:	393f1e36 	bltu	r7,r4,138dc <_malloc_r+0x340>
   13c64:	203f1d26 	beq	r4,zero,138dc <_malloc_r+0x340>
   13c68:	21c4703a 	and	r2,r4,r7
   13c6c:	10000226 	beq	r2,zero,13c78 <_malloc_r+0x6dc>
   13c70:	6013883a 	mov	r9,r12
   13c74:	003ee106 	br	137fc <_malloc_r+0x260>
   13c78:	2109883a 	add	r4,r4,r4
   13c7c:	3904703a 	and	r2,r7,r4
   13c80:	63000104 	addi	r12,r12,4
   13c84:	103ffc26 	beq	r2,zero,13c78 <_malloc_r+0x6dc>
   13c88:	6013883a 	mov	r9,r12
   13c8c:	003edb06 	br	137fc <_malloc_r+0x260>
   13c90:	00805504 	movi	r2,340
   13c94:	11000836 	bltu	r2,r4,13cb8 <_malloc_r+0x71c>
   13c98:	2804d3fa 	srli	r2,r5,15
   13c9c:	11001dc4 	addi	r4,r2,119
   13ca0:	200690fa 	slli	r3,r4,3
   13ca4:	003f7306 	br	13a74 <_malloc_r+0x4d8>
   13ca8:	0104303a 	nor	r2,zero,r4
   13cac:	388e703a 	and	r7,r7,r2
   13cb0:	e1c00115 	stw	r7,4(fp)
   13cb4:	003fe906 	br	13c5c <_malloc_r+0x6c0>
   13cb8:	00815504 	movi	r2,1364
   13cbc:	1100032e 	bgeu	r2,r4,13ccc <_malloc_r+0x730>
   13cc0:	01001f84 	movi	r4,126
   13cc4:	00c0fc04 	movi	r3,1008
   13cc8:	003f6a06 	br	13a74 <_malloc_r+0x4d8>
   13ccc:	2804d4ba 	srli	r2,r5,18
   13cd0:	11001f04 	addi	r4,r2,124
   13cd4:	200690fa 	slli	r3,r4,3
   13cd8:	003f6606 	br	13a74 <_malloc_r+0x4d8>

00013cdc <memchr>:
   13cdc:	008000c4 	movi	r2,3
   13ce0:	29403fcc 	andi	r5,r5,255
   13ce4:	2007883a 	mov	r3,r4
   13ce8:	1180022e 	bgeu	r2,r6,13cf4 <memchr+0x18>
   13cec:	2084703a 	and	r2,r4,r2
   13cf0:	10000b26 	beq	r2,zero,13d20 <memchr+0x44>
   13cf4:	313fffc4 	addi	r4,r6,-1
   13cf8:	3000051e 	bne	r6,zero,13d10 <memchr+0x34>
   13cfc:	00002c06 	br	13db0 <memchr+0xd4>
   13d00:	213fffc4 	addi	r4,r4,-1
   13d04:	00bfffc4 	movi	r2,-1
   13d08:	18c00044 	addi	r3,r3,1
   13d0c:	20802826 	beq	r4,r2,13db0 <memchr+0xd4>
   13d10:	18800003 	ldbu	r2,0(r3)
   13d14:	28bffa1e 	bne	r5,r2,13d00 <memchr+0x24>
   13d18:	1805883a 	mov	r2,r3
   13d1c:	f800283a 	ret
   13d20:	0011883a 	mov	r8,zero
   13d24:	0007883a 	mov	r3,zero
   13d28:	01c00104 	movi	r7,4
   13d2c:	4004923a 	slli	r2,r8,8
   13d30:	18c00044 	addi	r3,r3,1
   13d34:	1151883a 	add	r8,r2,r5
   13d38:	19fffc1e 	bne	r3,r7,13d2c <memchr+0x50>
   13d3c:	02bfbff4 	movhi	r10,65279
   13d40:	52bfbfc4 	addi	r10,r10,-257
   13d44:	02602074 	movhi	r9,32897
   13d48:	4a602004 	addi	r9,r9,-32640
   13d4c:	02c000c4 	movi	r11,3
   13d50:	20800017 	ldw	r2,0(r4)
   13d54:	31bfff04 	addi	r6,r6,-4
   13d58:	200f883a 	mov	r7,r4
   13d5c:	1204f03a 	xor	r2,r2,r8
   13d60:	1287883a 	add	r3,r2,r10
   13d64:	1a46703a 	and	r3,r3,r9
   13d68:	0084303a 	nor	r2,zero,r2
   13d6c:	10c4703a 	and	r2,r2,r3
   13d70:	10000b26 	beq	r2,zero,13da0 <memchr+0xc4>
   13d74:	20800003 	ldbu	r2,0(r4)
   13d78:	28800f26 	beq	r5,r2,13db8 <memchr+0xdc>
   13d7c:	20800043 	ldbu	r2,1(r4)
   13d80:	21c00044 	addi	r7,r4,1
   13d84:	28800c26 	beq	r5,r2,13db8 <memchr+0xdc>
   13d88:	20800083 	ldbu	r2,2(r4)
   13d8c:	21c00084 	addi	r7,r4,2
   13d90:	28800926 	beq	r5,r2,13db8 <memchr+0xdc>
   13d94:	208000c3 	ldbu	r2,3(r4)
   13d98:	21c000c4 	addi	r7,r4,3
   13d9c:	28800626 	beq	r5,r2,13db8 <memchr+0xdc>
   13da0:	21000104 	addi	r4,r4,4
   13da4:	59bfea36 	bltu	r11,r6,13d50 <memchr+0x74>
   13da8:	2007883a 	mov	r3,r4
   13dac:	003fd106 	br	13cf4 <memchr+0x18>
   13db0:	0005883a 	mov	r2,zero
   13db4:	f800283a 	ret
   13db8:	3805883a 	mov	r2,r7
   13dbc:	f800283a 	ret

00013dc0 <memcmp>:
   13dc0:	00c000c4 	movi	r3,3
   13dc4:	1980032e 	bgeu	r3,r6,13dd4 <memcmp+0x14>
   13dc8:	2144b03a 	or	r2,r4,r5
   13dcc:	10c4703a 	and	r2,r2,r3
   13dd0:	10000f26 	beq	r2,zero,13e10 <memcmp+0x50>
   13dd4:	31ffffc4 	addi	r7,r6,-1
   13dd8:	3000061e 	bne	r6,zero,13df4 <memcmp+0x34>
   13ddc:	00000a06 	br	13e08 <memcmp+0x48>
   13de0:	39ffffc4 	addi	r7,r7,-1
   13de4:	00bfffc4 	movi	r2,-1
   13de8:	21000044 	addi	r4,r4,1
   13dec:	29400044 	addi	r5,r5,1
   13df0:	38800526 	beq	r7,r2,13e08 <memcmp+0x48>
   13df4:	20c00003 	ldbu	r3,0(r4)
   13df8:	28800003 	ldbu	r2,0(r5)
   13dfc:	18bff826 	beq	r3,r2,13de0 <memcmp+0x20>
   13e00:	1885c83a 	sub	r2,r3,r2
   13e04:	f800283a 	ret
   13e08:	0005883a 	mov	r2,zero
   13e0c:	f800283a 	ret
   13e10:	180f883a 	mov	r7,r3
   13e14:	20c00017 	ldw	r3,0(r4)
   13e18:	28800017 	ldw	r2,0(r5)
   13e1c:	18bfed1e 	bne	r3,r2,13dd4 <memcmp+0x14>
   13e20:	31bfff04 	addi	r6,r6,-4
   13e24:	21000104 	addi	r4,r4,4
   13e28:	29400104 	addi	r5,r5,4
   13e2c:	39bff936 	bltu	r7,r6,13e14 <memcmp+0x54>
   13e30:	003fe806 	br	13dd4 <memcmp+0x14>

00013e34 <memcpy>:
   13e34:	01c003c4 	movi	r7,15
   13e38:	2007883a 	mov	r3,r4
   13e3c:	3980032e 	bgeu	r7,r6,13e4c <memcpy+0x18>
   13e40:	2904b03a 	or	r2,r5,r4
   13e44:	108000cc 	andi	r2,r2,3
   13e48:	10000926 	beq	r2,zero,13e70 <memcpy+0x3c>
   13e4c:	30000626 	beq	r6,zero,13e68 <memcpy+0x34>
   13e50:	30cd883a 	add	r6,r6,r3
   13e54:	28800003 	ldbu	r2,0(r5)
   13e58:	29400044 	addi	r5,r5,1
   13e5c:	18800005 	stb	r2,0(r3)
   13e60:	18c00044 	addi	r3,r3,1
   13e64:	30fffb1e 	bne	r6,r3,13e54 <memcpy+0x20>
   13e68:	2005883a 	mov	r2,r4
   13e6c:	f800283a 	ret
   13e70:	3811883a 	mov	r8,r7
   13e74:	200f883a 	mov	r7,r4
   13e78:	28c00017 	ldw	r3,0(r5)
   13e7c:	31bffc04 	addi	r6,r6,-16
   13e80:	38c00015 	stw	r3,0(r7)
   13e84:	28800117 	ldw	r2,4(r5)
   13e88:	38800115 	stw	r2,4(r7)
   13e8c:	28c00217 	ldw	r3,8(r5)
   13e90:	38c00215 	stw	r3,8(r7)
   13e94:	28800317 	ldw	r2,12(r5)
   13e98:	29400404 	addi	r5,r5,16
   13e9c:	38800315 	stw	r2,12(r7)
   13ea0:	39c00404 	addi	r7,r7,16
   13ea4:	41bff436 	bltu	r8,r6,13e78 <memcpy+0x44>
   13ea8:	008000c4 	movi	r2,3
   13eac:	1180072e 	bgeu	r2,r6,13ecc <memcpy+0x98>
   13eb0:	1007883a 	mov	r3,r2
   13eb4:	28800017 	ldw	r2,0(r5)
   13eb8:	31bfff04 	addi	r6,r6,-4
   13ebc:	29400104 	addi	r5,r5,4
   13ec0:	38800015 	stw	r2,0(r7)
   13ec4:	39c00104 	addi	r7,r7,4
   13ec8:	19bffa36 	bltu	r3,r6,13eb4 <memcpy+0x80>
   13ecc:	3807883a 	mov	r3,r7
   13ed0:	003fde06 	br	13e4c <memcpy+0x18>

00013ed4 <memmove>:
   13ed4:	2807883a 	mov	r3,r5
   13ed8:	2011883a 	mov	r8,r4
   13edc:	29000c2e 	bgeu	r5,r4,13f10 <memmove+0x3c>
   13ee0:	298f883a 	add	r7,r5,r6
   13ee4:	21c00a2e 	bgeu	r4,r7,13f10 <memmove+0x3c>
   13ee8:	30000726 	beq	r6,zero,13f08 <memmove+0x34>
   13eec:	2187883a 	add	r3,r4,r6
   13ef0:	198dc83a 	sub	r6,r3,r6
   13ef4:	39ffffc4 	addi	r7,r7,-1
   13ef8:	38800003 	ldbu	r2,0(r7)
   13efc:	18ffffc4 	addi	r3,r3,-1
   13f00:	18800005 	stb	r2,0(r3)
   13f04:	19bffb1e 	bne	r3,r6,13ef4 <memmove+0x20>
   13f08:	2005883a 	mov	r2,r4
   13f0c:	f800283a 	ret
   13f10:	01c003c4 	movi	r7,15
   13f14:	39800a36 	bltu	r7,r6,13f40 <memmove+0x6c>
   13f18:	303ffb26 	beq	r6,zero,13f08 <memmove+0x34>
   13f1c:	400f883a 	mov	r7,r8
   13f20:	320d883a 	add	r6,r6,r8
   13f24:	28800003 	ldbu	r2,0(r5)
   13f28:	29400044 	addi	r5,r5,1
   13f2c:	38800005 	stb	r2,0(r7)
   13f30:	39c00044 	addi	r7,r7,1
   13f34:	39bffb1e 	bne	r7,r6,13f24 <memmove+0x50>
   13f38:	2005883a 	mov	r2,r4
   13f3c:	f800283a 	ret
   13f40:	1904b03a 	or	r2,r3,r4
   13f44:	108000cc 	andi	r2,r2,3
   13f48:	103ff31e 	bne	r2,zero,13f18 <memmove+0x44>
   13f4c:	3811883a 	mov	r8,r7
   13f50:	180b883a 	mov	r5,r3
   13f54:	200f883a 	mov	r7,r4
   13f58:	28c00017 	ldw	r3,0(r5)
   13f5c:	31bffc04 	addi	r6,r6,-16
   13f60:	38c00015 	stw	r3,0(r7)
   13f64:	28800117 	ldw	r2,4(r5)
   13f68:	38800115 	stw	r2,4(r7)
   13f6c:	28c00217 	ldw	r3,8(r5)
   13f70:	38c00215 	stw	r3,8(r7)
   13f74:	28800317 	ldw	r2,12(r5)
   13f78:	29400404 	addi	r5,r5,16
   13f7c:	38800315 	stw	r2,12(r7)
   13f80:	39c00404 	addi	r7,r7,16
   13f84:	41bff436 	bltu	r8,r6,13f58 <memmove+0x84>
   13f88:	008000c4 	movi	r2,3
   13f8c:	1180072e 	bgeu	r2,r6,13fac <memmove+0xd8>
   13f90:	1007883a 	mov	r3,r2
   13f94:	28800017 	ldw	r2,0(r5)
   13f98:	31bfff04 	addi	r6,r6,-4
   13f9c:	29400104 	addi	r5,r5,4
   13fa0:	38800015 	stw	r2,0(r7)
   13fa4:	39c00104 	addi	r7,r7,4
   13fa8:	19bffa36 	bltu	r3,r6,13f94 <memmove+0xc0>
   13fac:	3811883a 	mov	r8,r7
   13fb0:	003fd906 	br	13f18 <memmove+0x44>

00013fb4 <memset>:
   13fb4:	008000c4 	movi	r2,3
   13fb8:	29403fcc 	andi	r5,r5,255
   13fbc:	2007883a 	mov	r3,r4
   13fc0:	1180022e 	bgeu	r2,r6,13fcc <memset+0x18>
   13fc4:	2084703a 	and	r2,r4,r2
   13fc8:	10000826 	beq	r2,zero,13fec <memset+0x38>
   13fcc:	30000526 	beq	r6,zero,13fe4 <memset+0x30>
   13fd0:	2805883a 	mov	r2,r5
   13fd4:	30cd883a 	add	r6,r6,r3
   13fd8:	18800005 	stb	r2,0(r3)
   13fdc:	18c00044 	addi	r3,r3,1
   13fe0:	19bffd1e 	bne	r3,r6,13fd8 <memset+0x24>
   13fe4:	2005883a 	mov	r2,r4
   13fe8:	f800283a 	ret
   13fec:	2804923a 	slli	r2,r5,8
   13ff0:	020003c4 	movi	r8,15
   13ff4:	200f883a 	mov	r7,r4
   13ff8:	2884b03a 	or	r2,r5,r2
   13ffc:	1006943a 	slli	r3,r2,16
   14000:	10c6b03a 	or	r3,r2,r3
   14004:	41800a2e 	bgeu	r8,r6,14030 <memset+0x7c>
   14008:	4005883a 	mov	r2,r8
   1400c:	31bffc04 	addi	r6,r6,-16
   14010:	38c00015 	stw	r3,0(r7)
   14014:	38c00115 	stw	r3,4(r7)
   14018:	38c00215 	stw	r3,8(r7)
   1401c:	38c00315 	stw	r3,12(r7)
   14020:	39c00404 	addi	r7,r7,16
   14024:	11bff936 	bltu	r2,r6,1400c <memset+0x58>
   14028:	008000c4 	movi	r2,3
   1402c:	1180052e 	bgeu	r2,r6,14044 <memset+0x90>
   14030:	31bfff04 	addi	r6,r6,-4
   14034:	008000c4 	movi	r2,3
   14038:	38c00015 	stw	r3,0(r7)
   1403c:	39c00104 	addi	r7,r7,4
   14040:	11bffb36 	bltu	r2,r6,14030 <memset+0x7c>
   14044:	3807883a 	mov	r3,r7
   14048:	003fe006 	br	13fcc <memset+0x18>

0001404c <_open_r>:
   1404c:	defffd04 	addi	sp,sp,-12
   14050:	dc000015 	stw	r16,0(sp)
   14054:	040000b4 	movhi	r16,2
   14058:	840a1704 	addi	r16,r16,10332
   1405c:	dc400115 	stw	r17,4(sp)
   14060:	80000015 	stw	zero,0(r16)
   14064:	2023883a 	mov	r17,r4
   14068:	2809883a 	mov	r4,r5
   1406c:	300b883a 	mov	r5,r6
   14070:	380d883a 	mov	r6,r7
   14074:	dfc00215 	stw	ra,8(sp)
   14078:	001bf100 	call	1bf10 <open>
   1407c:	1007883a 	mov	r3,r2
   14080:	00bfffc4 	movi	r2,-1
   14084:	18800626 	beq	r3,r2,140a0 <_open_r+0x54>
   14088:	1805883a 	mov	r2,r3
   1408c:	dfc00217 	ldw	ra,8(sp)
   14090:	dc400117 	ldw	r17,4(sp)
   14094:	dc000017 	ldw	r16,0(sp)
   14098:	dec00304 	addi	sp,sp,12
   1409c:	f800283a 	ret
   140a0:	80800017 	ldw	r2,0(r16)
   140a4:	103ff826 	beq	r2,zero,14088 <_open_r+0x3c>
   140a8:	88800015 	stw	r2,0(r17)
   140ac:	1805883a 	mov	r2,r3
   140b0:	dfc00217 	ldw	ra,8(sp)
   140b4:	dc400117 	ldw	r17,4(sp)
   140b8:	dc000017 	ldw	r16,0(sp)
   140bc:	dec00304 	addi	sp,sp,12
   140c0:	f800283a 	ret

000140c4 <printf>:
   140c4:	defffb04 	addi	sp,sp,-20
   140c8:	dfc00115 	stw	ra,4(sp)
   140cc:	d9400215 	stw	r5,8(sp)
   140d0:	d9800315 	stw	r6,12(sp)
   140d4:	d9c00415 	stw	r7,16(sp)
   140d8:	008000b4 	movhi	r2,2
   140dc:	10833f04 	addi	r2,r2,3324
   140e0:	10c00017 	ldw	r3,0(r2)
   140e4:	200b883a 	mov	r5,r4
   140e8:	d8800204 	addi	r2,sp,8
   140ec:	19000217 	ldw	r4,8(r3)
   140f0:	100d883a 	mov	r6,r2
   140f4:	d8800015 	stw	r2,0(sp)
   140f8:	00173c00 	call	173c0 <__vfprintf_internal>
   140fc:	dfc00117 	ldw	ra,4(sp)
   14100:	dec00504 	addi	sp,sp,20
   14104:	f800283a 	ret

00014108 <_printf_r>:
   14108:	defffc04 	addi	sp,sp,-16
   1410c:	dfc00115 	stw	ra,4(sp)
   14110:	d9800215 	stw	r6,8(sp)
   14114:	d9c00315 	stw	r7,12(sp)
   14118:	280d883a 	mov	r6,r5
   1411c:	21400217 	ldw	r5,8(r4)
   14120:	d8c00204 	addi	r3,sp,8
   14124:	180f883a 	mov	r7,r3
   14128:	d8c00015 	stw	r3,0(sp)
   1412c:	00155140 	call	15514 <___vfprintf_internal_r>
   14130:	dfc00117 	ldw	ra,4(sp)
   14134:	dec00404 	addi	sp,sp,16
   14138:	f800283a 	ret

0001413c <putc>:
   1413c:	defffc04 	addi	sp,sp,-16
   14140:	dc800215 	stw	r18,8(sp)
   14144:	048000b4 	movhi	r18,2
   14148:	94833f04 	addi	r18,r18,3324
   1414c:	90c00017 	ldw	r3,0(r18)
   14150:	dc400115 	stw	r17,4(sp)
   14154:	dc000015 	stw	r16,0(sp)
   14158:	dfc00315 	stw	ra,12(sp)
   1415c:	2023883a 	mov	r17,r4
   14160:	2821883a 	mov	r16,r5
   14164:	18000226 	beq	r3,zero,14170 <putc+0x34>
   14168:	18800e17 	ldw	r2,56(r3)
   1416c:	10001126 	beq	r2,zero,141b4 <putc+0x78>
   14170:	80800217 	ldw	r2,8(r16)
   14174:	10ffffc4 	addi	r3,r2,-1
   14178:	80c00215 	stw	r3,8(r16)
   1417c:	18001316 	blt	r3,zero,141cc <putc+0x90>
   14180:	80800017 	ldw	r2,0(r16)
   14184:	14400005 	stb	r17,0(r2)
   14188:	80c00017 	ldw	r3,0(r16)
   1418c:	18800044 	addi	r2,r3,1
   14190:	18c00003 	ldbu	r3,0(r3)
   14194:	80800015 	stw	r2,0(r16)
   14198:	1805883a 	mov	r2,r3
   1419c:	dfc00317 	ldw	ra,12(sp)
   141a0:	dc800217 	ldw	r18,8(sp)
   141a4:	dc400117 	ldw	r17,4(sp)
   141a8:	dc000017 	ldw	r16,0(sp)
   141ac:	dec00404 	addi	sp,sp,16
   141b0:	f800283a 	ret
   141b4:	1809883a 	mov	r4,r3
   141b8:	0011ef00 	call	11ef0 <__sinit>
   141bc:	80800217 	ldw	r2,8(r16)
   141c0:	10ffffc4 	addi	r3,r2,-1
   141c4:	80c00215 	stw	r3,8(r16)
   141c8:	183fed0e 	bge	r3,zero,14180 <putc+0x44>
   141cc:	80800617 	ldw	r2,24(r16)
   141d0:	18800f16 	blt	r3,r2,14210 <putc+0xd4>
   141d4:	80800017 	ldw	r2,0(r16)
   141d8:	14400005 	stb	r17,0(r2)
   141dc:	81000017 	ldw	r4,0(r16)
   141e0:	00800284 	movi	r2,10
   141e4:	20c00003 	ldbu	r3,0(r4)
   141e8:	18801226 	beq	r3,r2,14234 <putc+0xf8>
   141ec:	20800044 	addi	r2,r4,1
   141f0:	80800015 	stw	r2,0(r16)
   141f4:	1805883a 	mov	r2,r3
   141f8:	dfc00317 	ldw	ra,12(sp)
   141fc:	dc800217 	ldw	r18,8(sp)
   14200:	dc400117 	ldw	r17,4(sp)
   14204:	dc000017 	ldw	r16,0(sp)
   14208:	dec00404 	addi	sp,sp,16
   1420c:	f800283a 	ret
   14210:	91000017 	ldw	r4,0(r18)
   14214:	880b883a 	mov	r5,r17
   14218:	800d883a 	mov	r6,r16
   1421c:	dfc00317 	ldw	ra,12(sp)
   14220:	dc800217 	ldw	r18,8(sp)
   14224:	dc400117 	ldw	r17,4(sp)
   14228:	dc000017 	ldw	r16,0(sp)
   1422c:	dec00404 	addi	sp,sp,16
   14230:	00173e41 	jmpi	173e4 <__swbuf_r>
   14234:	91000017 	ldw	r4,0(r18)
   14238:	180b883a 	mov	r5,r3
   1423c:	003ff606 	br	14218 <putc+0xdc>

00014240 <_putc_r>:
   14240:	defffc04 	addi	sp,sp,-16
   14244:	dc400215 	stw	r17,8(sp)
   14248:	dc000115 	stw	r16,4(sp)
   1424c:	dfc00315 	stw	ra,12(sp)
   14250:	2021883a 	mov	r16,r4
   14254:	2823883a 	mov	r17,r5
   14258:	20000226 	beq	r4,zero,14264 <_putc_r+0x24>
   1425c:	20800e17 	ldw	r2,56(r4)
   14260:	10001026 	beq	r2,zero,142a4 <_putc_r+0x64>
   14264:	30800217 	ldw	r2,8(r6)
   14268:	10ffffc4 	addi	r3,r2,-1
   1426c:	30c00215 	stw	r3,8(r6)
   14270:	18001316 	blt	r3,zero,142c0 <_putc_r+0x80>
   14274:	30800017 	ldw	r2,0(r6)
   14278:	14400005 	stb	r17,0(r2)
   1427c:	30c00017 	ldw	r3,0(r6)
   14280:	18800044 	addi	r2,r3,1
   14284:	18c00003 	ldbu	r3,0(r3)
   14288:	30800015 	stw	r2,0(r6)
   1428c:	1805883a 	mov	r2,r3
   14290:	dfc00317 	ldw	ra,12(sp)
   14294:	dc400217 	ldw	r17,8(sp)
   14298:	dc000117 	ldw	r16,4(sp)
   1429c:	dec00404 	addi	sp,sp,16
   142a0:	f800283a 	ret
   142a4:	d9800015 	stw	r6,0(sp)
   142a8:	0011ef00 	call	11ef0 <__sinit>
   142ac:	d9800017 	ldw	r6,0(sp)
   142b0:	30800217 	ldw	r2,8(r6)
   142b4:	10ffffc4 	addi	r3,r2,-1
   142b8:	30c00215 	stw	r3,8(r6)
   142bc:	183fed0e 	bge	r3,zero,14274 <_putc_r+0x34>
   142c0:	30800617 	ldw	r2,24(r6)
   142c4:	18800e16 	blt	r3,r2,14300 <_putc_r+0xc0>
   142c8:	30800017 	ldw	r2,0(r6)
   142cc:	14400005 	stb	r17,0(r2)
   142d0:	31000017 	ldw	r4,0(r6)
   142d4:	00800284 	movi	r2,10
   142d8:	20c00003 	ldbu	r3,0(r4)
   142dc:	18800f26 	beq	r3,r2,1431c <_putc_r+0xdc>
   142e0:	20800044 	addi	r2,r4,1
   142e4:	30800015 	stw	r2,0(r6)
   142e8:	1805883a 	mov	r2,r3
   142ec:	dfc00317 	ldw	ra,12(sp)
   142f0:	dc400217 	ldw	r17,8(sp)
   142f4:	dc000117 	ldw	r16,4(sp)
   142f8:	dec00404 	addi	sp,sp,16
   142fc:	f800283a 	ret
   14300:	8009883a 	mov	r4,r16
   14304:	880b883a 	mov	r5,r17
   14308:	dfc00317 	ldw	ra,12(sp)
   1430c:	dc400217 	ldw	r17,8(sp)
   14310:	dc000117 	ldw	r16,4(sp)
   14314:	dec00404 	addi	sp,sp,16
   14318:	00173e41 	jmpi	173e4 <__swbuf_r>
   1431c:	8009883a 	mov	r4,r16
   14320:	180b883a 	mov	r5,r3
   14324:	003ff806 	br	14308 <_putc_r+0xc8>

00014328 <_puts_r>:
   14328:	defff604 	addi	sp,sp,-40
   1432c:	dc400715 	stw	r17,28(sp)
   14330:	2023883a 	mov	r17,r4
   14334:	2809883a 	mov	r4,r5
   14338:	dfc00915 	stw	ra,36(sp)
   1433c:	dcc00815 	stw	r19,32(sp)
   14340:	2827883a 	mov	r19,r5
   14344:	001511c0 	call	1511c <strlen>
   14348:	89400217 	ldw	r5,8(r17)
   1434c:	00c000b4 	movhi	r3,2
   14350:	18fc0904 	addi	r3,r3,-4060
   14354:	01c00044 	movi	r7,1
   14358:	12000044 	addi	r8,r2,1
   1435c:	d8c00515 	stw	r3,20(sp)
   14360:	d9c00615 	stw	r7,24(sp)
   14364:	d8c00304 	addi	r3,sp,12
   14368:	01c00084 	movi	r7,2
   1436c:	8809883a 	mov	r4,r17
   14370:	d80d883a 	mov	r6,sp
   14374:	d8c00015 	stw	r3,0(sp)
   14378:	dcc00315 	stw	r19,12(sp)
   1437c:	da000215 	stw	r8,8(sp)
   14380:	d9c00115 	stw	r7,4(sp)
   14384:	d8800415 	stw	r2,16(sp)
   14388:	0012dc40 	call	12dc4 <__sfvwrite_r>
   1438c:	00ffffc4 	movi	r3,-1
   14390:	10000626 	beq	r2,zero,143ac <_puts_r+0x84>
   14394:	1805883a 	mov	r2,r3
   14398:	dfc00917 	ldw	ra,36(sp)
   1439c:	dcc00817 	ldw	r19,32(sp)
   143a0:	dc400717 	ldw	r17,28(sp)
   143a4:	dec00a04 	addi	sp,sp,40
   143a8:	f800283a 	ret
   143ac:	00c00284 	movi	r3,10
   143b0:	1805883a 	mov	r2,r3
   143b4:	dfc00917 	ldw	ra,36(sp)
   143b8:	dcc00817 	ldw	r19,32(sp)
   143bc:	dc400717 	ldw	r17,28(sp)
   143c0:	dec00a04 	addi	sp,sp,40
   143c4:	f800283a 	ret

000143c8 <puts>:
   143c8:	008000b4 	movhi	r2,2
   143cc:	10833f04 	addi	r2,r2,3324
   143d0:	200b883a 	mov	r5,r4
   143d4:	11000017 	ldw	r4,0(r2)
   143d8:	00143281 	jmpi	14328 <_puts_r>

000143dc <_realloc_r>:
   143dc:	defff404 	addi	sp,sp,-48
   143e0:	dd800815 	stw	r22,32(sp)
   143e4:	dc800415 	stw	r18,16(sp)
   143e8:	dc400315 	stw	r17,12(sp)
   143ec:	dfc00b15 	stw	ra,44(sp)
   143f0:	df000a15 	stw	fp,40(sp)
   143f4:	ddc00915 	stw	r23,36(sp)
   143f8:	dd400715 	stw	r21,28(sp)
   143fc:	dd000615 	stw	r20,24(sp)
   14400:	dcc00515 	stw	r19,20(sp)
   14404:	dc000215 	stw	r16,8(sp)
   14408:	2825883a 	mov	r18,r5
   1440c:	3023883a 	mov	r17,r6
   14410:	202d883a 	mov	r22,r4
   14414:	2800c926 	beq	r5,zero,1473c <_realloc_r+0x360>
   14418:	001bdf40 	call	1bdf4 <__malloc_lock>
   1441c:	943ffe04 	addi	r16,r18,-8
   14420:	88c002c4 	addi	r3,r17,11
   14424:	00800584 	movi	r2,22
   14428:	82000117 	ldw	r8,4(r16)
   1442c:	10c01b2e 	bgeu	r2,r3,1449c <_realloc_r+0xc0>
   14430:	00bffe04 	movi	r2,-8
   14434:	188e703a 	and	r7,r3,r2
   14438:	3839883a 	mov	fp,r7
   1443c:	38001a16 	blt	r7,zero,144a8 <_realloc_r+0xcc>
   14440:	e4401936 	bltu	fp,r17,144a8 <_realloc_r+0xcc>
   14444:	013fff04 	movi	r4,-4
   14448:	4126703a 	and	r19,r8,r4
   1444c:	99c02616 	blt	r19,r7,144e8 <_realloc_r+0x10c>
   14450:	802b883a 	mov	r21,r16
   14454:	9829883a 	mov	r20,r19
   14458:	84000204 	addi	r16,r16,8
   1445c:	a80f883a 	mov	r7,r21
   14460:	a70dc83a 	sub	r6,r20,fp
   14464:	008003c4 	movi	r2,15
   14468:	1180c136 	bltu	r2,r6,14770 <_realloc_r+0x394>
   1446c:	38800117 	ldw	r2,4(r7)
   14470:	a549883a 	add	r4,r20,r21
   14474:	1080004c 	andi	r2,r2,1
   14478:	a084b03a 	or	r2,r20,r2
   1447c:	38800115 	stw	r2,4(r7)
   14480:	20c00117 	ldw	r3,4(r4)
   14484:	18c00054 	ori	r3,r3,1
   14488:	20c00115 	stw	r3,4(r4)
   1448c:	b009883a 	mov	r4,r22
   14490:	001be140 	call	1be14 <__malloc_unlock>
   14494:	8023883a 	mov	r17,r16
   14498:	00000606 	br	144b4 <_realloc_r+0xd8>
   1449c:	01c00404 	movi	r7,16
   144a0:	3839883a 	mov	fp,r7
   144a4:	e47fe72e 	bgeu	fp,r17,14444 <_realloc_r+0x68>
   144a8:	00800304 	movi	r2,12
   144ac:	0023883a 	mov	r17,zero
   144b0:	b0800015 	stw	r2,0(r22)
   144b4:	8805883a 	mov	r2,r17
   144b8:	dfc00b17 	ldw	ra,44(sp)
   144bc:	df000a17 	ldw	fp,40(sp)
   144c0:	ddc00917 	ldw	r23,36(sp)
   144c4:	dd800817 	ldw	r22,32(sp)
   144c8:	dd400717 	ldw	r21,28(sp)
   144cc:	dd000617 	ldw	r20,24(sp)
   144d0:	dcc00517 	ldw	r19,20(sp)
   144d4:	dc800417 	ldw	r18,16(sp)
   144d8:	dc400317 	ldw	r17,12(sp)
   144dc:	dc000217 	ldw	r16,8(sp)
   144e0:	dec00c04 	addi	sp,sp,48
   144e4:	f800283a 	ret
   144e8:	008000b4 	movhi	r2,2
   144ec:	10bd9804 	addi	r2,r2,-2464
   144f0:	12400217 	ldw	r9,8(r2)
   144f4:	84cd883a 	add	r6,r16,r19
   144f8:	802b883a 	mov	r21,r16
   144fc:	3240b926 	beq	r6,r9,147e4 <_realloc_r+0x408>
   14500:	31400117 	ldw	r5,4(r6)
   14504:	00bfff84 	movi	r2,-2
   14508:	2884703a 	and	r2,r5,r2
   1450c:	1185883a 	add	r2,r2,r6
   14510:	10c00117 	ldw	r3,4(r2)
   14514:	18c0004c 	andi	r3,r3,1
   14518:	1807003a 	cmpeq	r3,r3,zero
   1451c:	1800a326 	beq	r3,zero,147ac <_realloc_r+0x3d0>
   14520:	2908703a 	and	r4,r5,r4
   14524:	9929883a 	add	r20,r19,r4
   14528:	a1c0a30e 	bge	r20,r7,147b8 <_realloc_r+0x3dc>
   1452c:	4080004c 	andi	r2,r8,1
   14530:	1000551e 	bne	r2,zero,14688 <_realloc_r+0x2ac>
   14534:	80800017 	ldw	r2,0(r16)
   14538:	80afc83a 	sub	r23,r16,r2
   1453c:	b8c00117 	ldw	r3,4(r23)
   14540:	00bfff04 	movi	r2,-4
   14544:	1884703a 	and	r2,r3,r2
   14548:	30002e26 	beq	r6,zero,14604 <_realloc_r+0x228>
   1454c:	3240b926 	beq	r6,r9,14834 <_realloc_r+0x458>
   14550:	98a9883a 	add	r20,r19,r2
   14554:	2509883a 	add	r4,r4,r20
   14558:	d9000015 	stw	r4,0(sp)
   1455c:	21c02a16 	blt	r4,r7,14608 <_realloc_r+0x22c>
   14560:	30800317 	ldw	r2,12(r6)
   14564:	30c00217 	ldw	r3,8(r6)
   14568:	01400904 	movi	r5,36
   1456c:	99bfff04 	addi	r6,r19,-4
   14570:	18800315 	stw	r2,12(r3)
   14574:	10c00215 	stw	r3,8(r2)
   14578:	b9000317 	ldw	r4,12(r23)
   1457c:	b8800217 	ldw	r2,8(r23)
   14580:	b82b883a 	mov	r21,r23
   14584:	bc000204 	addi	r16,r23,8
   14588:	20800215 	stw	r2,8(r4)
   1458c:	11000315 	stw	r4,12(r2)
   14590:	2980e436 	bltu	r5,r6,14924 <_realloc_r+0x548>
   14594:	008004c4 	movi	r2,19
   14598:	9009883a 	mov	r4,r18
   1459c:	8011883a 	mov	r8,r16
   145a0:	11800f2e 	bgeu	r2,r6,145e0 <_realloc_r+0x204>
   145a4:	90800017 	ldw	r2,0(r18)
   145a8:	ba000404 	addi	r8,r23,16
   145ac:	91000204 	addi	r4,r18,8
   145b0:	b8800215 	stw	r2,8(r23)
   145b4:	90c00117 	ldw	r3,4(r18)
   145b8:	008006c4 	movi	r2,27
   145bc:	b8c00315 	stw	r3,12(r23)
   145c0:	1180072e 	bgeu	r2,r6,145e0 <_realloc_r+0x204>
   145c4:	90c00217 	ldw	r3,8(r18)
   145c8:	ba000604 	addi	r8,r23,24
   145cc:	91000404 	addi	r4,r18,16
   145d0:	b8c00415 	stw	r3,16(r23)
   145d4:	90800317 	ldw	r2,12(r18)
   145d8:	b8800515 	stw	r2,20(r23)
   145dc:	3140e726 	beq	r6,r5,1497c <_realloc_r+0x5a0>
   145e0:	20800017 	ldw	r2,0(r4)
   145e4:	dd000017 	ldw	r20,0(sp)
   145e8:	b80f883a 	mov	r7,r23
   145ec:	40800015 	stw	r2,0(r8)
   145f0:	20c00117 	ldw	r3,4(r4)
   145f4:	40c00115 	stw	r3,4(r8)
   145f8:	20800217 	ldw	r2,8(r4)
   145fc:	40800215 	stw	r2,8(r8)
   14600:	003f9706 	br	14460 <_realloc_r+0x84>
   14604:	98a9883a 	add	r20,r19,r2
   14608:	a1c01f16 	blt	r20,r7,14688 <_realloc_r+0x2ac>
   1460c:	b8c00317 	ldw	r3,12(r23)
   14610:	b8800217 	ldw	r2,8(r23)
   14614:	99bfff04 	addi	r6,r19,-4
   14618:	01400904 	movi	r5,36
   1461c:	b82b883a 	mov	r21,r23
   14620:	18800215 	stw	r2,8(r3)
   14624:	10c00315 	stw	r3,12(r2)
   14628:	bc000204 	addi	r16,r23,8
   1462c:	2980c336 	bltu	r5,r6,1493c <_realloc_r+0x560>
   14630:	008004c4 	movi	r2,19
   14634:	9009883a 	mov	r4,r18
   14638:	8011883a 	mov	r8,r16
   1463c:	11800f2e 	bgeu	r2,r6,1467c <_realloc_r+0x2a0>
   14640:	90800017 	ldw	r2,0(r18)
   14644:	ba000404 	addi	r8,r23,16
   14648:	91000204 	addi	r4,r18,8
   1464c:	b8800215 	stw	r2,8(r23)
   14650:	90c00117 	ldw	r3,4(r18)
   14654:	008006c4 	movi	r2,27
   14658:	b8c00315 	stw	r3,12(r23)
   1465c:	1180072e 	bgeu	r2,r6,1467c <_realloc_r+0x2a0>
   14660:	90c00217 	ldw	r3,8(r18)
   14664:	ba000604 	addi	r8,r23,24
   14668:	91000404 	addi	r4,r18,16
   1466c:	b8c00415 	stw	r3,16(r23)
   14670:	90800317 	ldw	r2,12(r18)
   14674:	b8800515 	stw	r2,20(r23)
   14678:	3140c726 	beq	r6,r5,14998 <_realloc_r+0x5bc>
   1467c:	20800017 	ldw	r2,0(r4)
   14680:	b80f883a 	mov	r7,r23
   14684:	003fd906 	br	145ec <_realloc_r+0x210>
   14688:	880b883a 	mov	r5,r17
   1468c:	b009883a 	mov	r4,r22
   14690:	001359c0 	call	1359c <_malloc_r>
   14694:	1023883a 	mov	r17,r2
   14698:	10002526 	beq	r2,zero,14730 <_realloc_r+0x354>
   1469c:	80800117 	ldw	r2,4(r16)
   146a0:	00ffff84 	movi	r3,-2
   146a4:	893ffe04 	addi	r4,r17,-8
   146a8:	10c4703a 	and	r2,r2,r3
   146ac:	8085883a 	add	r2,r16,r2
   146b0:	20809526 	beq	r4,r2,14908 <_realloc_r+0x52c>
   146b4:	99bfff04 	addi	r6,r19,-4
   146b8:	01c00904 	movi	r7,36
   146bc:	39804536 	bltu	r7,r6,147d4 <_realloc_r+0x3f8>
   146c0:	008004c4 	movi	r2,19
   146c4:	9009883a 	mov	r4,r18
   146c8:	880b883a 	mov	r5,r17
   146cc:	11800f2e 	bgeu	r2,r6,1470c <_realloc_r+0x330>
   146d0:	90800017 	ldw	r2,0(r18)
   146d4:	89400204 	addi	r5,r17,8
   146d8:	91000204 	addi	r4,r18,8
   146dc:	88800015 	stw	r2,0(r17)
   146e0:	90c00117 	ldw	r3,4(r18)
   146e4:	008006c4 	movi	r2,27
   146e8:	88c00115 	stw	r3,4(r17)
   146ec:	1180072e 	bgeu	r2,r6,1470c <_realloc_r+0x330>
   146f0:	90c00217 	ldw	r3,8(r18)
   146f4:	89400404 	addi	r5,r17,16
   146f8:	91000404 	addi	r4,r18,16
   146fc:	88c00215 	stw	r3,8(r17)
   14700:	90800317 	ldw	r2,12(r18)
   14704:	88800315 	stw	r2,12(r17)
   14708:	31c09126 	beq	r6,r7,14950 <_realloc_r+0x574>
   1470c:	20800017 	ldw	r2,0(r4)
   14710:	28800015 	stw	r2,0(r5)
   14714:	20c00117 	ldw	r3,4(r4)
   14718:	28c00115 	stw	r3,4(r5)
   1471c:	20800217 	ldw	r2,8(r4)
   14720:	28800215 	stw	r2,8(r5)
   14724:	900b883a 	mov	r5,r18
   14728:	b009883a 	mov	r4,r22
   1472c:	00124d00 	call	124d0 <_free_r>
   14730:	b009883a 	mov	r4,r22
   14734:	001be140 	call	1be14 <__malloc_unlock>
   14738:	003f5e06 	br	144b4 <_realloc_r+0xd8>
   1473c:	300b883a 	mov	r5,r6
   14740:	dfc00b17 	ldw	ra,44(sp)
   14744:	df000a17 	ldw	fp,40(sp)
   14748:	ddc00917 	ldw	r23,36(sp)
   1474c:	dd800817 	ldw	r22,32(sp)
   14750:	dd400717 	ldw	r21,28(sp)
   14754:	dd000617 	ldw	r20,24(sp)
   14758:	dcc00517 	ldw	r19,20(sp)
   1475c:	dc800417 	ldw	r18,16(sp)
   14760:	dc400317 	ldw	r17,12(sp)
   14764:	dc000217 	ldw	r16,8(sp)
   14768:	dec00c04 	addi	sp,sp,48
   1476c:	001359c1 	jmpi	1359c <_malloc_r>
   14770:	38800117 	ldw	r2,4(r7)
   14774:	e54b883a 	add	r5,fp,r21
   14778:	31000054 	ori	r4,r6,1
   1477c:	1080004c 	andi	r2,r2,1
   14780:	1704b03a 	or	r2,r2,fp
   14784:	38800115 	stw	r2,4(r7)
   14788:	29000115 	stw	r4,4(r5)
   1478c:	2987883a 	add	r3,r5,r6
   14790:	18800117 	ldw	r2,4(r3)
   14794:	29400204 	addi	r5,r5,8
   14798:	b009883a 	mov	r4,r22
   1479c:	10800054 	ori	r2,r2,1
   147a0:	18800115 	stw	r2,4(r3)
   147a4:	00124d00 	call	124d0 <_free_r>
   147a8:	003f3806 	br	1448c <_realloc_r+0xb0>
   147ac:	000d883a 	mov	r6,zero
   147b0:	0009883a 	mov	r4,zero
   147b4:	003f5d06 	br	1452c <_realloc_r+0x150>
   147b8:	30c00217 	ldw	r3,8(r6)
   147bc:	30800317 	ldw	r2,12(r6)
   147c0:	800f883a 	mov	r7,r16
   147c4:	84000204 	addi	r16,r16,8
   147c8:	10c00215 	stw	r3,8(r2)
   147cc:	18800315 	stw	r2,12(r3)
   147d0:	003f2306 	br	14460 <_realloc_r+0x84>
   147d4:	8809883a 	mov	r4,r17
   147d8:	900b883a 	mov	r5,r18
   147dc:	0013ed40 	call	13ed4 <memmove>
   147e0:	003fd006 	br	14724 <_realloc_r+0x348>
   147e4:	30800117 	ldw	r2,4(r6)
   147e8:	e0c00404 	addi	r3,fp,16
   147ec:	1108703a 	and	r4,r2,r4
   147f0:	9905883a 	add	r2,r19,r4
   147f4:	10ff4d16 	blt	r2,r3,1452c <_realloc_r+0x150>
   147f8:	1705c83a 	sub	r2,r2,fp
   147fc:	870b883a 	add	r5,r16,fp
   14800:	10800054 	ori	r2,r2,1
   14804:	28800115 	stw	r2,4(r5)
   14808:	80c00117 	ldw	r3,4(r16)
   1480c:	008000b4 	movhi	r2,2
   14810:	10bd9804 	addi	r2,r2,-2464
   14814:	b009883a 	mov	r4,r22
   14818:	18c0004c 	andi	r3,r3,1
   1481c:	e0c6b03a 	or	r3,fp,r3
   14820:	11400215 	stw	r5,8(r2)
   14824:	80c00115 	stw	r3,4(r16)
   14828:	001be140 	call	1be14 <__malloc_unlock>
   1482c:	84400204 	addi	r17,r16,8
   14830:	003f2006 	br	144b4 <_realloc_r+0xd8>
   14834:	98a9883a 	add	r20,r19,r2
   14838:	2509883a 	add	r4,r4,r20
   1483c:	e0800404 	addi	r2,fp,16
   14840:	d9000115 	stw	r4,4(sp)
   14844:	20bf7016 	blt	r4,r2,14608 <_realloc_r+0x22c>
   14848:	b8c00317 	ldw	r3,12(r23)
   1484c:	b8800217 	ldw	r2,8(r23)
   14850:	99bfff04 	addi	r6,r19,-4
   14854:	01400904 	movi	r5,36
   14858:	18800215 	stw	r2,8(r3)
   1485c:	10c00315 	stw	r3,12(r2)
   14860:	bc400204 	addi	r17,r23,8
   14864:	29804136 	bltu	r5,r6,1496c <_realloc_r+0x590>
   14868:	008004c4 	movi	r2,19
   1486c:	9009883a 	mov	r4,r18
   14870:	880f883a 	mov	r7,r17
   14874:	11800f2e 	bgeu	r2,r6,148b4 <_realloc_r+0x4d8>
   14878:	90800017 	ldw	r2,0(r18)
   1487c:	b9c00404 	addi	r7,r23,16
   14880:	91000204 	addi	r4,r18,8
   14884:	b8800215 	stw	r2,8(r23)
   14888:	90c00117 	ldw	r3,4(r18)
   1488c:	008006c4 	movi	r2,27
   14890:	b8c00315 	stw	r3,12(r23)
   14894:	1180072e 	bgeu	r2,r6,148b4 <_realloc_r+0x4d8>
   14898:	90c00217 	ldw	r3,8(r18)
   1489c:	b9c00604 	addi	r7,r23,24
   148a0:	91000404 	addi	r4,r18,16
   148a4:	b8c00415 	stw	r3,16(r23)
   148a8:	90800317 	ldw	r2,12(r18)
   148ac:	b8800515 	stw	r2,20(r23)
   148b0:	31404026 	beq	r6,r5,149b4 <_realloc_r+0x5d8>
   148b4:	20800017 	ldw	r2,0(r4)
   148b8:	38800015 	stw	r2,0(r7)
   148bc:	20c00117 	ldw	r3,4(r4)
   148c0:	38c00115 	stw	r3,4(r7)
   148c4:	20800217 	ldw	r2,8(r4)
   148c8:	38800215 	stw	r2,8(r7)
   148cc:	d8c00117 	ldw	r3,4(sp)
   148d0:	bf0b883a 	add	r5,r23,fp
   148d4:	b009883a 	mov	r4,r22
   148d8:	1f05c83a 	sub	r2,r3,fp
   148dc:	10800054 	ori	r2,r2,1
   148e0:	28800115 	stw	r2,4(r5)
   148e4:	b8c00117 	ldw	r3,4(r23)
   148e8:	008000b4 	movhi	r2,2
   148ec:	10bd9804 	addi	r2,r2,-2464
   148f0:	11400215 	stw	r5,8(r2)
   148f4:	18c0004c 	andi	r3,r3,1
   148f8:	e0c6b03a 	or	r3,fp,r3
   148fc:	b8c00115 	stw	r3,4(r23)
   14900:	001be140 	call	1be14 <__malloc_unlock>
   14904:	003eeb06 	br	144b4 <_realloc_r+0xd8>
   14908:	20800117 	ldw	r2,4(r4)
   1490c:	00ffff04 	movi	r3,-4
   14910:	800f883a 	mov	r7,r16
   14914:	10c4703a 	and	r2,r2,r3
   14918:	98a9883a 	add	r20,r19,r2
   1491c:	84000204 	addi	r16,r16,8
   14920:	003ecf06 	br	14460 <_realloc_r+0x84>
   14924:	900b883a 	mov	r5,r18
   14928:	8009883a 	mov	r4,r16
   1492c:	0013ed40 	call	13ed4 <memmove>
   14930:	dd000017 	ldw	r20,0(sp)
   14934:	b80f883a 	mov	r7,r23
   14938:	003ec906 	br	14460 <_realloc_r+0x84>
   1493c:	900b883a 	mov	r5,r18
   14940:	8009883a 	mov	r4,r16
   14944:	0013ed40 	call	13ed4 <memmove>
   14948:	b80f883a 	mov	r7,r23
   1494c:	003ec406 	br	14460 <_realloc_r+0x84>
   14950:	90c00417 	ldw	r3,16(r18)
   14954:	89400604 	addi	r5,r17,24
   14958:	91000604 	addi	r4,r18,24
   1495c:	88c00415 	stw	r3,16(r17)
   14960:	90800517 	ldw	r2,20(r18)
   14964:	88800515 	stw	r2,20(r17)
   14968:	003f6806 	br	1470c <_realloc_r+0x330>
   1496c:	900b883a 	mov	r5,r18
   14970:	8809883a 	mov	r4,r17
   14974:	0013ed40 	call	13ed4 <memmove>
   14978:	003fd406 	br	148cc <_realloc_r+0x4f0>
   1497c:	90c00417 	ldw	r3,16(r18)
   14980:	91000604 	addi	r4,r18,24
   14984:	ba000804 	addi	r8,r23,32
   14988:	b8c00615 	stw	r3,24(r23)
   1498c:	90800517 	ldw	r2,20(r18)
   14990:	b8800715 	stw	r2,28(r23)
   14994:	003f1206 	br	145e0 <_realloc_r+0x204>
   14998:	90c00417 	ldw	r3,16(r18)
   1499c:	91000604 	addi	r4,r18,24
   149a0:	ba000804 	addi	r8,r23,32
   149a4:	b8c00615 	stw	r3,24(r23)
   149a8:	90800517 	ldw	r2,20(r18)
   149ac:	b8800715 	stw	r2,28(r23)
   149b0:	003f3206 	br	1467c <_realloc_r+0x2a0>
   149b4:	90c00417 	ldw	r3,16(r18)
   149b8:	91000604 	addi	r4,r18,24
   149bc:	b9c00804 	addi	r7,r23,32
   149c0:	b8c00615 	stw	r3,24(r23)
   149c4:	90800517 	ldw	r2,20(r18)
   149c8:	b8800715 	stw	r2,28(r23)
   149cc:	003fb906 	br	148b4 <_realloc_r+0x4d8>

000149d0 <__srefill_r>:
   149d0:	defffd04 	addi	sp,sp,-12
   149d4:	dc400115 	stw	r17,4(sp)
   149d8:	dc000015 	stw	r16,0(sp)
   149dc:	dfc00215 	stw	ra,8(sp)
   149e0:	2023883a 	mov	r17,r4
   149e4:	2821883a 	mov	r16,r5
   149e8:	20000226 	beq	r4,zero,149f4 <__srefill_r+0x24>
   149ec:	20800e17 	ldw	r2,56(r4)
   149f0:	10004126 	beq	r2,zero,14af8 <__srefill_r+0x128>
   149f4:	80c0030b 	ldhu	r3,12(r16)
   149f8:	80000115 	stw	zero,4(r16)
   149fc:	1880080c 	andi	r2,r3,32
   14a00:	1000361e 	bne	r2,zero,14adc <__srefill_r+0x10c>
   14a04:	1880010c 	andi	r2,r3,4
   14a08:	1000211e 	bne	r2,zero,14a90 <__srefill_r+0xc0>
   14a0c:	1880040c 	andi	r2,r3,16
   14a10:	10005026 	beq	r2,zero,14b54 <__srefill_r+0x184>
   14a14:	1880020c 	andi	r2,r3,8
   14a18:	1000541e 	bne	r2,zero,14b6c <__srefill_r+0x19c>
   14a1c:	8080030b 	ldhu	r2,12(r16)
   14a20:	10800114 	ori	r2,r2,4
   14a24:	8080030d 	sth	r2,12(r16)
   14a28:	80800417 	ldw	r2,16(r16)
   14a2c:	10004526 	beq	r2,zero,14b44 <__srefill_r+0x174>
   14a30:	8080030b 	ldhu	r2,12(r16)
   14a34:	108000cc 	andi	r2,r2,3
   14a38:	1000361e 	bne	r2,zero,14b14 <__srefill_r+0x144>
   14a3c:	81800417 	ldw	r6,16(r16)
   14a40:	80c00817 	ldw	r3,32(r16)
   14a44:	81400717 	ldw	r5,28(r16)
   14a48:	81c00517 	ldw	r7,20(r16)
   14a4c:	8809883a 	mov	r4,r17
   14a50:	81800015 	stw	r6,0(r16)
   14a54:	183ee83a 	callr	r3
   14a58:	80c0030b 	ldhu	r3,12(r16)
   14a5c:	1009883a 	mov	r4,r2
   14a60:	80800115 	stw	r2,4(r16)
   14a64:	00b7ffc4 	movi	r2,-8193
   14a68:	1884703a 	and	r2,r3,r2
   14a6c:	8080030d 	sth	r2,12(r16)
   14a70:	0100230e 	bge	zero,r4,14b00 <__srefill_r+0x130>
   14a74:	0009883a 	mov	r4,zero
   14a78:	2005883a 	mov	r2,r4
   14a7c:	dfc00217 	ldw	ra,8(sp)
   14a80:	dc400117 	ldw	r17,4(sp)
   14a84:	dc000017 	ldw	r16,0(sp)
   14a88:	dec00304 	addi	sp,sp,12
   14a8c:	f800283a 	ret
   14a90:	81400c17 	ldw	r5,48(r16)
   14a94:	283fe426 	beq	r5,zero,14a28 <__srefill_r+0x58>
   14a98:	80801004 	addi	r2,r16,64
   14a9c:	28800226 	beq	r5,r2,14aa8 <__srefill_r+0xd8>
   14aa0:	8809883a 	mov	r4,r17
   14aa4:	00124d00 	call	124d0 <_free_r>
   14aa8:	80800f17 	ldw	r2,60(r16)
   14aac:	80000c15 	stw	zero,48(r16)
   14ab0:	80800115 	stw	r2,4(r16)
   14ab4:	103fdc26 	beq	r2,zero,14a28 <__srefill_r+0x58>
   14ab8:	80800e17 	ldw	r2,56(r16)
   14abc:	0009883a 	mov	r4,zero
   14ac0:	80800015 	stw	r2,0(r16)
   14ac4:	2005883a 	mov	r2,r4
   14ac8:	dfc00217 	ldw	ra,8(sp)
   14acc:	dc400117 	ldw	r17,4(sp)
   14ad0:	dc000017 	ldw	r16,0(sp)
   14ad4:	dec00304 	addi	sp,sp,12
   14ad8:	f800283a 	ret
   14adc:	013fffc4 	movi	r4,-1
   14ae0:	2005883a 	mov	r2,r4
   14ae4:	dfc00217 	ldw	ra,8(sp)
   14ae8:	dc400117 	ldw	r17,4(sp)
   14aec:	dc000017 	ldw	r16,0(sp)
   14af0:	dec00304 	addi	sp,sp,12
   14af4:	f800283a 	ret
   14af8:	0011ef00 	call	11ef0 <__sinit>
   14afc:	003fbd06 	br	149f4 <__srefill_r+0x24>
   14b00:	20000b1e 	bne	r4,zero,14b30 <__srefill_r+0x160>
   14b04:	10800814 	ori	r2,r2,32
   14b08:	013fffc4 	movi	r4,-1
   14b0c:	8080030d 	sth	r2,12(r16)
   14b10:	003fd906 	br	14a78 <__srefill_r+0xa8>
   14b14:	008000b4 	movhi	r2,2
   14b18:	10834004 	addi	r2,r2,3328
   14b1c:	11000017 	ldw	r4,0(r2)
   14b20:	01400074 	movhi	r5,1
   14b24:	2952e504 	addi	r5,r5,19348
   14b28:	00133280 	call	13328 <_fwalk>
   14b2c:	003fc306 	br	14a3c <__srefill_r+0x6c>
   14b30:	10801014 	ori	r2,r2,64
   14b34:	013fffc4 	movi	r4,-1
   14b38:	8080030d 	sth	r2,12(r16)
   14b3c:	80000115 	stw	zero,4(r16)
   14b40:	003fcd06 	br	14a78 <__srefill_r+0xa8>
   14b44:	8809883a 	mov	r4,r17
   14b48:	800b883a 	mov	r5,r16
   14b4c:	00133e00 	call	133e0 <__smakebuf_r>
   14b50:	003fb706 	br	14a30 <__srefill_r+0x60>
   14b54:	18c01014 	ori	r3,r3,64
   14b58:	00800244 	movi	r2,9
   14b5c:	013fffc4 	movi	r4,-1
   14b60:	88800015 	stw	r2,0(r17)
   14b64:	80c0030d 	sth	r3,12(r16)
   14b68:	003fc306 	br	14a78 <__srefill_r+0xa8>
   14b6c:	8809883a 	mov	r4,r17
   14b70:	800b883a 	mov	r5,r16
   14b74:	00119c40 	call	119c4 <_fflush_r>
   14b78:	103fd81e 	bne	r2,zero,14adc <__srefill_r+0x10c>
   14b7c:	8080030b 	ldhu	r2,12(r16)
   14b80:	80000215 	stw	zero,8(r16)
   14b84:	80000615 	stw	zero,24(r16)
   14b88:	10bffdcc 	andi	r2,r2,65527
   14b8c:	8080030d 	sth	r2,12(r16)
   14b90:	003fa206 	br	14a1c <__srefill_r+0x4c>

00014b94 <lflush>:
   14b94:	20c0030b 	ldhu	r3,12(r4)
   14b98:	01400244 	movi	r5,9
   14b9c:	0005883a 	mov	r2,zero
   14ba0:	18c0024c 	andi	r3,r3,9
   14ba4:	19400126 	beq	r3,r5,14bac <lflush+0x18>
   14ba8:	f800283a 	ret
   14bac:	0011bc01 	jmpi	11bc0 <fflush>

00014bb0 <__srget_r>:
   14bb0:	defffe04 	addi	sp,sp,-8
   14bb4:	dc000015 	stw	r16,0(sp)
   14bb8:	dfc00115 	stw	ra,4(sp)
   14bbc:	2821883a 	mov	r16,r5
   14bc0:	00149d00 	call	149d0 <__srefill_r>
   14bc4:	013fffc4 	movi	r4,-1
   14bc8:	1000071e 	bne	r2,zero,14be8 <__srget_r+0x38>
   14bcc:	80800117 	ldw	r2,4(r16)
   14bd0:	81000017 	ldw	r4,0(r16)
   14bd4:	10bfffc4 	addi	r2,r2,-1
   14bd8:	20c00044 	addi	r3,r4,1
   14bdc:	80800115 	stw	r2,4(r16)
   14be0:	21000003 	ldbu	r4,0(r4)
   14be4:	80c00015 	stw	r3,0(r16)
   14be8:	2005883a 	mov	r2,r4
   14bec:	dfc00117 	ldw	ra,4(sp)
   14bf0:	dc000017 	ldw	r16,0(sp)
   14bf4:	dec00204 	addi	sp,sp,8
   14bf8:	f800283a 	ret

00014bfc <__srget>:
   14bfc:	008000b4 	movhi	r2,2
   14c00:	10833f04 	addi	r2,r2,3324
   14c04:	200b883a 	mov	r5,r4
   14c08:	11000017 	ldw	r4,0(r2)
   14c0c:	0014bb01 	jmpi	14bb0 <__srget_r>

00014c10 <_sbrk_r>:
   14c10:	defffd04 	addi	sp,sp,-12
   14c14:	dc000015 	stw	r16,0(sp)
   14c18:	040000b4 	movhi	r16,2
   14c1c:	840a1704 	addi	r16,r16,10332
   14c20:	dc400115 	stw	r17,4(sp)
   14c24:	80000015 	stw	zero,0(r16)
   14c28:	2023883a 	mov	r17,r4
   14c2c:	2809883a 	mov	r4,r5
   14c30:	dfc00215 	stw	ra,8(sp)
   14c34:	001c2d80 	call	1c2d8 <sbrk>
   14c38:	1007883a 	mov	r3,r2
   14c3c:	00bfffc4 	movi	r2,-1
   14c40:	18800626 	beq	r3,r2,14c5c <_sbrk_r+0x4c>
   14c44:	1805883a 	mov	r2,r3
   14c48:	dfc00217 	ldw	ra,8(sp)
   14c4c:	dc400117 	ldw	r17,4(sp)
   14c50:	dc000017 	ldw	r16,0(sp)
   14c54:	dec00304 	addi	sp,sp,12
   14c58:	f800283a 	ret
   14c5c:	80800017 	ldw	r2,0(r16)
   14c60:	103ff826 	beq	r2,zero,14c44 <_sbrk_r+0x34>
   14c64:	88800015 	stw	r2,0(r17)
   14c68:	1805883a 	mov	r2,r3
   14c6c:	dfc00217 	ldw	ra,8(sp)
   14c70:	dc400117 	ldw	r17,4(sp)
   14c74:	dc000017 	ldw	r16,0(sp)
   14c78:	dec00304 	addi	sp,sp,12
   14c7c:	f800283a 	ret

00014c80 <_raise_r>:
   14c80:	defffd04 	addi	sp,sp,-12
   14c84:	008007c4 	movi	r2,31
   14c88:	dc400115 	stw	r17,4(sp)
   14c8c:	dc000015 	stw	r16,0(sp)
   14c90:	dfc00215 	stw	ra,8(sp)
   14c94:	2821883a 	mov	r16,r5
   14c98:	2023883a 	mov	r17,r4
   14c9c:	11402736 	bltu	r2,r5,14d3c <_raise_r+0xbc>
   14ca0:	20c0b717 	ldw	r3,732(r4)
   14ca4:	18001326 	beq	r3,zero,14cf4 <_raise_r+0x74>
   14ca8:	2945883a 	add	r2,r5,r5
   14cac:	1085883a 	add	r2,r2,r2
   14cb0:	188b883a 	add	r5,r3,r2
   14cb4:	28c00017 	ldw	r3,0(r5)
   14cb8:	18000e26 	beq	r3,zero,14cf4 <_raise_r+0x74>
   14cbc:	01000044 	movi	r4,1
   14cc0:	19000526 	beq	r3,r4,14cd8 <_raise_r+0x58>
   14cc4:	00bfffc4 	movi	r2,-1
   14cc8:	18801326 	beq	r3,r2,14d18 <_raise_r+0x98>
   14ccc:	28000015 	stw	zero,0(r5)
   14cd0:	8009883a 	mov	r4,r16
   14cd4:	183ee83a 	callr	r3
   14cd8:	0007883a 	mov	r3,zero
   14cdc:	1805883a 	mov	r2,r3
   14ce0:	dfc00217 	ldw	ra,8(sp)
   14ce4:	dc400117 	ldw	r17,4(sp)
   14ce8:	dc000017 	ldw	r16,0(sp)
   14cec:	dec00304 	addi	sp,sp,12
   14cf0:	f800283a 	ret
   14cf4:	0014f580 	call	14f58 <_getpid_r>
   14cf8:	100b883a 	mov	r5,r2
   14cfc:	8809883a 	mov	r4,r17
   14d00:	800d883a 	mov	r6,r16
   14d04:	dfc00217 	ldw	ra,8(sp)
   14d08:	dc400117 	ldw	r17,4(sp)
   14d0c:	dc000017 	ldw	r16,0(sp)
   14d10:	dec00304 	addi	sp,sp,12
   14d14:	0014f5c1 	jmpi	14f5c <_kill_r>
   14d18:	2007883a 	mov	r3,r4
   14d1c:	00800584 	movi	r2,22
   14d20:	88800015 	stw	r2,0(r17)
   14d24:	1805883a 	mov	r2,r3
   14d28:	dfc00217 	ldw	ra,8(sp)
   14d2c:	dc400117 	ldw	r17,4(sp)
   14d30:	dc000017 	ldw	r16,0(sp)
   14d34:	dec00304 	addi	sp,sp,12
   14d38:	f800283a 	ret
   14d3c:	00800584 	movi	r2,22
   14d40:	00ffffc4 	movi	r3,-1
   14d44:	20800015 	stw	r2,0(r4)
   14d48:	003fe406 	br	14cdc <_raise_r+0x5c>

00014d4c <raise>:
   14d4c:	008000b4 	movhi	r2,2
   14d50:	10833f04 	addi	r2,r2,3324
   14d54:	200b883a 	mov	r5,r4
   14d58:	11000017 	ldw	r4,0(r2)
   14d5c:	0014c801 	jmpi	14c80 <_raise_r>

00014d60 <_init_signal_r>:
   14d60:	2080b717 	ldw	r2,732(r4)
   14d64:	defffe04 	addi	sp,sp,-8
   14d68:	dc000015 	stw	r16,0(sp)
   14d6c:	dfc00115 	stw	ra,4(sp)
   14d70:	2021883a 	mov	r16,r4
   14d74:	10000526 	beq	r2,zero,14d8c <_init_signal_r+0x2c>
   14d78:	0005883a 	mov	r2,zero
   14d7c:	dfc00117 	ldw	ra,4(sp)
   14d80:	dc000017 	ldw	r16,0(sp)
   14d84:	dec00204 	addi	sp,sp,8
   14d88:	f800283a 	ret
   14d8c:	01402004 	movi	r5,128
   14d90:	001359c0 	call	1359c <_malloc_r>
   14d94:	1009883a 	mov	r4,r2
   14d98:	8080b715 	stw	r2,732(r16)
   14d9c:	10000726 	beq	r2,zero,14dbc <_init_signal_r+0x5c>
   14da0:	0007883a 	mov	r3,zero
   14da4:	01402004 	movi	r5,128
   14da8:	20c5883a 	add	r2,r4,r3
   14dac:	18c00104 	addi	r3,r3,4
   14db0:	10000015 	stw	zero,0(r2)
   14db4:	197ffc1e 	bne	r3,r5,14da8 <_init_signal_r+0x48>
   14db8:	003fef06 	br	14d78 <_init_signal_r+0x18>
   14dbc:	00bfffc4 	movi	r2,-1
   14dc0:	003fee06 	br	14d7c <_init_signal_r+0x1c>

00014dc4 <_init_signal>:
   14dc4:	008000b4 	movhi	r2,2
   14dc8:	10833f04 	addi	r2,r2,3324
   14dcc:	11000017 	ldw	r4,0(r2)
   14dd0:	0014d601 	jmpi	14d60 <_init_signal_r>

00014dd4 <__sigtramp_r>:
   14dd4:	defffd04 	addi	sp,sp,-12
   14dd8:	008007c4 	movi	r2,31
   14ddc:	dc000115 	stw	r16,4(sp)
   14de0:	dfc00215 	stw	ra,8(sp)
   14de4:	2021883a 	mov	r16,r4
   14de8:	11401336 	bltu	r2,r5,14e38 <__sigtramp_r+0x64>
   14dec:	20c0b717 	ldw	r3,732(r4)
   14df0:	18001f26 	beq	r3,zero,14e70 <__sigtramp_r+0x9c>
   14df4:	2945883a 	add	r2,r5,r5
   14df8:	1085883a 	add	r2,r2,r2
   14dfc:	10c9883a 	add	r4,r2,r3
   14e00:	20c00017 	ldw	r3,0(r4)
   14e04:	18001626 	beq	r3,zero,14e60 <__sigtramp_r+0x8c>
   14e08:	00bfffc4 	movi	r2,-1
   14e0c:	18801626 	beq	r3,r2,14e68 <__sigtramp_r+0x94>
   14e10:	00800044 	movi	r2,1
   14e14:	18800d26 	beq	r3,r2,14e4c <__sigtramp_r+0x78>
   14e18:	20000015 	stw	zero,0(r4)
   14e1c:	2809883a 	mov	r4,r5
   14e20:	183ee83a 	callr	r3
   14e24:	0005883a 	mov	r2,zero
   14e28:	dfc00217 	ldw	ra,8(sp)
   14e2c:	dc000117 	ldw	r16,4(sp)
   14e30:	dec00304 	addi	sp,sp,12
   14e34:	f800283a 	ret
   14e38:	00bfffc4 	movi	r2,-1
   14e3c:	dfc00217 	ldw	ra,8(sp)
   14e40:	dc000117 	ldw	r16,4(sp)
   14e44:	dec00304 	addi	sp,sp,12
   14e48:	f800283a 	ret
   14e4c:	008000c4 	movi	r2,3
   14e50:	dfc00217 	ldw	ra,8(sp)
   14e54:	dc000117 	ldw	r16,4(sp)
   14e58:	dec00304 	addi	sp,sp,12
   14e5c:	f800283a 	ret
   14e60:	00800044 	movi	r2,1
   14e64:	003ff006 	br	14e28 <__sigtramp_r+0x54>
   14e68:	00800084 	movi	r2,2
   14e6c:	003fee06 	br	14e28 <__sigtramp_r+0x54>
   14e70:	d9400015 	stw	r5,0(sp)
   14e74:	0014d600 	call	14d60 <_init_signal_r>
   14e78:	d9400017 	ldw	r5,0(sp)
   14e7c:	103fee1e 	bne	r2,zero,14e38 <__sigtramp_r+0x64>
   14e80:	80c0b717 	ldw	r3,732(r16)
   14e84:	003fdb06 	br	14df4 <__sigtramp_r+0x20>

00014e88 <__sigtramp>:
   14e88:	008000b4 	movhi	r2,2
   14e8c:	10833f04 	addi	r2,r2,3324
   14e90:	200b883a 	mov	r5,r4
   14e94:	11000017 	ldw	r4,0(r2)
   14e98:	0014dd41 	jmpi	14dd4 <__sigtramp_r>

00014e9c <_signal_r>:
   14e9c:	defffc04 	addi	sp,sp,-16
   14ea0:	008007c4 	movi	r2,31
   14ea4:	dc800215 	stw	r18,8(sp)
   14ea8:	dc400115 	stw	r17,4(sp)
   14eac:	dc000015 	stw	r16,0(sp)
   14eb0:	dfc00315 	stw	ra,12(sp)
   14eb4:	2823883a 	mov	r17,r5
   14eb8:	00ffffc4 	movi	r3,-1
   14ebc:	3025883a 	mov	r18,r6
   14ec0:	2021883a 	mov	r16,r4
   14ec4:	1140092e 	bgeu	r2,r5,14eec <_signal_r+0x50>
   14ec8:	00800584 	movi	r2,22
   14ecc:	20800015 	stw	r2,0(r4)
   14ed0:	1805883a 	mov	r2,r3
   14ed4:	dfc00317 	ldw	ra,12(sp)
   14ed8:	dc800217 	ldw	r18,8(sp)
   14edc:	dc400117 	ldw	r17,4(sp)
   14ee0:	dc000017 	ldw	r16,0(sp)
   14ee4:	dec00404 	addi	sp,sp,16
   14ee8:	f800283a 	ret
   14eec:	2140b717 	ldw	r5,732(r4)
   14ef0:	28000c26 	beq	r5,zero,14f24 <_signal_r+0x88>
   14ef4:	8c45883a 	add	r2,r17,r17
   14ef8:	1085883a 	add	r2,r2,r2
   14efc:	1145883a 	add	r2,r2,r5
   14f00:	10c00017 	ldw	r3,0(r2)
   14f04:	14800015 	stw	r18,0(r2)
   14f08:	1805883a 	mov	r2,r3
   14f0c:	dfc00317 	ldw	ra,12(sp)
   14f10:	dc800217 	ldw	r18,8(sp)
   14f14:	dc400117 	ldw	r17,4(sp)
   14f18:	dc000017 	ldw	r16,0(sp)
   14f1c:	dec00404 	addi	sp,sp,16
   14f20:	f800283a 	ret
   14f24:	0014d600 	call	14d60 <_init_signal_r>
   14f28:	1000021e 	bne	r2,zero,14f34 <_signal_r+0x98>
   14f2c:	8140b717 	ldw	r5,732(r16)
   14f30:	003ff006 	br	14ef4 <_signal_r+0x58>
   14f34:	00ffffc4 	movi	r3,-1
   14f38:	003fe506 	br	14ed0 <_signal_r+0x34>

00014f3c <signal>:
   14f3c:	018000b4 	movhi	r6,2
   14f40:	31833f04 	addi	r6,r6,3324
   14f44:	2007883a 	mov	r3,r4
   14f48:	31000017 	ldw	r4,0(r6)
   14f4c:	280d883a 	mov	r6,r5
   14f50:	180b883a 	mov	r5,r3
   14f54:	0014e9c1 	jmpi	14e9c <_signal_r>

00014f58 <_getpid_r>:
   14f58:	001b86c1 	jmpi	1b86c <getpid>

00014f5c <_kill_r>:
   14f5c:	defffd04 	addi	sp,sp,-12
   14f60:	dc000015 	stw	r16,0(sp)
   14f64:	040000b4 	movhi	r16,2
   14f68:	840a1704 	addi	r16,r16,10332
   14f6c:	dc400115 	stw	r17,4(sp)
   14f70:	80000015 	stw	zero,0(r16)
   14f74:	2023883a 	mov	r17,r4
   14f78:	2809883a 	mov	r4,r5
   14f7c:	300b883a 	mov	r5,r6
   14f80:	dfc00215 	stw	ra,8(sp)
   14f84:	001b9ac0 	call	1b9ac <kill>
   14f88:	1007883a 	mov	r3,r2
   14f8c:	00bfffc4 	movi	r2,-1
   14f90:	18800626 	beq	r3,r2,14fac <_kill_r+0x50>
   14f94:	1805883a 	mov	r2,r3
   14f98:	dfc00217 	ldw	ra,8(sp)
   14f9c:	dc400117 	ldw	r17,4(sp)
   14fa0:	dc000017 	ldw	r16,0(sp)
   14fa4:	dec00304 	addi	sp,sp,12
   14fa8:	f800283a 	ret
   14fac:	80800017 	ldw	r2,0(r16)
   14fb0:	103ff826 	beq	r2,zero,14f94 <_kill_r+0x38>
   14fb4:	88800015 	stw	r2,0(r17)
   14fb8:	1805883a 	mov	r2,r3
   14fbc:	dfc00217 	ldw	ra,8(sp)
   14fc0:	dc400117 	ldw	r17,4(sp)
   14fc4:	dc000017 	ldw	r16,0(sp)
   14fc8:	dec00304 	addi	sp,sp,12
   14fcc:	f800283a 	ret

00014fd0 <__sclose>:
   14fd0:	2940038f 	ldh	r5,14(r5)
   14fd4:	00176e41 	jmpi	176e4 <_close_r>

00014fd8 <__sseek>:
   14fd8:	defffe04 	addi	sp,sp,-8
   14fdc:	dc000015 	stw	r16,0(sp)
   14fe0:	2821883a 	mov	r16,r5
   14fe4:	2940038f 	ldh	r5,14(r5)
   14fe8:	dfc00115 	stw	ra,4(sp)
   14fec:	00190f40 	call	190f4 <_lseek_r>
   14ff0:	1007883a 	mov	r3,r2
   14ff4:	00bfffc4 	movi	r2,-1
   14ff8:	18800926 	beq	r3,r2,15020 <__sseek+0x48>
   14ffc:	8080030b 	ldhu	r2,12(r16)
   15000:	80c01415 	stw	r3,80(r16)
   15004:	10840014 	ori	r2,r2,4096
   15008:	8080030d 	sth	r2,12(r16)
   1500c:	1805883a 	mov	r2,r3
   15010:	dfc00117 	ldw	ra,4(sp)
   15014:	dc000017 	ldw	r16,0(sp)
   15018:	dec00204 	addi	sp,sp,8
   1501c:	f800283a 	ret
   15020:	8080030b 	ldhu	r2,12(r16)
   15024:	10bbffcc 	andi	r2,r2,61439
   15028:	8080030d 	sth	r2,12(r16)
   1502c:	1805883a 	mov	r2,r3
   15030:	dfc00117 	ldw	ra,4(sp)
   15034:	dc000017 	ldw	r16,0(sp)
   15038:	dec00204 	addi	sp,sp,8
   1503c:	f800283a 	ret

00015040 <__swrite>:
   15040:	2880030b 	ldhu	r2,12(r5)
   15044:	defffb04 	addi	sp,sp,-20
   15048:	dcc00315 	stw	r19,12(sp)
   1504c:	1080400c 	andi	r2,r2,256
   15050:	dc800215 	stw	r18,8(sp)
   15054:	dc400115 	stw	r17,4(sp)
   15058:	dc000015 	stw	r16,0(sp)
   1505c:	3027883a 	mov	r19,r6
   15060:	3825883a 	mov	r18,r7
   15064:	dfc00415 	stw	ra,16(sp)
   15068:	2821883a 	mov	r16,r5
   1506c:	000d883a 	mov	r6,zero
   15070:	01c00084 	movi	r7,2
   15074:	2023883a 	mov	r17,r4
   15078:	10000226 	beq	r2,zero,15084 <__swrite+0x44>
   1507c:	2940038f 	ldh	r5,14(r5)
   15080:	00190f40 	call	190f4 <_lseek_r>
   15084:	8080030b 	ldhu	r2,12(r16)
   15088:	8140038f 	ldh	r5,14(r16)
   1508c:	8809883a 	mov	r4,r17
   15090:	10bbffcc 	andi	r2,r2,61439
   15094:	980d883a 	mov	r6,r19
   15098:	900f883a 	mov	r7,r18
   1509c:	8080030d 	sth	r2,12(r16)
   150a0:	dfc00417 	ldw	ra,16(sp)
   150a4:	dcc00317 	ldw	r19,12(sp)
   150a8:	dc800217 	ldw	r18,8(sp)
   150ac:	dc400117 	ldw	r17,4(sp)
   150b0:	dc000017 	ldw	r16,0(sp)
   150b4:	dec00504 	addi	sp,sp,20
   150b8:	00175301 	jmpi	17530 <_write_r>

000150bc <__sread>:
   150bc:	defffe04 	addi	sp,sp,-8
   150c0:	dc000015 	stw	r16,0(sp)
   150c4:	2821883a 	mov	r16,r5
   150c8:	2940038f 	ldh	r5,14(r5)
   150cc:	dfc00115 	stw	ra,4(sp)
   150d0:	001a1600 	call	1a160 <_read_r>
   150d4:	1007883a 	mov	r3,r2
   150d8:	10000816 	blt	r2,zero,150fc <__sread+0x40>
   150dc:	80801417 	ldw	r2,80(r16)
   150e0:	10c5883a 	add	r2,r2,r3
   150e4:	80801415 	stw	r2,80(r16)
   150e8:	1805883a 	mov	r2,r3
   150ec:	dfc00117 	ldw	ra,4(sp)
   150f0:	dc000017 	ldw	r16,0(sp)
   150f4:	dec00204 	addi	sp,sp,8
   150f8:	f800283a 	ret
   150fc:	8080030b 	ldhu	r2,12(r16)
   15100:	10bbffcc 	andi	r2,r2,61439
   15104:	8080030d 	sth	r2,12(r16)
   15108:	1805883a 	mov	r2,r3
   1510c:	dfc00117 	ldw	ra,4(sp)
   15110:	dc000017 	ldw	r16,0(sp)
   15114:	dec00204 	addi	sp,sp,8
   15118:	f800283a 	ret

0001511c <strlen>:
   1511c:	208000cc 	andi	r2,r4,3
   15120:	2011883a 	mov	r8,r4
   15124:	1000161e 	bne	r2,zero,15180 <strlen+0x64>
   15128:	20c00017 	ldw	r3,0(r4)
   1512c:	017fbff4 	movhi	r5,65279
   15130:	297fbfc4 	addi	r5,r5,-257
   15134:	01e02074 	movhi	r7,32897
   15138:	39e02004 	addi	r7,r7,-32640
   1513c:	1945883a 	add	r2,r3,r5
   15140:	11c4703a 	and	r2,r2,r7
   15144:	00c6303a 	nor	r3,zero,r3
   15148:	1886703a 	and	r3,r3,r2
   1514c:	18000c1e 	bne	r3,zero,15180 <strlen+0x64>
   15150:	280d883a 	mov	r6,r5
   15154:	380b883a 	mov	r5,r7
   15158:	21000104 	addi	r4,r4,4
   1515c:	20800017 	ldw	r2,0(r4)
   15160:	1187883a 	add	r3,r2,r6
   15164:	1946703a 	and	r3,r3,r5
   15168:	0084303a 	nor	r2,zero,r2
   1516c:	10c4703a 	and	r2,r2,r3
   15170:	103ff926 	beq	r2,zero,15158 <strlen+0x3c>
   15174:	20800007 	ldb	r2,0(r4)
   15178:	10000326 	beq	r2,zero,15188 <strlen+0x6c>
   1517c:	21000044 	addi	r4,r4,1
   15180:	20800007 	ldb	r2,0(r4)
   15184:	103ffd1e 	bne	r2,zero,1517c <strlen+0x60>
   15188:	2205c83a 	sub	r2,r4,r8
   1518c:	f800283a 	ret

00015190 <strtok>:
   15190:	008000b4 	movhi	r2,2
   15194:	10833f04 	addi	r2,r2,3324
   15198:	11800017 	ldw	r6,0(r2)
   1519c:	01c00044 	movi	r7,1
   151a0:	31801704 	addi	r6,r6,92
   151a4:	00151a81 	jmpi	151a8 <__strtok_r>

000151a8 <__strtok_r>:
   151a8:	20002426 	beq	r4,zero,1523c <__strtok_r+0x94>
   151ac:	22000007 	ldb	r8,0(r4)
   151b0:	21000044 	addi	r4,r4,1
   151b4:	2807883a 	mov	r3,r5
   151b8:	3812c03a 	cmpne	r9,r7,zero
   151bc:	22bfffc4 	addi	r10,r4,-1
   151c0:	18800007 	ldb	r2,0(r3)
   151c4:	18c00044 	addi	r3,r3,1
   151c8:	10000626 	beq	r2,zero,151e4 <__strtok_r+0x3c>
   151cc:	40bffc1e 	bne	r8,r2,151c0 <__strtok_r+0x18>
   151d0:	483ff61e 	bne	r9,zero,151ac <__strtok_r+0x4>
   151d4:	31000015 	stw	r4,0(r6)
   151d8:	5005883a 	mov	r2,r10
   151dc:	203fffc5 	stb	zero,-1(r4)
   151e0:	f800283a 	ret
   151e4:	2013883a 	mov	r9,r4
   151e8:	40001226 	beq	r8,zero,15234 <__strtok_r+0x8c>
   151ec:	21c00007 	ldb	r7,0(r4)
   151f0:	2807883a 	mov	r3,r5
   151f4:	21000044 	addi	r4,r4,1
   151f8:	4a3fffc4 	addi	r8,r9,-1
   151fc:	00000106 	br	15204 <__strtok_r+0x5c>
   15200:	103ffa26 	beq	r2,zero,151ec <__strtok_r+0x44>
   15204:	18800007 	ldb	r2,0(r3)
   15208:	18c00044 	addi	r3,r3,1
   1520c:	38bffc1e 	bne	r7,r2,15200 <__strtok_r+0x58>
   15210:	1000041e 	bne	r2,zero,15224 <__strtok_r+0x7c>
   15214:	0009883a 	mov	r4,zero
   15218:	4005883a 	mov	r2,r8
   1521c:	31000015 	stw	r4,0(r6)
   15220:	f800283a 	ret
   15224:	203fffc5 	stb	zero,-1(r4)
   15228:	4005883a 	mov	r2,r8
   1522c:	31000015 	stw	r4,0(r6)
   15230:	f800283a 	ret
   15234:	30000015 	stw	zero,0(r6)
   15238:	f800283a 	ret
   1523c:	31000017 	ldw	r4,0(r6)
   15240:	203fda1e 	bne	r4,zero,151ac <__strtok_r+0x4>
   15244:	0005883a 	mov	r2,zero
   15248:	f800283a 	ret

0001524c <strtok_r>:
   1524c:	01c00044 	movi	r7,1
   15250:	00151a81 	jmpi	151a8 <__strtok_r>

00015254 <_strtol_r>:
   15254:	defff304 	addi	sp,sp,-52
   15258:	008000b4 	movhi	r2,2
   1525c:	10833e04 	addi	r2,r2,3320
   15260:	dcc00615 	stw	r19,24(sp)
   15264:	14c00017 	ldw	r19,0(r2)
   15268:	ddc00a15 	stw	r23,40(sp)
   1526c:	dc000315 	stw	r16,12(sp)
   15270:	dfc00c15 	stw	ra,48(sp)
   15274:	df000b15 	stw	fp,44(sp)
   15278:	dd800915 	stw	r22,36(sp)
   1527c:	dd400815 	stw	r21,32(sp)
   15280:	dd000715 	stw	r20,28(sp)
   15284:	dc800515 	stw	r18,20(sp)
   15288:	dc400415 	stw	r17,16(sp)
   1528c:	282f883a 	mov	r23,r5
   15290:	d9000015 	stw	r4,0(sp)
   15294:	d9800115 	stw	r6,4(sp)
   15298:	2821883a 	mov	r16,r5
   1529c:	84400007 	ldb	r17,0(r16)
   152a0:	84000044 	addi	r16,r16,1
   152a4:	9c47883a 	add	r3,r19,r17
   152a8:	18800003 	ldbu	r2,0(r3)
   152ac:	1080020c 	andi	r2,r2,8
   152b0:	103ffa1e 	bne	r2,zero,1529c <_strtol_r+0x48>
   152b4:	00800b44 	movi	r2,45
   152b8:	88805c26 	beq	r17,r2,1542c <_strtol_r+0x1d8>
   152bc:	00800ac4 	movi	r2,43
   152c0:	88805726 	beq	r17,r2,15420 <_strtol_r+0x1cc>
   152c4:	0039883a 	mov	fp,zero
   152c8:	3807003a 	cmpeq	r3,r7,zero
   152cc:	1800431e 	bne	r3,zero,153dc <_strtol_r+0x188>
   152d0:	00800404 	movi	r2,16
   152d4:	38804126 	beq	r7,r2,153dc <_strtol_r+0x188>
   152d8:	3829883a 	mov	r20,r7
   152dc:	e02cc03a 	cmpne	r22,fp,zero
   152e0:	b0004b1e 	bne	r22,zero,15410 <_strtol_r+0x1bc>
   152e4:	04a00034 	movhi	r18,32768
   152e8:	94bfffc4 	addi	r18,r18,-1
   152ec:	9009883a 	mov	r4,r18
   152f0:	a00b883a 	mov	r5,r20
   152f4:	d9c00215 	stw	r7,8(sp)
   152f8:	0010a240 	call	10a24 <__umodsi3>
   152fc:	9009883a 	mov	r4,r18
   15300:	a00b883a 	mov	r5,r20
   15304:	102b883a 	mov	r21,r2
   15308:	0010a1c0 	call	10a1c <__udivsi3>
   1530c:	1011883a 	mov	r8,r2
   15310:	9c45883a 	add	r2,r19,r17
   15314:	11000003 	ldbu	r4,0(r2)
   15318:	000b883a 	mov	r5,zero
   1531c:	000d883a 	mov	r6,zero
   15320:	20c0010c 	andi	r3,r4,4
   15324:	d9c00217 	ldw	r7,8(sp)
   15328:	18000e26 	beq	r3,zero,15364 <_strtol_r+0x110>
   1532c:	88fff404 	addi	r3,r17,-48
   15330:	19c0140e 	bge	r3,r7,15384 <_strtol_r+0x130>
   15334:	30003116 	blt	r6,zero,153fc <_strtol_r+0x1a8>
   15338:	41403036 	bltu	r8,r5,153fc <_strtol_r+0x1a8>
   1533c:	2a002e26 	beq	r5,r8,153f8 <_strtol_r+0x1a4>
   15340:	2d05383a 	mul	r2,r5,r20
   15344:	01800044 	movi	r6,1
   15348:	10cb883a 	add	r5,r2,r3
   1534c:	84400007 	ldb	r17,0(r16)
   15350:	84000044 	addi	r16,r16,1
   15354:	9c45883a 	add	r2,r19,r17
   15358:	11000003 	ldbu	r4,0(r2)
   1535c:	20c0010c 	andi	r3,r4,4
   15360:	183ff21e 	bne	r3,zero,1532c <_strtol_r+0xd8>
   15364:	208000cc 	andi	r2,r4,3
   15368:	10000626 	beq	r2,zero,15384 <_strtol_r+0x130>
   1536c:	2080004c 	andi	r2,r4,1
   15370:	1005003a 	cmpeq	r2,r2,zero
   15374:	1000231e 	bne	r2,zero,15404 <_strtol_r+0x1b0>
   15378:	00800dc4 	movi	r2,55
   1537c:	8887c83a 	sub	r3,r17,r2
   15380:	19ffec16 	blt	r3,r7,15334 <_strtol_r+0xe0>
   15384:	30002d16 	blt	r6,zero,1543c <_strtol_r+0x1e8>
   15388:	b000231e 	bne	r22,zero,15418 <_strtol_r+0x1c4>
   1538c:	2807883a 	mov	r3,r5
   15390:	d8800117 	ldw	r2,4(sp)
   15394:	10000426 	beq	r2,zero,153a8 <_strtol_r+0x154>
   15398:	30000126 	beq	r6,zero,153a0 <_strtol_r+0x14c>
   1539c:	85ffffc4 	addi	r23,r16,-1
   153a0:	d9000117 	ldw	r4,4(sp)
   153a4:	25c00015 	stw	r23,0(r4)
   153a8:	1805883a 	mov	r2,r3
   153ac:	dfc00c17 	ldw	ra,48(sp)
   153b0:	df000b17 	ldw	fp,44(sp)
   153b4:	ddc00a17 	ldw	r23,40(sp)
   153b8:	dd800917 	ldw	r22,36(sp)
   153bc:	dd400817 	ldw	r21,32(sp)
   153c0:	dd000717 	ldw	r20,28(sp)
   153c4:	dcc00617 	ldw	r19,24(sp)
   153c8:	dc800517 	ldw	r18,20(sp)
   153cc:	dc400417 	ldw	r17,16(sp)
   153d0:	dc000317 	ldw	r16,12(sp)
   153d4:	dec00d04 	addi	sp,sp,52
   153d8:	f800283a 	ret
   153dc:	00800c04 	movi	r2,48
   153e0:	88801d26 	beq	r17,r2,15458 <_strtol_r+0x204>
   153e4:	183fbc26 	beq	r3,zero,152d8 <_strtol_r+0x84>
   153e8:	00800c04 	movi	r2,48
   153ec:	88802726 	beq	r17,r2,1548c <_strtol_r+0x238>
   153f0:	01c00284 	movi	r7,10
   153f4:	003fb806 	br	152d8 <_strtol_r+0x84>
   153f8:	a8ffd10e 	bge	r21,r3,15340 <_strtol_r+0xec>
   153fc:	01bfffc4 	movi	r6,-1
   15400:	003fd206 	br	1534c <_strtol_r+0xf8>
   15404:	008015c4 	movi	r2,87
   15408:	8887c83a 	sub	r3,r17,r2
   1540c:	003fdc06 	br	15380 <_strtol_r+0x12c>
   15410:	04a00034 	movhi	r18,32768
   15414:	003fb506 	br	152ec <_strtol_r+0x98>
   15418:	0147c83a 	sub	r3,zero,r5
   1541c:	003fdc06 	br	15390 <_strtol_r+0x13c>
   15420:	84400007 	ldb	r17,0(r16)
   15424:	84000044 	addi	r16,r16,1
   15428:	003fa606 	br	152c4 <_strtol_r+0x70>
   1542c:	84400007 	ldb	r17,0(r16)
   15430:	07000044 	movi	fp,1
   15434:	84000044 	addi	r16,r16,1
   15438:	003fa306 	br	152c8 <_strtol_r+0x74>
   1543c:	e005003a 	cmpeq	r2,fp,zero
   15440:	10000f1e 	bne	r2,zero,15480 <_strtol_r+0x22c>
   15444:	00e00034 	movhi	r3,32768
   15448:	d9000017 	ldw	r4,0(sp)
   1544c:	00800884 	movi	r2,34
   15450:	20800015 	stw	r2,0(r4)
   15454:	003fce06 	br	15390 <_strtol_r+0x13c>
   15458:	81000007 	ldb	r4,0(r16)
   1545c:	00801e04 	movi	r2,120
   15460:	20800226 	beq	r4,r2,1546c <_strtol_r+0x218>
   15464:	00801604 	movi	r2,88
   15468:	20bfde1e 	bne	r4,r2,153e4 <_strtol_r+0x190>
   1546c:	84400047 	ldb	r17,1(r16)
   15470:	01c00404 	movi	r7,16
   15474:	84000084 	addi	r16,r16,2
   15478:	3829883a 	mov	r20,r7
   1547c:	003f9706 	br	152dc <_strtol_r+0x88>
   15480:	00e00034 	movhi	r3,32768
   15484:	18ffffc4 	addi	r3,r3,-1
   15488:	003fef06 	br	15448 <_strtol_r+0x1f4>
   1548c:	01c00204 	movi	r7,8
   15490:	3829883a 	mov	r20,r7
   15494:	003f9106 	br	152dc <_strtol_r+0x88>

00015498 <strtol>:
   15498:	008000b4 	movhi	r2,2
   1549c:	10833f04 	addi	r2,r2,3324
   154a0:	2013883a 	mov	r9,r4
   154a4:	11000017 	ldw	r4,0(r2)
   154a8:	2805883a 	mov	r2,r5
   154ac:	300f883a 	mov	r7,r6
   154b0:	480b883a 	mov	r5,r9
   154b4:	100d883a 	mov	r6,r2
   154b8:	00152541 	jmpi	15254 <_strtol_r>

000154bc <__sprint_r>:
   154bc:	30800217 	ldw	r2,8(r6)
   154c0:	defffe04 	addi	sp,sp,-8
   154c4:	dc000015 	stw	r16,0(sp)
   154c8:	dfc00115 	stw	ra,4(sp)
   154cc:	3021883a 	mov	r16,r6
   154d0:	0007883a 	mov	r3,zero
   154d4:	1000061e 	bne	r2,zero,154f0 <__sprint_r+0x34>
   154d8:	1805883a 	mov	r2,r3
   154dc:	30000115 	stw	zero,4(r6)
   154e0:	dfc00117 	ldw	ra,4(sp)
   154e4:	dc000017 	ldw	r16,0(sp)
   154e8:	dec00204 	addi	sp,sp,8
   154ec:	f800283a 	ret
   154f0:	0012dc40 	call	12dc4 <__sfvwrite_r>
   154f4:	1007883a 	mov	r3,r2
   154f8:	1805883a 	mov	r2,r3
   154fc:	80000115 	stw	zero,4(r16)
   15500:	80000215 	stw	zero,8(r16)
   15504:	dfc00117 	ldw	ra,4(sp)
   15508:	dc000017 	ldw	r16,0(sp)
   1550c:	dec00204 	addi	sp,sp,8
   15510:	f800283a 	ret

00015514 <___vfprintf_internal_r>:
   15514:	defea404 	addi	sp,sp,-1392
   15518:	dd815815 	stw	r22,1376(sp)
   1551c:	dc015215 	stw	r16,1352(sp)
   15520:	d9c15115 	stw	r7,1348(sp)
   15524:	dfc15b15 	stw	ra,1388(sp)
   15528:	df015a15 	stw	fp,1384(sp)
   1552c:	ddc15915 	stw	r23,1380(sp)
   15530:	dd415715 	stw	r21,1372(sp)
   15534:	dd015615 	stw	r20,1368(sp)
   15538:	dcc15515 	stw	r19,1364(sp)
   1553c:	dc815415 	stw	r18,1360(sp)
   15540:	dc415315 	stw	r17,1356(sp)
   15544:	282d883a 	mov	r22,r5
   15548:	3021883a 	mov	r16,r6
   1554c:	d9014f15 	stw	r4,1340(sp)
   15550:	00190380 	call	19038 <_localeconv_r>
   15554:	10800017 	ldw	r2,0(r2)
   15558:	d9c15117 	ldw	r7,1348(sp)
   1555c:	d8814915 	stw	r2,1316(sp)
   15560:	d8814f17 	ldw	r2,1340(sp)
   15564:	10000226 	beq	r2,zero,15570 <___vfprintf_internal_r+0x5c>
   15568:	10800e17 	ldw	r2,56(r2)
   1556c:	10020d26 	beq	r2,zero,15da4 <___vfprintf_internal_r+0x890>
   15570:	b080030b 	ldhu	r2,12(r22)
   15574:	1080020c 	andi	r2,r2,8
   15578:	10020e26 	beq	r2,zero,15db4 <___vfprintf_internal_r+0x8a0>
   1557c:	b0800417 	ldw	r2,16(r22)
   15580:	10020c26 	beq	r2,zero,15db4 <___vfprintf_internal_r+0x8a0>
   15584:	b200030b 	ldhu	r8,12(r22)
   15588:	00800284 	movi	r2,10
   1558c:	40c0068c 	andi	r3,r8,26
   15590:	18802f1e 	bne	r3,r2,15650 <___vfprintf_internal_r+0x13c>
   15594:	b080038f 	ldh	r2,14(r22)
   15598:	10002d16 	blt	r2,zero,15650 <___vfprintf_internal_r+0x13c>
   1559c:	b240038b 	ldhu	r9,14(r22)
   155a0:	b2800717 	ldw	r10,28(r22)
   155a4:	b2c00917 	ldw	r11,36(r22)
   155a8:	d9014f17 	ldw	r4,1340(sp)
   155ac:	dc402904 	addi	r17,sp,164
   155b0:	d8804004 	addi	r2,sp,256
   155b4:	00c10004 	movi	r3,1024
   155b8:	423fff4c 	andi	r8,r8,65533
   155bc:	800d883a 	mov	r6,r16
   155c0:	880b883a 	mov	r5,r17
   155c4:	da002c0d 	sth	r8,176(sp)
   155c8:	da402c8d 	sth	r9,178(sp)
   155cc:	da803015 	stw	r10,192(sp)
   155d0:	dac03215 	stw	r11,200(sp)
   155d4:	d8802d15 	stw	r2,180(sp)
   155d8:	d8c02e15 	stw	r3,184(sp)
   155dc:	d8802915 	stw	r2,164(sp)
   155e0:	d8c02b15 	stw	r3,172(sp)
   155e4:	d8002f15 	stw	zero,188(sp)
   155e8:	00155140 	call	15514 <___vfprintf_internal_r>
   155ec:	d8814b15 	stw	r2,1324(sp)
   155f0:	10000416 	blt	r2,zero,15604 <___vfprintf_internal_r+0xf0>
   155f4:	d9014f17 	ldw	r4,1340(sp)
   155f8:	880b883a 	mov	r5,r17
   155fc:	00119c40 	call	119c4 <_fflush_r>
   15600:	1002321e 	bne	r2,zero,15ecc <___vfprintf_internal_r+0x9b8>
   15604:	d8802c0b 	ldhu	r2,176(sp)
   15608:	1080100c 	andi	r2,r2,64
   1560c:	10000326 	beq	r2,zero,1561c <___vfprintf_internal_r+0x108>
   15610:	b080030b 	ldhu	r2,12(r22)
   15614:	10801014 	ori	r2,r2,64
   15618:	b080030d 	sth	r2,12(r22)
   1561c:	d8814b17 	ldw	r2,1324(sp)
   15620:	dfc15b17 	ldw	ra,1388(sp)
   15624:	df015a17 	ldw	fp,1384(sp)
   15628:	ddc15917 	ldw	r23,1380(sp)
   1562c:	dd815817 	ldw	r22,1376(sp)
   15630:	dd415717 	ldw	r21,1372(sp)
   15634:	dd015617 	ldw	r20,1368(sp)
   15638:	dcc15517 	ldw	r19,1364(sp)
   1563c:	dc815417 	ldw	r18,1360(sp)
   15640:	dc415317 	ldw	r17,1356(sp)
   15644:	dc015217 	ldw	r16,1352(sp)
   15648:	dec15c04 	addi	sp,sp,1392
   1564c:	f800283a 	ret
   15650:	0005883a 	mov	r2,zero
   15654:	0007883a 	mov	r3,zero
   15658:	dd401904 	addi	r21,sp,100
   1565c:	d8814215 	stw	r2,1288(sp)
   15660:	802f883a 	mov	r23,r16
   15664:	d8c14315 	stw	r3,1292(sp)
   15668:	d8014b15 	stw	zero,1324(sp)
   1566c:	d8014815 	stw	zero,1312(sp)
   15670:	d8014415 	stw	zero,1296(sp)
   15674:	d8014715 	stw	zero,1308(sp)
   15678:	dd400c15 	stw	r21,48(sp)
   1567c:	d8000e15 	stw	zero,56(sp)
   15680:	d8000d15 	stw	zero,52(sp)
   15684:	b8800007 	ldb	r2,0(r23)
   15688:	10001926 	beq	r2,zero,156f0 <___vfprintf_internal_r+0x1dc>
   1568c:	00c00944 	movi	r3,37
   15690:	10c01726 	beq	r2,r3,156f0 <___vfprintf_internal_r+0x1dc>
   15694:	b821883a 	mov	r16,r23
   15698:	00000106 	br	156a0 <___vfprintf_internal_r+0x18c>
   1569c:	10c00326 	beq	r2,r3,156ac <___vfprintf_internal_r+0x198>
   156a0:	84000044 	addi	r16,r16,1
   156a4:	80800007 	ldb	r2,0(r16)
   156a8:	103ffc1e 	bne	r2,zero,1569c <___vfprintf_internal_r+0x188>
   156ac:	85e7c83a 	sub	r19,r16,r23
   156b0:	98000e26 	beq	r19,zero,156ec <___vfprintf_internal_r+0x1d8>
   156b4:	dc800e17 	ldw	r18,56(sp)
   156b8:	dc400d17 	ldw	r17,52(sp)
   156bc:	008001c4 	movi	r2,7
   156c0:	94e5883a 	add	r18,r18,r19
   156c4:	8c400044 	addi	r17,r17,1
   156c8:	adc00015 	stw	r23,0(r21)
   156cc:	dc800e15 	stw	r18,56(sp)
   156d0:	acc00115 	stw	r19,4(r21)
   156d4:	dc400d15 	stw	r17,52(sp)
   156d8:	14428b16 	blt	r2,r17,16108 <___vfprintf_internal_r+0xbf4>
   156dc:	ad400204 	addi	r21,r21,8
   156e0:	d9014b17 	ldw	r4,1324(sp)
   156e4:	24c9883a 	add	r4,r4,r19
   156e8:	d9014b15 	stw	r4,1324(sp)
   156ec:	802f883a 	mov	r23,r16
   156f0:	b8800007 	ldb	r2,0(r23)
   156f4:	10013c26 	beq	r2,zero,15be8 <___vfprintf_internal_r+0x6d4>
   156f8:	bdc00044 	addi	r23,r23,1
   156fc:	d8000405 	stb	zero,16(sp)
   15700:	b8c00007 	ldb	r3,0(r23)
   15704:	04ffffc4 	movi	r19,-1
   15708:	d8014c15 	stw	zero,1328(sp)
   1570c:	d8014a15 	stw	zero,1320(sp)
   15710:	d8c14d15 	stw	r3,1332(sp)
   15714:	bdc00044 	addi	r23,r23,1
   15718:	d9414d17 	ldw	r5,1332(sp)
   1571c:	00801604 	movi	r2,88
   15720:	28fff804 	addi	r3,r5,-32
   15724:	10c06036 	bltu	r2,r3,158a8 <___vfprintf_internal_r+0x394>
   15728:	18c5883a 	add	r2,r3,r3
   1572c:	1085883a 	add	r2,r2,r2
   15730:	00c00074 	movhi	r3,1
   15734:	18d5d104 	addi	r3,r3,22340
   15738:	10c5883a 	add	r2,r2,r3
   1573c:	11000017 	ldw	r4,0(r2)
   15740:	2000683a 	jmp	r4
   15744:	000166b8 	rdprs	zero,zero,1434
   15748:	000158a8 	cmpgeui	zero,zero,1378
   1574c:	000158a8 	cmpgeui	zero,zero,1378
   15750:	000166a4 	muli	zero,zero,1434
   15754:	000158a8 	cmpgeui	zero,zero,1378
   15758:	000158a8 	cmpgeui	zero,zero,1378
   1575c:	000158a8 	cmpgeui	zero,zero,1378
   15760:	000158a8 	cmpgeui	zero,zero,1378
   15764:	000158a8 	cmpgeui	zero,zero,1378
   15768:	000158a8 	cmpgeui	zero,zero,1378
   1576c:	00016484 	movi	zero,1426
   15770:	00016694 	movui	zero,1434
   15774:	000158a8 	cmpgeui	zero,zero,1378
   15778:	0001649c 	xori	zero,zero,1426
   1577c:	00016730 	cmpltui	zero,zero,1436
   15780:	000158a8 	cmpgeui	zero,zero,1378
   15784:	0001671c 	xori	zero,zero,1436
   15788:	000166e4 	muli	zero,zero,1435
   1578c:	000166e4 	muli	zero,zero,1435
   15790:	000166e4 	muli	zero,zero,1435
   15794:	000166e4 	muli	zero,zero,1435
   15798:	000166e4 	muli	zero,zero,1435
   1579c:	000166e4 	muli	zero,zero,1435
   157a0:	000166e4 	muli	zero,zero,1435
   157a4:	000166e4 	muli	zero,zero,1435
   157a8:	000166e4 	muli	zero,zero,1435
   157ac:	000158a8 	cmpgeui	zero,zero,1378
   157b0:	000158a8 	cmpgeui	zero,zero,1378
   157b4:	000158a8 	cmpgeui	zero,zero,1378
   157b8:	000158a8 	cmpgeui	zero,zero,1378
   157bc:	000158a8 	cmpgeui	zero,zero,1378
   157c0:	000158a8 	cmpgeui	zero,zero,1378
   157c4:	000158a8 	cmpgeui	zero,zero,1378
   157c8:	000158a8 	cmpgeui	zero,zero,1378
   157cc:	000158a8 	cmpgeui	zero,zero,1378
   157d0:	000158a8 	cmpgeui	zero,zero,1378
   157d4:	00015f00 	call	15f0 <runCascadeClassifier+0xa4>
   157d8:	0001656c 	andhi	zero,zero,1429
   157dc:	000158a8 	cmpgeui	zero,zero,1378
   157e0:	0001656c 	andhi	zero,zero,1429
   157e4:	000158a8 	cmpgeui	zero,zero,1378
   157e8:	000158a8 	cmpgeui	zero,zero,1378
   157ec:	000158a8 	cmpgeui	zero,zero,1378
   157f0:	000158a8 	cmpgeui	zero,zero,1378
   157f4:	000166d0 	cmplti	zero,zero,1435
   157f8:	000158a8 	cmpgeui	zero,zero,1378
   157fc:	000158a8 	cmpgeui	zero,zero,1378
   15800:	00015fb4 	movhi	zero,1406
   15804:	000158a8 	cmpgeui	zero,zero,1378
   15808:	000158a8 	cmpgeui	zero,zero,1378
   1580c:	000158a8 	cmpgeui	zero,zero,1378
   15810:	000158a8 	cmpgeui	zero,zero,1378
   15814:	000158a8 	cmpgeui	zero,zero,1378
   15818:	00016000 	call	1600 <runCascadeClassifier+0xb4>
   1581c:	000158a8 	cmpgeui	zero,zero,1378
   15820:	000158a8 	cmpgeui	zero,zero,1378
   15824:	00016620 	cmpeqi	zero,zero,1432
   15828:	000158a8 	cmpgeui	zero,zero,1378
   1582c:	000158a8 	cmpgeui	zero,zero,1378
   15830:	000158a8 	cmpgeui	zero,zero,1378
   15834:	000158a8 	cmpgeui	zero,zero,1378
   15838:	000158a8 	cmpgeui	zero,zero,1378
   1583c:	000158a8 	cmpgeui	zero,zero,1378
   15840:	000158a8 	cmpgeui	zero,zero,1378
   15844:	000158a8 	cmpgeui	zero,zero,1378
   15848:	000158a8 	cmpgeui	zero,zero,1378
   1584c:	000158a8 	cmpgeui	zero,zero,1378
   15850:	000165f4 	movhi	zero,1431
   15854:	00015f0c 	andi	zero,zero,1404
   15858:	0001656c 	andhi	zero,zero,1429
   1585c:	0001656c 	andhi	zero,zero,1429
   15860:	0001656c 	andhi	zero,zero,1429
   15864:	00016558 	cmpnei	zero,zero,1429
   15868:	00015f0c 	andi	zero,zero,1404
   1586c:	000158a8 	cmpgeui	zero,zero,1378
   15870:	000158a8 	cmpgeui	zero,zero,1378
   15874:	000164e0 	cmpeqi	zero,zero,1427
   15878:	000158a8 	cmpgeui	zero,zero,1378
   1587c:	000164b0 	cmpltui	zero,zero,1426
   15880:	00015fc0 	call	15fc <runCascadeClassifier+0xb0>
   15884:	00016510 	cmplti	zero,zero,1428
   15888:	000164fc 	xorhi	zero,zero,1427
   1588c:	000158a8 	cmpgeui	zero,zero,1378
   15890:	0001678c 	andi	zero,zero,1438
   15894:	000158a8 	cmpgeui	zero,zero,1378
   15898:	0001600c 	andi	zero,zero,1408
   1589c:	000158a8 	cmpgeui	zero,zero,1378
   158a0:	000158a8 	cmpgeui	zero,zero,1378
   158a4:	00016684 	movi	zero,1434
   158a8:	d9014d17 	ldw	r4,1332(sp)
   158ac:	2000ce26 	beq	r4,zero,15be8 <___vfprintf_internal_r+0x6d4>
   158b0:	01400044 	movi	r5,1
   158b4:	d9800f04 	addi	r6,sp,60
   158b8:	d9c14015 	stw	r7,1280(sp)
   158bc:	d9414515 	stw	r5,1300(sp)
   158c0:	d9814115 	stw	r6,1284(sp)
   158c4:	280f883a 	mov	r7,r5
   158c8:	d9000f05 	stb	r4,60(sp)
   158cc:	d8000405 	stb	zero,16(sp)
   158d0:	d8014615 	stw	zero,1304(sp)
   158d4:	d8c14c17 	ldw	r3,1328(sp)
   158d8:	1880008c 	andi	r2,r3,2
   158dc:	1005003a 	cmpeq	r2,r2,zero
   158e0:	d8815015 	stw	r2,1344(sp)
   158e4:	1000031e 	bne	r2,zero,158f4 <___vfprintf_internal_r+0x3e0>
   158e8:	d9014517 	ldw	r4,1300(sp)
   158ec:	21000084 	addi	r4,r4,2
   158f0:	d9014515 	stw	r4,1300(sp)
   158f4:	d9414c17 	ldw	r5,1328(sp)
   158f8:	2940210c 	andi	r5,r5,132
   158fc:	d9414e15 	stw	r5,1336(sp)
   15900:	28002d1e 	bne	r5,zero,159b8 <___vfprintf_internal_r+0x4a4>
   15904:	d9814a17 	ldw	r6,1320(sp)
   15908:	d8814517 	ldw	r2,1300(sp)
   1590c:	30a1c83a 	sub	r16,r6,r2
   15910:	0400290e 	bge	zero,r16,159b8 <___vfprintf_internal_r+0x4a4>
   15914:	00800404 	movi	r2,16
   15918:	1404580e 	bge	r2,r16,16a7c <___vfprintf_internal_r+0x1568>
   1591c:	dc800e17 	ldw	r18,56(sp)
   15920:	dc400d17 	ldw	r17,52(sp)
   15924:	1027883a 	mov	r19,r2
   15928:	070000b4 	movhi	fp,2
   1592c:	e73c2584 	addi	fp,fp,-3946
   15930:	050001c4 	movi	r20,7
   15934:	00000306 	br	15944 <___vfprintf_internal_r+0x430>
   15938:	843ffc04 	addi	r16,r16,-16
   1593c:	ad400204 	addi	r21,r21,8
   15940:	9c00130e 	bge	r19,r16,15990 <___vfprintf_internal_r+0x47c>
   15944:	94800404 	addi	r18,r18,16
   15948:	8c400044 	addi	r17,r17,1
   1594c:	af000015 	stw	fp,0(r21)
   15950:	acc00115 	stw	r19,4(r21)
   15954:	dc800e15 	stw	r18,56(sp)
   15958:	dc400d15 	stw	r17,52(sp)
   1595c:	a47ff60e 	bge	r20,r17,15938 <___vfprintf_internal_r+0x424>
   15960:	d9014f17 	ldw	r4,1340(sp)
   15964:	b00b883a 	mov	r5,r22
   15968:	d9800c04 	addi	r6,sp,48
   1596c:	d9c15115 	stw	r7,1348(sp)
   15970:	00154bc0 	call	154bc <__sprint_r>
   15974:	d9c15117 	ldw	r7,1348(sp)
   15978:	10009e1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   1597c:	843ffc04 	addi	r16,r16,-16
   15980:	dc800e17 	ldw	r18,56(sp)
   15984:	dc400d17 	ldw	r17,52(sp)
   15988:	dd401904 	addi	r21,sp,100
   1598c:	9c3fed16 	blt	r19,r16,15944 <___vfprintf_internal_r+0x430>
   15990:	9425883a 	add	r18,r18,r16
   15994:	8c400044 	addi	r17,r17,1
   15998:	008001c4 	movi	r2,7
   1599c:	af000015 	stw	fp,0(r21)
   159a0:	ac000115 	stw	r16,4(r21)
   159a4:	dc800e15 	stw	r18,56(sp)
   159a8:	dc400d15 	stw	r17,52(sp)
   159ac:	1441f516 	blt	r2,r17,16184 <___vfprintf_internal_r+0xc70>
   159b0:	ad400204 	addi	r21,r21,8
   159b4:	00000206 	br	159c0 <___vfprintf_internal_r+0x4ac>
   159b8:	dc800e17 	ldw	r18,56(sp)
   159bc:	dc400d17 	ldw	r17,52(sp)
   159c0:	d8800407 	ldb	r2,16(sp)
   159c4:	10000b26 	beq	r2,zero,159f4 <___vfprintf_internal_r+0x4e0>
   159c8:	00800044 	movi	r2,1
   159cc:	94800044 	addi	r18,r18,1
   159d0:	8c400044 	addi	r17,r17,1
   159d4:	a8800115 	stw	r2,4(r21)
   159d8:	d8c00404 	addi	r3,sp,16
   159dc:	008001c4 	movi	r2,7
   159e0:	a8c00015 	stw	r3,0(r21)
   159e4:	dc800e15 	stw	r18,56(sp)
   159e8:	dc400d15 	stw	r17,52(sp)
   159ec:	1441da16 	blt	r2,r17,16158 <___vfprintf_internal_r+0xc44>
   159f0:	ad400204 	addi	r21,r21,8
   159f4:	d9015017 	ldw	r4,1344(sp)
   159f8:	20000b1e 	bne	r4,zero,15a28 <___vfprintf_internal_r+0x514>
   159fc:	d8800444 	addi	r2,sp,17
   15a00:	94800084 	addi	r18,r18,2
   15a04:	8c400044 	addi	r17,r17,1
   15a08:	a8800015 	stw	r2,0(r21)
   15a0c:	00c00084 	movi	r3,2
   15a10:	008001c4 	movi	r2,7
   15a14:	a8c00115 	stw	r3,4(r21)
   15a18:	dc800e15 	stw	r18,56(sp)
   15a1c:	dc400d15 	stw	r17,52(sp)
   15a20:	1441c216 	blt	r2,r17,1612c <___vfprintf_internal_r+0xc18>
   15a24:	ad400204 	addi	r21,r21,8
   15a28:	d9414e17 	ldw	r5,1336(sp)
   15a2c:	00802004 	movi	r2,128
   15a30:	2880b126 	beq	r5,r2,15cf8 <___vfprintf_internal_r+0x7e4>
   15a34:	d8c14617 	ldw	r3,1304(sp)
   15a38:	19e1c83a 	sub	r16,r3,r7
   15a3c:	0400260e 	bge	zero,r16,15ad8 <___vfprintf_internal_r+0x5c4>
   15a40:	00800404 	movi	r2,16
   15a44:	1403c90e 	bge	r2,r16,1696c <___vfprintf_internal_r+0x1458>
   15a48:	1027883a 	mov	r19,r2
   15a4c:	070000b4 	movhi	fp,2
   15a50:	e73c2184 	addi	fp,fp,-3962
   15a54:	050001c4 	movi	r20,7
   15a58:	00000306 	br	15a68 <___vfprintf_internal_r+0x554>
   15a5c:	843ffc04 	addi	r16,r16,-16
   15a60:	ad400204 	addi	r21,r21,8
   15a64:	9c00130e 	bge	r19,r16,15ab4 <___vfprintf_internal_r+0x5a0>
   15a68:	94800404 	addi	r18,r18,16
   15a6c:	8c400044 	addi	r17,r17,1
   15a70:	af000015 	stw	fp,0(r21)
   15a74:	acc00115 	stw	r19,4(r21)
   15a78:	dc800e15 	stw	r18,56(sp)
   15a7c:	dc400d15 	stw	r17,52(sp)
   15a80:	a47ff60e 	bge	r20,r17,15a5c <___vfprintf_internal_r+0x548>
   15a84:	d9014f17 	ldw	r4,1340(sp)
   15a88:	b00b883a 	mov	r5,r22
   15a8c:	d9800c04 	addi	r6,sp,48
   15a90:	d9c15115 	stw	r7,1348(sp)
   15a94:	00154bc0 	call	154bc <__sprint_r>
   15a98:	d9c15117 	ldw	r7,1348(sp)
   15a9c:	1000551e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   15aa0:	843ffc04 	addi	r16,r16,-16
   15aa4:	dc800e17 	ldw	r18,56(sp)
   15aa8:	dc400d17 	ldw	r17,52(sp)
   15aac:	dd401904 	addi	r21,sp,100
   15ab0:	9c3fed16 	blt	r19,r16,15a68 <___vfprintf_internal_r+0x554>
   15ab4:	9425883a 	add	r18,r18,r16
   15ab8:	8c400044 	addi	r17,r17,1
   15abc:	008001c4 	movi	r2,7
   15ac0:	af000015 	stw	fp,0(r21)
   15ac4:	ac000115 	stw	r16,4(r21)
   15ac8:	dc800e15 	stw	r18,56(sp)
   15acc:	dc400d15 	stw	r17,52(sp)
   15ad0:	14418216 	blt	r2,r17,160dc <___vfprintf_internal_r+0xbc8>
   15ad4:	ad400204 	addi	r21,r21,8
   15ad8:	d9014c17 	ldw	r4,1328(sp)
   15adc:	2080400c 	andi	r2,r4,256
   15ae0:	10004a1e 	bne	r2,zero,15c0c <___vfprintf_internal_r+0x6f8>
   15ae4:	d9414117 	ldw	r5,1284(sp)
   15ae8:	91e5883a 	add	r18,r18,r7
   15aec:	8c400044 	addi	r17,r17,1
   15af0:	008001c4 	movi	r2,7
   15af4:	a9400015 	stw	r5,0(r21)
   15af8:	a9c00115 	stw	r7,4(r21)
   15afc:	dc800e15 	stw	r18,56(sp)
   15b00:	dc400d15 	stw	r17,52(sp)
   15b04:	14416716 	blt	r2,r17,160a4 <___vfprintf_internal_r+0xb90>
   15b08:	a8c00204 	addi	r3,r21,8
   15b0c:	d9814c17 	ldw	r6,1328(sp)
   15b10:	3080010c 	andi	r2,r6,4
   15b14:	10002826 	beq	r2,zero,15bb8 <___vfprintf_internal_r+0x6a4>
   15b18:	d8814a17 	ldw	r2,1320(sp)
   15b1c:	d9014517 	ldw	r4,1300(sp)
   15b20:	1121c83a 	sub	r16,r2,r4
   15b24:	0400240e 	bge	zero,r16,15bb8 <___vfprintf_internal_r+0x6a4>
   15b28:	00800404 	movi	r2,16
   15b2c:	14044f0e 	bge	r2,r16,16c6c <___vfprintf_internal_r+0x1758>
   15b30:	dc400d17 	ldw	r17,52(sp)
   15b34:	1027883a 	mov	r19,r2
   15b38:	070000b4 	movhi	fp,2
   15b3c:	e73c2584 	addi	fp,fp,-3946
   15b40:	050001c4 	movi	r20,7
   15b44:	00000306 	br	15b54 <___vfprintf_internal_r+0x640>
   15b48:	843ffc04 	addi	r16,r16,-16
   15b4c:	18c00204 	addi	r3,r3,8
   15b50:	9c00110e 	bge	r19,r16,15b98 <___vfprintf_internal_r+0x684>
   15b54:	94800404 	addi	r18,r18,16
   15b58:	8c400044 	addi	r17,r17,1
   15b5c:	1f000015 	stw	fp,0(r3)
   15b60:	1cc00115 	stw	r19,4(r3)
   15b64:	dc800e15 	stw	r18,56(sp)
   15b68:	dc400d15 	stw	r17,52(sp)
   15b6c:	a47ff60e 	bge	r20,r17,15b48 <___vfprintf_internal_r+0x634>
   15b70:	d9014f17 	ldw	r4,1340(sp)
   15b74:	b00b883a 	mov	r5,r22
   15b78:	d9800c04 	addi	r6,sp,48
   15b7c:	00154bc0 	call	154bc <__sprint_r>
   15b80:	10001c1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   15b84:	843ffc04 	addi	r16,r16,-16
   15b88:	dc800e17 	ldw	r18,56(sp)
   15b8c:	dc400d17 	ldw	r17,52(sp)
   15b90:	d8c01904 	addi	r3,sp,100
   15b94:	9c3fef16 	blt	r19,r16,15b54 <___vfprintf_internal_r+0x640>
   15b98:	9425883a 	add	r18,r18,r16
   15b9c:	8c400044 	addi	r17,r17,1
   15ba0:	008001c4 	movi	r2,7
   15ba4:	1f000015 	stw	fp,0(r3)
   15ba8:	1c000115 	stw	r16,4(r3)
   15bac:	dc800e15 	stw	r18,56(sp)
   15bb0:	dc400d15 	stw	r17,52(sp)
   15bb4:	1440cb16 	blt	r2,r17,15ee4 <___vfprintf_internal_r+0x9d0>
   15bb8:	d8814a17 	ldw	r2,1320(sp)
   15bbc:	d9414517 	ldw	r5,1300(sp)
   15bc0:	1140010e 	bge	r2,r5,15bc8 <___vfprintf_internal_r+0x6b4>
   15bc4:	2805883a 	mov	r2,r5
   15bc8:	d9814b17 	ldw	r6,1324(sp)
   15bcc:	308d883a 	add	r6,r6,r2
   15bd0:	d9814b15 	stw	r6,1324(sp)
   15bd4:	90013b1e 	bne	r18,zero,160c4 <___vfprintf_internal_r+0xbb0>
   15bd8:	d9c14017 	ldw	r7,1280(sp)
   15bdc:	dd401904 	addi	r21,sp,100
   15be0:	d8000d15 	stw	zero,52(sp)
   15be4:	003ea706 	br	15684 <___vfprintf_internal_r+0x170>
   15be8:	d8800e17 	ldw	r2,56(sp)
   15bec:	10053f1e 	bne	r2,zero,170ec <___vfprintf_internal_r+0x1bd8>
   15bf0:	d8000d15 	stw	zero,52(sp)
   15bf4:	b080030b 	ldhu	r2,12(r22)
   15bf8:	1080100c 	andi	r2,r2,64
   15bfc:	103e8726 	beq	r2,zero,1561c <___vfprintf_internal_r+0x108>
   15c00:	00bfffc4 	movi	r2,-1
   15c04:	d8814b15 	stw	r2,1324(sp)
   15c08:	003e8406 	br	1561c <___vfprintf_internal_r+0x108>
   15c0c:	d9814d17 	ldw	r6,1332(sp)
   15c10:	00801944 	movi	r2,101
   15c14:	11806e16 	blt	r2,r6,15dd0 <___vfprintf_internal_r+0x8bc>
   15c18:	d9414717 	ldw	r5,1308(sp)
   15c1c:	00c00044 	movi	r3,1
   15c20:	1943430e 	bge	r3,r5,16930 <___vfprintf_internal_r+0x141c>
   15c24:	d8814117 	ldw	r2,1284(sp)
   15c28:	94800044 	addi	r18,r18,1
   15c2c:	8c400044 	addi	r17,r17,1
   15c30:	a8800015 	stw	r2,0(r21)
   15c34:	008001c4 	movi	r2,7
   15c38:	a8c00115 	stw	r3,4(r21)
   15c3c:	dc800e15 	stw	r18,56(sp)
   15c40:	dc400d15 	stw	r17,52(sp)
   15c44:	1441ca16 	blt	r2,r17,16370 <___vfprintf_internal_r+0xe5c>
   15c48:	a8c00204 	addi	r3,r21,8
   15c4c:	d9014917 	ldw	r4,1316(sp)
   15c50:	00800044 	movi	r2,1
   15c54:	94800044 	addi	r18,r18,1
   15c58:	8c400044 	addi	r17,r17,1
   15c5c:	18800115 	stw	r2,4(r3)
   15c60:	008001c4 	movi	r2,7
   15c64:	19000015 	stw	r4,0(r3)
   15c68:	dc800e15 	stw	r18,56(sp)
   15c6c:	dc400d15 	stw	r17,52(sp)
   15c70:	1441b616 	blt	r2,r17,1634c <___vfprintf_internal_r+0xe38>
   15c74:	1cc00204 	addi	r19,r3,8
   15c78:	d9014217 	ldw	r4,1288(sp)
   15c7c:	d9414317 	ldw	r5,1292(sp)
   15c80:	000d883a 	mov	r6,zero
   15c84:	000f883a 	mov	r7,zero
   15c88:	001b2240 	call	1b224 <__nedf2>
   15c8c:	10017426 	beq	r2,zero,16260 <___vfprintf_internal_r+0xd4c>
   15c90:	d9414717 	ldw	r5,1308(sp)
   15c94:	d9814117 	ldw	r6,1284(sp)
   15c98:	8c400044 	addi	r17,r17,1
   15c9c:	2c85883a 	add	r2,r5,r18
   15ca0:	14bfffc4 	addi	r18,r2,-1
   15ca4:	28bfffc4 	addi	r2,r5,-1
   15ca8:	30c00044 	addi	r3,r6,1
   15cac:	98800115 	stw	r2,4(r19)
   15cb0:	008001c4 	movi	r2,7
   15cb4:	98c00015 	stw	r3,0(r19)
   15cb8:	dc800e15 	stw	r18,56(sp)
   15cbc:	dc400d15 	stw	r17,52(sp)
   15cc0:	14418e16 	blt	r2,r17,162fc <___vfprintf_internal_r+0xde8>
   15cc4:	9cc00204 	addi	r19,r19,8
   15cc8:	d9414817 	ldw	r5,1312(sp)
   15ccc:	d8800804 	addi	r2,sp,32
   15cd0:	8c400044 	addi	r17,r17,1
   15cd4:	9165883a 	add	r18,r18,r5
   15cd8:	98800015 	stw	r2,0(r19)
   15cdc:	008001c4 	movi	r2,7
   15ce0:	99400115 	stw	r5,4(r19)
   15ce4:	dc800e15 	stw	r18,56(sp)
   15ce8:	dc400d15 	stw	r17,52(sp)
   15cec:	1440ed16 	blt	r2,r17,160a4 <___vfprintf_internal_r+0xb90>
   15cf0:	98c00204 	addi	r3,r19,8
   15cf4:	003f8506 	br	15b0c <___vfprintf_internal_r+0x5f8>
   15cf8:	d9814a17 	ldw	r6,1320(sp)
   15cfc:	d8814517 	ldw	r2,1300(sp)
   15d00:	30a1c83a 	sub	r16,r6,r2
   15d04:	043f4b0e 	bge	zero,r16,15a34 <___vfprintf_internal_r+0x520>
   15d08:	00800404 	movi	r2,16
   15d0c:	1404340e 	bge	r2,r16,16de0 <___vfprintf_internal_r+0x18cc>
   15d10:	1027883a 	mov	r19,r2
   15d14:	070000b4 	movhi	fp,2
   15d18:	e73c2184 	addi	fp,fp,-3962
   15d1c:	050001c4 	movi	r20,7
   15d20:	00000306 	br	15d30 <___vfprintf_internal_r+0x81c>
   15d24:	843ffc04 	addi	r16,r16,-16
   15d28:	ad400204 	addi	r21,r21,8
   15d2c:	9c00130e 	bge	r19,r16,15d7c <___vfprintf_internal_r+0x868>
   15d30:	94800404 	addi	r18,r18,16
   15d34:	8c400044 	addi	r17,r17,1
   15d38:	af000015 	stw	fp,0(r21)
   15d3c:	acc00115 	stw	r19,4(r21)
   15d40:	dc800e15 	stw	r18,56(sp)
   15d44:	dc400d15 	stw	r17,52(sp)
   15d48:	a47ff60e 	bge	r20,r17,15d24 <___vfprintf_internal_r+0x810>
   15d4c:	d9014f17 	ldw	r4,1340(sp)
   15d50:	b00b883a 	mov	r5,r22
   15d54:	d9800c04 	addi	r6,sp,48
   15d58:	d9c15115 	stw	r7,1348(sp)
   15d5c:	00154bc0 	call	154bc <__sprint_r>
   15d60:	d9c15117 	ldw	r7,1348(sp)
   15d64:	103fa31e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   15d68:	843ffc04 	addi	r16,r16,-16
   15d6c:	dc800e17 	ldw	r18,56(sp)
   15d70:	dc400d17 	ldw	r17,52(sp)
   15d74:	dd401904 	addi	r21,sp,100
   15d78:	9c3fed16 	blt	r19,r16,15d30 <___vfprintf_internal_r+0x81c>
   15d7c:	9425883a 	add	r18,r18,r16
   15d80:	8c400044 	addi	r17,r17,1
   15d84:	008001c4 	movi	r2,7
   15d88:	af000015 	stw	fp,0(r21)
   15d8c:	ac000115 	stw	r16,4(r21)
   15d90:	dc800e15 	stw	r18,56(sp)
   15d94:	dc400d15 	stw	r17,52(sp)
   15d98:	14416116 	blt	r2,r17,16320 <___vfprintf_internal_r+0xe0c>
   15d9c:	ad400204 	addi	r21,r21,8
   15da0:	003f2406 	br	15a34 <___vfprintf_internal_r+0x520>
   15da4:	d9014f17 	ldw	r4,1340(sp)
   15da8:	0011ef00 	call	11ef0 <__sinit>
   15dac:	d9c15117 	ldw	r7,1348(sp)
   15db0:	003def06 	br	15570 <___vfprintf_internal_r+0x5c>
   15db4:	d9014f17 	ldw	r4,1340(sp)
   15db8:	b00b883a 	mov	r5,r22
   15dbc:	d9c15115 	stw	r7,1348(sp)
   15dc0:	00175a80 	call	175a8 <__swsetup_r>
   15dc4:	d9c15117 	ldw	r7,1348(sp)
   15dc8:	103dee26 	beq	r2,zero,15584 <___vfprintf_internal_r+0x70>
   15dcc:	003f8c06 	br	15c00 <___vfprintf_internal_r+0x6ec>
   15dd0:	d9014217 	ldw	r4,1288(sp)
   15dd4:	d9414317 	ldw	r5,1292(sp)
   15dd8:	000d883a 	mov	r6,zero
   15ddc:	000f883a 	mov	r7,zero
   15de0:	001b19c0 	call	1b19c <__eqdf2>
   15de4:	1000f21e 	bne	r2,zero,161b0 <___vfprintf_internal_r+0xc9c>
   15de8:	008000b4 	movhi	r2,2
   15dec:	10bc2104 	addi	r2,r2,-3964
   15df0:	94800044 	addi	r18,r18,1
   15df4:	8c400044 	addi	r17,r17,1
   15df8:	a8800015 	stw	r2,0(r21)
   15dfc:	00c00044 	movi	r3,1
   15e00:	008001c4 	movi	r2,7
   15e04:	a8c00115 	stw	r3,4(r21)
   15e08:	dc800e15 	stw	r18,56(sp)
   15e0c:	dc400d15 	stw	r17,52(sp)
   15e10:	1442fa16 	blt	r2,r17,169fc <___vfprintf_internal_r+0x14e8>
   15e14:	a8c00204 	addi	r3,r21,8
   15e18:	d8800517 	ldw	r2,20(sp)
   15e1c:	d9014717 	ldw	r4,1308(sp)
   15e20:	11015c0e 	bge	r2,r4,16394 <___vfprintf_internal_r+0xe80>
   15e24:	dc400d17 	ldw	r17,52(sp)
   15e28:	d9814917 	ldw	r6,1316(sp)
   15e2c:	00800044 	movi	r2,1
   15e30:	94800044 	addi	r18,r18,1
   15e34:	8c400044 	addi	r17,r17,1
   15e38:	18800115 	stw	r2,4(r3)
   15e3c:	008001c4 	movi	r2,7
   15e40:	19800015 	stw	r6,0(r3)
   15e44:	dc800e15 	stw	r18,56(sp)
   15e48:	dc400d15 	stw	r17,52(sp)
   15e4c:	14431016 	blt	r2,r17,16a90 <___vfprintf_internal_r+0x157c>
   15e50:	18c00204 	addi	r3,r3,8
   15e54:	d8814717 	ldw	r2,1308(sp)
   15e58:	143fffc4 	addi	r16,r2,-1
   15e5c:	043f2b0e 	bge	zero,r16,15b0c <___vfprintf_internal_r+0x5f8>
   15e60:	00800404 	movi	r2,16
   15e64:	1402a20e 	bge	r2,r16,168f0 <___vfprintf_internal_r+0x13dc>
   15e68:	dc400d17 	ldw	r17,52(sp)
   15e6c:	1027883a 	mov	r19,r2
   15e70:	070000b4 	movhi	fp,2
   15e74:	e73c2184 	addi	fp,fp,-3962
   15e78:	050001c4 	movi	r20,7
   15e7c:	00000306 	br	15e8c <___vfprintf_internal_r+0x978>
   15e80:	18c00204 	addi	r3,r3,8
   15e84:	843ffc04 	addi	r16,r16,-16
   15e88:	9c029c0e 	bge	r19,r16,168fc <___vfprintf_internal_r+0x13e8>
   15e8c:	94800404 	addi	r18,r18,16
   15e90:	8c400044 	addi	r17,r17,1
   15e94:	1f000015 	stw	fp,0(r3)
   15e98:	1cc00115 	stw	r19,4(r3)
   15e9c:	dc800e15 	stw	r18,56(sp)
   15ea0:	dc400d15 	stw	r17,52(sp)
   15ea4:	a47ff60e 	bge	r20,r17,15e80 <___vfprintf_internal_r+0x96c>
   15ea8:	d9014f17 	ldw	r4,1340(sp)
   15eac:	b00b883a 	mov	r5,r22
   15eb0:	d9800c04 	addi	r6,sp,48
   15eb4:	00154bc0 	call	154bc <__sprint_r>
   15eb8:	103f4e1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   15ebc:	dc800e17 	ldw	r18,56(sp)
   15ec0:	dc400d17 	ldw	r17,52(sp)
   15ec4:	d8c01904 	addi	r3,sp,100
   15ec8:	003fee06 	br	15e84 <___vfprintf_internal_r+0x970>
   15ecc:	d8802c0b 	ldhu	r2,176(sp)
   15ed0:	00ffffc4 	movi	r3,-1
   15ed4:	d8c14b15 	stw	r3,1324(sp)
   15ed8:	1080100c 	andi	r2,r2,64
   15edc:	103dcc1e 	bne	r2,zero,15610 <___vfprintf_internal_r+0xfc>
   15ee0:	003dce06 	br	1561c <___vfprintf_internal_r+0x108>
   15ee4:	d9014f17 	ldw	r4,1340(sp)
   15ee8:	b00b883a 	mov	r5,r22
   15eec:	d9800c04 	addi	r6,sp,48
   15ef0:	00154bc0 	call	154bc <__sprint_r>
   15ef4:	103f3f1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   15ef8:	dc800e17 	ldw	r18,56(sp)
   15efc:	003f2e06 	br	15bb8 <___vfprintf_internal_r+0x6a4>
   15f00:	d9414c17 	ldw	r5,1328(sp)
   15f04:	29400414 	ori	r5,r5,16
   15f08:	d9414c15 	stw	r5,1328(sp)
   15f0c:	d9814c17 	ldw	r6,1328(sp)
   15f10:	3080080c 	andi	r2,r6,32
   15f14:	10014f1e 	bne	r2,zero,16454 <___vfprintf_internal_r+0xf40>
   15f18:	d8c14c17 	ldw	r3,1328(sp)
   15f1c:	1880040c 	andi	r2,r3,16
   15f20:	1002ea1e 	bne	r2,zero,16acc <___vfprintf_internal_r+0x15b8>
   15f24:	d9014c17 	ldw	r4,1328(sp)
   15f28:	2080100c 	andi	r2,r4,64
   15f2c:	1002e726 	beq	r2,zero,16acc <___vfprintf_internal_r+0x15b8>
   15f30:	3880000f 	ldh	r2,0(r7)
   15f34:	39c00104 	addi	r7,r7,4
   15f38:	d9c14015 	stw	r7,1280(sp)
   15f3c:	1023d7fa 	srai	r17,r2,31
   15f40:	1021883a 	mov	r16,r2
   15f44:	88037216 	blt	r17,zero,16d10 <___vfprintf_internal_r+0x17fc>
   15f48:	01000044 	movi	r4,1
   15f4c:	98000416 	blt	r19,zero,15f60 <___vfprintf_internal_r+0xa4c>
   15f50:	d8c14c17 	ldw	r3,1328(sp)
   15f54:	00bfdfc4 	movi	r2,-129
   15f58:	1886703a 	and	r3,r3,r2
   15f5c:	d8c14c15 	stw	r3,1328(sp)
   15f60:	8444b03a 	or	r2,r16,r17
   15f64:	1002261e 	bne	r2,zero,16800 <___vfprintf_internal_r+0x12ec>
   15f68:	9802251e 	bne	r19,zero,16800 <___vfprintf_internal_r+0x12ec>
   15f6c:	20803fcc 	andi	r2,r4,255
   15f70:	10029b26 	beq	r2,zero,169e0 <___vfprintf_internal_r+0x14cc>
   15f74:	d8c01904 	addi	r3,sp,100
   15f78:	dd000f04 	addi	r20,sp,60
   15f7c:	d8c14115 	stw	r3,1284(sp)
   15f80:	d8c14117 	ldw	r3,1284(sp)
   15f84:	dcc14515 	stw	r19,1300(sp)
   15f88:	a0c5c83a 	sub	r2,r20,r3
   15f8c:	11c00a04 	addi	r7,r2,40
   15f90:	99c0010e 	bge	r19,r7,15f98 <___vfprintf_internal_r+0xa84>
   15f94:	d9c14515 	stw	r7,1300(sp)
   15f98:	dcc14615 	stw	r19,1304(sp)
   15f9c:	d8800407 	ldb	r2,16(sp)
   15fa0:	103e4c26 	beq	r2,zero,158d4 <___vfprintf_internal_r+0x3c0>
   15fa4:	d8814517 	ldw	r2,1300(sp)
   15fa8:	10800044 	addi	r2,r2,1
   15fac:	d8814515 	stw	r2,1300(sp)
   15fb0:	003e4806 	br	158d4 <___vfprintf_internal_r+0x3c0>
   15fb4:	d9814c17 	ldw	r6,1328(sp)
   15fb8:	31800414 	ori	r6,r6,16
   15fbc:	d9814c15 	stw	r6,1328(sp)
   15fc0:	d8c14c17 	ldw	r3,1328(sp)
   15fc4:	1880080c 	andi	r2,r3,32
   15fc8:	1001271e 	bne	r2,zero,16468 <___vfprintf_internal_r+0xf54>
   15fcc:	d9414c17 	ldw	r5,1328(sp)
   15fd0:	2880040c 	andi	r2,r5,16
   15fd4:	1002b61e 	bne	r2,zero,16ab0 <___vfprintf_internal_r+0x159c>
   15fd8:	d9814c17 	ldw	r6,1328(sp)
   15fdc:	3080100c 	andi	r2,r6,64
   15fe0:	1002b326 	beq	r2,zero,16ab0 <___vfprintf_internal_r+0x159c>
   15fe4:	3c00000b 	ldhu	r16,0(r7)
   15fe8:	0009883a 	mov	r4,zero
   15fec:	39c00104 	addi	r7,r7,4
   15ff0:	0023883a 	mov	r17,zero
   15ff4:	d9c14015 	stw	r7,1280(sp)
   15ff8:	d8000405 	stb	zero,16(sp)
   15ffc:	003fd306 	br	15f4c <___vfprintf_internal_r+0xa38>
   16000:	d9014c17 	ldw	r4,1328(sp)
   16004:	21000414 	ori	r4,r4,16
   16008:	d9014c15 	stw	r4,1328(sp)
   1600c:	d9414c17 	ldw	r5,1328(sp)
   16010:	2880080c 	andi	r2,r5,32
   16014:	1001081e 	bne	r2,zero,16438 <___vfprintf_internal_r+0xf24>
   16018:	d8c14c17 	ldw	r3,1328(sp)
   1601c:	1880040c 	andi	r2,r3,16
   16020:	1002b01e 	bne	r2,zero,16ae4 <___vfprintf_internal_r+0x15d0>
   16024:	d9014c17 	ldw	r4,1328(sp)
   16028:	2080100c 	andi	r2,r4,64
   1602c:	1002ad26 	beq	r2,zero,16ae4 <___vfprintf_internal_r+0x15d0>
   16030:	3c00000b 	ldhu	r16,0(r7)
   16034:	01000044 	movi	r4,1
   16038:	39c00104 	addi	r7,r7,4
   1603c:	0023883a 	mov	r17,zero
   16040:	d9c14015 	stw	r7,1280(sp)
   16044:	d8000405 	stb	zero,16(sp)
   16048:	003fc006 	br	15f4c <___vfprintf_internal_r+0xa38>
   1604c:	d9014f17 	ldw	r4,1340(sp)
   16050:	b00b883a 	mov	r5,r22
   16054:	d9800c04 	addi	r6,sp,48
   16058:	00154bc0 	call	154bc <__sprint_r>
   1605c:	103ee51e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16060:	dc800e17 	ldw	r18,56(sp)
   16064:	d8c01904 	addi	r3,sp,100
   16068:	d9814c17 	ldw	r6,1328(sp)
   1606c:	3080004c 	andi	r2,r6,1
   16070:	1005003a 	cmpeq	r2,r2,zero
   16074:	103ea51e 	bne	r2,zero,15b0c <___vfprintf_internal_r+0x5f8>
   16078:	00800044 	movi	r2,1
   1607c:	dc400d17 	ldw	r17,52(sp)
   16080:	18800115 	stw	r2,4(r3)
   16084:	d8814917 	ldw	r2,1316(sp)
   16088:	94800044 	addi	r18,r18,1
   1608c:	8c400044 	addi	r17,r17,1
   16090:	18800015 	stw	r2,0(r3)
   16094:	008001c4 	movi	r2,7
   16098:	dc800e15 	stw	r18,56(sp)
   1609c:	dc400d15 	stw	r17,52(sp)
   160a0:	14421e0e 	bge	r2,r17,1691c <___vfprintf_internal_r+0x1408>
   160a4:	d9014f17 	ldw	r4,1340(sp)
   160a8:	b00b883a 	mov	r5,r22
   160ac:	d9800c04 	addi	r6,sp,48
   160b0:	00154bc0 	call	154bc <__sprint_r>
   160b4:	103ecf1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   160b8:	dc800e17 	ldw	r18,56(sp)
   160bc:	d8c01904 	addi	r3,sp,100
   160c0:	003e9206 	br	15b0c <___vfprintf_internal_r+0x5f8>
   160c4:	d9014f17 	ldw	r4,1340(sp)
   160c8:	b00b883a 	mov	r5,r22
   160cc:	d9800c04 	addi	r6,sp,48
   160d0:	00154bc0 	call	154bc <__sprint_r>
   160d4:	103ec026 	beq	r2,zero,15bd8 <___vfprintf_internal_r+0x6c4>
   160d8:	003ec606 	br	15bf4 <___vfprintf_internal_r+0x6e0>
   160dc:	d9014f17 	ldw	r4,1340(sp)
   160e0:	b00b883a 	mov	r5,r22
   160e4:	d9800c04 	addi	r6,sp,48
   160e8:	d9c15115 	stw	r7,1348(sp)
   160ec:	00154bc0 	call	154bc <__sprint_r>
   160f0:	d9c15117 	ldw	r7,1348(sp)
   160f4:	103ebf1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   160f8:	dc800e17 	ldw	r18,56(sp)
   160fc:	dc400d17 	ldw	r17,52(sp)
   16100:	dd401904 	addi	r21,sp,100
   16104:	003e7406 	br	15ad8 <___vfprintf_internal_r+0x5c4>
   16108:	d9014f17 	ldw	r4,1340(sp)
   1610c:	b00b883a 	mov	r5,r22
   16110:	d9800c04 	addi	r6,sp,48
   16114:	d9c15115 	stw	r7,1348(sp)
   16118:	00154bc0 	call	154bc <__sprint_r>
   1611c:	d9c15117 	ldw	r7,1348(sp)
   16120:	103eb41e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16124:	dd401904 	addi	r21,sp,100
   16128:	003d6d06 	br	156e0 <___vfprintf_internal_r+0x1cc>
   1612c:	d9014f17 	ldw	r4,1340(sp)
   16130:	b00b883a 	mov	r5,r22
   16134:	d9800c04 	addi	r6,sp,48
   16138:	d9c15115 	stw	r7,1348(sp)
   1613c:	00154bc0 	call	154bc <__sprint_r>
   16140:	d9c15117 	ldw	r7,1348(sp)
   16144:	103eab1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16148:	dc800e17 	ldw	r18,56(sp)
   1614c:	dc400d17 	ldw	r17,52(sp)
   16150:	dd401904 	addi	r21,sp,100
   16154:	003e3406 	br	15a28 <___vfprintf_internal_r+0x514>
   16158:	d9014f17 	ldw	r4,1340(sp)
   1615c:	b00b883a 	mov	r5,r22
   16160:	d9800c04 	addi	r6,sp,48
   16164:	d9c15115 	stw	r7,1348(sp)
   16168:	00154bc0 	call	154bc <__sprint_r>
   1616c:	d9c15117 	ldw	r7,1348(sp)
   16170:	103ea01e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16174:	dc800e17 	ldw	r18,56(sp)
   16178:	dc400d17 	ldw	r17,52(sp)
   1617c:	dd401904 	addi	r21,sp,100
   16180:	003e1c06 	br	159f4 <___vfprintf_internal_r+0x4e0>
   16184:	d9014f17 	ldw	r4,1340(sp)
   16188:	b00b883a 	mov	r5,r22
   1618c:	d9800c04 	addi	r6,sp,48
   16190:	d9c15115 	stw	r7,1348(sp)
   16194:	00154bc0 	call	154bc <__sprint_r>
   16198:	d9c15117 	ldw	r7,1348(sp)
   1619c:	103e951e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   161a0:	dc800e17 	ldw	r18,56(sp)
   161a4:	dc400d17 	ldw	r17,52(sp)
   161a8:	dd401904 	addi	r21,sp,100
   161ac:	003e0406 	br	159c0 <___vfprintf_internal_r+0x4ac>
   161b0:	d9000517 	ldw	r4,20(sp)
   161b4:	0102520e 	bge	zero,r4,16b00 <___vfprintf_internal_r+0x15ec>
   161b8:	d9814717 	ldw	r6,1308(sp)
   161bc:	21807a16 	blt	r4,r6,163a8 <___vfprintf_internal_r+0xe94>
   161c0:	d8814117 	ldw	r2,1284(sp)
   161c4:	91a5883a 	add	r18,r18,r6
   161c8:	8c400044 	addi	r17,r17,1
   161cc:	a8800015 	stw	r2,0(r21)
   161d0:	008001c4 	movi	r2,7
   161d4:	a9800115 	stw	r6,4(r21)
   161d8:	dc800e15 	stw	r18,56(sp)
   161dc:	dc400d15 	stw	r17,52(sp)
   161e0:	1442f616 	blt	r2,r17,16dbc <___vfprintf_internal_r+0x18a8>
   161e4:	a8c00204 	addi	r3,r21,8
   161e8:	d9414717 	ldw	r5,1308(sp)
   161ec:	2161c83a 	sub	r16,r4,r5
   161f0:	043f9d0e 	bge	zero,r16,16068 <___vfprintf_internal_r+0xb54>
   161f4:	00800404 	movi	r2,16
   161f8:	1402130e 	bge	r2,r16,16a48 <___vfprintf_internal_r+0x1534>
   161fc:	dc400d17 	ldw	r17,52(sp)
   16200:	1027883a 	mov	r19,r2
   16204:	070000b4 	movhi	fp,2
   16208:	e73c2184 	addi	fp,fp,-3962
   1620c:	050001c4 	movi	r20,7
   16210:	00000306 	br	16220 <___vfprintf_internal_r+0xd0c>
   16214:	18c00204 	addi	r3,r3,8
   16218:	843ffc04 	addi	r16,r16,-16
   1621c:	9c020d0e 	bge	r19,r16,16a54 <___vfprintf_internal_r+0x1540>
   16220:	94800404 	addi	r18,r18,16
   16224:	8c400044 	addi	r17,r17,1
   16228:	1f000015 	stw	fp,0(r3)
   1622c:	1cc00115 	stw	r19,4(r3)
   16230:	dc800e15 	stw	r18,56(sp)
   16234:	dc400d15 	stw	r17,52(sp)
   16238:	a47ff60e 	bge	r20,r17,16214 <___vfprintf_internal_r+0xd00>
   1623c:	d9014f17 	ldw	r4,1340(sp)
   16240:	b00b883a 	mov	r5,r22
   16244:	d9800c04 	addi	r6,sp,48
   16248:	00154bc0 	call	154bc <__sprint_r>
   1624c:	103e691e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16250:	dc800e17 	ldw	r18,56(sp)
   16254:	dc400d17 	ldw	r17,52(sp)
   16258:	d8c01904 	addi	r3,sp,100
   1625c:	003fee06 	br	16218 <___vfprintf_internal_r+0xd04>
   16260:	d8814717 	ldw	r2,1308(sp)
   16264:	143fffc4 	addi	r16,r2,-1
   16268:	043e970e 	bge	zero,r16,15cc8 <___vfprintf_internal_r+0x7b4>
   1626c:	00800404 	movi	r2,16
   16270:	1400180e 	bge	r2,r16,162d4 <___vfprintf_internal_r+0xdc0>
   16274:	1029883a 	mov	r20,r2
   16278:	070000b4 	movhi	fp,2
   1627c:	e73c2184 	addi	fp,fp,-3962
   16280:	054001c4 	movi	r21,7
   16284:	00000306 	br	16294 <___vfprintf_internal_r+0xd80>
   16288:	9cc00204 	addi	r19,r19,8
   1628c:	843ffc04 	addi	r16,r16,-16
   16290:	a400120e 	bge	r20,r16,162dc <___vfprintf_internal_r+0xdc8>
   16294:	94800404 	addi	r18,r18,16
   16298:	8c400044 	addi	r17,r17,1
   1629c:	9f000015 	stw	fp,0(r19)
   162a0:	9d000115 	stw	r20,4(r19)
   162a4:	dc800e15 	stw	r18,56(sp)
   162a8:	dc400d15 	stw	r17,52(sp)
   162ac:	ac7ff60e 	bge	r21,r17,16288 <___vfprintf_internal_r+0xd74>
   162b0:	d9014f17 	ldw	r4,1340(sp)
   162b4:	b00b883a 	mov	r5,r22
   162b8:	d9800c04 	addi	r6,sp,48
   162bc:	00154bc0 	call	154bc <__sprint_r>
   162c0:	103e4c1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   162c4:	dc800e17 	ldw	r18,56(sp)
   162c8:	dc400d17 	ldw	r17,52(sp)
   162cc:	dcc01904 	addi	r19,sp,100
   162d0:	003fee06 	br	1628c <___vfprintf_internal_r+0xd78>
   162d4:	070000b4 	movhi	fp,2
   162d8:	e73c2184 	addi	fp,fp,-3962
   162dc:	9425883a 	add	r18,r18,r16
   162e0:	8c400044 	addi	r17,r17,1
   162e4:	008001c4 	movi	r2,7
   162e8:	9f000015 	stw	fp,0(r19)
   162ec:	9c000115 	stw	r16,4(r19)
   162f0:	dc800e15 	stw	r18,56(sp)
   162f4:	dc400d15 	stw	r17,52(sp)
   162f8:	147e720e 	bge	r2,r17,15cc4 <___vfprintf_internal_r+0x7b0>
   162fc:	d9014f17 	ldw	r4,1340(sp)
   16300:	b00b883a 	mov	r5,r22
   16304:	d9800c04 	addi	r6,sp,48
   16308:	00154bc0 	call	154bc <__sprint_r>
   1630c:	103e391e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16310:	dc800e17 	ldw	r18,56(sp)
   16314:	dc400d17 	ldw	r17,52(sp)
   16318:	dcc01904 	addi	r19,sp,100
   1631c:	003e6a06 	br	15cc8 <___vfprintf_internal_r+0x7b4>
   16320:	d9014f17 	ldw	r4,1340(sp)
   16324:	b00b883a 	mov	r5,r22
   16328:	d9800c04 	addi	r6,sp,48
   1632c:	d9c15115 	stw	r7,1348(sp)
   16330:	00154bc0 	call	154bc <__sprint_r>
   16334:	d9c15117 	ldw	r7,1348(sp)
   16338:	103e2e1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   1633c:	dc800e17 	ldw	r18,56(sp)
   16340:	dc400d17 	ldw	r17,52(sp)
   16344:	dd401904 	addi	r21,sp,100
   16348:	003dba06 	br	15a34 <___vfprintf_internal_r+0x520>
   1634c:	d9014f17 	ldw	r4,1340(sp)
   16350:	b00b883a 	mov	r5,r22
   16354:	d9800c04 	addi	r6,sp,48
   16358:	00154bc0 	call	154bc <__sprint_r>
   1635c:	103e251e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16360:	dc800e17 	ldw	r18,56(sp)
   16364:	dc400d17 	ldw	r17,52(sp)
   16368:	dcc01904 	addi	r19,sp,100
   1636c:	003e4206 	br	15c78 <___vfprintf_internal_r+0x764>
   16370:	d9014f17 	ldw	r4,1340(sp)
   16374:	b00b883a 	mov	r5,r22
   16378:	d9800c04 	addi	r6,sp,48
   1637c:	00154bc0 	call	154bc <__sprint_r>
   16380:	103e1c1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16384:	dc800e17 	ldw	r18,56(sp)
   16388:	dc400d17 	ldw	r17,52(sp)
   1638c:	d8c01904 	addi	r3,sp,100
   16390:	003e2e06 	br	15c4c <___vfprintf_internal_r+0x738>
   16394:	d9414c17 	ldw	r5,1328(sp)
   16398:	2880004c 	andi	r2,r5,1
   1639c:	1005003a 	cmpeq	r2,r2,zero
   163a0:	103dda1e 	bne	r2,zero,15b0c <___vfprintf_internal_r+0x5f8>
   163a4:	003e9f06 	br	15e24 <___vfprintf_internal_r+0x910>
   163a8:	d8c14117 	ldw	r3,1284(sp)
   163ac:	9125883a 	add	r18,r18,r4
   163b0:	8c400044 	addi	r17,r17,1
   163b4:	008001c4 	movi	r2,7
   163b8:	a8c00015 	stw	r3,0(r21)
   163bc:	a9000115 	stw	r4,4(r21)
   163c0:	dc800e15 	stw	r18,56(sp)
   163c4:	dc400d15 	stw	r17,52(sp)
   163c8:	14426616 	blt	r2,r17,16d64 <___vfprintf_internal_r+0x1850>
   163cc:	a8c00204 	addi	r3,r21,8
   163d0:	d9414917 	ldw	r5,1316(sp)
   163d4:	00800044 	movi	r2,1
   163d8:	94800044 	addi	r18,r18,1
   163dc:	8c400044 	addi	r17,r17,1
   163e0:	18800115 	stw	r2,4(r3)
   163e4:	008001c4 	movi	r2,7
   163e8:	19400015 	stw	r5,0(r3)
   163ec:	dc800e15 	stw	r18,56(sp)
   163f0:	dc400d15 	stw	r17,52(sp)
   163f4:	2021883a 	mov	r16,r4
   163f8:	14425016 	blt	r2,r17,16d3c <___vfprintf_internal_r+0x1828>
   163fc:	19400204 	addi	r5,r3,8
   16400:	d9814717 	ldw	r6,1308(sp)
   16404:	8c400044 	addi	r17,r17,1
   16408:	dc400d15 	stw	r17,52(sp)
   1640c:	3107c83a 	sub	r3,r6,r4
   16410:	d9014117 	ldw	r4,1284(sp)
   16414:	90e5883a 	add	r18,r18,r3
   16418:	28c00115 	stw	r3,4(r5)
   1641c:	8105883a 	add	r2,r16,r4
   16420:	28800015 	stw	r2,0(r5)
   16424:	008001c4 	movi	r2,7
   16428:	dc800e15 	stw	r18,56(sp)
   1642c:	147f1d16 	blt	r2,r17,160a4 <___vfprintf_internal_r+0xb90>
   16430:	28c00204 	addi	r3,r5,8
   16434:	003db506 	br	15b0c <___vfprintf_internal_r+0x5f8>
   16438:	3c000017 	ldw	r16,0(r7)
   1643c:	3c400117 	ldw	r17,4(r7)
   16440:	39800204 	addi	r6,r7,8
   16444:	01000044 	movi	r4,1
   16448:	d9814015 	stw	r6,1280(sp)
   1644c:	d8000405 	stb	zero,16(sp)
   16450:	003ebe06 	br	15f4c <___vfprintf_internal_r+0xa38>
   16454:	3c000017 	ldw	r16,0(r7)
   16458:	3c400117 	ldw	r17,4(r7)
   1645c:	38800204 	addi	r2,r7,8
   16460:	d8814015 	stw	r2,1280(sp)
   16464:	003eb706 	br	15f44 <___vfprintf_internal_r+0xa30>
   16468:	3c000017 	ldw	r16,0(r7)
   1646c:	3c400117 	ldw	r17,4(r7)
   16470:	39000204 	addi	r4,r7,8
   16474:	d9014015 	stw	r4,1280(sp)
   16478:	0009883a 	mov	r4,zero
   1647c:	d8000405 	stb	zero,16(sp)
   16480:	003eb206 	br	15f4c <___vfprintf_internal_r+0xa38>
   16484:	38c00017 	ldw	r3,0(r7)
   16488:	39c00104 	addi	r7,r7,4
   1648c:	d8c14a15 	stw	r3,1320(sp)
   16490:	1800d10e 	bge	r3,zero,167d8 <___vfprintf_internal_r+0x12c4>
   16494:	00c7c83a 	sub	r3,zero,r3
   16498:	d8c14a15 	stw	r3,1320(sp)
   1649c:	d9014c17 	ldw	r4,1328(sp)
   164a0:	b8c00007 	ldb	r3,0(r23)
   164a4:	21000114 	ori	r4,r4,4
   164a8:	d9014c15 	stw	r4,1328(sp)
   164ac:	003c9806 	br	15710 <___vfprintf_internal_r+0x1fc>
   164b0:	d9814c17 	ldw	r6,1328(sp)
   164b4:	3080080c 	andi	r2,r6,32
   164b8:	1001f026 	beq	r2,zero,16c7c <___vfprintf_internal_r+0x1768>
   164bc:	d9014b17 	ldw	r4,1324(sp)
   164c0:	38800017 	ldw	r2,0(r7)
   164c4:	39c00104 	addi	r7,r7,4
   164c8:	d9c14015 	stw	r7,1280(sp)
   164cc:	2007d7fa 	srai	r3,r4,31
   164d0:	d9c14017 	ldw	r7,1280(sp)
   164d4:	11000015 	stw	r4,0(r2)
   164d8:	10c00115 	stw	r3,4(r2)
   164dc:	003c6906 	br	15684 <___vfprintf_internal_r+0x170>
   164e0:	b8c00007 	ldb	r3,0(r23)
   164e4:	00801b04 	movi	r2,108
   164e8:	18824f26 	beq	r3,r2,16e28 <___vfprintf_internal_r+0x1914>
   164ec:	d9414c17 	ldw	r5,1328(sp)
   164f0:	29400414 	ori	r5,r5,16
   164f4:	d9414c15 	stw	r5,1328(sp)
   164f8:	003c8506 	br	15710 <___vfprintf_internal_r+0x1fc>
   164fc:	d9814c17 	ldw	r6,1328(sp)
   16500:	b8c00007 	ldb	r3,0(r23)
   16504:	31800814 	ori	r6,r6,32
   16508:	d9814c15 	stw	r6,1328(sp)
   1650c:	003c8006 	br	15710 <___vfprintf_internal_r+0x1fc>
   16510:	d8814c17 	ldw	r2,1328(sp)
   16514:	3c000017 	ldw	r16,0(r7)
   16518:	00c01e04 	movi	r3,120
   1651c:	10800094 	ori	r2,r2,2
   16520:	d8814c15 	stw	r2,1328(sp)
   16524:	39c00104 	addi	r7,r7,4
   16528:	014000b4 	movhi	r5,2
   1652c:	297c0a04 	addi	r5,r5,-4056
   16530:	00800c04 	movi	r2,48
   16534:	0023883a 	mov	r17,zero
   16538:	01000084 	movi	r4,2
   1653c:	d9c14015 	stw	r7,1280(sp)
   16540:	d8c14d15 	stw	r3,1332(sp)
   16544:	d9414415 	stw	r5,1296(sp)
   16548:	d8800445 	stb	r2,17(sp)
   1654c:	d8c00485 	stb	r3,18(sp)
   16550:	d8000405 	stb	zero,16(sp)
   16554:	003e7d06 	br	15f4c <___vfprintf_internal_r+0xa38>
   16558:	d8814c17 	ldw	r2,1328(sp)
   1655c:	b8c00007 	ldb	r3,0(r23)
   16560:	10801014 	ori	r2,r2,64
   16564:	d8814c15 	stw	r2,1328(sp)
   16568:	003c6906 	br	15710 <___vfprintf_internal_r+0x1fc>
   1656c:	d9414c17 	ldw	r5,1328(sp)
   16570:	2880020c 	andi	r2,r5,8
   16574:	1001df26 	beq	r2,zero,16cf4 <___vfprintf_internal_r+0x17e0>
   16578:	39800017 	ldw	r6,0(r7)
   1657c:	38800204 	addi	r2,r7,8
   16580:	d8814015 	stw	r2,1280(sp)
   16584:	d9814215 	stw	r6,1288(sp)
   16588:	39c00117 	ldw	r7,4(r7)
   1658c:	d9c14315 	stw	r7,1292(sp)
   16590:	d9014217 	ldw	r4,1288(sp)
   16594:	d9414317 	ldw	r5,1292(sp)
   16598:	001a1d80 	call	1a1d8 <__isinfd>
   1659c:	10021726 	beq	r2,zero,16dfc <___vfprintf_internal_r+0x18e8>
   165a0:	d9014217 	ldw	r4,1288(sp)
   165a4:	d9414317 	ldw	r5,1292(sp)
   165a8:	000d883a 	mov	r6,zero
   165ac:	000f883a 	mov	r7,zero
   165b0:	00106500 	call	10650 <__ltdf2>
   165b4:	1002ca16 	blt	r2,zero,170e0 <___vfprintf_internal_r+0x1bcc>
   165b8:	d9414d17 	ldw	r5,1332(sp)
   165bc:	008011c4 	movi	r2,71
   165c0:	11420a16 	blt	r2,r5,16dec <___vfprintf_internal_r+0x18d8>
   165c4:	018000b4 	movhi	r6,2
   165c8:	31bc0f04 	addi	r6,r6,-4036
   165cc:	d9814115 	stw	r6,1284(sp)
   165d0:	d9014c17 	ldw	r4,1328(sp)
   165d4:	00c000c4 	movi	r3,3
   165d8:	00bfdfc4 	movi	r2,-129
   165dc:	2088703a 	and	r4,r4,r2
   165e0:	180f883a 	mov	r7,r3
   165e4:	d8c14515 	stw	r3,1300(sp)
   165e8:	d9014c15 	stw	r4,1328(sp)
   165ec:	d8014615 	stw	zero,1304(sp)
   165f0:	003e6a06 	br	15f9c <___vfprintf_internal_r+0xa88>
   165f4:	38800017 	ldw	r2,0(r7)
   165f8:	00c00044 	movi	r3,1
   165fc:	39c00104 	addi	r7,r7,4
   16600:	d9c14015 	stw	r7,1280(sp)
   16604:	d9000f04 	addi	r4,sp,60
   16608:	180f883a 	mov	r7,r3
   1660c:	d8c14515 	stw	r3,1300(sp)
   16610:	d9014115 	stw	r4,1284(sp)
   16614:	d8800f05 	stb	r2,60(sp)
   16618:	d8000405 	stb	zero,16(sp)
   1661c:	003cac06 	br	158d0 <___vfprintf_internal_r+0x3bc>
   16620:	014000b4 	movhi	r5,2
   16624:	297c1504 	addi	r5,r5,-4012
   16628:	d9414415 	stw	r5,1296(sp)
   1662c:	d9814c17 	ldw	r6,1328(sp)
   16630:	3080080c 	andi	r2,r6,32
   16634:	1000f926 	beq	r2,zero,16a1c <___vfprintf_internal_r+0x1508>
   16638:	3c000017 	ldw	r16,0(r7)
   1663c:	3c400117 	ldw	r17,4(r7)
   16640:	38800204 	addi	r2,r7,8
   16644:	d8814015 	stw	r2,1280(sp)
   16648:	d9414c17 	ldw	r5,1328(sp)
   1664c:	2880004c 	andi	r2,r5,1
   16650:	1005003a 	cmpeq	r2,r2,zero
   16654:	1000b31e 	bne	r2,zero,16924 <___vfprintf_internal_r+0x1410>
   16658:	8444b03a 	or	r2,r16,r17
   1665c:	1000b126 	beq	r2,zero,16924 <___vfprintf_internal_r+0x1410>
   16660:	d9814d17 	ldw	r6,1332(sp)
   16664:	29400094 	ori	r5,r5,2
   16668:	00800c04 	movi	r2,48
   1666c:	01000084 	movi	r4,2
   16670:	d9414c15 	stw	r5,1328(sp)
   16674:	d8800445 	stb	r2,17(sp)
   16678:	d9800485 	stb	r6,18(sp)
   1667c:	d8000405 	stb	zero,16(sp)
   16680:	003e3206 	br	15f4c <___vfprintf_internal_r+0xa38>
   16684:	018000b4 	movhi	r6,2
   16688:	31bc0a04 	addi	r6,r6,-4056
   1668c:	d9814415 	stw	r6,1296(sp)
   16690:	003fe606 	br	1662c <___vfprintf_internal_r+0x1118>
   16694:	00800ac4 	movi	r2,43
   16698:	d8800405 	stb	r2,16(sp)
   1669c:	b8c00007 	ldb	r3,0(r23)
   166a0:	003c1b06 	br	15710 <___vfprintf_internal_r+0x1fc>
   166a4:	d8814c17 	ldw	r2,1328(sp)
   166a8:	b8c00007 	ldb	r3,0(r23)
   166ac:	10800054 	ori	r2,r2,1
   166b0:	d8814c15 	stw	r2,1328(sp)
   166b4:	003c1606 	br	15710 <___vfprintf_internal_r+0x1fc>
   166b8:	d8800407 	ldb	r2,16(sp)
   166bc:	1000461e 	bne	r2,zero,167d8 <___vfprintf_internal_r+0x12c4>
   166c0:	00800804 	movi	r2,32
   166c4:	d8800405 	stb	r2,16(sp)
   166c8:	b8c00007 	ldb	r3,0(r23)
   166cc:	003c1006 	br	15710 <___vfprintf_internal_r+0x1fc>
   166d0:	d9814c17 	ldw	r6,1328(sp)
   166d4:	b8c00007 	ldb	r3,0(r23)
   166d8:	31800214 	ori	r6,r6,8
   166dc:	d9814c15 	stw	r6,1328(sp)
   166e0:	003c0b06 	br	15710 <___vfprintf_internal_r+0x1fc>
   166e4:	0007883a 	mov	r3,zero
   166e8:	01000244 	movi	r4,9
   166ec:	188002a4 	muli	r2,r3,10
   166f0:	b8c00007 	ldb	r3,0(r23)
   166f4:	d9814d17 	ldw	r6,1332(sp)
   166f8:	bdc00044 	addi	r23,r23,1
   166fc:	d8c14d15 	stw	r3,1332(sp)
   16700:	d9414d17 	ldw	r5,1332(sp)
   16704:	3085883a 	add	r2,r6,r2
   16708:	10fff404 	addi	r3,r2,-48
   1670c:	28bff404 	addi	r2,r5,-48
   16710:	20bff62e 	bgeu	r4,r2,166ec <___vfprintf_internal_r+0x11d8>
   16714:	d8c14a15 	stw	r3,1320(sp)
   16718:	003bff06 	br	15718 <___vfprintf_internal_r+0x204>
   1671c:	d9414c17 	ldw	r5,1328(sp)
   16720:	b8c00007 	ldb	r3,0(r23)
   16724:	29402014 	ori	r5,r5,128
   16728:	d9414c15 	stw	r5,1328(sp)
   1672c:	003bf806 	br	15710 <___vfprintf_internal_r+0x1fc>
   16730:	b8c00007 	ldb	r3,0(r23)
   16734:	00800a84 	movi	r2,42
   16738:	bdc00044 	addi	r23,r23,1
   1673c:	18831526 	beq	r3,r2,17394 <___vfprintf_internal_r+0x1e80>
   16740:	d8c14d15 	stw	r3,1332(sp)
   16744:	18bff404 	addi	r2,r3,-48
   16748:	00c00244 	movi	r3,9
   1674c:	18827836 	bltu	r3,r2,17130 <___vfprintf_internal_r+0x1c1c>
   16750:	000d883a 	mov	r6,zero
   16754:	308002a4 	muli	r2,r6,10
   16758:	b9800007 	ldb	r6,0(r23)
   1675c:	d9414d17 	ldw	r5,1332(sp)
   16760:	bdc00044 	addi	r23,r23,1
   16764:	d9814d15 	stw	r6,1332(sp)
   16768:	d9014d17 	ldw	r4,1332(sp)
   1676c:	1145883a 	add	r2,r2,r5
   16770:	11bff404 	addi	r6,r2,-48
   16774:	20bff404 	addi	r2,r4,-48
   16778:	18bff62e 	bgeu	r3,r2,16754 <___vfprintf_internal_r+0x1240>
   1677c:	3027883a 	mov	r19,r6
   16780:	303be50e 	bge	r6,zero,15718 <___vfprintf_internal_r+0x204>
   16784:	04ffffc4 	movi	r19,-1
   16788:	003be306 	br	15718 <___vfprintf_internal_r+0x204>
   1678c:	d8000405 	stb	zero,16(sp)
   16790:	39800017 	ldw	r6,0(r7)
   16794:	39c00104 	addi	r7,r7,4
   16798:	d9c14015 	stw	r7,1280(sp)
   1679c:	d9814115 	stw	r6,1284(sp)
   167a0:	3001c926 	beq	r6,zero,16ec8 <___vfprintf_internal_r+0x19b4>
   167a4:	98000e16 	blt	r19,zero,167e0 <___vfprintf_internal_r+0x12cc>
   167a8:	d9014117 	ldw	r4,1284(sp)
   167ac:	000b883a 	mov	r5,zero
   167b0:	980d883a 	mov	r6,r19
   167b4:	0013cdc0 	call	13cdc <memchr>
   167b8:	10025926 	beq	r2,zero,17120 <___vfprintf_internal_r+0x1c0c>
   167bc:	d8c14117 	ldw	r3,1284(sp)
   167c0:	10cfc83a 	sub	r7,r2,r3
   167c4:	99c19e16 	blt	r19,r7,16e40 <___vfprintf_internal_r+0x192c>
   167c8:	d9c14515 	stw	r7,1300(sp)
   167cc:	38000916 	blt	r7,zero,167f4 <___vfprintf_internal_r+0x12e0>
   167d0:	d8014615 	stw	zero,1304(sp)
   167d4:	003df106 	br	15f9c <___vfprintf_internal_r+0xa88>
   167d8:	b8c00007 	ldb	r3,0(r23)
   167dc:	003bcc06 	br	15710 <___vfprintf_internal_r+0x1fc>
   167e0:	d9014117 	ldw	r4,1284(sp)
   167e4:	001511c0 	call	1511c <strlen>
   167e8:	d8814515 	stw	r2,1300(sp)
   167ec:	100f883a 	mov	r7,r2
   167f0:	103ff70e 	bge	r2,zero,167d0 <___vfprintf_internal_r+0x12bc>
   167f4:	d8014515 	stw	zero,1300(sp)
   167f8:	d8014615 	stw	zero,1304(sp)
   167fc:	003de706 	br	15f9c <___vfprintf_internal_r+0xa88>
   16800:	20c03fcc 	andi	r3,r4,255
   16804:	00800044 	movi	r2,1
   16808:	18802d26 	beq	r3,r2,168c0 <___vfprintf_internal_r+0x13ac>
   1680c:	18800e36 	bltu	r3,r2,16848 <___vfprintf_internal_r+0x1334>
   16810:	00800084 	movi	r2,2
   16814:	1880fa26 	beq	r3,r2,16c00 <___vfprintf_internal_r+0x16ec>
   16818:	010000b4 	movhi	r4,2
   1681c:	213c1a04 	addi	r4,r4,-3992
   16820:	001511c0 	call	1511c <strlen>
   16824:	100f883a 	mov	r7,r2
   16828:	dcc14515 	stw	r19,1300(sp)
   1682c:	9880010e 	bge	r19,r2,16834 <___vfprintf_internal_r+0x1320>
   16830:	d8814515 	stw	r2,1300(sp)
   16834:	008000b4 	movhi	r2,2
   16838:	10bc1a04 	addi	r2,r2,-3992
   1683c:	dcc14615 	stw	r19,1304(sp)
   16840:	d8814115 	stw	r2,1284(sp)
   16844:	003dd506 	br	15f9c <___vfprintf_internal_r+0xa88>
   16848:	d9401904 	addi	r5,sp,100
   1684c:	dd000f04 	addi	r20,sp,60
   16850:	d9414115 	stw	r5,1284(sp)
   16854:	880a977a 	slli	r5,r17,29
   16858:	d9814117 	ldw	r6,1284(sp)
   1685c:	8004d0fa 	srli	r2,r16,3
   16860:	8806d0fa 	srli	r3,r17,3
   16864:	810001cc 	andi	r4,r16,7
   16868:	2884b03a 	or	r2,r5,r2
   1686c:	31bfffc4 	addi	r6,r6,-1
   16870:	21000c04 	addi	r4,r4,48
   16874:	d9814115 	stw	r6,1284(sp)
   16878:	10cab03a 	or	r5,r2,r3
   1687c:	31000005 	stb	r4,0(r6)
   16880:	1021883a 	mov	r16,r2
   16884:	1823883a 	mov	r17,r3
   16888:	283ff21e 	bne	r5,zero,16854 <___vfprintf_internal_r+0x1340>
   1688c:	d8c14c17 	ldw	r3,1328(sp)
   16890:	1880004c 	andi	r2,r3,1
   16894:	1005003a 	cmpeq	r2,r2,zero
   16898:	103db91e 	bne	r2,zero,15f80 <___vfprintf_internal_r+0xa6c>
   1689c:	20803fcc 	andi	r2,r4,255
   168a0:	1080201c 	xori	r2,r2,128
   168a4:	10bfe004 	addi	r2,r2,-128
   168a8:	00c00c04 	movi	r3,48
   168ac:	10fdb426 	beq	r2,r3,15f80 <___vfprintf_internal_r+0xa6c>
   168b0:	31bfffc4 	addi	r6,r6,-1
   168b4:	d9814115 	stw	r6,1284(sp)
   168b8:	30c00005 	stb	r3,0(r6)
   168bc:	003db006 	br	15f80 <___vfprintf_internal_r+0xa6c>
   168c0:	88800068 	cmpgeui	r2,r17,1
   168c4:	10002c1e 	bne	r2,zero,16978 <___vfprintf_internal_r+0x1464>
   168c8:	8800021e 	bne	r17,zero,168d4 <___vfprintf_internal_r+0x13c0>
   168cc:	00800244 	movi	r2,9
   168d0:	14002936 	bltu	r2,r16,16978 <___vfprintf_internal_r+0x1464>
   168d4:	d90018c4 	addi	r4,sp,99
   168d8:	dd000f04 	addi	r20,sp,60
   168dc:	d9014115 	stw	r4,1284(sp)
   168e0:	d9014117 	ldw	r4,1284(sp)
   168e4:	80800c04 	addi	r2,r16,48
   168e8:	20800005 	stb	r2,0(r4)
   168ec:	003da406 	br	15f80 <___vfprintf_internal_r+0xa6c>
   168f0:	dc400d17 	ldw	r17,52(sp)
   168f4:	070000b4 	movhi	fp,2
   168f8:	e73c2184 	addi	fp,fp,-3962
   168fc:	9425883a 	add	r18,r18,r16
   16900:	8c400044 	addi	r17,r17,1
   16904:	008001c4 	movi	r2,7
   16908:	1f000015 	stw	fp,0(r3)
   1690c:	1c000115 	stw	r16,4(r3)
   16910:	dc800e15 	stw	r18,56(sp)
   16914:	dc400d15 	stw	r17,52(sp)
   16918:	147de216 	blt	r2,r17,160a4 <___vfprintf_internal_r+0xb90>
   1691c:	18c00204 	addi	r3,r3,8
   16920:	003c7a06 	br	15b0c <___vfprintf_internal_r+0x5f8>
   16924:	01000084 	movi	r4,2
   16928:	d8000405 	stb	zero,16(sp)
   1692c:	003d8706 	br	15f4c <___vfprintf_internal_r+0xa38>
   16930:	d9814c17 	ldw	r6,1328(sp)
   16934:	30c4703a 	and	r2,r6,r3
   16938:	1005003a 	cmpeq	r2,r2,zero
   1693c:	103cb926 	beq	r2,zero,15c24 <___vfprintf_internal_r+0x710>
   16940:	d9014117 	ldw	r4,1284(sp)
   16944:	94800044 	addi	r18,r18,1
   16948:	8c400044 	addi	r17,r17,1
   1694c:	008001c4 	movi	r2,7
   16950:	a9000015 	stw	r4,0(r21)
   16954:	a8c00115 	stw	r3,4(r21)
   16958:	dc800e15 	stw	r18,56(sp)
   1695c:	dc400d15 	stw	r17,52(sp)
   16960:	147e6616 	blt	r2,r17,162fc <___vfprintf_internal_r+0xde8>
   16964:	acc00204 	addi	r19,r21,8
   16968:	003cd706 	br	15cc8 <___vfprintf_internal_r+0x7b4>
   1696c:	070000b4 	movhi	fp,2
   16970:	e73c2184 	addi	fp,fp,-3962
   16974:	003c4f06 	br	15ab4 <___vfprintf_internal_r+0x5a0>
   16978:	dd000f04 	addi	r20,sp,60
   1697c:	dc801904 	addi	r18,sp,100
   16980:	8009883a 	mov	r4,r16
   16984:	880b883a 	mov	r5,r17
   16988:	01800284 	movi	r6,10
   1698c:	000f883a 	mov	r7,zero
   16990:	001a9940 	call	1a994 <__umoddi3>
   16994:	12000c04 	addi	r8,r2,48
   16998:	94bfffc4 	addi	r18,r18,-1
   1699c:	8009883a 	mov	r4,r16
   169a0:	880b883a 	mov	r5,r17
   169a4:	01800284 	movi	r6,10
   169a8:	000f883a 	mov	r7,zero
   169ac:	92000005 	stb	r8,0(r18)
   169b0:	001a3b80 	call	1a3b8 <__udivdi3>
   169b4:	1009883a 	mov	r4,r2
   169b8:	1021883a 	mov	r16,r2
   169bc:	18800068 	cmpgeui	r2,r3,1
   169c0:	1823883a 	mov	r17,r3
   169c4:	103fee1e 	bne	r2,zero,16980 <___vfprintf_internal_r+0x146c>
   169c8:	1800021e 	bne	r3,zero,169d4 <___vfprintf_internal_r+0x14c0>
   169cc:	00800244 	movi	r2,9
   169d0:	113feb36 	bltu	r2,r4,16980 <___vfprintf_internal_r+0x146c>
   169d4:	94bfffc4 	addi	r18,r18,-1
   169d8:	dc814115 	stw	r18,1284(sp)
   169dc:	003fc006 	br	168e0 <___vfprintf_internal_r+0x13cc>
   169e0:	d9014c17 	ldw	r4,1328(sp)
   169e4:	2080004c 	andi	r2,r4,1
   169e8:	10009a1e 	bne	r2,zero,16c54 <___vfprintf_internal_r+0x1740>
   169ec:	d9401904 	addi	r5,sp,100
   169f0:	dd000f04 	addi	r20,sp,60
   169f4:	d9414115 	stw	r5,1284(sp)
   169f8:	003d6106 	br	15f80 <___vfprintf_internal_r+0xa6c>
   169fc:	d9014f17 	ldw	r4,1340(sp)
   16a00:	b00b883a 	mov	r5,r22
   16a04:	d9800c04 	addi	r6,sp,48
   16a08:	00154bc0 	call	154bc <__sprint_r>
   16a0c:	103c791e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16a10:	dc800e17 	ldw	r18,56(sp)
   16a14:	d8c01904 	addi	r3,sp,100
   16a18:	003cff06 	br	15e18 <___vfprintf_internal_r+0x904>
   16a1c:	d8c14c17 	ldw	r3,1328(sp)
   16a20:	1880040c 	andi	r2,r3,16
   16a24:	1000711e 	bne	r2,zero,16bec <___vfprintf_internal_r+0x16d8>
   16a28:	d9014c17 	ldw	r4,1328(sp)
   16a2c:	2080100c 	andi	r2,r4,64
   16a30:	10006e26 	beq	r2,zero,16bec <___vfprintf_internal_r+0x16d8>
   16a34:	3c00000b 	ldhu	r16,0(r7)
   16a38:	0023883a 	mov	r17,zero
   16a3c:	39c00104 	addi	r7,r7,4
   16a40:	d9c14015 	stw	r7,1280(sp)
   16a44:	003f0006 	br	16648 <___vfprintf_internal_r+0x1134>
   16a48:	dc400d17 	ldw	r17,52(sp)
   16a4c:	070000b4 	movhi	fp,2
   16a50:	e73c2184 	addi	fp,fp,-3962
   16a54:	9425883a 	add	r18,r18,r16
   16a58:	8c400044 	addi	r17,r17,1
   16a5c:	008001c4 	movi	r2,7
   16a60:	1f000015 	stw	fp,0(r3)
   16a64:	1c000115 	stw	r16,4(r3)
   16a68:	dc800e15 	stw	r18,56(sp)
   16a6c:	dc400d15 	stw	r17,52(sp)
   16a70:	147d7616 	blt	r2,r17,1604c <___vfprintf_internal_r+0xb38>
   16a74:	18c00204 	addi	r3,r3,8
   16a78:	003d7b06 	br	16068 <___vfprintf_internal_r+0xb54>
   16a7c:	dc800e17 	ldw	r18,56(sp)
   16a80:	dc400d17 	ldw	r17,52(sp)
   16a84:	070000b4 	movhi	fp,2
   16a88:	e73c2584 	addi	fp,fp,-3946
   16a8c:	003bc006 	br	15990 <___vfprintf_internal_r+0x47c>
   16a90:	d9014f17 	ldw	r4,1340(sp)
   16a94:	b00b883a 	mov	r5,r22
   16a98:	d9800c04 	addi	r6,sp,48
   16a9c:	00154bc0 	call	154bc <__sprint_r>
   16aa0:	103c541e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16aa4:	dc800e17 	ldw	r18,56(sp)
   16aa8:	d8c01904 	addi	r3,sp,100
   16aac:	003ce906 	br	15e54 <___vfprintf_internal_r+0x940>
   16ab0:	3c000017 	ldw	r16,0(r7)
   16ab4:	0009883a 	mov	r4,zero
   16ab8:	39c00104 	addi	r7,r7,4
   16abc:	0023883a 	mov	r17,zero
   16ac0:	d9c14015 	stw	r7,1280(sp)
   16ac4:	d8000405 	stb	zero,16(sp)
   16ac8:	003d2006 	br	15f4c <___vfprintf_internal_r+0xa38>
   16acc:	38800017 	ldw	r2,0(r7)
   16ad0:	39c00104 	addi	r7,r7,4
   16ad4:	d9c14015 	stw	r7,1280(sp)
   16ad8:	1023d7fa 	srai	r17,r2,31
   16adc:	1021883a 	mov	r16,r2
   16ae0:	003d1806 	br	15f44 <___vfprintf_internal_r+0xa30>
   16ae4:	3c000017 	ldw	r16,0(r7)
   16ae8:	01000044 	movi	r4,1
   16aec:	39c00104 	addi	r7,r7,4
   16af0:	0023883a 	mov	r17,zero
   16af4:	d9c14015 	stw	r7,1280(sp)
   16af8:	d8000405 	stb	zero,16(sp)
   16afc:	003d1306 	br	15f4c <___vfprintf_internal_r+0xa38>
   16b00:	008000b4 	movhi	r2,2
   16b04:	10bc2104 	addi	r2,r2,-3964
   16b08:	94800044 	addi	r18,r18,1
   16b0c:	8c400044 	addi	r17,r17,1
   16b10:	a8800015 	stw	r2,0(r21)
   16b14:	00c00044 	movi	r3,1
   16b18:	008001c4 	movi	r2,7
   16b1c:	a8c00115 	stw	r3,4(r21)
   16b20:	dc800e15 	stw	r18,56(sp)
   16b24:	dc400d15 	stw	r17,52(sp)
   16b28:	1440ca16 	blt	r2,r17,16e54 <___vfprintf_internal_r+0x1940>
   16b2c:	a8c00204 	addi	r3,r21,8
   16b30:	2000061e 	bne	r4,zero,16b4c <___vfprintf_internal_r+0x1638>
   16b34:	d9414717 	ldw	r5,1308(sp)
   16b38:	2800041e 	bne	r5,zero,16b4c <___vfprintf_internal_r+0x1638>
   16b3c:	d9814c17 	ldw	r6,1328(sp)
   16b40:	3080004c 	andi	r2,r6,1
   16b44:	1005003a 	cmpeq	r2,r2,zero
   16b48:	103bf01e 	bne	r2,zero,15b0c <___vfprintf_internal_r+0x5f8>
   16b4c:	00800044 	movi	r2,1
   16b50:	dc400d17 	ldw	r17,52(sp)
   16b54:	18800115 	stw	r2,4(r3)
   16b58:	d8814917 	ldw	r2,1316(sp)
   16b5c:	94800044 	addi	r18,r18,1
   16b60:	8c400044 	addi	r17,r17,1
   16b64:	18800015 	stw	r2,0(r3)
   16b68:	008001c4 	movi	r2,7
   16b6c:	dc800e15 	stw	r18,56(sp)
   16b70:	dc400d15 	stw	r17,52(sp)
   16b74:	1440ca16 	blt	r2,r17,16ea0 <___vfprintf_internal_r+0x198c>
   16b78:	18c00204 	addi	r3,r3,8
   16b7c:	0121c83a 	sub	r16,zero,r4
   16b80:	0400500e 	bge	zero,r16,16cc4 <___vfprintf_internal_r+0x17b0>
   16b84:	00800404 	movi	r2,16
   16b88:	1400800e 	bge	r2,r16,16d8c <___vfprintf_internal_r+0x1878>
   16b8c:	1027883a 	mov	r19,r2
   16b90:	070000b4 	movhi	fp,2
   16b94:	e73c2184 	addi	fp,fp,-3962
   16b98:	050001c4 	movi	r20,7
   16b9c:	00000306 	br	16bac <___vfprintf_internal_r+0x1698>
   16ba0:	18c00204 	addi	r3,r3,8
   16ba4:	843ffc04 	addi	r16,r16,-16
   16ba8:	9c007a0e 	bge	r19,r16,16d94 <___vfprintf_internal_r+0x1880>
   16bac:	94800404 	addi	r18,r18,16
   16bb0:	8c400044 	addi	r17,r17,1
   16bb4:	1f000015 	stw	fp,0(r3)
   16bb8:	1cc00115 	stw	r19,4(r3)
   16bbc:	dc800e15 	stw	r18,56(sp)
   16bc0:	dc400d15 	stw	r17,52(sp)
   16bc4:	a47ff60e 	bge	r20,r17,16ba0 <___vfprintf_internal_r+0x168c>
   16bc8:	d9014f17 	ldw	r4,1340(sp)
   16bcc:	b00b883a 	mov	r5,r22
   16bd0:	d9800c04 	addi	r6,sp,48
   16bd4:	00154bc0 	call	154bc <__sprint_r>
   16bd8:	103c061e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16bdc:	dc800e17 	ldw	r18,56(sp)
   16be0:	dc400d17 	ldw	r17,52(sp)
   16be4:	d8c01904 	addi	r3,sp,100
   16be8:	003fee06 	br	16ba4 <___vfprintf_internal_r+0x1690>
   16bec:	3c000017 	ldw	r16,0(r7)
   16bf0:	0023883a 	mov	r17,zero
   16bf4:	39c00104 	addi	r7,r7,4
   16bf8:	d9c14015 	stw	r7,1280(sp)
   16bfc:	003e9206 	br	16648 <___vfprintf_internal_r+0x1134>
   16c00:	d9401904 	addi	r5,sp,100
   16c04:	dd000f04 	addi	r20,sp,60
   16c08:	d9414115 	stw	r5,1284(sp)
   16c0c:	d9814417 	ldw	r6,1296(sp)
   16c10:	880a973a 	slli	r5,r17,28
   16c14:	8004d13a 	srli	r2,r16,4
   16c18:	810003cc 	andi	r4,r16,15
   16c1c:	3109883a 	add	r4,r6,r4
   16c20:	2884b03a 	or	r2,r5,r2
   16c24:	21400003 	ldbu	r5,0(r4)
   16c28:	d9014117 	ldw	r4,1284(sp)
   16c2c:	8806d13a 	srli	r3,r17,4
   16c30:	1021883a 	mov	r16,r2
   16c34:	213fffc4 	addi	r4,r4,-1
   16c38:	d9014115 	stw	r4,1284(sp)
   16c3c:	d9814117 	ldw	r6,1284(sp)
   16c40:	10c8b03a 	or	r4,r2,r3
   16c44:	1823883a 	mov	r17,r3
   16c48:	31400005 	stb	r5,0(r6)
   16c4c:	203fef1e 	bne	r4,zero,16c0c <___vfprintf_internal_r+0x16f8>
   16c50:	003ccb06 	br	15f80 <___vfprintf_internal_r+0xa6c>
   16c54:	00800c04 	movi	r2,48
   16c58:	d98018c4 	addi	r6,sp,99
   16c5c:	dd000f04 	addi	r20,sp,60
   16c60:	d88018c5 	stb	r2,99(sp)
   16c64:	d9814115 	stw	r6,1284(sp)
   16c68:	003cc506 	br	15f80 <___vfprintf_internal_r+0xa6c>
   16c6c:	dc400d17 	ldw	r17,52(sp)
   16c70:	070000b4 	movhi	fp,2
   16c74:	e73c2584 	addi	fp,fp,-3946
   16c78:	003bc706 	br	15b98 <___vfprintf_internal_r+0x684>
   16c7c:	d9414c17 	ldw	r5,1328(sp)
   16c80:	2880040c 	andi	r2,r5,16
   16c84:	10007c26 	beq	r2,zero,16e78 <___vfprintf_internal_r+0x1964>
   16c88:	38800017 	ldw	r2,0(r7)
   16c8c:	39c00104 	addi	r7,r7,4
   16c90:	d9c14015 	stw	r7,1280(sp)
   16c94:	d9814b17 	ldw	r6,1324(sp)
   16c98:	d9c14017 	ldw	r7,1280(sp)
   16c9c:	11800015 	stw	r6,0(r2)
   16ca0:	003a7806 	br	15684 <___vfprintf_internal_r+0x170>
   16ca4:	d9014f17 	ldw	r4,1340(sp)
   16ca8:	b00b883a 	mov	r5,r22
   16cac:	d9800c04 	addi	r6,sp,48
   16cb0:	00154bc0 	call	154bc <__sprint_r>
   16cb4:	103bcf1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16cb8:	dc800e17 	ldw	r18,56(sp)
   16cbc:	dc400d17 	ldw	r17,52(sp)
   16cc0:	d8c01904 	addi	r3,sp,100
   16cc4:	d9014717 	ldw	r4,1308(sp)
   16cc8:	d9414117 	ldw	r5,1284(sp)
   16ccc:	8c400044 	addi	r17,r17,1
   16cd0:	9125883a 	add	r18,r18,r4
   16cd4:	008001c4 	movi	r2,7
   16cd8:	19400015 	stw	r5,0(r3)
   16cdc:	19000115 	stw	r4,4(r3)
   16ce0:	dc800e15 	stw	r18,56(sp)
   16ce4:	dc400d15 	stw	r17,52(sp)
   16ce8:	147cee16 	blt	r2,r17,160a4 <___vfprintf_internal_r+0xb90>
   16cec:	18c00204 	addi	r3,r3,8
   16cf0:	003b8606 	br	15b0c <___vfprintf_internal_r+0x5f8>
   16cf4:	38c00017 	ldw	r3,0(r7)
   16cf8:	39000204 	addi	r4,r7,8
   16cfc:	d9014015 	stw	r4,1280(sp)
   16d00:	d8c14215 	stw	r3,1288(sp)
   16d04:	39c00117 	ldw	r7,4(r7)
   16d08:	d9c14315 	stw	r7,1292(sp)
   16d0c:	003e2006 	br	16590 <___vfprintf_internal_r+0x107c>
   16d10:	0005883a 	mov	r2,zero
   16d14:	1409c83a 	sub	r4,r2,r16
   16d18:	1105803a 	cmpltu	r2,r2,r4
   16d1c:	044bc83a 	sub	r5,zero,r17
   16d20:	2885c83a 	sub	r2,r5,r2
   16d24:	2021883a 	mov	r16,r4
   16d28:	1023883a 	mov	r17,r2
   16d2c:	01000044 	movi	r4,1
   16d30:	00800b44 	movi	r2,45
   16d34:	d8800405 	stb	r2,16(sp)
   16d38:	003c8406 	br	15f4c <___vfprintf_internal_r+0xa38>
   16d3c:	d9014f17 	ldw	r4,1340(sp)
   16d40:	b00b883a 	mov	r5,r22
   16d44:	d9800c04 	addi	r6,sp,48
   16d48:	00154bc0 	call	154bc <__sprint_r>
   16d4c:	103ba91e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16d50:	dc800e17 	ldw	r18,56(sp)
   16d54:	dc400d17 	ldw	r17,52(sp)
   16d58:	d9000517 	ldw	r4,20(sp)
   16d5c:	d9401904 	addi	r5,sp,100
   16d60:	003da706 	br	16400 <___vfprintf_internal_r+0xeec>
   16d64:	d9014f17 	ldw	r4,1340(sp)
   16d68:	b00b883a 	mov	r5,r22
   16d6c:	d9800c04 	addi	r6,sp,48
   16d70:	00154bc0 	call	154bc <__sprint_r>
   16d74:	103b9f1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16d78:	dc800e17 	ldw	r18,56(sp)
   16d7c:	dc400d17 	ldw	r17,52(sp)
   16d80:	d9000517 	ldw	r4,20(sp)
   16d84:	d8c01904 	addi	r3,sp,100
   16d88:	003d9106 	br	163d0 <___vfprintf_internal_r+0xebc>
   16d8c:	070000b4 	movhi	fp,2
   16d90:	e73c2184 	addi	fp,fp,-3962
   16d94:	9425883a 	add	r18,r18,r16
   16d98:	8c400044 	addi	r17,r17,1
   16d9c:	008001c4 	movi	r2,7
   16da0:	1f000015 	stw	fp,0(r3)
   16da4:	1c000115 	stw	r16,4(r3)
   16da8:	dc800e15 	stw	r18,56(sp)
   16dac:	dc400d15 	stw	r17,52(sp)
   16db0:	147fbc16 	blt	r2,r17,16ca4 <___vfprintf_internal_r+0x1790>
   16db4:	18c00204 	addi	r3,r3,8
   16db8:	003fc206 	br	16cc4 <___vfprintf_internal_r+0x17b0>
   16dbc:	d9014f17 	ldw	r4,1340(sp)
   16dc0:	b00b883a 	mov	r5,r22
   16dc4:	d9800c04 	addi	r6,sp,48
   16dc8:	00154bc0 	call	154bc <__sprint_r>
   16dcc:	103b891e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16dd0:	dc800e17 	ldw	r18,56(sp)
   16dd4:	d9000517 	ldw	r4,20(sp)
   16dd8:	d8c01904 	addi	r3,sp,100
   16ddc:	003d0206 	br	161e8 <___vfprintf_internal_r+0xcd4>
   16de0:	070000b4 	movhi	fp,2
   16de4:	e73c2184 	addi	fp,fp,-3962
   16de8:	003be406 	br	15d7c <___vfprintf_internal_r+0x868>
   16dec:	008000b4 	movhi	r2,2
   16df0:	10bc1004 	addi	r2,r2,-4032
   16df4:	d8814115 	stw	r2,1284(sp)
   16df8:	003df506 	br	165d0 <___vfprintf_internal_r+0x10bc>
   16dfc:	d9014217 	ldw	r4,1288(sp)
   16e00:	d9414317 	ldw	r5,1292(sp)
   16e04:	001a2180 	call	1a218 <__isnand>
   16e08:	10003926 	beq	r2,zero,16ef0 <___vfprintf_internal_r+0x19dc>
   16e0c:	d9414d17 	ldw	r5,1332(sp)
   16e10:	008011c4 	movi	r2,71
   16e14:	1140ce16 	blt	r2,r5,17150 <___vfprintf_internal_r+0x1c3c>
   16e18:	018000b4 	movhi	r6,2
   16e1c:	31bc1104 	addi	r6,r6,-4028
   16e20:	d9814115 	stw	r6,1284(sp)
   16e24:	003dea06 	br	165d0 <___vfprintf_internal_r+0x10bc>
   16e28:	d9014c17 	ldw	r4,1328(sp)
   16e2c:	bdc00044 	addi	r23,r23,1
   16e30:	b8c00007 	ldb	r3,0(r23)
   16e34:	21000814 	ori	r4,r4,32
   16e38:	d9014c15 	stw	r4,1328(sp)
   16e3c:	003a3406 	br	15710 <___vfprintf_internal_r+0x1fc>
   16e40:	dcc14515 	stw	r19,1300(sp)
   16e44:	98011016 	blt	r19,zero,17288 <___vfprintf_internal_r+0x1d74>
   16e48:	980f883a 	mov	r7,r19
   16e4c:	d8014615 	stw	zero,1304(sp)
   16e50:	003c5206 	br	15f9c <___vfprintf_internal_r+0xa88>
   16e54:	d9014f17 	ldw	r4,1340(sp)
   16e58:	b00b883a 	mov	r5,r22
   16e5c:	d9800c04 	addi	r6,sp,48
   16e60:	00154bc0 	call	154bc <__sprint_r>
   16e64:	103b631e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16e68:	dc800e17 	ldw	r18,56(sp)
   16e6c:	d9000517 	ldw	r4,20(sp)
   16e70:	d8c01904 	addi	r3,sp,100
   16e74:	003f2e06 	br	16b30 <___vfprintf_internal_r+0x161c>
   16e78:	d8c14c17 	ldw	r3,1328(sp)
   16e7c:	1880100c 	andi	r2,r3,64
   16e80:	1000a026 	beq	r2,zero,17104 <___vfprintf_internal_r+0x1bf0>
   16e84:	38800017 	ldw	r2,0(r7)
   16e88:	39c00104 	addi	r7,r7,4
   16e8c:	d9c14015 	stw	r7,1280(sp)
   16e90:	d9014b17 	ldw	r4,1324(sp)
   16e94:	d9c14017 	ldw	r7,1280(sp)
   16e98:	1100000d 	sth	r4,0(r2)
   16e9c:	0039f906 	br	15684 <___vfprintf_internal_r+0x170>
   16ea0:	d9014f17 	ldw	r4,1340(sp)
   16ea4:	b00b883a 	mov	r5,r22
   16ea8:	d9800c04 	addi	r6,sp,48
   16eac:	00154bc0 	call	154bc <__sprint_r>
   16eb0:	103b501e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   16eb4:	dc800e17 	ldw	r18,56(sp)
   16eb8:	dc400d17 	ldw	r17,52(sp)
   16ebc:	d9000517 	ldw	r4,20(sp)
   16ec0:	d8c01904 	addi	r3,sp,100
   16ec4:	003f2d06 	br	16b7c <___vfprintf_internal_r+0x1668>
   16ec8:	00800184 	movi	r2,6
   16ecc:	14c09a36 	bltu	r2,r19,17138 <___vfprintf_internal_r+0x1c24>
   16ed0:	dcc14515 	stw	r19,1300(sp)
   16ed4:	9800010e 	bge	r19,zero,16edc <___vfprintf_internal_r+0x19c8>
   16ed8:	d8014515 	stw	zero,1300(sp)
   16edc:	008000b4 	movhi	r2,2
   16ee0:	10bc1304 	addi	r2,r2,-4020
   16ee4:	980f883a 	mov	r7,r19
   16ee8:	d8814115 	stw	r2,1284(sp)
   16eec:	003a7806 	br	158d0 <___vfprintf_internal_r+0x3bc>
   16ef0:	00bfffc4 	movi	r2,-1
   16ef4:	9880e226 	beq	r19,r2,17280 <___vfprintf_internal_r+0x1d6c>
   16ef8:	d9414d17 	ldw	r5,1332(sp)
   16efc:	008019c4 	movi	r2,103
   16f00:	2880dc26 	beq	r5,r2,17274 <___vfprintf_internal_r+0x1d60>
   16f04:	008011c4 	movi	r2,71
   16f08:	2880da26 	beq	r5,r2,17274 <___vfprintf_internal_r+0x1d60>
   16f0c:	d9414c17 	ldw	r5,1328(sp)
   16f10:	d9014317 	ldw	r4,1292(sp)
   16f14:	d9814217 	ldw	r6,1288(sp)
   16f18:	29404014 	ori	r5,r5,256
   16f1c:	d9414c15 	stw	r5,1328(sp)
   16f20:	2000cc16 	blt	r4,zero,17254 <___vfprintf_internal_r+0x1d40>
   16f24:	3021883a 	mov	r16,r6
   16f28:	2023883a 	mov	r17,r4
   16f2c:	0039883a 	mov	fp,zero
   16f30:	d9414d17 	ldw	r5,1332(sp)
   16f34:	00801984 	movi	r2,102
   16f38:	2880b726 	beq	r5,r2,17218 <___vfprintf_internal_r+0x1d04>
   16f3c:	00801184 	movi	r2,70
   16f40:	2880b526 	beq	r5,r2,17218 <___vfprintf_internal_r+0x1d04>
   16f44:	00801944 	movi	r2,101
   16f48:	2880c826 	beq	r5,r2,1726c <___vfprintf_internal_r+0x1d58>
   16f4c:	00801144 	movi	r2,69
   16f50:	2880c626 	beq	r5,r2,1726c <___vfprintf_internal_r+0x1d58>
   16f54:	9829883a 	mov	r20,r19
   16f58:	d9014f17 	ldw	r4,1340(sp)
   16f5c:	d8800504 	addi	r2,sp,20
   16f60:	880d883a 	mov	r6,r17
   16f64:	d8800115 	stw	r2,4(sp)
   16f68:	d8c00604 	addi	r3,sp,24
   16f6c:	d8800704 	addi	r2,sp,28
   16f70:	800b883a 	mov	r5,r16
   16f74:	01c00084 	movi	r7,2
   16f78:	d8c00215 	stw	r3,8(sp)
   16f7c:	d8800315 	stw	r2,12(sp)
   16f80:	dd000015 	stw	r20,0(sp)
   16f84:	001796c0 	call	1796c <_dtoa_r>
   16f88:	d9814d17 	ldw	r6,1332(sp)
   16f8c:	d8814115 	stw	r2,1284(sp)
   16f90:	008019c4 	movi	r2,103
   16f94:	30809526 	beq	r6,r2,171ec <___vfprintf_internal_r+0x1cd8>
   16f98:	d8c14d17 	ldw	r3,1332(sp)
   16f9c:	008011c4 	movi	r2,71
   16fa0:	18809226 	beq	r3,r2,171ec <___vfprintf_internal_r+0x1cd8>
   16fa4:	d9414117 	ldw	r5,1284(sp)
   16fa8:	d9814d17 	ldw	r6,1332(sp)
   16fac:	00801984 	movi	r2,102
   16fb0:	2d25883a 	add	r18,r5,r20
   16fb4:	30808626 	beq	r6,r2,171d0 <___vfprintf_internal_r+0x1cbc>
   16fb8:	00801184 	movi	r2,70
   16fbc:	30808426 	beq	r6,r2,171d0 <___vfprintf_internal_r+0x1cbc>
   16fc0:	000d883a 	mov	r6,zero
   16fc4:	000f883a 	mov	r7,zero
   16fc8:	880b883a 	mov	r5,r17
   16fcc:	8009883a 	mov	r4,r16
   16fd0:	001b19c0 	call	1b19c <__eqdf2>
   16fd4:	1000751e 	bne	r2,zero,171ac <___vfprintf_internal_r+0x1c98>
   16fd8:	9005883a 	mov	r2,r18
   16fdc:	dc800715 	stw	r18,28(sp)
   16fe0:	d9014117 	ldw	r4,1284(sp)
   16fe4:	d9414d17 	ldw	r5,1332(sp)
   16fe8:	00c019c4 	movi	r3,103
   16fec:	1125c83a 	sub	r18,r2,r4
   16ff0:	28c06826 	beq	r5,r3,17194 <___vfprintf_internal_r+0x1c80>
   16ff4:	008011c4 	movi	r2,71
   16ff8:	28806626 	beq	r5,r2,17194 <___vfprintf_internal_r+0x1c80>
   16ffc:	d9000517 	ldw	r4,20(sp)
   17000:	d8c14d17 	ldw	r3,1332(sp)
   17004:	00801944 	movi	r2,101
   17008:	10c05516 	blt	r2,r3,17160 <___vfprintf_internal_r+0x1c4c>
   1700c:	213fffc4 	addi	r4,r4,-1
   17010:	d9000515 	stw	r4,20(sp)
   17014:	d8c00805 	stb	r3,32(sp)
   17018:	2021883a 	mov	r16,r4
   1701c:	2000c116 	blt	r4,zero,17324 <___vfprintf_internal_r+0x1e10>
   17020:	00800ac4 	movi	r2,43
   17024:	d8800845 	stb	r2,33(sp)
   17028:	00800244 	movi	r2,9
   1702c:	1400af0e 	bge	r2,r16,172ec <___vfprintf_internal_r+0x1dd8>
   17030:	1027883a 	mov	r19,r2
   17034:	dc400b84 	addi	r17,sp,46
   17038:	8009883a 	mov	r4,r16
   1703c:	01400284 	movi	r5,10
   17040:	00109bc0 	call	109bc <__modsi3>
   17044:	10800c04 	addi	r2,r2,48
   17048:	8c7fffc4 	addi	r17,r17,-1
   1704c:	8009883a 	mov	r4,r16
   17050:	01400284 	movi	r5,10
   17054:	88800005 	stb	r2,0(r17)
   17058:	001095c0 	call	1095c <__divsi3>
   1705c:	1021883a 	mov	r16,r2
   17060:	98bff516 	blt	r19,r2,17038 <___vfprintf_internal_r+0x1b24>
   17064:	10c00c04 	addi	r3,r2,48
   17068:	d88009c4 	addi	r2,sp,39
   1706c:	108001c4 	addi	r2,r2,7
   17070:	897fffc4 	addi	r5,r17,-1
   17074:	88ffffc5 	stb	r3,-1(r17)
   17078:	2880a72e 	bgeu	r5,r2,17318 <___vfprintf_internal_r+0x1e04>
   1707c:	1009883a 	mov	r4,r2
   17080:	d9800804 	addi	r6,sp,32
   17084:	d8c00884 	addi	r3,sp,34
   17088:	28800003 	ldbu	r2,0(r5)
   1708c:	29400044 	addi	r5,r5,1
   17090:	18800005 	stb	r2,0(r3)
   17094:	18c00044 	addi	r3,r3,1
   17098:	293ffb36 	bltu	r5,r4,17088 <___vfprintf_internal_r+0x1b74>
   1709c:	1987c83a 	sub	r3,r3,r6
   170a0:	00800044 	movi	r2,1
   170a4:	d8c14815 	stw	r3,1312(sp)
   170a8:	90cf883a 	add	r7,r18,r3
   170ac:	1480960e 	bge	r2,r18,17308 <___vfprintf_internal_r+0x1df4>
   170b0:	39c00044 	addi	r7,r7,1
   170b4:	d9c14515 	stw	r7,1300(sp)
   170b8:	38003416 	blt	r7,zero,1718c <___vfprintf_internal_r+0x1c78>
   170bc:	e0803fcc 	andi	r2,fp,255
   170c0:	1080201c 	xori	r2,r2,128
   170c4:	10bfe004 	addi	r2,r2,-128
   170c8:	10004e26 	beq	r2,zero,17204 <___vfprintf_internal_r+0x1cf0>
   170cc:	00800b44 	movi	r2,45
   170d0:	dc814715 	stw	r18,1308(sp)
   170d4:	d8014615 	stw	zero,1304(sp)
   170d8:	d8800405 	stb	r2,16(sp)
   170dc:	003bb106 	br	15fa4 <___vfprintf_internal_r+0xa90>
   170e0:	00800b44 	movi	r2,45
   170e4:	d8800405 	stb	r2,16(sp)
   170e8:	003d3306 	br	165b8 <___vfprintf_internal_r+0x10a4>
   170ec:	d9014f17 	ldw	r4,1340(sp)
   170f0:	b00b883a 	mov	r5,r22
   170f4:	d9800c04 	addi	r6,sp,48
   170f8:	00154bc0 	call	154bc <__sprint_r>
   170fc:	103abd1e 	bne	r2,zero,15bf4 <___vfprintf_internal_r+0x6e0>
   17100:	003abb06 	br	15bf0 <___vfprintf_internal_r+0x6dc>
   17104:	38800017 	ldw	r2,0(r7)
   17108:	39c00104 	addi	r7,r7,4
   1710c:	d9c14015 	stw	r7,1280(sp)
   17110:	d9414b17 	ldw	r5,1324(sp)
   17114:	d9c14017 	ldw	r7,1280(sp)
   17118:	11400015 	stw	r5,0(r2)
   1711c:	00395906 	br	15684 <___vfprintf_internal_r+0x170>
   17120:	980f883a 	mov	r7,r19
   17124:	dcc14515 	stw	r19,1300(sp)
   17128:	d8014615 	stw	zero,1304(sp)
   1712c:	003b9b06 	br	15f9c <___vfprintf_internal_r+0xa88>
   17130:	0027883a 	mov	r19,zero
   17134:	00397806 	br	15718 <___vfprintf_internal_r+0x204>
   17138:	00c000b4 	movhi	r3,2
   1713c:	18fc1304 	addi	r3,r3,-4020
   17140:	100f883a 	mov	r7,r2
   17144:	d8814515 	stw	r2,1300(sp)
   17148:	d8c14115 	stw	r3,1284(sp)
   1714c:	0039e006 	br	158d0 <___vfprintf_internal_r+0x3bc>
   17150:	008000b4 	movhi	r2,2
   17154:	10bc1204 	addi	r2,r2,-4024
   17158:	d8814115 	stw	r2,1284(sp)
   1715c:	003d1c06 	br	165d0 <___vfprintf_internal_r+0x10bc>
   17160:	d9414d17 	ldw	r5,1332(sp)
   17164:	00801984 	movi	r2,102
   17168:	28804926 	beq	r5,r2,17290 <___vfprintf_internal_r+0x1d7c>
   1716c:	200f883a 	mov	r7,r4
   17170:	24805716 	blt	r4,r18,172d0 <___vfprintf_internal_r+0x1dbc>
   17174:	d9414c17 	ldw	r5,1328(sp)
   17178:	2880004c 	andi	r2,r5,1
   1717c:	10000126 	beq	r2,zero,17184 <___vfprintf_internal_r+0x1c70>
   17180:	21c00044 	addi	r7,r4,1
   17184:	d9c14515 	stw	r7,1300(sp)
   17188:	383fcc0e 	bge	r7,zero,170bc <___vfprintf_internal_r+0x1ba8>
   1718c:	d8014515 	stw	zero,1300(sp)
   17190:	003fca06 	br	170bc <___vfprintf_internal_r+0x1ba8>
   17194:	d9000517 	ldw	r4,20(sp)
   17198:	00bfff04 	movi	r2,-4
   1719c:	1100480e 	bge	r2,r4,172c0 <___vfprintf_internal_r+0x1dac>
   171a0:	99004716 	blt	r19,r4,172c0 <___vfprintf_internal_r+0x1dac>
   171a4:	d8c14d15 	stw	r3,1332(sp)
   171a8:	003ff006 	br	1716c <___vfprintf_internal_r+0x1c58>
   171ac:	d8800717 	ldw	r2,28(sp)
   171b0:	14bf8b2e 	bgeu	r2,r18,16fe0 <___vfprintf_internal_r+0x1acc>
   171b4:	9007883a 	mov	r3,r18
   171b8:	01000c04 	movi	r4,48
   171bc:	11000005 	stb	r4,0(r2)
   171c0:	10800044 	addi	r2,r2,1
   171c4:	d8800715 	stw	r2,28(sp)
   171c8:	18bffc1e 	bne	r3,r2,171bc <___vfprintf_internal_r+0x1ca8>
   171cc:	003f8406 	br	16fe0 <___vfprintf_internal_r+0x1acc>
   171d0:	d8814117 	ldw	r2,1284(sp)
   171d4:	10c00007 	ldb	r3,0(r2)
   171d8:	00800c04 	movi	r2,48
   171dc:	18805b26 	beq	r3,r2,1734c <___vfprintf_internal_r+0x1e38>
   171e0:	d9000517 	ldw	r4,20(sp)
   171e4:	9125883a 	add	r18,r18,r4
   171e8:	003f7506 	br	16fc0 <___vfprintf_internal_r+0x1aac>
   171ec:	d9014c17 	ldw	r4,1328(sp)
   171f0:	2080004c 	andi	r2,r4,1
   171f4:	1005003a 	cmpeq	r2,r2,zero
   171f8:	103f6a26 	beq	r2,zero,16fa4 <___vfprintf_internal_r+0x1a90>
   171fc:	d8800717 	ldw	r2,28(sp)
   17200:	003f7706 	br	16fe0 <___vfprintf_internal_r+0x1acc>
   17204:	d9c14515 	stw	r7,1300(sp)
   17208:	38004d16 	blt	r7,zero,17340 <___vfprintf_internal_r+0x1e2c>
   1720c:	dc814715 	stw	r18,1308(sp)
   17210:	d8014615 	stw	zero,1304(sp)
   17214:	003b6106 	br	15f9c <___vfprintf_internal_r+0xa88>
   17218:	d9014f17 	ldw	r4,1340(sp)
   1721c:	d8800504 	addi	r2,sp,20
   17220:	d8800115 	stw	r2,4(sp)
   17224:	d8c00604 	addi	r3,sp,24
   17228:	d8800704 	addi	r2,sp,28
   1722c:	800b883a 	mov	r5,r16
   17230:	880d883a 	mov	r6,r17
   17234:	01c000c4 	movi	r7,3
   17238:	d8c00215 	stw	r3,8(sp)
   1723c:	d8800315 	stw	r2,12(sp)
   17240:	dcc00015 	stw	r19,0(sp)
   17244:	9829883a 	mov	r20,r19
   17248:	001796c0 	call	1796c <_dtoa_r>
   1724c:	d8814115 	stw	r2,1284(sp)
   17250:	003f5106 	br	16f98 <___vfprintf_internal_r+0x1a84>
   17254:	d8c14217 	ldw	r3,1288(sp)
   17258:	d9014317 	ldw	r4,1292(sp)
   1725c:	07000b44 	movi	fp,45
   17260:	1821883a 	mov	r16,r3
   17264:	2460003c 	xorhi	r17,r4,32768
   17268:	003f3106 	br	16f30 <___vfprintf_internal_r+0x1a1c>
   1726c:	9d000044 	addi	r20,r19,1
   17270:	003f3906 	br	16f58 <___vfprintf_internal_r+0x1a44>
   17274:	983f251e 	bne	r19,zero,16f0c <___vfprintf_internal_r+0x19f8>
   17278:	04c00044 	movi	r19,1
   1727c:	003f2306 	br	16f0c <___vfprintf_internal_r+0x19f8>
   17280:	04c00184 	movi	r19,6
   17284:	003f2106 	br	16f0c <___vfprintf_internal_r+0x19f8>
   17288:	d8014515 	stw	zero,1300(sp)
   1728c:	003eee06 	br	16e48 <___vfprintf_internal_r+0x1934>
   17290:	200f883a 	mov	r7,r4
   17294:	0100370e 	bge	zero,r4,17374 <___vfprintf_internal_r+0x1e60>
   17298:	9800031e 	bne	r19,zero,172a8 <___vfprintf_internal_r+0x1d94>
   1729c:	d9814c17 	ldw	r6,1328(sp)
   172a0:	3080004c 	andi	r2,r6,1
   172a4:	103fb726 	beq	r2,zero,17184 <___vfprintf_internal_r+0x1c70>
   172a8:	20800044 	addi	r2,r4,1
   172ac:	98a7883a 	add	r19,r19,r2
   172b0:	dcc14515 	stw	r19,1300(sp)
   172b4:	980f883a 	mov	r7,r19
   172b8:	983f800e 	bge	r19,zero,170bc <___vfprintf_internal_r+0x1ba8>
   172bc:	003fb306 	br	1718c <___vfprintf_internal_r+0x1c78>
   172c0:	d9814d17 	ldw	r6,1332(sp)
   172c4:	31bfff84 	addi	r6,r6,-2
   172c8:	d9814d15 	stw	r6,1332(sp)
   172cc:	003f4c06 	br	17000 <___vfprintf_internal_r+0x1aec>
   172d0:	0100180e 	bge	zero,r4,17334 <___vfprintf_internal_r+0x1e20>
   172d4:	00800044 	movi	r2,1
   172d8:	1485883a 	add	r2,r2,r18
   172dc:	d8814515 	stw	r2,1300(sp)
   172e0:	100f883a 	mov	r7,r2
   172e4:	103f750e 	bge	r2,zero,170bc <___vfprintf_internal_r+0x1ba8>
   172e8:	003fa806 	br	1718c <___vfprintf_internal_r+0x1c78>
   172ec:	80c00c04 	addi	r3,r16,48
   172f0:	00800c04 	movi	r2,48
   172f4:	d8c008c5 	stb	r3,35(sp)
   172f8:	d9800804 	addi	r6,sp,32
   172fc:	d8c00904 	addi	r3,sp,36
   17300:	d8800885 	stb	r2,34(sp)
   17304:	003f6506 	br	1709c <___vfprintf_internal_r+0x1b88>
   17308:	d9014c17 	ldw	r4,1328(sp)
   1730c:	2084703a 	and	r2,r4,r2
   17310:	103f9c26 	beq	r2,zero,17184 <___vfprintf_internal_r+0x1c70>
   17314:	003f6606 	br	170b0 <___vfprintf_internal_r+0x1b9c>
   17318:	d9800804 	addi	r6,sp,32
   1731c:	d8c00884 	addi	r3,sp,34
   17320:	003f5e06 	br	1709c <___vfprintf_internal_r+0x1b88>
   17324:	00800b44 	movi	r2,45
   17328:	0121c83a 	sub	r16,zero,r4
   1732c:	d8800845 	stb	r2,33(sp)
   17330:	003f3d06 	br	17028 <___vfprintf_internal_r+0x1b14>
   17334:	00800084 	movi	r2,2
   17338:	1105c83a 	sub	r2,r2,r4
   1733c:	003fe606 	br	172d8 <___vfprintf_internal_r+0x1dc4>
   17340:	d8014515 	stw	zero,1300(sp)
   17344:	dc814715 	stw	r18,1308(sp)
   17348:	003fb106 	br	17210 <___vfprintf_internal_r+0x1cfc>
   1734c:	000d883a 	mov	r6,zero
   17350:	000f883a 	mov	r7,zero
   17354:	8009883a 	mov	r4,r16
   17358:	880b883a 	mov	r5,r17
   1735c:	001b2240 	call	1b224 <__nedf2>
   17360:	103f9f26 	beq	r2,zero,171e0 <___vfprintf_internal_r+0x1ccc>
   17364:	00800044 	movi	r2,1
   17368:	1509c83a 	sub	r4,r2,r20
   1736c:	d9000515 	stw	r4,20(sp)
   17370:	003f9b06 	br	171e0 <___vfprintf_internal_r+0x1ccc>
   17374:	98000d1e 	bne	r19,zero,173ac <___vfprintf_internal_r+0x1e98>
   17378:	d8c14c17 	ldw	r3,1328(sp)
   1737c:	1880004c 	andi	r2,r3,1
   17380:	10000a1e 	bne	r2,zero,173ac <___vfprintf_internal_r+0x1e98>
   17384:	01000044 	movi	r4,1
   17388:	200f883a 	mov	r7,r4
   1738c:	d9014515 	stw	r4,1300(sp)
   17390:	003f4a06 	br	170bc <___vfprintf_internal_r+0x1ba8>
   17394:	3cc00017 	ldw	r19,0(r7)
   17398:	39c00104 	addi	r7,r7,4
   1739c:	983d0e0e 	bge	r19,zero,167d8 <___vfprintf_internal_r+0x12c4>
   173a0:	b8c00007 	ldb	r3,0(r23)
   173a4:	04ffffc4 	movi	r19,-1
   173a8:	0038d906 	br	15710 <___vfprintf_internal_r+0x1fc>
   173ac:	9cc00084 	addi	r19,r19,2
   173b0:	dcc14515 	stw	r19,1300(sp)
   173b4:	980f883a 	mov	r7,r19
   173b8:	983f400e 	bge	r19,zero,170bc <___vfprintf_internal_r+0x1ba8>
   173bc:	003f7306 	br	1718c <___vfprintf_internal_r+0x1c78>

000173c0 <__vfprintf_internal>:
   173c0:	008000b4 	movhi	r2,2
   173c4:	10833f04 	addi	r2,r2,3324
   173c8:	2013883a 	mov	r9,r4
   173cc:	11000017 	ldw	r4,0(r2)
   173d0:	2805883a 	mov	r2,r5
   173d4:	300f883a 	mov	r7,r6
   173d8:	480b883a 	mov	r5,r9
   173dc:	100d883a 	mov	r6,r2
   173e0:	00155141 	jmpi	15514 <___vfprintf_internal_r>

000173e4 <__swbuf_r>:
   173e4:	defffc04 	addi	sp,sp,-16
   173e8:	dc400215 	stw	r17,8(sp)
   173ec:	dc000115 	stw	r16,4(sp)
   173f0:	dfc00315 	stw	ra,12(sp)
   173f4:	2023883a 	mov	r17,r4
   173f8:	2821883a 	mov	r16,r5
   173fc:	20000226 	beq	r4,zero,17408 <__swbuf_r+0x24>
   17400:	20800e17 	ldw	r2,56(r4)
   17404:	10002f26 	beq	r2,zero,174c4 <__swbuf_r+0xe0>
   17408:	3080030b 	ldhu	r2,12(r6)
   1740c:	30c00617 	ldw	r3,24(r6)
   17410:	1080020c 	andi	r2,r2,8
   17414:	30c00215 	stw	r3,8(r6)
   17418:	10002226 	beq	r2,zero,174a4 <__swbuf_r+0xc0>
   1741c:	30c00417 	ldw	r3,16(r6)
   17420:	18002026 	beq	r3,zero,174a4 <__swbuf_r+0xc0>
   17424:	31000017 	ldw	r4,0(r6)
   17428:	30800517 	ldw	r2,20(r6)
   1742c:	20c7c83a 	sub	r3,r4,r3
   17430:	18802f0e 	bge	r3,r2,174f0 <__swbuf_r+0x10c>
   17434:	19400044 	addi	r5,r3,1
   17438:	30800217 	ldw	r2,8(r6)
   1743c:	84003fcc 	andi	r16,r16,255
   17440:	20c00044 	addi	r3,r4,1
   17444:	10bfffc4 	addi	r2,r2,-1
   17448:	30800215 	stw	r2,8(r6)
   1744c:	24000005 	stb	r16,0(r4)
   17450:	30800517 	ldw	r2,20(r6)
   17454:	30c00015 	stw	r3,0(r6)
   17458:	11400c26 	beq	r2,r5,1748c <__swbuf_r+0xa8>
   1745c:	3080030b 	ldhu	r2,12(r6)
   17460:	1080004c 	andi	r2,r2,1
   17464:	1005003a 	cmpeq	r2,r2,zero
   17468:	10000626 	beq	r2,zero,17484 <__swbuf_r+0xa0>
   1746c:	8005883a 	mov	r2,r16
   17470:	dfc00317 	ldw	ra,12(sp)
   17474:	dc400217 	ldw	r17,8(sp)
   17478:	dc000117 	ldw	r16,4(sp)
   1747c:	dec00404 	addi	sp,sp,16
   17480:	f800283a 	ret
   17484:	00800284 	movi	r2,10
   17488:	80bff81e 	bne	r16,r2,1746c <__swbuf_r+0x88>
   1748c:	8809883a 	mov	r4,r17
   17490:	300b883a 	mov	r5,r6
   17494:	00119c40 	call	119c4 <_fflush_r>
   17498:	103ff426 	beq	r2,zero,1746c <__swbuf_r+0x88>
   1749c:	043fffc4 	movi	r16,-1
   174a0:	003ff206 	br	1746c <__swbuf_r+0x88>
   174a4:	300b883a 	mov	r5,r6
   174a8:	8809883a 	mov	r4,r17
   174ac:	d9800015 	stw	r6,0(sp)
   174b0:	00175a80 	call	175a8 <__swsetup_r>
   174b4:	d9800017 	ldw	r6,0(sp)
   174b8:	1000061e 	bne	r2,zero,174d4 <__swbuf_r+0xf0>
   174bc:	30c00417 	ldw	r3,16(r6)
   174c0:	003fd806 	br	17424 <__swbuf_r+0x40>
   174c4:	d9800015 	stw	r6,0(sp)
   174c8:	0011ef00 	call	11ef0 <__sinit>
   174cc:	d9800017 	ldw	r6,0(sp)
   174d0:	003fcd06 	br	17408 <__swbuf_r+0x24>
   174d4:	3080030b 	ldhu	r2,12(r6)
   174d8:	00c00244 	movi	r3,9
   174dc:	043fffc4 	movi	r16,-1
   174e0:	10801014 	ori	r2,r2,64
   174e4:	3080030d 	sth	r2,12(r6)
   174e8:	88c00015 	stw	r3,0(r17)
   174ec:	003fdf06 	br	1746c <__swbuf_r+0x88>
   174f0:	300b883a 	mov	r5,r6
   174f4:	8809883a 	mov	r4,r17
   174f8:	d9800015 	stw	r6,0(sp)
   174fc:	00119c40 	call	119c4 <_fflush_r>
   17500:	d9800017 	ldw	r6,0(sp)
   17504:	103fe51e 	bne	r2,zero,1749c <__swbuf_r+0xb8>
   17508:	31000017 	ldw	r4,0(r6)
   1750c:	01400044 	movi	r5,1
   17510:	003fc906 	br	17438 <__swbuf_r+0x54>

00017514 <__swbuf>:
   17514:	018000b4 	movhi	r6,2
   17518:	31833f04 	addi	r6,r6,3324
   1751c:	2007883a 	mov	r3,r4
   17520:	31000017 	ldw	r4,0(r6)
   17524:	280d883a 	mov	r6,r5
   17528:	180b883a 	mov	r5,r3
   1752c:	00173e41 	jmpi	173e4 <__swbuf_r>

00017530 <_write_r>:
   17530:	defffd04 	addi	sp,sp,-12
   17534:	dc000015 	stw	r16,0(sp)
   17538:	040000b4 	movhi	r16,2
   1753c:	840a1704 	addi	r16,r16,10332
   17540:	dc400115 	stw	r17,4(sp)
   17544:	80000015 	stw	zero,0(r16)
   17548:	2023883a 	mov	r17,r4
   1754c:	2809883a 	mov	r4,r5
   17550:	300b883a 	mov	r5,r6
   17554:	380d883a 	mov	r6,r7
   17558:	dfc00215 	stw	ra,8(sp)
   1755c:	001c3940 	call	1c394 <write>
   17560:	1007883a 	mov	r3,r2
   17564:	00bfffc4 	movi	r2,-1
   17568:	18800626 	beq	r3,r2,17584 <_write_r+0x54>
   1756c:	1805883a 	mov	r2,r3
   17570:	dfc00217 	ldw	ra,8(sp)
   17574:	dc400117 	ldw	r17,4(sp)
   17578:	dc000017 	ldw	r16,0(sp)
   1757c:	dec00304 	addi	sp,sp,12
   17580:	f800283a 	ret
   17584:	80800017 	ldw	r2,0(r16)
   17588:	103ff826 	beq	r2,zero,1756c <_write_r+0x3c>
   1758c:	88800015 	stw	r2,0(r17)
   17590:	1805883a 	mov	r2,r3
   17594:	dfc00217 	ldw	ra,8(sp)
   17598:	dc400117 	ldw	r17,4(sp)
   1759c:	dc000017 	ldw	r16,0(sp)
   175a0:	dec00304 	addi	sp,sp,12
   175a4:	f800283a 	ret

000175a8 <__swsetup_r>:
   175a8:	008000b4 	movhi	r2,2
   175ac:	10833f04 	addi	r2,r2,3324
   175b0:	10c00017 	ldw	r3,0(r2)
   175b4:	defffd04 	addi	sp,sp,-12
   175b8:	dc400115 	stw	r17,4(sp)
   175bc:	dc000015 	stw	r16,0(sp)
   175c0:	dfc00215 	stw	ra,8(sp)
   175c4:	2023883a 	mov	r17,r4
   175c8:	2821883a 	mov	r16,r5
   175cc:	18000226 	beq	r3,zero,175d8 <__swsetup_r+0x30>
   175d0:	18800e17 	ldw	r2,56(r3)
   175d4:	10001f26 	beq	r2,zero,17654 <__swsetup_r+0xac>
   175d8:	8100030b 	ldhu	r4,12(r16)
   175dc:	2080020c 	andi	r2,r4,8
   175e0:	10002826 	beq	r2,zero,17684 <__swsetup_r+0xdc>
   175e4:	81400417 	ldw	r5,16(r16)
   175e8:	28001d26 	beq	r5,zero,17660 <__swsetup_r+0xb8>
   175ec:	2080004c 	andi	r2,r4,1
   175f0:	1005003a 	cmpeq	r2,r2,zero
   175f4:	10000b26 	beq	r2,zero,17624 <__swsetup_r+0x7c>
   175f8:	2080008c 	andi	r2,r4,2
   175fc:	10001226 	beq	r2,zero,17648 <__swsetup_r+0xa0>
   17600:	0005883a 	mov	r2,zero
   17604:	80800215 	stw	r2,8(r16)
   17608:	28000b26 	beq	r5,zero,17638 <__swsetup_r+0x90>
   1760c:	0005883a 	mov	r2,zero
   17610:	dfc00217 	ldw	ra,8(sp)
   17614:	dc400117 	ldw	r17,4(sp)
   17618:	dc000017 	ldw	r16,0(sp)
   1761c:	dec00304 	addi	sp,sp,12
   17620:	f800283a 	ret
   17624:	80800517 	ldw	r2,20(r16)
   17628:	80000215 	stw	zero,8(r16)
   1762c:	0085c83a 	sub	r2,zero,r2
   17630:	80800615 	stw	r2,24(r16)
   17634:	283ff51e 	bne	r5,zero,1760c <__swsetup_r+0x64>
   17638:	2080200c 	andi	r2,r4,128
   1763c:	103ff326 	beq	r2,zero,1760c <__swsetup_r+0x64>
   17640:	00bfffc4 	movi	r2,-1
   17644:	003ff206 	br	17610 <__swsetup_r+0x68>
   17648:	80800517 	ldw	r2,20(r16)
   1764c:	80800215 	stw	r2,8(r16)
   17650:	003fed06 	br	17608 <__swsetup_r+0x60>
   17654:	1809883a 	mov	r4,r3
   17658:	0011ef00 	call	11ef0 <__sinit>
   1765c:	003fde06 	br	175d8 <__swsetup_r+0x30>
   17660:	20c0a00c 	andi	r3,r4,640
   17664:	00808004 	movi	r2,512
   17668:	18bfe026 	beq	r3,r2,175ec <__swsetup_r+0x44>
   1766c:	8809883a 	mov	r4,r17
   17670:	800b883a 	mov	r5,r16
   17674:	00133e00 	call	133e0 <__smakebuf_r>
   17678:	8100030b 	ldhu	r4,12(r16)
   1767c:	81400417 	ldw	r5,16(r16)
   17680:	003fda06 	br	175ec <__swsetup_r+0x44>
   17684:	2080040c 	andi	r2,r4,16
   17688:	103fed26 	beq	r2,zero,17640 <__swsetup_r+0x98>
   1768c:	2080010c 	andi	r2,r4,4
   17690:	10001226 	beq	r2,zero,176dc <__swsetup_r+0x134>
   17694:	81400c17 	ldw	r5,48(r16)
   17698:	28000526 	beq	r5,zero,176b0 <__swsetup_r+0x108>
   1769c:	80801004 	addi	r2,r16,64
   176a0:	28800226 	beq	r5,r2,176ac <__swsetup_r+0x104>
   176a4:	8809883a 	mov	r4,r17
   176a8:	00124d00 	call	124d0 <_free_r>
   176ac:	80000c15 	stw	zero,48(r16)
   176b0:	8080030b 	ldhu	r2,12(r16)
   176b4:	81400417 	ldw	r5,16(r16)
   176b8:	80000115 	stw	zero,4(r16)
   176bc:	10bff6cc 	andi	r2,r2,65499
   176c0:	8080030d 	sth	r2,12(r16)
   176c4:	81400015 	stw	r5,0(r16)
   176c8:	8080030b 	ldhu	r2,12(r16)
   176cc:	10800214 	ori	r2,r2,8
   176d0:	113fffcc 	andi	r4,r2,65535
   176d4:	8080030d 	sth	r2,12(r16)
   176d8:	003fc306 	br	175e8 <__swsetup_r+0x40>
   176dc:	81400417 	ldw	r5,16(r16)
   176e0:	003ff906 	br	176c8 <__swsetup_r+0x120>

000176e4 <_close_r>:
   176e4:	defffd04 	addi	sp,sp,-12
   176e8:	dc000015 	stw	r16,0(sp)
   176ec:	040000b4 	movhi	r16,2
   176f0:	840a1704 	addi	r16,r16,10332
   176f4:	dc400115 	stw	r17,4(sp)
   176f8:	80000015 	stw	zero,0(r16)
   176fc:	2023883a 	mov	r17,r4
   17700:	2809883a 	mov	r4,r5
   17704:	dfc00215 	stw	ra,8(sp)
   17708:	001b5500 	call	1b550 <close>
   1770c:	1007883a 	mov	r3,r2
   17710:	00bfffc4 	movi	r2,-1
   17714:	18800626 	beq	r3,r2,17730 <_close_r+0x4c>
   17718:	1805883a 	mov	r2,r3
   1771c:	dfc00217 	ldw	ra,8(sp)
   17720:	dc400117 	ldw	r17,4(sp)
   17724:	dc000017 	ldw	r16,0(sp)
   17728:	dec00304 	addi	sp,sp,12
   1772c:	f800283a 	ret
   17730:	80800017 	ldw	r2,0(r16)
   17734:	103ff826 	beq	r2,zero,17718 <_close_r+0x34>
   17738:	88800015 	stw	r2,0(r17)
   1773c:	1805883a 	mov	r2,r3
   17740:	dfc00217 	ldw	ra,8(sp)
   17744:	dc400117 	ldw	r17,4(sp)
   17748:	dc000017 	ldw	r16,0(sp)
   1774c:	dec00304 	addi	sp,sp,12
   17750:	f800283a 	ret

00017754 <quorem>:
   17754:	28c00417 	ldw	r3,16(r5)
   17758:	20800417 	ldw	r2,16(r4)
   1775c:	defff604 	addi	sp,sp,-40
   17760:	ddc00715 	stw	r23,28(sp)
   17764:	dd400515 	stw	r21,20(sp)
   17768:	dfc00915 	stw	ra,36(sp)
   1776c:	df000815 	stw	fp,32(sp)
   17770:	dd800615 	stw	r22,24(sp)
   17774:	dd000415 	stw	r20,16(sp)
   17778:	dcc00315 	stw	r19,12(sp)
   1777c:	dc800215 	stw	r18,8(sp)
   17780:	dc400115 	stw	r17,4(sp)
   17784:	dc000015 	stw	r16,0(sp)
   17788:	202f883a 	mov	r23,r4
   1778c:	282b883a 	mov	r21,r5
   17790:	10c07416 	blt	r2,r3,17964 <quorem+0x210>
   17794:	1c7fffc4 	addi	r17,r3,-1
   17798:	8c45883a 	add	r2,r17,r17
   1779c:	1085883a 	add	r2,r2,r2
   177a0:	2c000504 	addi	r16,r5,20
   177a4:	24c00504 	addi	r19,r4,20
   177a8:	14ed883a 	add	r22,r2,r19
   177ac:	80a5883a 	add	r18,r16,r2
   177b0:	b7000017 	ldw	fp,0(r22)
   177b4:	91400017 	ldw	r5,0(r18)
   177b8:	e009883a 	mov	r4,fp
   177bc:	29400044 	addi	r5,r5,1
   177c0:	0010a1c0 	call	10a1c <__udivsi3>
   177c4:	1029883a 	mov	r20,r2
   177c8:	10003c1e 	bne	r2,zero,178bc <quorem+0x168>
   177cc:	a80b883a 	mov	r5,r21
   177d0:	b809883a 	mov	r4,r23
   177d4:	00192c80 	call	192c8 <__mcmp>
   177d8:	10002b16 	blt	r2,zero,17888 <quorem+0x134>
   177dc:	a5000044 	addi	r20,r20,1
   177e0:	980f883a 	mov	r7,r19
   177e4:	0011883a 	mov	r8,zero
   177e8:	0009883a 	mov	r4,zero
   177ec:	81400017 	ldw	r5,0(r16)
   177f0:	38c00017 	ldw	r3,0(r7)
   177f4:	84000104 	addi	r16,r16,4
   177f8:	28bfffcc 	andi	r2,r5,65535
   177fc:	2085883a 	add	r2,r4,r2
   17800:	11bfffcc 	andi	r6,r2,65535
   17804:	193fffcc 	andi	r4,r3,65535
   17808:	1004d43a 	srli	r2,r2,16
   1780c:	280ad43a 	srli	r5,r5,16
   17810:	2189c83a 	sub	r4,r4,r6
   17814:	2209883a 	add	r4,r4,r8
   17818:	1806d43a 	srli	r3,r3,16
   1781c:	288b883a 	add	r5,r5,r2
   17820:	200dd43a 	srai	r6,r4,16
   17824:	28bfffcc 	andi	r2,r5,65535
   17828:	1887c83a 	sub	r3,r3,r2
   1782c:	1987883a 	add	r3,r3,r6
   17830:	3900000d 	sth	r4,0(r7)
   17834:	38c0008d 	sth	r3,2(r7)
   17838:	2808d43a 	srli	r4,r5,16
   1783c:	39c00104 	addi	r7,r7,4
   17840:	1811d43a 	srai	r8,r3,16
   17844:	943fe92e 	bgeu	r18,r16,177ec <quorem+0x98>
   17848:	8c45883a 	add	r2,r17,r17
   1784c:	1085883a 	add	r2,r2,r2
   17850:	9885883a 	add	r2,r19,r2
   17854:	10c00017 	ldw	r3,0(r2)
   17858:	18000b1e 	bne	r3,zero,17888 <quorem+0x134>
   1785c:	113fff04 	addi	r4,r2,-4
   17860:	9900082e 	bgeu	r19,r4,17884 <quorem+0x130>
   17864:	10bfff17 	ldw	r2,-4(r2)
   17868:	10000326 	beq	r2,zero,17878 <quorem+0x124>
   1786c:	00000506 	br	17884 <quorem+0x130>
   17870:	20800017 	ldw	r2,0(r4)
   17874:	1000031e 	bne	r2,zero,17884 <quorem+0x130>
   17878:	213fff04 	addi	r4,r4,-4
   1787c:	8c7fffc4 	addi	r17,r17,-1
   17880:	993ffb36 	bltu	r19,r4,17870 <quorem+0x11c>
   17884:	bc400415 	stw	r17,16(r23)
   17888:	a005883a 	mov	r2,r20
   1788c:	dfc00917 	ldw	ra,36(sp)
   17890:	df000817 	ldw	fp,32(sp)
   17894:	ddc00717 	ldw	r23,28(sp)
   17898:	dd800617 	ldw	r22,24(sp)
   1789c:	dd400517 	ldw	r21,20(sp)
   178a0:	dd000417 	ldw	r20,16(sp)
   178a4:	dcc00317 	ldw	r19,12(sp)
   178a8:	dc800217 	ldw	r18,8(sp)
   178ac:	dc400117 	ldw	r17,4(sp)
   178b0:	dc000017 	ldw	r16,0(sp)
   178b4:	dec00a04 	addi	sp,sp,40
   178b8:	f800283a 	ret
   178bc:	980f883a 	mov	r7,r19
   178c0:	8011883a 	mov	r8,r16
   178c4:	0013883a 	mov	r9,zero
   178c8:	000d883a 	mov	r6,zero
   178cc:	40c00017 	ldw	r3,0(r8)
   178d0:	39000017 	ldw	r4,0(r7)
   178d4:	42000104 	addi	r8,r8,4
   178d8:	18bfffcc 	andi	r2,r3,65535
   178dc:	a085383a 	mul	r2,r20,r2
   178e0:	1806d43a 	srli	r3,r3,16
   178e4:	217fffcc 	andi	r5,r4,65535
   178e8:	3085883a 	add	r2,r6,r2
   178ec:	11bfffcc 	andi	r6,r2,65535
   178f0:	a0c7383a 	mul	r3,r20,r3
   178f4:	1004d43a 	srli	r2,r2,16
   178f8:	298bc83a 	sub	r5,r5,r6
   178fc:	2a4b883a 	add	r5,r5,r9
   17900:	2008d43a 	srli	r4,r4,16
   17904:	1887883a 	add	r3,r3,r2
   17908:	280dd43a 	srai	r6,r5,16
   1790c:	18bfffcc 	andi	r2,r3,65535
   17910:	2089c83a 	sub	r4,r4,r2
   17914:	2189883a 	add	r4,r4,r6
   17918:	3900008d 	sth	r4,2(r7)
   1791c:	3940000d 	sth	r5,0(r7)
   17920:	180cd43a 	srli	r6,r3,16
   17924:	39c00104 	addi	r7,r7,4
   17928:	2013d43a 	srai	r9,r4,16
   1792c:	923fe72e 	bgeu	r18,r8,178cc <quorem+0x178>
   17930:	e03fa61e 	bne	fp,zero,177cc <quorem+0x78>
   17934:	b0ffff04 	addi	r3,r22,-4
   17938:	98c0082e 	bgeu	r19,r3,1795c <quorem+0x208>
   1793c:	b0bfff17 	ldw	r2,-4(r22)
   17940:	10000326 	beq	r2,zero,17950 <quorem+0x1fc>
   17944:	00000506 	br	1795c <quorem+0x208>
   17948:	18800017 	ldw	r2,0(r3)
   1794c:	1000031e 	bne	r2,zero,1795c <quorem+0x208>
   17950:	18ffff04 	addi	r3,r3,-4
   17954:	8c7fffc4 	addi	r17,r17,-1
   17958:	98fffb36 	bltu	r19,r3,17948 <quorem+0x1f4>
   1795c:	bc400415 	stw	r17,16(r23)
   17960:	003f9a06 	br	177cc <quorem+0x78>
   17964:	0005883a 	mov	r2,zero
   17968:	003fc806 	br	1788c <quorem+0x138>

0001796c <_dtoa_r>:
   1796c:	22001017 	ldw	r8,64(r4)
   17970:	deffda04 	addi	sp,sp,-152
   17974:	dd402115 	stw	r21,132(sp)
   17978:	dd002015 	stw	r20,128(sp)
   1797c:	dc801e15 	stw	r18,120(sp)
   17980:	dc401d15 	stw	r17,116(sp)
   17984:	dfc02515 	stw	ra,148(sp)
   17988:	df002415 	stw	fp,144(sp)
   1798c:	ddc02315 	stw	r23,140(sp)
   17990:	dd802215 	stw	r22,136(sp)
   17994:	dcc01f15 	stw	r19,124(sp)
   17998:	dc001c15 	stw	r16,112(sp)
   1799c:	d9001615 	stw	r4,88(sp)
   179a0:	3023883a 	mov	r17,r6
   179a4:	2829883a 	mov	r20,r5
   179a8:	d9c01715 	stw	r7,92(sp)
   179ac:	dc802817 	ldw	r18,160(sp)
   179b0:	302b883a 	mov	r21,r6
   179b4:	40000a26 	beq	r8,zero,179e0 <_dtoa_r+0x74>
   179b8:	20801117 	ldw	r2,68(r4)
   179bc:	400b883a 	mov	r5,r8
   179c0:	40800115 	stw	r2,4(r8)
   179c4:	20c01117 	ldw	r3,68(r4)
   179c8:	00800044 	movi	r2,1
   179cc:	10c4983a 	sll	r2,r2,r3
   179d0:	40800215 	stw	r2,8(r8)
   179d4:	001916c0 	call	1916c <_Bfree>
   179d8:	d8c01617 	ldw	r3,88(sp)
   179dc:	18001015 	stw	zero,64(r3)
   179e0:	8800a316 	blt	r17,zero,17c70 <_dtoa_r+0x304>
   179e4:	90000015 	stw	zero,0(r18)
   179e8:	a8dffc2c 	andhi	r3,r21,32752
   179ec:	009ffc34 	movhi	r2,32752
   179f0:	18809126 	beq	r3,r2,17c38 <_dtoa_r+0x2cc>
   179f4:	000d883a 	mov	r6,zero
   179f8:	000f883a 	mov	r7,zero
   179fc:	a009883a 	mov	r4,r20
   17a00:	a80b883a 	mov	r5,r21
   17a04:	dd001215 	stw	r20,72(sp)
   17a08:	dd401315 	stw	r21,76(sp)
   17a0c:	001b2240 	call	1b224 <__nedf2>
   17a10:	1000171e 	bne	r2,zero,17a70 <_dtoa_r+0x104>
   17a14:	d9802717 	ldw	r6,156(sp)
   17a18:	00800044 	movi	r2,1
   17a1c:	30800015 	stw	r2,0(r6)
   17a20:	d8802917 	ldw	r2,164(sp)
   17a24:	10029b26 	beq	r2,zero,18494 <_dtoa_r+0xb28>
   17a28:	d9002917 	ldw	r4,164(sp)
   17a2c:	008000b4 	movhi	r2,2
   17a30:	10bc2144 	addi	r2,r2,-3963
   17a34:	10ffffc4 	addi	r3,r2,-1
   17a38:	20800015 	stw	r2,0(r4)
   17a3c:	1805883a 	mov	r2,r3
   17a40:	dfc02517 	ldw	ra,148(sp)
   17a44:	df002417 	ldw	fp,144(sp)
   17a48:	ddc02317 	ldw	r23,140(sp)
   17a4c:	dd802217 	ldw	r22,136(sp)
   17a50:	dd402117 	ldw	r21,132(sp)
   17a54:	dd002017 	ldw	r20,128(sp)
   17a58:	dcc01f17 	ldw	r19,124(sp)
   17a5c:	dc801e17 	ldw	r18,120(sp)
   17a60:	dc401d17 	ldw	r17,116(sp)
   17a64:	dc001c17 	ldw	r16,112(sp)
   17a68:	dec02604 	addi	sp,sp,152
   17a6c:	f800283a 	ret
   17a70:	d9001617 	ldw	r4,88(sp)
   17a74:	d9401217 	ldw	r5,72(sp)
   17a78:	d8800104 	addi	r2,sp,4
   17a7c:	a80d883a 	mov	r6,r21
   17a80:	d9c00204 	addi	r7,sp,8
   17a84:	d8800015 	stw	r2,0(sp)
   17a88:	00197a80 	call	197a8 <__d2b>
   17a8c:	d8800715 	stw	r2,28(sp)
   17a90:	a804d53a 	srli	r2,r21,20
   17a94:	1101ffcc 	andi	r4,r2,2047
   17a98:	20008626 	beq	r4,zero,17cb4 <_dtoa_r+0x348>
   17a9c:	d8c01217 	ldw	r3,72(sp)
   17aa0:	00800434 	movhi	r2,16
   17aa4:	10bfffc4 	addi	r2,r2,-1
   17aa8:	ddc00117 	ldw	r23,4(sp)
   17aac:	a884703a 	and	r2,r21,r2
   17ab0:	1811883a 	mov	r8,r3
   17ab4:	124ffc34 	orhi	r9,r2,16368
   17ab8:	25bf0044 	addi	r22,r4,-1023
   17abc:	d8000815 	stw	zero,32(sp)
   17ac0:	0005883a 	mov	r2,zero
   17ac4:	00cffe34 	movhi	r3,16376
   17ac8:	480b883a 	mov	r5,r9
   17acc:	4009883a 	mov	r4,r8
   17ad0:	180f883a 	mov	r7,r3
   17ad4:	100d883a 	mov	r6,r2
   17ad8:	00101980 	call	10198 <__subdf3>
   17adc:	0218dbf4 	movhi	r8,25455
   17ae0:	4210d844 	addi	r8,r8,17249
   17ae4:	024ff4f4 	movhi	r9,16339
   17ae8:	4a61e9c4 	addi	r9,r9,-30809
   17aec:	480f883a 	mov	r7,r9
   17af0:	400d883a 	mov	r6,r8
   17af4:	180b883a 	mov	r5,r3
   17af8:	1009883a 	mov	r4,r2
   17afc:	001028c0 	call	1028c <__muldf3>
   17b00:	0222d874 	movhi	r8,35681
   17b04:	42322cc4 	addi	r8,r8,-14157
   17b08:	024ff1f4 	movhi	r9,16327
   17b0c:	4a628a04 	addi	r9,r9,-30168
   17b10:	480f883a 	mov	r7,r9
   17b14:	400d883a 	mov	r6,r8
   17b18:	180b883a 	mov	r5,r3
   17b1c:	1009883a 	mov	r4,r2
   17b20:	00102180 	call	10218 <__adddf3>
   17b24:	b009883a 	mov	r4,r22
   17b28:	1021883a 	mov	r16,r2
   17b2c:	1823883a 	mov	r17,r3
   17b30:	00106d80 	call	106d8 <__floatsidf>
   17b34:	021427f4 	movhi	r8,20639
   17b38:	421e7ec4 	addi	r8,r8,31227
   17b3c:	024ff4f4 	movhi	r9,16339
   17b40:	4a5104c4 	addi	r9,r9,17427
   17b44:	480f883a 	mov	r7,r9
   17b48:	400d883a 	mov	r6,r8
   17b4c:	180b883a 	mov	r5,r3
   17b50:	1009883a 	mov	r4,r2
   17b54:	001028c0 	call	1028c <__muldf3>
   17b58:	180f883a 	mov	r7,r3
   17b5c:	880b883a 	mov	r5,r17
   17b60:	100d883a 	mov	r6,r2
   17b64:	8009883a 	mov	r4,r16
   17b68:	00102180 	call	10218 <__adddf3>
   17b6c:	1009883a 	mov	r4,r2
   17b70:	180b883a 	mov	r5,r3
   17b74:	1021883a 	mov	r16,r2
   17b78:	1823883a 	mov	r17,r3
   17b7c:	00107d00 	call	107d0 <__fixdfsi>
   17b80:	000d883a 	mov	r6,zero
   17b84:	000f883a 	mov	r7,zero
   17b88:	8009883a 	mov	r4,r16
   17b8c:	880b883a 	mov	r5,r17
   17b90:	d8800d15 	stw	r2,52(sp)
   17b94:	00106500 	call	10650 <__ltdf2>
   17b98:	10031716 	blt	r2,zero,187f8 <_dtoa_r+0xe8c>
   17b9c:	d8c00d17 	ldw	r3,52(sp)
   17ba0:	00800584 	movi	r2,22
   17ba4:	10c1482e 	bgeu	r2,r3,180c8 <_dtoa_r+0x75c>
   17ba8:	01000044 	movi	r4,1
   17bac:	d9000c15 	stw	r4,48(sp)
   17bb0:	bd85c83a 	sub	r2,r23,r22
   17bb4:	11bfffc4 	addi	r6,r2,-1
   17bb8:	30030b16 	blt	r6,zero,187e8 <_dtoa_r+0xe7c>
   17bbc:	d9800a15 	stw	r6,40(sp)
   17bc0:	d8001115 	stw	zero,68(sp)
   17bc4:	d8c00d17 	ldw	r3,52(sp)
   17bc8:	1802ff16 	blt	r3,zero,187c8 <_dtoa_r+0xe5c>
   17bcc:	d9000a17 	ldw	r4,40(sp)
   17bd0:	d8c00915 	stw	r3,36(sp)
   17bd4:	d8001015 	stw	zero,64(sp)
   17bd8:	20c9883a 	add	r4,r4,r3
   17bdc:	d9000a15 	stw	r4,40(sp)
   17be0:	d9001717 	ldw	r4,92(sp)
   17be4:	00800244 	movi	r2,9
   17be8:	11004636 	bltu	r2,r4,17d04 <_dtoa_r+0x398>
   17bec:	00800144 	movi	r2,5
   17bf0:	11020416 	blt	r2,r4,18404 <_dtoa_r+0xa98>
   17bf4:	04400044 	movi	r17,1
   17bf8:	d8c01717 	ldw	r3,92(sp)
   17bfc:	00800144 	movi	r2,5
   17c00:	10c1ed36 	bltu	r2,r3,183b8 <_dtoa_r+0xa4c>
   17c04:	18c5883a 	add	r2,r3,r3
   17c08:	1085883a 	add	r2,r2,r2
   17c0c:	00c00074 	movhi	r3,1
   17c10:	18df0804 	addi	r3,r3,31776
   17c14:	10c5883a 	add	r2,r2,r3
   17c18:	11000017 	ldw	r4,0(r2)
   17c1c:	2000683a 	jmp	r4
   17c20:	00017d0c 	andi	zero,zero,1524
   17c24:	00017d0c 	andi	zero,zero,1524
   17c28:	0001870c 	andi	zero,zero,1564
   17c2c:	000186e4 	muli	zero,zero,1563
   17c30:	00018728 	cmpgeui	zero,zero,1564
   17c34:	00018734 	movhi	zero,1564
   17c38:	d9002717 	ldw	r4,156(sp)
   17c3c:	0089c3c4 	movi	r2,9999
   17c40:	20800015 	stw	r2,0(r4)
   17c44:	a0001026 	beq	r20,zero,17c88 <_dtoa_r+0x31c>
   17c48:	00c000b4 	movhi	r3,2
   17c4c:	18fc2d04 	addi	r3,r3,-3916
   17c50:	d9802917 	ldw	r6,164(sp)
   17c54:	303f7926 	beq	r6,zero,17a3c <_dtoa_r+0xd0>
   17c58:	188000c7 	ldb	r2,3(r3)
   17c5c:	190000c4 	addi	r4,r3,3
   17c60:	1000101e 	bne	r2,zero,17ca4 <_dtoa_r+0x338>
   17c64:	d8802917 	ldw	r2,164(sp)
   17c68:	11000015 	stw	r4,0(r2)
   17c6c:	003f7306 	br	17a3c <_dtoa_r+0xd0>
   17c70:	00a00034 	movhi	r2,32768
   17c74:	10bfffc4 	addi	r2,r2,-1
   17c78:	00c00044 	movi	r3,1
   17c7c:	88aa703a 	and	r21,r17,r2
   17c80:	90c00015 	stw	r3,0(r18)
   17c84:	003f5806 	br	179e8 <_dtoa_r+0x7c>
   17c88:	00800434 	movhi	r2,16
   17c8c:	10bfffc4 	addi	r2,r2,-1
   17c90:	a884703a 	and	r2,r21,r2
   17c94:	103fec1e 	bne	r2,zero,17c48 <_dtoa_r+0x2dc>
   17c98:	00c000b4 	movhi	r3,2
   17c9c:	18fc2a04 	addi	r3,r3,-3928
   17ca0:	003feb06 	br	17c50 <_dtoa_r+0x2e4>
   17ca4:	d8802917 	ldw	r2,164(sp)
   17ca8:	19000204 	addi	r4,r3,8
   17cac:	11000015 	stw	r4,0(r2)
   17cb0:	003f6206 	br	17a3c <_dtoa_r+0xd0>
   17cb4:	ddc00117 	ldw	r23,4(sp)
   17cb8:	d8800217 	ldw	r2,8(sp)
   17cbc:	01000804 	movi	r4,32
   17cc0:	b8c10c84 	addi	r3,r23,1074
   17cc4:	18a3883a 	add	r17,r3,r2
   17cc8:	2441b80e 	bge	r4,r17,183ac <_dtoa_r+0xa40>
   17ccc:	00c01004 	movi	r3,64
   17cd0:	1c47c83a 	sub	r3,r3,r17
   17cd4:	88bff804 	addi	r2,r17,-32
   17cd8:	a8c6983a 	sll	r3,r21,r3
   17cdc:	a084d83a 	srl	r2,r20,r2
   17ce0:	1888b03a 	or	r4,r3,r2
   17ce4:	001b3bc0 	call	1b3bc <__floatunsidf>
   17ce8:	1011883a 	mov	r8,r2
   17cec:	00bf8434 	movhi	r2,65040
   17cf0:	01000044 	movi	r4,1
   17cf4:	10d3883a 	add	r9,r2,r3
   17cf8:	8dbef344 	addi	r22,r17,-1075
   17cfc:	d9000815 	stw	r4,32(sp)
   17d00:	003f6f06 	br	17ac0 <_dtoa_r+0x154>
   17d04:	d8001715 	stw	zero,92(sp)
   17d08:	04400044 	movi	r17,1
   17d0c:	00bfffc4 	movi	r2,-1
   17d10:	00c00044 	movi	r3,1
   17d14:	d8800e15 	stw	r2,56(sp)
   17d18:	d8002615 	stw	zero,152(sp)
   17d1c:	d8800f15 	stw	r2,60(sp)
   17d20:	d8c00b15 	stw	r3,44(sp)
   17d24:	1021883a 	mov	r16,r2
   17d28:	d8801617 	ldw	r2,88(sp)
   17d2c:	10001115 	stw	zero,68(r2)
   17d30:	d8801617 	ldw	r2,88(sp)
   17d34:	11401117 	ldw	r5,68(r2)
   17d38:	1009883a 	mov	r4,r2
   17d3c:	00196ec0 	call	196ec <_Balloc>
   17d40:	d8c01617 	ldw	r3,88(sp)
   17d44:	d8800515 	stw	r2,20(sp)
   17d48:	18801015 	stw	r2,64(r3)
   17d4c:	00800384 	movi	r2,14
   17d50:	14006836 	bltu	r2,r16,17ef4 <_dtoa_r+0x588>
   17d54:	8805003a 	cmpeq	r2,r17,zero
   17d58:	1000661e 	bne	r2,zero,17ef4 <_dtoa_r+0x588>
   17d5c:	d9000d17 	ldw	r4,52(sp)
   17d60:	0102300e 	bge	zero,r4,18624 <_dtoa_r+0xcb8>
   17d64:	208003cc 	andi	r2,r4,15
   17d68:	100490fa 	slli	r2,r2,3
   17d6c:	2025d13a 	srai	r18,r4,4
   17d70:	00c000b4 	movhi	r3,2
   17d74:	18fc3e04 	addi	r3,r3,-3848
   17d78:	10c5883a 	add	r2,r2,r3
   17d7c:	90c0040c 	andi	r3,r18,16
   17d80:	14000017 	ldw	r16,0(r2)
   17d84:	14400117 	ldw	r17,4(r2)
   17d88:	18036a1e 	bne	r3,zero,18b34 <_dtoa_r+0x11c8>
   17d8c:	05800084 	movi	r22,2
   17d90:	90001026 	beq	r18,zero,17dd4 <_dtoa_r+0x468>
   17d94:	04c000b4 	movhi	r19,2
   17d98:	9cfc7004 	addi	r19,r19,-3648
   17d9c:	9080004c 	andi	r2,r18,1
   17da0:	1005003a 	cmpeq	r2,r2,zero
   17da4:	1000081e 	bne	r2,zero,17dc8 <_dtoa_r+0x45c>
   17da8:	99800017 	ldw	r6,0(r19)
   17dac:	99c00117 	ldw	r7,4(r19)
   17db0:	880b883a 	mov	r5,r17
   17db4:	8009883a 	mov	r4,r16
   17db8:	001028c0 	call	1028c <__muldf3>
   17dbc:	1021883a 	mov	r16,r2
   17dc0:	b5800044 	addi	r22,r22,1
   17dc4:	1823883a 	mov	r17,r3
   17dc8:	9025d07a 	srai	r18,r18,1
   17dcc:	9cc00204 	addi	r19,r19,8
   17dd0:	903ff21e 	bne	r18,zero,17d9c <_dtoa_r+0x430>
   17dd4:	a80b883a 	mov	r5,r21
   17dd8:	a009883a 	mov	r4,r20
   17ddc:	880f883a 	mov	r7,r17
   17de0:	800d883a 	mov	r6,r16
   17de4:	001af440 	call	1af44 <__divdf3>
   17de8:	1029883a 	mov	r20,r2
   17dec:	182b883a 	mov	r21,r3
   17df0:	d8c00c17 	ldw	r3,48(sp)
   17df4:	1805003a 	cmpeq	r2,r3,zero
   17df8:	1000081e 	bne	r2,zero,17e1c <_dtoa_r+0x4b0>
   17dfc:	0005883a 	mov	r2,zero
   17e00:	00cffc34 	movhi	r3,16368
   17e04:	180f883a 	mov	r7,r3
   17e08:	a009883a 	mov	r4,r20
   17e0c:	a80b883a 	mov	r5,r21
   17e10:	100d883a 	mov	r6,r2
   17e14:	00106500 	call	10650 <__ltdf2>
   17e18:	1003fe16 	blt	r2,zero,18e14 <_dtoa_r+0x14a8>
   17e1c:	b009883a 	mov	r4,r22
   17e20:	00106d80 	call	106d8 <__floatsidf>
   17e24:	180b883a 	mov	r5,r3
   17e28:	1009883a 	mov	r4,r2
   17e2c:	a00d883a 	mov	r6,r20
   17e30:	a80f883a 	mov	r7,r21
   17e34:	001028c0 	call	1028c <__muldf3>
   17e38:	0011883a 	mov	r8,zero
   17e3c:	02500734 	movhi	r9,16412
   17e40:	1009883a 	mov	r4,r2
   17e44:	180b883a 	mov	r5,r3
   17e48:	480f883a 	mov	r7,r9
   17e4c:	400d883a 	mov	r6,r8
   17e50:	00102180 	call	10218 <__adddf3>
   17e54:	d9000f17 	ldw	r4,60(sp)
   17e58:	102d883a 	mov	r22,r2
   17e5c:	00bf3034 	movhi	r2,64704
   17e60:	18b9883a 	add	fp,r3,r2
   17e64:	e02f883a 	mov	r23,fp
   17e68:	20028f1e 	bne	r4,zero,188a8 <_dtoa_r+0xf3c>
   17e6c:	0005883a 	mov	r2,zero
   17e70:	00d00534 	movhi	r3,16404
   17e74:	a009883a 	mov	r4,r20
   17e78:	a80b883a 	mov	r5,r21
   17e7c:	180f883a 	mov	r7,r3
   17e80:	100d883a 	mov	r6,r2
   17e84:	00101980 	call	10198 <__subdf3>
   17e88:	1009883a 	mov	r4,r2
   17e8c:	e00f883a 	mov	r7,fp
   17e90:	180b883a 	mov	r5,r3
   17e94:	b00d883a 	mov	r6,r22
   17e98:	1025883a 	mov	r18,r2
   17e9c:	1827883a 	mov	r19,r3
   17ea0:	001b2ac0 	call	1b2ac <__gtdf2>
   17ea4:	00834f16 	blt	zero,r2,18be4 <_dtoa_r+0x1278>
   17ea8:	e0e0003c 	xorhi	r3,fp,32768
   17eac:	9009883a 	mov	r4,r18
   17eb0:	980b883a 	mov	r5,r19
   17eb4:	180f883a 	mov	r7,r3
   17eb8:	b00d883a 	mov	r6,r22
   17ebc:	00106500 	call	10650 <__ltdf2>
   17ec0:	1000080e 	bge	r2,zero,17ee4 <_dtoa_r+0x578>
   17ec4:	0027883a 	mov	r19,zero
   17ec8:	0025883a 	mov	r18,zero
   17ecc:	d8802617 	ldw	r2,152(sp)
   17ed0:	df000517 	ldw	fp,20(sp)
   17ed4:	d8000615 	stw	zero,24(sp)
   17ed8:	0084303a 	nor	r2,zero,r2
   17edc:	d8800d15 	stw	r2,52(sp)
   17ee0:	00019b06 	br	18550 <_dtoa_r+0xbe4>
   17ee4:	d9801217 	ldw	r6,72(sp)
   17ee8:	d8801317 	ldw	r2,76(sp)
   17eec:	3029883a 	mov	r20,r6
   17ef0:	102b883a 	mov	r21,r2
   17ef4:	d8c00217 	ldw	r3,8(sp)
   17ef8:	18008516 	blt	r3,zero,18110 <_dtoa_r+0x7a4>
   17efc:	d9000d17 	ldw	r4,52(sp)
   17f00:	00800384 	movi	r2,14
   17f04:	11008216 	blt	r2,r4,18110 <_dtoa_r+0x7a4>
   17f08:	200490fa 	slli	r2,r4,3
   17f0c:	d9802617 	ldw	r6,152(sp)
   17f10:	00c000b4 	movhi	r3,2
   17f14:	18fc3e04 	addi	r3,r3,-3848
   17f18:	10c5883a 	add	r2,r2,r3
   17f1c:	14800017 	ldw	r18,0(r2)
   17f20:	14c00117 	ldw	r19,4(r2)
   17f24:	30031e16 	blt	r6,zero,18ba0 <_dtoa_r+0x1234>
   17f28:	d9000517 	ldw	r4,20(sp)
   17f2c:	d8c00f17 	ldw	r3,60(sp)
   17f30:	a823883a 	mov	r17,r21
   17f34:	a021883a 	mov	r16,r20
   17f38:	192b883a 	add	r21,r3,r4
   17f3c:	2039883a 	mov	fp,r4
   17f40:	00000f06 	br	17f80 <_dtoa_r+0x614>
   17f44:	0005883a 	mov	r2,zero
   17f48:	00d00934 	movhi	r3,16420
   17f4c:	5009883a 	mov	r4,r10
   17f50:	580b883a 	mov	r5,r11
   17f54:	180f883a 	mov	r7,r3
   17f58:	100d883a 	mov	r6,r2
   17f5c:	001028c0 	call	1028c <__muldf3>
   17f60:	180b883a 	mov	r5,r3
   17f64:	000d883a 	mov	r6,zero
   17f68:	000f883a 	mov	r7,zero
   17f6c:	1009883a 	mov	r4,r2
   17f70:	1021883a 	mov	r16,r2
   17f74:	1823883a 	mov	r17,r3
   17f78:	001b2240 	call	1b224 <__nedf2>
   17f7c:	10004526 	beq	r2,zero,18094 <_dtoa_r+0x728>
   17f80:	900d883a 	mov	r6,r18
   17f84:	980f883a 	mov	r7,r19
   17f88:	8009883a 	mov	r4,r16
   17f8c:	880b883a 	mov	r5,r17
   17f90:	001af440 	call	1af44 <__divdf3>
   17f94:	180b883a 	mov	r5,r3
   17f98:	1009883a 	mov	r4,r2
   17f9c:	00107d00 	call	107d0 <__fixdfsi>
   17fa0:	1009883a 	mov	r4,r2
   17fa4:	1029883a 	mov	r20,r2
   17fa8:	00106d80 	call	106d8 <__floatsidf>
   17fac:	180f883a 	mov	r7,r3
   17fb0:	9009883a 	mov	r4,r18
   17fb4:	980b883a 	mov	r5,r19
   17fb8:	100d883a 	mov	r6,r2
   17fbc:	001028c0 	call	1028c <__muldf3>
   17fc0:	180f883a 	mov	r7,r3
   17fc4:	880b883a 	mov	r5,r17
   17fc8:	8009883a 	mov	r4,r16
   17fcc:	100d883a 	mov	r6,r2
   17fd0:	00101980 	call	10198 <__subdf3>
   17fd4:	1015883a 	mov	r10,r2
   17fd8:	a0800c04 	addi	r2,r20,48
   17fdc:	e0800005 	stb	r2,0(fp)
   17fe0:	e7000044 	addi	fp,fp,1
   17fe4:	1817883a 	mov	r11,r3
   17fe8:	e57fd61e 	bne	fp,r21,17f44 <_dtoa_r+0x5d8>
   17fec:	500d883a 	mov	r6,r10
   17ff0:	180f883a 	mov	r7,r3
   17ff4:	5009883a 	mov	r4,r10
   17ff8:	180b883a 	mov	r5,r3
   17ffc:	00102180 	call	10218 <__adddf3>
   18000:	100d883a 	mov	r6,r2
   18004:	9009883a 	mov	r4,r18
   18008:	980b883a 	mov	r5,r19
   1800c:	180f883a 	mov	r7,r3
   18010:	1021883a 	mov	r16,r2
   18014:	1823883a 	mov	r17,r3
   18018:	00106500 	call	10650 <__ltdf2>
   1801c:	10000816 	blt	r2,zero,18040 <_dtoa_r+0x6d4>
   18020:	980b883a 	mov	r5,r19
   18024:	800d883a 	mov	r6,r16
   18028:	880f883a 	mov	r7,r17
   1802c:	9009883a 	mov	r4,r18
   18030:	001b19c0 	call	1b19c <__eqdf2>
   18034:	1000171e 	bne	r2,zero,18094 <_dtoa_r+0x728>
   18038:	a080004c 	andi	r2,r20,1
   1803c:	10001526 	beq	r2,zero,18094 <_dtoa_r+0x728>
   18040:	d8800d17 	ldw	r2,52(sp)
   18044:	d8800415 	stw	r2,16(sp)
   18048:	e009883a 	mov	r4,fp
   1804c:	213fffc4 	addi	r4,r4,-1
   18050:	20c00007 	ldb	r3,0(r4)
   18054:	00800e44 	movi	r2,57
   18058:	1880081e 	bne	r3,r2,1807c <_dtoa_r+0x710>
   1805c:	d8800517 	ldw	r2,20(sp)
   18060:	113ffa1e 	bne	r2,r4,1804c <_dtoa_r+0x6e0>
   18064:	d8c00417 	ldw	r3,16(sp)
   18068:	d9800517 	ldw	r6,20(sp)
   1806c:	00800c04 	movi	r2,48
   18070:	18c00044 	addi	r3,r3,1
   18074:	d8c00415 	stw	r3,16(sp)
   18078:	30800005 	stb	r2,0(r6)
   1807c:	20800003 	ldbu	r2,0(r4)
   18080:	d8c00417 	ldw	r3,16(sp)
   18084:	27000044 	addi	fp,r4,1
   18088:	10800044 	addi	r2,r2,1
   1808c:	d8c00d15 	stw	r3,52(sp)
   18090:	20800005 	stb	r2,0(r4)
   18094:	d9001617 	ldw	r4,88(sp)
   18098:	d9400717 	ldw	r5,28(sp)
   1809c:	001916c0 	call	1916c <_Bfree>
   180a0:	e0000005 	stb	zero,0(fp)
   180a4:	d9800d17 	ldw	r6,52(sp)
   180a8:	d8c02717 	ldw	r3,156(sp)
   180ac:	d9002917 	ldw	r4,164(sp)
   180b0:	30800044 	addi	r2,r6,1
   180b4:	18800015 	stw	r2,0(r3)
   180b8:	20029c26 	beq	r4,zero,18b2c <_dtoa_r+0x11c0>
   180bc:	d8c00517 	ldw	r3,20(sp)
   180c0:	27000015 	stw	fp,0(r4)
   180c4:	003e5d06 	br	17a3c <_dtoa_r+0xd0>
   180c8:	d9800d17 	ldw	r6,52(sp)
   180cc:	00c000b4 	movhi	r3,2
   180d0:	18fc3e04 	addi	r3,r3,-3848
   180d4:	d9001217 	ldw	r4,72(sp)
   180d8:	300490fa 	slli	r2,r6,3
   180dc:	d9401317 	ldw	r5,76(sp)
   180e0:	10c5883a 	add	r2,r2,r3
   180e4:	12000017 	ldw	r8,0(r2)
   180e8:	12400117 	ldw	r9,4(r2)
   180ec:	400d883a 	mov	r6,r8
   180f0:	480f883a 	mov	r7,r9
   180f4:	00106500 	call	10650 <__ltdf2>
   180f8:	1000030e 	bge	r2,zero,18108 <_dtoa_r+0x79c>
   180fc:	d8800d17 	ldw	r2,52(sp)
   18100:	10bfffc4 	addi	r2,r2,-1
   18104:	d8800d15 	stw	r2,52(sp)
   18108:	d8000c15 	stw	zero,48(sp)
   1810c:	003ea806 	br	17bb0 <_dtoa_r+0x244>
   18110:	d9000b17 	ldw	r4,44(sp)
   18114:	202cc03a 	cmpne	r22,r4,zero
   18118:	b000c71e 	bne	r22,zero,18438 <_dtoa_r+0xacc>
   1811c:	dc001117 	ldw	r16,68(sp)
   18120:	dc801017 	ldw	r18,64(sp)
   18124:	0027883a 	mov	r19,zero
   18128:	04000b0e 	bge	zero,r16,18158 <_dtoa_r+0x7ec>
   1812c:	d8c00a17 	ldw	r3,40(sp)
   18130:	00c0090e 	bge	zero,r3,18158 <_dtoa_r+0x7ec>
   18134:	8005883a 	mov	r2,r16
   18138:	1c011316 	blt	r3,r16,18588 <_dtoa_r+0xc1c>
   1813c:	d9000a17 	ldw	r4,40(sp)
   18140:	d9801117 	ldw	r6,68(sp)
   18144:	80a1c83a 	sub	r16,r16,r2
   18148:	2089c83a 	sub	r4,r4,r2
   1814c:	308dc83a 	sub	r6,r6,r2
   18150:	d9000a15 	stw	r4,40(sp)
   18154:	d9801115 	stw	r6,68(sp)
   18158:	d8801017 	ldw	r2,64(sp)
   1815c:	0080150e 	bge	zero,r2,181b4 <_dtoa_r+0x848>
   18160:	d8c00b17 	ldw	r3,44(sp)
   18164:	1805003a 	cmpeq	r2,r3,zero
   18168:	1001c91e 	bne	r2,zero,18890 <_dtoa_r+0xf24>
   1816c:	04800e0e 	bge	zero,r18,181a8 <_dtoa_r+0x83c>
   18170:	d9001617 	ldw	r4,88(sp)
   18174:	980b883a 	mov	r5,r19
   18178:	900d883a 	mov	r6,r18
   1817c:	0019f200 	call	19f20 <__pow5mult>
   18180:	d9001617 	ldw	r4,88(sp)
   18184:	d9800717 	ldw	r6,28(sp)
   18188:	100b883a 	mov	r5,r2
   1818c:	1027883a 	mov	r19,r2
   18190:	0019bfc0 	call	19bfc <__multiply>
   18194:	d9001617 	ldw	r4,88(sp)
   18198:	d9400717 	ldw	r5,28(sp)
   1819c:	1023883a 	mov	r17,r2
   181a0:	001916c0 	call	1916c <_Bfree>
   181a4:	dc400715 	stw	r17,28(sp)
   181a8:	d9001017 	ldw	r4,64(sp)
   181ac:	248dc83a 	sub	r6,r4,r18
   181b0:	30010e1e 	bne	r6,zero,185ec <_dtoa_r+0xc80>
   181b4:	d9001617 	ldw	r4,88(sp)
   181b8:	04400044 	movi	r17,1
   181bc:	880b883a 	mov	r5,r17
   181c0:	0019de40 	call	19de4 <__i2b>
   181c4:	d9800917 	ldw	r6,36(sp)
   181c8:	1025883a 	mov	r18,r2
   181cc:	0180040e 	bge	zero,r6,181e0 <_dtoa_r+0x874>
   181d0:	d9001617 	ldw	r4,88(sp)
   181d4:	100b883a 	mov	r5,r2
   181d8:	0019f200 	call	19f20 <__pow5mult>
   181dc:	1025883a 	mov	r18,r2
   181e0:	d8801717 	ldw	r2,92(sp)
   181e4:	8880f30e 	bge	r17,r2,185b4 <_dtoa_r+0xc48>
   181e8:	0023883a 	mov	r17,zero
   181ec:	d9800917 	ldw	r6,36(sp)
   181f0:	30019e1e 	bne	r6,zero,1886c <_dtoa_r+0xf00>
   181f4:	00c00044 	movi	r3,1
   181f8:	d9000a17 	ldw	r4,40(sp)
   181fc:	20c5883a 	add	r2,r4,r3
   18200:	10c007cc 	andi	r3,r2,31
   18204:	1800841e 	bne	r3,zero,18418 <_dtoa_r+0xaac>
   18208:	00800704 	movi	r2,28
   1820c:	d9000a17 	ldw	r4,40(sp)
   18210:	d9801117 	ldw	r6,68(sp)
   18214:	80a1883a 	add	r16,r16,r2
   18218:	2089883a 	add	r4,r4,r2
   1821c:	308d883a 	add	r6,r6,r2
   18220:	d9000a15 	stw	r4,40(sp)
   18224:	d9801115 	stw	r6,68(sp)
   18228:	d8801117 	ldw	r2,68(sp)
   1822c:	0080050e 	bge	zero,r2,18244 <_dtoa_r+0x8d8>
   18230:	d9400717 	ldw	r5,28(sp)
   18234:	d9001617 	ldw	r4,88(sp)
   18238:	100d883a 	mov	r6,r2
   1823c:	0019ab00 	call	19ab0 <__lshift>
   18240:	d8800715 	stw	r2,28(sp)
   18244:	d8c00a17 	ldw	r3,40(sp)
   18248:	00c0050e 	bge	zero,r3,18260 <_dtoa_r+0x8f4>
   1824c:	d9001617 	ldw	r4,88(sp)
   18250:	900b883a 	mov	r5,r18
   18254:	180d883a 	mov	r6,r3
   18258:	0019ab00 	call	19ab0 <__lshift>
   1825c:	1025883a 	mov	r18,r2
   18260:	d9000c17 	ldw	r4,48(sp)
   18264:	2005003a 	cmpeq	r2,r4,zero
   18268:	10016f26 	beq	r2,zero,18828 <_dtoa_r+0xebc>
   1826c:	d9000f17 	ldw	r4,60(sp)
   18270:	0102170e 	bge	zero,r4,18ad0 <_dtoa_r+0x1164>
   18274:	d9800b17 	ldw	r6,44(sp)
   18278:	3005003a 	cmpeq	r2,r6,zero
   1827c:	1000881e 	bne	r2,zero,184a0 <_dtoa_r+0xb34>
   18280:	0400050e 	bge	zero,r16,18298 <_dtoa_r+0x92c>
   18284:	d9001617 	ldw	r4,88(sp)
   18288:	980b883a 	mov	r5,r19
   1828c:	800d883a 	mov	r6,r16
   18290:	0019ab00 	call	19ab0 <__lshift>
   18294:	1027883a 	mov	r19,r2
   18298:	8804c03a 	cmpne	r2,r17,zero
   1829c:	1002541e 	bne	r2,zero,18bf0 <_dtoa_r+0x1284>
   182a0:	980b883a 	mov	r5,r19
   182a4:	dd800517 	ldw	r22,20(sp)
   182a8:	dcc00615 	stw	r19,24(sp)
   182ac:	a700004c 	andi	fp,r20,1
   182b0:	2827883a 	mov	r19,r5
   182b4:	d9000717 	ldw	r4,28(sp)
   182b8:	900b883a 	mov	r5,r18
   182bc:	00177540 	call	17754 <quorem>
   182c0:	d9000717 	ldw	r4,28(sp)
   182c4:	d9400617 	ldw	r5,24(sp)
   182c8:	1023883a 	mov	r17,r2
   182cc:	8dc00c04 	addi	r23,r17,48
   182d0:	00192c80 	call	192c8 <__mcmp>
   182d4:	d9001617 	ldw	r4,88(sp)
   182d8:	900b883a 	mov	r5,r18
   182dc:	980d883a 	mov	r6,r19
   182e0:	1029883a 	mov	r20,r2
   182e4:	00199240 	call	19924 <__mdiff>
   182e8:	102b883a 	mov	r21,r2
   182ec:	10800317 	ldw	r2,12(r2)
   182f0:	1001281e 	bne	r2,zero,18794 <_dtoa_r+0xe28>
   182f4:	d9000717 	ldw	r4,28(sp)
   182f8:	a80b883a 	mov	r5,r21
   182fc:	00192c80 	call	192c8 <__mcmp>
   18300:	d9001617 	ldw	r4,88(sp)
   18304:	1021883a 	mov	r16,r2
   18308:	a80b883a 	mov	r5,r21
   1830c:	001916c0 	call	1916c <_Bfree>
   18310:	8000041e 	bne	r16,zero,18324 <_dtoa_r+0x9b8>
   18314:	d8801717 	ldw	r2,92(sp)
   18318:	1000021e 	bne	r2,zero,18324 <_dtoa_r+0x9b8>
   1831c:	e004c03a 	cmpne	r2,fp,zero
   18320:	10011726 	beq	r2,zero,18780 <_dtoa_r+0xe14>
   18324:	a0010616 	blt	r20,zero,18740 <_dtoa_r+0xdd4>
   18328:	a000041e 	bne	r20,zero,1833c <_dtoa_r+0x9d0>
   1832c:	d8c01717 	ldw	r3,92(sp)
   18330:	1800021e 	bne	r3,zero,1833c <_dtoa_r+0x9d0>
   18334:	e004c03a 	cmpne	r2,fp,zero
   18338:	10010126 	beq	r2,zero,18740 <_dtoa_r+0xdd4>
   1833c:	04023d16 	blt	zero,r16,18c34 <_dtoa_r+0x12c8>
   18340:	b5c00005 	stb	r23,0(r22)
   18344:	d9800517 	ldw	r6,20(sp)
   18348:	d9000f17 	ldw	r4,60(sp)
   1834c:	b5800044 	addi	r22,r22,1
   18350:	3105883a 	add	r2,r6,r4
   18354:	b0806526 	beq	r22,r2,184ec <_dtoa_r+0xb80>
   18358:	d9400717 	ldw	r5,28(sp)
   1835c:	d9001617 	ldw	r4,88(sp)
   18360:	01800284 	movi	r6,10
   18364:	000f883a 	mov	r7,zero
   18368:	0019e200 	call	19e20 <__multadd>
   1836c:	d8800715 	stw	r2,28(sp)
   18370:	d8800617 	ldw	r2,24(sp)
   18374:	14c10c26 	beq	r2,r19,187a8 <_dtoa_r+0xe3c>
   18378:	d9400617 	ldw	r5,24(sp)
   1837c:	d9001617 	ldw	r4,88(sp)
   18380:	01800284 	movi	r6,10
   18384:	000f883a 	mov	r7,zero
   18388:	0019e200 	call	19e20 <__multadd>
   1838c:	d9001617 	ldw	r4,88(sp)
   18390:	980b883a 	mov	r5,r19
   18394:	01800284 	movi	r6,10
   18398:	000f883a 	mov	r7,zero
   1839c:	d8800615 	stw	r2,24(sp)
   183a0:	0019e200 	call	19e20 <__multadd>
   183a4:	1027883a 	mov	r19,r2
   183a8:	003fc206 	br	182b4 <_dtoa_r+0x948>
   183ac:	2445c83a 	sub	r2,r4,r17
   183b0:	a088983a 	sll	r4,r20,r2
   183b4:	003e4b06 	br	17ce4 <_dtoa_r+0x378>
   183b8:	01bfffc4 	movi	r6,-1
   183bc:	00800044 	movi	r2,1
   183c0:	d9800e15 	stw	r6,56(sp)
   183c4:	d9800f15 	stw	r6,60(sp)
   183c8:	d8800b15 	stw	r2,44(sp)
   183cc:	d8c01617 	ldw	r3,88(sp)
   183d0:	008005c4 	movi	r2,23
   183d4:	18001115 	stw	zero,68(r3)
   183d8:	1580082e 	bgeu	r2,r22,183fc <_dtoa_r+0xa90>
   183dc:	00c00104 	movi	r3,4
   183e0:	0009883a 	mov	r4,zero
   183e4:	18c7883a 	add	r3,r3,r3
   183e8:	18800504 	addi	r2,r3,20
   183ec:	21000044 	addi	r4,r4,1
   183f0:	b0bffc2e 	bgeu	r22,r2,183e4 <_dtoa_r+0xa78>
   183f4:	d9801617 	ldw	r6,88(sp)
   183f8:	31001115 	stw	r4,68(r6)
   183fc:	dc000f17 	ldw	r16,60(sp)
   18400:	003e4b06 	br	17d30 <_dtoa_r+0x3c4>
   18404:	d9801717 	ldw	r6,92(sp)
   18408:	0023883a 	mov	r17,zero
   1840c:	31bfff04 	addi	r6,r6,-4
   18410:	d9801715 	stw	r6,92(sp)
   18414:	003df806 	br	17bf8 <_dtoa_r+0x28c>
   18418:	00800804 	movi	r2,32
   1841c:	10c9c83a 	sub	r4,r2,r3
   18420:	00c00104 	movi	r3,4
   18424:	19005a16 	blt	r3,r4,18590 <_dtoa_r+0xc24>
   18428:	008000c4 	movi	r2,3
   1842c:	113f7e16 	blt	r2,r4,18228 <_dtoa_r+0x8bc>
   18430:	20800704 	addi	r2,r4,28
   18434:	003f7506 	br	1820c <_dtoa_r+0x8a0>
   18438:	d9801717 	ldw	r6,92(sp)
   1843c:	00800044 	movi	r2,1
   18440:	1180a10e 	bge	r2,r6,186c8 <_dtoa_r+0xd5c>
   18444:	d9800f17 	ldw	r6,60(sp)
   18448:	d8c01017 	ldw	r3,64(sp)
   1844c:	30bfffc4 	addi	r2,r6,-1
   18450:	1881c616 	blt	r3,r2,18b6c <_dtoa_r+0x1200>
   18454:	18a5c83a 	sub	r18,r3,r2
   18458:	d8800f17 	ldw	r2,60(sp)
   1845c:	10026216 	blt	r2,zero,18de8 <_dtoa_r+0x147c>
   18460:	dc001117 	ldw	r16,68(sp)
   18464:	1007883a 	mov	r3,r2
   18468:	d9800a17 	ldw	r6,40(sp)
   1846c:	d8801117 	ldw	r2,68(sp)
   18470:	d9001617 	ldw	r4,88(sp)
   18474:	30cd883a 	add	r6,r6,r3
   18478:	10c5883a 	add	r2,r2,r3
   1847c:	01400044 	movi	r5,1
   18480:	d9800a15 	stw	r6,40(sp)
   18484:	d8801115 	stw	r2,68(sp)
   18488:	0019de40 	call	19de4 <__i2b>
   1848c:	1027883a 	mov	r19,r2
   18490:	003f2506 	br	18128 <_dtoa_r+0x7bc>
   18494:	00c000b4 	movhi	r3,2
   18498:	18fc2104 	addi	r3,r3,-3964
   1849c:	003d6706 	br	17a3c <_dtoa_r+0xd0>
   184a0:	dd800517 	ldw	r22,20(sp)
   184a4:	04000044 	movi	r16,1
   184a8:	00000706 	br	184c8 <_dtoa_r+0xb5c>
   184ac:	d9400717 	ldw	r5,28(sp)
   184b0:	d9001617 	ldw	r4,88(sp)
   184b4:	01800284 	movi	r6,10
   184b8:	000f883a 	mov	r7,zero
   184bc:	0019e200 	call	19e20 <__multadd>
   184c0:	d8800715 	stw	r2,28(sp)
   184c4:	84000044 	addi	r16,r16,1
   184c8:	d9000717 	ldw	r4,28(sp)
   184cc:	900b883a 	mov	r5,r18
   184d0:	00177540 	call	17754 <quorem>
   184d4:	15c00c04 	addi	r23,r2,48
   184d8:	b5c00005 	stb	r23,0(r22)
   184dc:	d8c00f17 	ldw	r3,60(sp)
   184e0:	b5800044 	addi	r22,r22,1
   184e4:	80fff116 	blt	r16,r3,184ac <_dtoa_r+0xb40>
   184e8:	d8000615 	stw	zero,24(sp)
   184ec:	d9400717 	ldw	r5,28(sp)
   184f0:	d9001617 	ldw	r4,88(sp)
   184f4:	01800044 	movi	r6,1
   184f8:	0019ab00 	call	19ab0 <__lshift>
   184fc:	1009883a 	mov	r4,r2
   18500:	900b883a 	mov	r5,r18
   18504:	d8800715 	stw	r2,28(sp)
   18508:	00192c80 	call	192c8 <__mcmp>
   1850c:	00803c0e 	bge	zero,r2,18600 <_dtoa_r+0xc94>
   18510:	b009883a 	mov	r4,r22
   18514:	213fffc4 	addi	r4,r4,-1
   18518:	21400003 	ldbu	r5,0(r4)
   1851c:	00800e44 	movi	r2,57
   18520:	28c03fcc 	andi	r3,r5,255
   18524:	18c0201c 	xori	r3,r3,128
   18528:	18ffe004 	addi	r3,r3,-128
   1852c:	1881981e 	bne	r3,r2,18b90 <_dtoa_r+0x1224>
   18530:	d9800517 	ldw	r6,20(sp)
   18534:	21bff71e 	bne	r4,r6,18514 <_dtoa_r+0xba8>
   18538:	d8800d17 	ldw	r2,52(sp)
   1853c:	37000044 	addi	fp,r6,1
   18540:	10800044 	addi	r2,r2,1
   18544:	d8800d15 	stw	r2,52(sp)
   18548:	00800c44 	movi	r2,49
   1854c:	30800005 	stb	r2,0(r6)
   18550:	d9001617 	ldw	r4,88(sp)
   18554:	900b883a 	mov	r5,r18
   18558:	001916c0 	call	1916c <_Bfree>
   1855c:	983ecd26 	beq	r19,zero,18094 <_dtoa_r+0x728>
   18560:	d8c00617 	ldw	r3,24(sp)
   18564:	18000426 	beq	r3,zero,18578 <_dtoa_r+0xc0c>
   18568:	1cc00326 	beq	r3,r19,18578 <_dtoa_r+0xc0c>
   1856c:	d9001617 	ldw	r4,88(sp)
   18570:	180b883a 	mov	r5,r3
   18574:	001916c0 	call	1916c <_Bfree>
   18578:	d9001617 	ldw	r4,88(sp)
   1857c:	980b883a 	mov	r5,r19
   18580:	001916c0 	call	1916c <_Bfree>
   18584:	003ec306 	br	18094 <_dtoa_r+0x728>
   18588:	1805883a 	mov	r2,r3
   1858c:	003eeb06 	br	1813c <_dtoa_r+0x7d0>
   18590:	d9800a17 	ldw	r6,40(sp)
   18594:	d8c01117 	ldw	r3,68(sp)
   18598:	20bfff04 	addi	r2,r4,-4
   1859c:	308d883a 	add	r6,r6,r2
   185a0:	1887883a 	add	r3,r3,r2
   185a4:	80a1883a 	add	r16,r16,r2
   185a8:	d9800a15 	stw	r6,40(sp)
   185ac:	d8c01115 	stw	r3,68(sp)
   185b0:	003f1d06 	br	18228 <_dtoa_r+0x8bc>
   185b4:	a03f0c1e 	bne	r20,zero,181e8 <_dtoa_r+0x87c>
   185b8:	00800434 	movhi	r2,16
   185bc:	10bfffc4 	addi	r2,r2,-1
   185c0:	a884703a 	and	r2,r21,r2
   185c4:	103f081e 	bne	r2,zero,181e8 <_dtoa_r+0x87c>
   185c8:	a89ffc2c 	andhi	r2,r21,32752
   185cc:	103f0626 	beq	r2,zero,181e8 <_dtoa_r+0x87c>
   185d0:	d8c01117 	ldw	r3,68(sp)
   185d4:	d9000a17 	ldw	r4,40(sp)
   185d8:	18c00044 	addi	r3,r3,1
   185dc:	21000044 	addi	r4,r4,1
   185e0:	d8c01115 	stw	r3,68(sp)
   185e4:	d9000a15 	stw	r4,40(sp)
   185e8:	003f0006 	br	181ec <_dtoa_r+0x880>
   185ec:	d9400717 	ldw	r5,28(sp)
   185f0:	d9001617 	ldw	r4,88(sp)
   185f4:	0019f200 	call	19f20 <__pow5mult>
   185f8:	d8800715 	stw	r2,28(sp)
   185fc:	003eed06 	br	181b4 <_dtoa_r+0x848>
   18600:	1000021e 	bne	r2,zero,1860c <_dtoa_r+0xca0>
   18604:	b880004c 	andi	r2,r23,1
   18608:	103fc11e 	bne	r2,zero,18510 <_dtoa_r+0xba4>
   1860c:	b5bfffc4 	addi	r22,r22,-1
   18610:	b0c00007 	ldb	r3,0(r22)
   18614:	00800c04 	movi	r2,48
   18618:	18bffc26 	beq	r3,r2,1860c <_dtoa_r+0xca0>
   1861c:	b7000044 	addi	fp,r22,1
   18620:	003fcb06 	br	18550 <_dtoa_r+0xbe4>
   18624:	d9800d17 	ldw	r6,52(sp)
   18628:	018fc83a 	sub	r7,zero,r6
   1862c:	3801f726 	beq	r7,zero,18e0c <_dtoa_r+0x14a0>
   18630:	398003cc 	andi	r6,r7,15
   18634:	300c90fa 	slli	r6,r6,3
   18638:	014000b4 	movhi	r5,2
   1863c:	297c3e04 	addi	r5,r5,-3848
   18640:	d9001217 	ldw	r4,72(sp)
   18644:	314d883a 	add	r6,r6,r5
   18648:	30c00117 	ldw	r3,4(r6)
   1864c:	30800017 	ldw	r2,0(r6)
   18650:	d9401317 	ldw	r5,76(sp)
   18654:	3821d13a 	srai	r16,r7,4
   18658:	100d883a 	mov	r6,r2
   1865c:	180f883a 	mov	r7,r3
   18660:	001028c0 	call	1028c <__muldf3>
   18664:	1011883a 	mov	r8,r2
   18668:	1813883a 	mov	r9,r3
   1866c:	1029883a 	mov	r20,r2
   18670:	182b883a 	mov	r21,r3
   18674:	8001e526 	beq	r16,zero,18e0c <_dtoa_r+0x14a0>
   18678:	05800084 	movi	r22,2
   1867c:	044000b4 	movhi	r17,2
   18680:	8c7c7004 	addi	r17,r17,-3648
   18684:	8080004c 	andi	r2,r16,1
   18688:	1005003a 	cmpeq	r2,r2,zero
   1868c:	1000081e 	bne	r2,zero,186b0 <_dtoa_r+0xd44>
   18690:	89800017 	ldw	r6,0(r17)
   18694:	89c00117 	ldw	r7,4(r17)
   18698:	480b883a 	mov	r5,r9
   1869c:	4009883a 	mov	r4,r8
   186a0:	001028c0 	call	1028c <__muldf3>
   186a4:	1011883a 	mov	r8,r2
   186a8:	b5800044 	addi	r22,r22,1
   186ac:	1813883a 	mov	r9,r3
   186b0:	8021d07a 	srai	r16,r16,1
   186b4:	8c400204 	addi	r17,r17,8
   186b8:	803ff21e 	bne	r16,zero,18684 <_dtoa_r+0xd18>
   186bc:	4029883a 	mov	r20,r8
   186c0:	482b883a 	mov	r21,r9
   186c4:	003dca06 	br	17df0 <_dtoa_r+0x484>
   186c8:	d9000817 	ldw	r4,32(sp)
   186cc:	2005003a 	cmpeq	r2,r4,zero
   186d0:	1001f61e 	bne	r2,zero,18eac <_dtoa_r+0x1540>
   186d4:	dc001117 	ldw	r16,68(sp)
   186d8:	dc801017 	ldw	r18,64(sp)
   186dc:	18c10cc4 	addi	r3,r3,1075
   186e0:	003f6106 	br	18468 <_dtoa_r+0xafc>
   186e4:	d8000b15 	stw	zero,44(sp)
   186e8:	d9802617 	ldw	r6,152(sp)
   186ec:	d8c00d17 	ldw	r3,52(sp)
   186f0:	30800044 	addi	r2,r6,1
   186f4:	18ad883a 	add	r22,r3,r2
   186f8:	b13fffc4 	addi	r4,r22,-1
   186fc:	d9000e15 	stw	r4,56(sp)
   18700:	0581f60e 	bge	zero,r22,18edc <_dtoa_r+0x1570>
   18704:	dd800f15 	stw	r22,60(sp)
   18708:	003f3006 	br	183cc <_dtoa_r+0xa60>
   1870c:	d8000b15 	stw	zero,44(sp)
   18710:	d9002617 	ldw	r4,152(sp)
   18714:	0101eb0e 	bge	zero,r4,18ec4 <_dtoa_r+0x1558>
   18718:	202d883a 	mov	r22,r4
   1871c:	d9000e15 	stw	r4,56(sp)
   18720:	d9000f15 	stw	r4,60(sp)
   18724:	003f2906 	br	183cc <_dtoa_r+0xa60>
   18728:	01800044 	movi	r6,1
   1872c:	d9800b15 	stw	r6,44(sp)
   18730:	003ff706 	br	18710 <_dtoa_r+0xda4>
   18734:	01000044 	movi	r4,1
   18738:	d9000b15 	stw	r4,44(sp)
   1873c:	003fea06 	br	186e8 <_dtoa_r+0xd7c>
   18740:	04000c0e 	bge	zero,r16,18774 <_dtoa_r+0xe08>
   18744:	d9400717 	ldw	r5,28(sp)
   18748:	d9001617 	ldw	r4,88(sp)
   1874c:	01800044 	movi	r6,1
   18750:	0019ab00 	call	19ab0 <__lshift>
   18754:	1009883a 	mov	r4,r2
   18758:	900b883a 	mov	r5,r18
   1875c:	d8800715 	stw	r2,28(sp)
   18760:	00192c80 	call	192c8 <__mcmp>
   18764:	0081e00e 	bge	zero,r2,18ee8 <_dtoa_r+0x157c>
   18768:	bdc00044 	addi	r23,r23,1
   1876c:	00800e84 	movi	r2,58
   18770:	b881a226 	beq	r23,r2,18dfc <_dtoa_r+0x1490>
   18774:	b7000044 	addi	fp,r22,1
   18778:	b5c00005 	stb	r23,0(r22)
   1877c:	003f7406 	br	18550 <_dtoa_r+0xbe4>
   18780:	00800e44 	movi	r2,57
   18784:	b8819d26 	beq	r23,r2,18dfc <_dtoa_r+0x1490>
   18788:	053ffa0e 	bge	zero,r20,18774 <_dtoa_r+0xe08>
   1878c:	8dc00c44 	addi	r23,r17,49
   18790:	003ff806 	br	18774 <_dtoa_r+0xe08>
   18794:	d9001617 	ldw	r4,88(sp)
   18798:	a80b883a 	mov	r5,r21
   1879c:	04000044 	movi	r16,1
   187a0:	001916c0 	call	1916c <_Bfree>
   187a4:	003edf06 	br	18324 <_dtoa_r+0x9b8>
   187a8:	d9001617 	ldw	r4,88(sp)
   187ac:	980b883a 	mov	r5,r19
   187b0:	01800284 	movi	r6,10
   187b4:	000f883a 	mov	r7,zero
   187b8:	0019e200 	call	19e20 <__multadd>
   187bc:	1027883a 	mov	r19,r2
   187c0:	d8800615 	stw	r2,24(sp)
   187c4:	003ebb06 	br	182b4 <_dtoa_r+0x948>
   187c8:	d9801117 	ldw	r6,68(sp)
   187cc:	d8800d17 	ldw	r2,52(sp)
   187d0:	d8000915 	stw	zero,36(sp)
   187d4:	308dc83a 	sub	r6,r6,r2
   187d8:	0087c83a 	sub	r3,zero,r2
   187dc:	d9801115 	stw	r6,68(sp)
   187e0:	d8c01015 	stw	r3,64(sp)
   187e4:	003cfe06 	br	17be0 <_dtoa_r+0x274>
   187e8:	018dc83a 	sub	r6,zero,r6
   187ec:	d9801115 	stw	r6,68(sp)
   187f0:	d8000a15 	stw	zero,40(sp)
   187f4:	003cf306 	br	17bc4 <_dtoa_r+0x258>
   187f8:	d9000d17 	ldw	r4,52(sp)
   187fc:	00106d80 	call	106d8 <__floatsidf>
   18800:	880b883a 	mov	r5,r17
   18804:	8009883a 	mov	r4,r16
   18808:	180f883a 	mov	r7,r3
   1880c:	100d883a 	mov	r6,r2
   18810:	001b2240 	call	1b224 <__nedf2>
   18814:	103ce126 	beq	r2,zero,17b9c <_dtoa_r+0x230>
   18818:	d9800d17 	ldw	r6,52(sp)
   1881c:	31bfffc4 	addi	r6,r6,-1
   18820:	d9800d15 	stw	r6,52(sp)
   18824:	003cdd06 	br	17b9c <_dtoa_r+0x230>
   18828:	d9000717 	ldw	r4,28(sp)
   1882c:	900b883a 	mov	r5,r18
   18830:	00192c80 	call	192c8 <__mcmp>
   18834:	103e8d0e 	bge	r2,zero,1826c <_dtoa_r+0x900>
   18838:	d9400717 	ldw	r5,28(sp)
   1883c:	d9001617 	ldw	r4,88(sp)
   18840:	01800284 	movi	r6,10
   18844:	000f883a 	mov	r7,zero
   18848:	0019e200 	call	19e20 <__multadd>
   1884c:	d9800d17 	ldw	r6,52(sp)
   18850:	d8800715 	stw	r2,28(sp)
   18854:	31bfffc4 	addi	r6,r6,-1
   18858:	d9800d15 	stw	r6,52(sp)
   1885c:	b001a71e 	bne	r22,zero,18efc <_dtoa_r+0x1590>
   18860:	d8800e17 	ldw	r2,56(sp)
   18864:	d8800f15 	stw	r2,60(sp)
   18868:	003e8006 	br	1826c <_dtoa_r+0x900>
   1886c:	90800417 	ldw	r2,16(r18)
   18870:	1085883a 	add	r2,r2,r2
   18874:	1085883a 	add	r2,r2,r2
   18878:	1485883a 	add	r2,r2,r18
   1887c:	11000417 	ldw	r4,16(r2)
   18880:	00191940 	call	19194 <__hi0bits>
   18884:	00c00804 	movi	r3,32
   18888:	1887c83a 	sub	r3,r3,r2
   1888c:	003e5a06 	br	181f8 <_dtoa_r+0x88c>
   18890:	d9400717 	ldw	r5,28(sp)
   18894:	d9801017 	ldw	r6,64(sp)
   18898:	d9001617 	ldw	r4,88(sp)
   1889c:	0019f200 	call	19f20 <__pow5mult>
   188a0:	d8800715 	stw	r2,28(sp)
   188a4:	003e4306 	br	181b4 <_dtoa_r+0x848>
   188a8:	d9800f17 	ldw	r6,60(sp)
   188ac:	d8800d17 	ldw	r2,52(sp)
   188b0:	d9800315 	stw	r6,12(sp)
   188b4:	d8800415 	stw	r2,16(sp)
   188b8:	d8c00b17 	ldw	r3,44(sp)
   188bc:	1805003a 	cmpeq	r2,r3,zero
   188c0:	1000e21e 	bne	r2,zero,18c4c <_dtoa_r+0x12e0>
   188c4:	d9000317 	ldw	r4,12(sp)
   188c8:	0005883a 	mov	r2,zero
   188cc:	00cff834 	movhi	r3,16352
   188d0:	200c90fa 	slli	r6,r4,3
   188d4:	010000b4 	movhi	r4,2
   188d8:	213c3e04 	addi	r4,r4,-3848
   188dc:	180b883a 	mov	r5,r3
   188e0:	310d883a 	add	r6,r6,r4
   188e4:	327fff17 	ldw	r9,-4(r6)
   188e8:	323ffe17 	ldw	r8,-8(r6)
   188ec:	1009883a 	mov	r4,r2
   188f0:	480f883a 	mov	r7,r9
   188f4:	400d883a 	mov	r6,r8
   188f8:	001af440 	call	1af44 <__divdf3>
   188fc:	180b883a 	mov	r5,r3
   18900:	b00d883a 	mov	r6,r22
   18904:	b80f883a 	mov	r7,r23
   18908:	1009883a 	mov	r4,r2
   1890c:	00101980 	call	10198 <__subdf3>
   18910:	a80b883a 	mov	r5,r21
   18914:	a009883a 	mov	r4,r20
   18918:	d8c01915 	stw	r3,100(sp)
   1891c:	d8801815 	stw	r2,96(sp)
   18920:	00107d00 	call	107d0 <__fixdfsi>
   18924:	1009883a 	mov	r4,r2
   18928:	1027883a 	mov	r19,r2
   1892c:	00106d80 	call	106d8 <__floatsidf>
   18930:	a80b883a 	mov	r5,r21
   18934:	a009883a 	mov	r4,r20
   18938:	180f883a 	mov	r7,r3
   1893c:	100d883a 	mov	r6,r2
   18940:	00101980 	call	10198 <__subdf3>
   18944:	d9801817 	ldw	r6,96(sp)
   18948:	1823883a 	mov	r17,r3
   1894c:	d8801415 	stw	r2,80(sp)
   18950:	302d883a 	mov	r22,r6
   18954:	d9800517 	ldw	r6,20(sp)
   18958:	9cc00c04 	addi	r19,r19,48
   1895c:	dc401515 	stw	r17,84(sp)
   18960:	d8c01917 	ldw	r3,100(sp)
   18964:	34c00005 	stb	r19,0(r6)
   18968:	d8800517 	ldw	r2,20(sp)
   1896c:	d9401917 	ldw	r5,100(sp)
   18970:	d9801417 	ldw	r6,80(sp)
   18974:	b009883a 	mov	r4,r22
   18978:	880f883a 	mov	r7,r17
   1897c:	182f883a 	mov	r23,r3
   18980:	17000044 	addi	fp,r2,1
   18984:	001b2ac0 	call	1b2ac <__gtdf2>
   18988:	00804e16 	blt	zero,r2,18ac4 <_dtoa_r+0x1158>
   1898c:	d9801417 	ldw	r6,80(sp)
   18990:	0005883a 	mov	r2,zero
   18994:	00cffc34 	movhi	r3,16368
   18998:	180b883a 	mov	r5,r3
   1899c:	880f883a 	mov	r7,r17
   189a0:	1009883a 	mov	r4,r2
   189a4:	00101980 	call	10198 <__subdf3>
   189a8:	d9401917 	ldw	r5,100(sp)
   189ac:	180f883a 	mov	r7,r3
   189b0:	b009883a 	mov	r4,r22
   189b4:	100d883a 	mov	r6,r2
   189b8:	001b2ac0 	call	1b2ac <__gtdf2>
   189bc:	00bda216 	blt	zero,r2,18048 <_dtoa_r+0x6dc>
   189c0:	d8c00317 	ldw	r3,12(sp)
   189c4:	00800044 	movi	r2,1
   189c8:	10c01216 	blt	r2,r3,18a14 <_dtoa_r+0x10a8>
   189cc:	003d4506 	br	17ee4 <_dtoa_r+0x578>
   189d0:	d9801417 	ldw	r6,80(sp)
   189d4:	0005883a 	mov	r2,zero
   189d8:	00cffc34 	movhi	r3,16368
   189dc:	180b883a 	mov	r5,r3
   189e0:	880f883a 	mov	r7,r17
   189e4:	1009883a 	mov	r4,r2
   189e8:	00101980 	call	10198 <__subdf3>
   189ec:	d9c01b17 	ldw	r7,108(sp)
   189f0:	180b883a 	mov	r5,r3
   189f4:	1009883a 	mov	r4,r2
   189f8:	b00d883a 	mov	r6,r22
   189fc:	00106500 	call	10650 <__ltdf2>
   18a00:	103d9116 	blt	r2,zero,18048 <_dtoa_r+0x6dc>
   18a04:	d9800517 	ldw	r6,20(sp)
   18a08:	d9000317 	ldw	r4,12(sp)
   18a0c:	3105883a 	add	r2,r6,r4
   18a10:	e0bd3426 	beq	fp,r2,17ee4 <_dtoa_r+0x578>
   18a14:	04500934 	movhi	r17,16420
   18a18:	0021883a 	mov	r16,zero
   18a1c:	b80b883a 	mov	r5,r23
   18a20:	b009883a 	mov	r4,r22
   18a24:	800d883a 	mov	r6,r16
   18a28:	880f883a 	mov	r7,r17
   18a2c:	001028c0 	call	1028c <__muldf3>
   18a30:	d9401517 	ldw	r5,84(sp)
   18a34:	d9001417 	ldw	r4,80(sp)
   18a38:	880f883a 	mov	r7,r17
   18a3c:	000d883a 	mov	r6,zero
   18a40:	d8801a15 	stw	r2,104(sp)
   18a44:	d8c01b15 	stw	r3,108(sp)
   18a48:	001028c0 	call	1028c <__muldf3>
   18a4c:	180b883a 	mov	r5,r3
   18a50:	1009883a 	mov	r4,r2
   18a54:	1823883a 	mov	r17,r3
   18a58:	1021883a 	mov	r16,r2
   18a5c:	00107d00 	call	107d0 <__fixdfsi>
   18a60:	1009883a 	mov	r4,r2
   18a64:	102b883a 	mov	r21,r2
   18a68:	00106d80 	call	106d8 <__floatsidf>
   18a6c:	880b883a 	mov	r5,r17
   18a70:	8009883a 	mov	r4,r16
   18a74:	180f883a 	mov	r7,r3
   18a78:	100d883a 	mov	r6,r2
   18a7c:	00101980 	call	10198 <__subdf3>
   18a80:	1021883a 	mov	r16,r2
   18a84:	d9001b17 	ldw	r4,108(sp)
   18a88:	1823883a 	mov	r17,r3
   18a8c:	dc001415 	stw	r16,80(sp)
   18a90:	ad400c04 	addi	r21,r21,48
   18a94:	dc401515 	stw	r17,84(sp)
   18a98:	d8801a17 	ldw	r2,104(sp)
   18a9c:	e5400005 	stb	r21,0(fp)
   18aa0:	202f883a 	mov	r23,r4
   18aa4:	d9c01b17 	ldw	r7,108(sp)
   18aa8:	d9001417 	ldw	r4,80(sp)
   18aac:	880b883a 	mov	r5,r17
   18ab0:	100d883a 	mov	r6,r2
   18ab4:	102d883a 	mov	r22,r2
   18ab8:	e7000044 	addi	fp,fp,1
   18abc:	00106500 	call	10650 <__ltdf2>
   18ac0:	103fc30e 	bge	r2,zero,189d0 <_dtoa_r+0x1064>
   18ac4:	d9000417 	ldw	r4,16(sp)
   18ac8:	d9000d15 	stw	r4,52(sp)
   18acc:	003d7106 	br	18094 <_dtoa_r+0x728>
   18ad0:	d9801717 	ldw	r6,92(sp)
   18ad4:	00800084 	movi	r2,2
   18ad8:	11bde60e 	bge	r2,r6,18274 <_dtoa_r+0x908>
   18adc:	203cfb1e 	bne	r4,zero,17ecc <_dtoa_r+0x560>
   18ae0:	d9001617 	ldw	r4,88(sp)
   18ae4:	900b883a 	mov	r5,r18
   18ae8:	01800144 	movi	r6,5
   18aec:	000f883a 	mov	r7,zero
   18af0:	0019e200 	call	19e20 <__multadd>
   18af4:	d9000717 	ldw	r4,28(sp)
   18af8:	100b883a 	mov	r5,r2
   18afc:	1025883a 	mov	r18,r2
   18b00:	00192c80 	call	192c8 <__mcmp>
   18b04:	00bcf10e 	bge	zero,r2,17ecc <_dtoa_r+0x560>
   18b08:	d8c00d17 	ldw	r3,52(sp)
   18b0c:	d9000517 	ldw	r4,20(sp)
   18b10:	d8000615 	stw	zero,24(sp)
   18b14:	18c00044 	addi	r3,r3,1
   18b18:	d8c00d15 	stw	r3,52(sp)
   18b1c:	00800c44 	movi	r2,49
   18b20:	27000044 	addi	fp,r4,1
   18b24:	20800005 	stb	r2,0(r4)
   18b28:	003e8906 	br	18550 <_dtoa_r+0xbe4>
   18b2c:	d8c00517 	ldw	r3,20(sp)
   18b30:	003bc206 	br	17a3c <_dtoa_r+0xd0>
   18b34:	018000b4 	movhi	r6,2
   18b38:	31bc7004 	addi	r6,r6,-3648
   18b3c:	30c00917 	ldw	r3,36(r6)
   18b40:	30800817 	ldw	r2,32(r6)
   18b44:	d9001217 	ldw	r4,72(sp)
   18b48:	d9401317 	ldw	r5,76(sp)
   18b4c:	180f883a 	mov	r7,r3
   18b50:	100d883a 	mov	r6,r2
   18b54:	001af440 	call	1af44 <__divdf3>
   18b58:	948003cc 	andi	r18,r18,15
   18b5c:	058000c4 	movi	r22,3
   18b60:	1029883a 	mov	r20,r2
   18b64:	182b883a 	mov	r21,r3
   18b68:	003c8906 	br	17d90 <_dtoa_r+0x424>
   18b6c:	d9001017 	ldw	r4,64(sp)
   18b70:	d9800917 	ldw	r6,36(sp)
   18b74:	0025883a 	mov	r18,zero
   18b78:	1105c83a 	sub	r2,r2,r4
   18b7c:	2089883a 	add	r4,r4,r2
   18b80:	308d883a 	add	r6,r6,r2
   18b84:	d9001015 	stw	r4,64(sp)
   18b88:	d9800915 	stw	r6,36(sp)
   18b8c:	003e3206 	br	18458 <_dtoa_r+0xaec>
   18b90:	28800044 	addi	r2,r5,1
   18b94:	27000044 	addi	fp,r4,1
   18b98:	20800005 	stb	r2,0(r4)
   18b9c:	003e6c06 	br	18550 <_dtoa_r+0xbe4>
   18ba0:	d8800f17 	ldw	r2,60(sp)
   18ba4:	00bce016 	blt	zero,r2,17f28 <_dtoa_r+0x5bc>
   18ba8:	d9800f17 	ldw	r6,60(sp)
   18bac:	303cc51e 	bne	r6,zero,17ec4 <_dtoa_r+0x558>
   18bb0:	0005883a 	mov	r2,zero
   18bb4:	00d00534 	movhi	r3,16404
   18bb8:	980b883a 	mov	r5,r19
   18bbc:	180f883a 	mov	r7,r3
   18bc0:	9009883a 	mov	r4,r18
   18bc4:	100d883a 	mov	r6,r2
   18bc8:	001028c0 	call	1028c <__muldf3>
   18bcc:	180b883a 	mov	r5,r3
   18bd0:	a80f883a 	mov	r7,r21
   18bd4:	1009883a 	mov	r4,r2
   18bd8:	a00d883a 	mov	r6,r20
   18bdc:	001b3340 	call	1b334 <__gedf2>
   18be0:	103cb80e 	bge	r2,zero,17ec4 <_dtoa_r+0x558>
   18be4:	0027883a 	mov	r19,zero
   18be8:	0025883a 	mov	r18,zero
   18bec:	003fc606 	br	18b08 <_dtoa_r+0x119c>
   18bf0:	99400117 	ldw	r5,4(r19)
   18bf4:	d9001617 	ldw	r4,88(sp)
   18bf8:	00196ec0 	call	196ec <_Balloc>
   18bfc:	99800417 	ldw	r6,16(r19)
   18c00:	11000304 	addi	r4,r2,12
   18c04:	99400304 	addi	r5,r19,12
   18c08:	318d883a 	add	r6,r6,r6
   18c0c:	318d883a 	add	r6,r6,r6
   18c10:	31800204 	addi	r6,r6,8
   18c14:	1023883a 	mov	r17,r2
   18c18:	0013e340 	call	13e34 <memcpy>
   18c1c:	d9001617 	ldw	r4,88(sp)
   18c20:	880b883a 	mov	r5,r17
   18c24:	01800044 	movi	r6,1
   18c28:	0019ab00 	call	19ab0 <__lshift>
   18c2c:	100b883a 	mov	r5,r2
   18c30:	003d9c06 	br	182a4 <_dtoa_r+0x938>
   18c34:	00800e44 	movi	r2,57
   18c38:	b8807026 	beq	r23,r2,18dfc <_dtoa_r+0x1490>
   18c3c:	b8800044 	addi	r2,r23,1
   18c40:	b7000044 	addi	fp,r22,1
   18c44:	b0800005 	stb	r2,0(r22)
   18c48:	003e4106 	br	18550 <_dtoa_r+0xbe4>
   18c4c:	d8800317 	ldw	r2,12(sp)
   18c50:	018000b4 	movhi	r6,2
   18c54:	31bc3e04 	addi	r6,r6,-3848
   18c58:	b009883a 	mov	r4,r22
   18c5c:	100e90fa 	slli	r7,r2,3
   18c60:	b80b883a 	mov	r5,r23
   18c64:	398f883a 	add	r7,r7,r6
   18c68:	38bffe17 	ldw	r2,-8(r7)
   18c6c:	d9800517 	ldw	r6,20(sp)
   18c70:	38ffff17 	ldw	r3,-4(r7)
   18c74:	37000044 	addi	fp,r6,1
   18c78:	180f883a 	mov	r7,r3
   18c7c:	100d883a 	mov	r6,r2
   18c80:	001028c0 	call	1028c <__muldf3>
   18c84:	a80b883a 	mov	r5,r21
   18c88:	a009883a 	mov	r4,r20
   18c8c:	182f883a 	mov	r23,r3
   18c90:	102d883a 	mov	r22,r2
   18c94:	00107d00 	call	107d0 <__fixdfsi>
   18c98:	1009883a 	mov	r4,r2
   18c9c:	1027883a 	mov	r19,r2
   18ca0:	00106d80 	call	106d8 <__floatsidf>
   18ca4:	a80b883a 	mov	r5,r21
   18ca8:	a009883a 	mov	r4,r20
   18cac:	180f883a 	mov	r7,r3
   18cb0:	100d883a 	mov	r6,r2
   18cb4:	00101980 	call	10198 <__subdf3>
   18cb8:	180b883a 	mov	r5,r3
   18cbc:	d8c00517 	ldw	r3,20(sp)
   18cc0:	9cc00c04 	addi	r19,r19,48
   18cc4:	1009883a 	mov	r4,r2
   18cc8:	1cc00005 	stb	r19,0(r3)
   18ccc:	2021883a 	mov	r16,r4
   18cd0:	d9000317 	ldw	r4,12(sp)
   18cd4:	00800044 	movi	r2,1
   18cd8:	2823883a 	mov	r17,r5
   18cdc:	20802226 	beq	r4,r2,18d68 <_dtoa_r+0x13fc>
   18ce0:	1029883a 	mov	r20,r2
   18ce4:	0005883a 	mov	r2,zero
   18ce8:	00d00934 	movhi	r3,16420
   18cec:	180f883a 	mov	r7,r3
   18cf0:	100d883a 	mov	r6,r2
   18cf4:	880b883a 	mov	r5,r17
   18cf8:	8009883a 	mov	r4,r16
   18cfc:	001028c0 	call	1028c <__muldf3>
   18d00:	180b883a 	mov	r5,r3
   18d04:	1009883a 	mov	r4,r2
   18d08:	1823883a 	mov	r17,r3
   18d0c:	1021883a 	mov	r16,r2
   18d10:	00107d00 	call	107d0 <__fixdfsi>
   18d14:	1009883a 	mov	r4,r2
   18d18:	102b883a 	mov	r21,r2
   18d1c:	00106d80 	call	106d8 <__floatsidf>
   18d20:	880b883a 	mov	r5,r17
   18d24:	8009883a 	mov	r4,r16
   18d28:	180f883a 	mov	r7,r3
   18d2c:	100d883a 	mov	r6,r2
   18d30:	00101980 	call	10198 <__subdf3>
   18d34:	180b883a 	mov	r5,r3
   18d38:	d8c00517 	ldw	r3,20(sp)
   18d3c:	1009883a 	mov	r4,r2
   18d40:	ad400c04 	addi	r21,r21,48
   18d44:	1d05883a 	add	r2,r3,r20
   18d48:	15400005 	stb	r21,0(r2)
   18d4c:	2021883a 	mov	r16,r4
   18d50:	d9000317 	ldw	r4,12(sp)
   18d54:	a5000044 	addi	r20,r20,1
   18d58:	2823883a 	mov	r17,r5
   18d5c:	a13fe11e 	bne	r20,r4,18ce4 <_dtoa_r+0x1378>
   18d60:	e505883a 	add	r2,fp,r20
   18d64:	173fffc4 	addi	fp,r2,-1
   18d68:	0025883a 	mov	r18,zero
   18d6c:	04cff834 	movhi	r19,16352
   18d70:	b009883a 	mov	r4,r22
   18d74:	b80b883a 	mov	r5,r23
   18d78:	900d883a 	mov	r6,r18
   18d7c:	980f883a 	mov	r7,r19
   18d80:	00102180 	call	10218 <__adddf3>
   18d84:	180b883a 	mov	r5,r3
   18d88:	1009883a 	mov	r4,r2
   18d8c:	800d883a 	mov	r6,r16
   18d90:	880f883a 	mov	r7,r17
   18d94:	00106500 	call	10650 <__ltdf2>
   18d98:	103cab16 	blt	r2,zero,18048 <_dtoa_r+0x6dc>
   18d9c:	0009883a 	mov	r4,zero
   18da0:	980b883a 	mov	r5,r19
   18da4:	b80f883a 	mov	r7,r23
   18da8:	b00d883a 	mov	r6,r22
   18dac:	00101980 	call	10198 <__subdf3>
   18db0:	180b883a 	mov	r5,r3
   18db4:	880f883a 	mov	r7,r17
   18db8:	1009883a 	mov	r4,r2
   18dbc:	800d883a 	mov	r6,r16
   18dc0:	001b2ac0 	call	1b2ac <__gtdf2>
   18dc4:	00bc470e 	bge	zero,r2,17ee4 <_dtoa_r+0x578>
   18dc8:	00c00c04 	movi	r3,48
   18dcc:	e73fffc4 	addi	fp,fp,-1
   18dd0:	e0800007 	ldb	r2,0(fp)
   18dd4:	10fffd26 	beq	r2,r3,18dcc <_dtoa_r+0x1460>
   18dd8:	d9800417 	ldw	r6,16(sp)
   18ddc:	e7000044 	addi	fp,fp,1
   18de0:	d9800d15 	stw	r6,52(sp)
   18de4:	003cab06 	br	18094 <_dtoa_r+0x728>
   18de8:	d8c00f17 	ldw	r3,60(sp)
   18dec:	d9001117 	ldw	r4,68(sp)
   18df0:	20e1c83a 	sub	r16,r4,r3
   18df4:	0007883a 	mov	r3,zero
   18df8:	003d9b06 	br	18468 <_dtoa_r+0xafc>
   18dfc:	00800e44 	movi	r2,57
   18e00:	b0800005 	stb	r2,0(r22)
   18e04:	b5800044 	addi	r22,r22,1
   18e08:	003dc106 	br	18510 <_dtoa_r+0xba4>
   18e0c:	05800084 	movi	r22,2
   18e10:	003bf706 	br	17df0 <_dtoa_r+0x484>
   18e14:	d9000f17 	ldw	r4,60(sp)
   18e18:	013c000e 	bge	zero,r4,17e1c <_dtoa_r+0x4b0>
   18e1c:	d9800e17 	ldw	r6,56(sp)
   18e20:	01bc300e 	bge	zero,r6,17ee4 <_dtoa_r+0x578>
   18e24:	0005883a 	mov	r2,zero
   18e28:	00d00934 	movhi	r3,16420
   18e2c:	a80b883a 	mov	r5,r21
   18e30:	180f883a 	mov	r7,r3
   18e34:	a009883a 	mov	r4,r20
   18e38:	100d883a 	mov	r6,r2
   18e3c:	001028c0 	call	1028c <__muldf3>
   18e40:	b1000044 	addi	r4,r22,1
   18e44:	1021883a 	mov	r16,r2
   18e48:	1823883a 	mov	r17,r3
   18e4c:	00106d80 	call	106d8 <__floatsidf>
   18e50:	880b883a 	mov	r5,r17
   18e54:	8009883a 	mov	r4,r16
   18e58:	180f883a 	mov	r7,r3
   18e5c:	100d883a 	mov	r6,r2
   18e60:	001028c0 	call	1028c <__muldf3>
   18e64:	0011883a 	mov	r8,zero
   18e68:	02500734 	movhi	r9,16412
   18e6c:	180b883a 	mov	r5,r3
   18e70:	480f883a 	mov	r7,r9
   18e74:	1009883a 	mov	r4,r2
   18e78:	400d883a 	mov	r6,r8
   18e7c:	00102180 	call	10218 <__adddf3>
   18e80:	102d883a 	mov	r22,r2
   18e84:	00bf3034 	movhi	r2,64704
   18e88:	10ef883a 	add	r23,r2,r3
   18e8c:	d8800d17 	ldw	r2,52(sp)
   18e90:	d8c00e17 	ldw	r3,56(sp)
   18e94:	8029883a 	mov	r20,r16
   18e98:	10bfffc4 	addi	r2,r2,-1
   18e9c:	882b883a 	mov	r21,r17
   18ea0:	d8800415 	stw	r2,16(sp)
   18ea4:	d8c00315 	stw	r3,12(sp)
   18ea8:	003e8306 	br	188b8 <_dtoa_r+0xf4c>
   18eac:	d8800117 	ldw	r2,4(sp)
   18eb0:	dc001117 	ldw	r16,68(sp)
   18eb4:	dc801017 	ldw	r18,64(sp)
   18eb8:	00c00d84 	movi	r3,54
   18ebc:	1887c83a 	sub	r3,r3,r2
   18ec0:	003d6906 	br	18468 <_dtoa_r+0xafc>
   18ec4:	01800044 	movi	r6,1
   18ec8:	3021883a 	mov	r16,r6
   18ecc:	d9800f15 	stw	r6,60(sp)
   18ed0:	d9802615 	stw	r6,152(sp)
   18ed4:	d9800e15 	stw	r6,56(sp)
   18ed8:	003b9306 	br	17d28 <_dtoa_r+0x3bc>
   18edc:	b021883a 	mov	r16,r22
   18ee0:	dd800f15 	stw	r22,60(sp)
   18ee4:	003b9006 	br	17d28 <_dtoa_r+0x3bc>
   18ee8:	103e221e 	bne	r2,zero,18774 <_dtoa_r+0xe08>
   18eec:	b880004c 	andi	r2,r23,1
   18ef0:	1005003a 	cmpeq	r2,r2,zero
   18ef4:	103e1f1e 	bne	r2,zero,18774 <_dtoa_r+0xe08>
   18ef8:	003e1b06 	br	18768 <_dtoa_r+0xdfc>
   18efc:	d9001617 	ldw	r4,88(sp)
   18f00:	980b883a 	mov	r5,r19
   18f04:	01800284 	movi	r6,10
   18f08:	000f883a 	mov	r7,zero
   18f0c:	0019e200 	call	19e20 <__multadd>
   18f10:	d8c00e17 	ldw	r3,56(sp)
   18f14:	1027883a 	mov	r19,r2
   18f18:	d8c00f15 	stw	r3,60(sp)
   18f1c:	003cd306 	br	1826c <_dtoa_r+0x900>

00018f20 <__sflags>:
   18f20:	28c00007 	ldb	r3,0(r5)
   18f24:	00801c84 	movi	r2,114
   18f28:	18800926 	beq	r3,r2,18f50 <__sflags+0x30>
   18f2c:	00801dc4 	movi	r2,119
   18f30:	18801426 	beq	r3,r2,18f84 <__sflags+0x64>
   18f34:	00801844 	movi	r2,97
   18f38:	18801626 	beq	r3,r2,18f94 <__sflags+0x74>
   18f3c:	0007883a 	mov	r3,zero
   18f40:	00800584 	movi	r2,22
   18f44:	20800015 	stw	r2,0(r4)
   18f48:	1805883a 	mov	r2,r3
   18f4c:	f800283a 	ret
   18f50:	000f883a 	mov	r7,zero
   18f54:	0011883a 	mov	r8,zero
   18f58:	00c00104 	movi	r3,4
   18f5c:	28800047 	ldb	r2,1(r5)
   18f60:	10000426 	beq	r2,zero,18f74 <__sflags+0x54>
   18f64:	01000ac4 	movi	r4,43
   18f68:	11000e26 	beq	r2,r4,18fa4 <__sflags+0x84>
   18f6c:	28800087 	ldb	r2,2(r5)
   18f70:	11000c26 	beq	r2,r4,18fa4 <__sflags+0x84>
   18f74:	3a04b03a 	or	r2,r7,r8
   18f78:	30800015 	stw	r2,0(r6)
   18f7c:	1805883a 	mov	r2,r3
   18f80:	f800283a 	ret
   18f84:	01c00044 	movi	r7,1
   18f88:	02018004 	movi	r8,1536
   18f8c:	00c00204 	movi	r3,8
   18f90:	003ff206 	br	18f5c <__sflags+0x3c>
   18f94:	01c00044 	movi	r7,1
   18f98:	02008204 	movi	r8,520
   18f9c:	00c04204 	movi	r3,264
   18fa0:	003fee06 	br	18f5c <__sflags+0x3c>
   18fa4:	00bffcc4 	movi	r2,-13
   18fa8:	1884703a 	and	r2,r3,r2
   18fac:	01c00084 	movi	r7,2
   18fb0:	10c00414 	ori	r3,r2,16
   18fb4:	3a04b03a 	or	r2,r7,r8
   18fb8:	30800015 	stw	r2,0(r6)
   18fbc:	003fef06 	br	18f7c <__sflags+0x5c>

00018fc0 <_isatty_r>:
   18fc0:	defffd04 	addi	sp,sp,-12
   18fc4:	dc000015 	stw	r16,0(sp)
   18fc8:	040000b4 	movhi	r16,2
   18fcc:	840a1704 	addi	r16,r16,10332
   18fd0:	dc400115 	stw	r17,4(sp)
   18fd4:	80000015 	stw	zero,0(r16)
   18fd8:	2023883a 	mov	r17,r4
   18fdc:	2809883a 	mov	r4,r5
   18fe0:	dfc00215 	stw	ra,8(sp)
   18fe4:	001b88c0 	call	1b88c <isatty>
   18fe8:	1007883a 	mov	r3,r2
   18fec:	00bfffc4 	movi	r2,-1
   18ff0:	18800626 	beq	r3,r2,1900c <_isatty_r+0x4c>
   18ff4:	1805883a 	mov	r2,r3
   18ff8:	dfc00217 	ldw	ra,8(sp)
   18ffc:	dc400117 	ldw	r17,4(sp)
   19000:	dc000017 	ldw	r16,0(sp)
   19004:	dec00304 	addi	sp,sp,12
   19008:	f800283a 	ret
   1900c:	80800017 	ldw	r2,0(r16)
   19010:	103ff826 	beq	r2,zero,18ff4 <_isatty_r+0x34>
   19014:	88800015 	stw	r2,0(r17)
   19018:	1805883a 	mov	r2,r3
   1901c:	dfc00217 	ldw	ra,8(sp)
   19020:	dc400117 	ldw	r17,4(sp)
   19024:	dc000017 	ldw	r16,0(sp)
   19028:	dec00304 	addi	sp,sp,12
   1902c:	f800283a 	ret

00019030 <__locale_charset>:
   19030:	d0a01017 	ldw	r2,-32704(gp)
   19034:	f800283a 	ret

00019038 <_localeconv_r>:
   19038:	008000b4 	movhi	r2,2
   1903c:	10bc3204 	addi	r2,r2,-3896
   19040:	f800283a 	ret

00019044 <localeconv>:
   19044:	008000b4 	movhi	r2,2
   19048:	10833f04 	addi	r2,r2,3324
   1904c:	11000017 	ldw	r4,0(r2)
   19050:	00190381 	jmpi	19038 <_localeconv_r>

00019054 <_setlocale_r>:
   19054:	defffc04 	addi	sp,sp,-16
   19058:	00c000b4 	movhi	r3,2
   1905c:	18fc0804 	addi	r3,r3,-4064
   19060:	dc800215 	stw	r18,8(sp)
   19064:	dc400115 	stw	r17,4(sp)
   19068:	dc000015 	stw	r16,0(sp)
   1906c:	2023883a 	mov	r17,r4
   19070:	2825883a 	mov	r18,r5
   19074:	dfc00315 	stw	ra,12(sp)
   19078:	3021883a 	mov	r16,r6
   1907c:	3009883a 	mov	r4,r6
   19080:	180b883a 	mov	r5,r3
   19084:	30000926 	beq	r6,zero,190ac <_setlocale_r+0x58>
   19088:	001a2480 	call	1a248 <strcmp>
   1908c:	8009883a 	mov	r4,r16
   19090:	014000b4 	movhi	r5,2
   19094:	297c1904 	addi	r5,r5,-3996
   19098:	10000b1e 	bne	r2,zero,190c8 <_setlocale_r+0x74>
   1909c:	8c000d15 	stw	r16,52(r17)
   190a0:	8c800c15 	stw	r18,48(r17)
   190a4:	00c000b4 	movhi	r3,2
   190a8:	18fc0804 	addi	r3,r3,-4064
   190ac:	1805883a 	mov	r2,r3
   190b0:	dfc00317 	ldw	ra,12(sp)
   190b4:	dc800217 	ldw	r18,8(sp)
   190b8:	dc400117 	ldw	r17,4(sp)
   190bc:	dc000017 	ldw	r16,0(sp)
   190c0:	dec00404 	addi	sp,sp,16
   190c4:	f800283a 	ret
   190c8:	001a2480 	call	1a248 <strcmp>
   190cc:	0007883a 	mov	r3,zero
   190d0:	103ff226 	beq	r2,zero,1909c <_setlocale_r+0x48>
   190d4:	003ff506 	br	190ac <_setlocale_r+0x58>

000190d8 <setlocale>:
   190d8:	018000b4 	movhi	r6,2
   190dc:	31833f04 	addi	r6,r6,3324
   190e0:	2007883a 	mov	r3,r4
   190e4:	31000017 	ldw	r4,0(r6)
   190e8:	280d883a 	mov	r6,r5
   190ec:	180b883a 	mov	r5,r3
   190f0:	00190541 	jmpi	19054 <_setlocale_r>

000190f4 <_lseek_r>:
   190f4:	defffd04 	addi	sp,sp,-12
   190f8:	dc000015 	stw	r16,0(sp)
   190fc:	040000b4 	movhi	r16,2
   19100:	840a1704 	addi	r16,r16,10332
   19104:	dc400115 	stw	r17,4(sp)
   19108:	80000015 	stw	zero,0(r16)
   1910c:	2023883a 	mov	r17,r4
   19110:	2809883a 	mov	r4,r5
   19114:	300b883a 	mov	r5,r6
   19118:	380d883a 	mov	r6,r7
   1911c:	dfc00215 	stw	ra,8(sp)
   19120:	001bc380 	call	1bc38 <lseek>
   19124:	1007883a 	mov	r3,r2
   19128:	00bfffc4 	movi	r2,-1
   1912c:	18800626 	beq	r3,r2,19148 <_lseek_r+0x54>
   19130:	1805883a 	mov	r2,r3
   19134:	dfc00217 	ldw	ra,8(sp)
   19138:	dc400117 	ldw	r17,4(sp)
   1913c:	dc000017 	ldw	r16,0(sp)
   19140:	dec00304 	addi	sp,sp,12
   19144:	f800283a 	ret
   19148:	80800017 	ldw	r2,0(r16)
   1914c:	103ff826 	beq	r2,zero,19130 <_lseek_r+0x3c>
   19150:	88800015 	stw	r2,0(r17)
   19154:	1805883a 	mov	r2,r3
   19158:	dfc00217 	ldw	ra,8(sp)
   1915c:	dc400117 	ldw	r17,4(sp)
   19160:	dc000017 	ldw	r16,0(sp)
   19164:	dec00304 	addi	sp,sp,12
   19168:	f800283a 	ret

0001916c <_Bfree>:
   1916c:	28000826 	beq	r5,zero,19190 <_Bfree+0x24>
   19170:	28800117 	ldw	r2,4(r5)
   19174:	21001317 	ldw	r4,76(r4)
   19178:	1085883a 	add	r2,r2,r2
   1917c:	1085883a 	add	r2,r2,r2
   19180:	1105883a 	add	r2,r2,r4
   19184:	10c00017 	ldw	r3,0(r2)
   19188:	28c00015 	stw	r3,0(r5)
   1918c:	11400015 	stw	r5,0(r2)
   19190:	f800283a 	ret

00019194 <__hi0bits>:
   19194:	20bfffec 	andhi	r2,r4,65535
   19198:	10001426 	beq	r2,zero,191ec <__hi0bits+0x58>
   1919c:	0007883a 	mov	r3,zero
   191a0:	20bfc02c 	andhi	r2,r4,65280
   191a4:	1000021e 	bne	r2,zero,191b0 <__hi0bits+0x1c>
   191a8:	2008923a 	slli	r4,r4,8
   191ac:	18c00204 	addi	r3,r3,8
   191b0:	20bc002c 	andhi	r2,r4,61440
   191b4:	1000021e 	bne	r2,zero,191c0 <__hi0bits+0x2c>
   191b8:	2008913a 	slli	r4,r4,4
   191bc:	18c00104 	addi	r3,r3,4
   191c0:	20b0002c 	andhi	r2,r4,49152
   191c4:	1000031e 	bne	r2,zero,191d4 <__hi0bits+0x40>
   191c8:	2105883a 	add	r2,r4,r4
   191cc:	18c00084 	addi	r3,r3,2
   191d0:	1089883a 	add	r4,r2,r2
   191d4:	20000316 	blt	r4,zero,191e4 <__hi0bits+0x50>
   191d8:	2090002c 	andhi	r2,r4,16384
   191dc:	10000626 	beq	r2,zero,191f8 <__hi0bits+0x64>
   191e0:	18c00044 	addi	r3,r3,1
   191e4:	1805883a 	mov	r2,r3
   191e8:	f800283a 	ret
   191ec:	2008943a 	slli	r4,r4,16
   191f0:	00c00404 	movi	r3,16
   191f4:	003fea06 	br	191a0 <__hi0bits+0xc>
   191f8:	00c00804 	movi	r3,32
   191fc:	1805883a 	mov	r2,r3
   19200:	f800283a 	ret

00019204 <__lo0bits>:
   19204:	20c00017 	ldw	r3,0(r4)
   19208:	188001cc 	andi	r2,r3,7
   1920c:	10000a26 	beq	r2,zero,19238 <__lo0bits+0x34>
   19210:	1880004c 	andi	r2,r3,1
   19214:	1005003a 	cmpeq	r2,r2,zero
   19218:	10002126 	beq	r2,zero,192a0 <__lo0bits+0x9c>
   1921c:	1880008c 	andi	r2,r3,2
   19220:	1000251e 	bne	r2,zero,192b8 <__lo0bits+0xb4>
   19224:	1804d0ba 	srli	r2,r3,2
   19228:	01400084 	movi	r5,2
   1922c:	20800015 	stw	r2,0(r4)
   19230:	2805883a 	mov	r2,r5
   19234:	f800283a 	ret
   19238:	18bfffcc 	andi	r2,r3,65535
   1923c:	10001526 	beq	r2,zero,19294 <__lo0bits+0x90>
   19240:	000b883a 	mov	r5,zero
   19244:	18803fcc 	andi	r2,r3,255
   19248:	1000021e 	bne	r2,zero,19254 <__lo0bits+0x50>
   1924c:	1806d23a 	srli	r3,r3,8
   19250:	29400204 	addi	r5,r5,8
   19254:	188003cc 	andi	r2,r3,15
   19258:	1000021e 	bne	r2,zero,19264 <__lo0bits+0x60>
   1925c:	1806d13a 	srli	r3,r3,4
   19260:	29400104 	addi	r5,r5,4
   19264:	188000cc 	andi	r2,r3,3
   19268:	1000021e 	bne	r2,zero,19274 <__lo0bits+0x70>
   1926c:	1806d0ba 	srli	r3,r3,2
   19270:	29400084 	addi	r5,r5,2
   19274:	1880004c 	andi	r2,r3,1
   19278:	1000031e 	bne	r2,zero,19288 <__lo0bits+0x84>
   1927c:	1806d07a 	srli	r3,r3,1
   19280:	18000a26 	beq	r3,zero,192ac <__lo0bits+0xa8>
   19284:	29400044 	addi	r5,r5,1
   19288:	2805883a 	mov	r2,r5
   1928c:	20c00015 	stw	r3,0(r4)
   19290:	f800283a 	ret
   19294:	1806d43a 	srli	r3,r3,16
   19298:	01400404 	movi	r5,16
   1929c:	003fe906 	br	19244 <__lo0bits+0x40>
   192a0:	000b883a 	mov	r5,zero
   192a4:	2805883a 	mov	r2,r5
   192a8:	f800283a 	ret
   192ac:	01400804 	movi	r5,32
   192b0:	2805883a 	mov	r2,r5
   192b4:	f800283a 	ret
   192b8:	1804d07a 	srli	r2,r3,1
   192bc:	01400044 	movi	r5,1
   192c0:	20800015 	stw	r2,0(r4)
   192c4:	003fda06 	br	19230 <__lo0bits+0x2c>

000192c8 <__mcmp>:
   192c8:	20800417 	ldw	r2,16(r4)
   192cc:	28c00417 	ldw	r3,16(r5)
   192d0:	10cfc83a 	sub	r7,r2,r3
   192d4:	38000c1e 	bne	r7,zero,19308 <__mcmp+0x40>
   192d8:	18c5883a 	add	r2,r3,r3
   192dc:	1085883a 	add	r2,r2,r2
   192e0:	10c00504 	addi	r3,r2,20
   192e4:	21000504 	addi	r4,r4,20
   192e8:	28cb883a 	add	r5,r5,r3
   192ec:	2085883a 	add	r2,r4,r2
   192f0:	10bfff04 	addi	r2,r2,-4
   192f4:	297fff04 	addi	r5,r5,-4
   192f8:	11800017 	ldw	r6,0(r2)
   192fc:	28c00017 	ldw	r3,0(r5)
   19300:	30c0031e 	bne	r6,r3,19310 <__mcmp+0x48>
   19304:	20bffa36 	bltu	r4,r2,192f0 <__mcmp+0x28>
   19308:	3805883a 	mov	r2,r7
   1930c:	f800283a 	ret
   19310:	30c00336 	bltu	r6,r3,19320 <__mcmp+0x58>
   19314:	01c00044 	movi	r7,1
   19318:	3805883a 	mov	r2,r7
   1931c:	f800283a 	ret
   19320:	01ffffc4 	movi	r7,-1
   19324:	003ff806 	br	19308 <__mcmp+0x40>

00019328 <__ulp>:
   19328:	295ffc2c 	andhi	r5,r5,32752
   1932c:	013f3034 	movhi	r4,64704
   19330:	290b883a 	add	r5,r5,r4
   19334:	0145c83a 	sub	r2,zero,r5
   19338:	1007d53a 	srai	r3,r2,20
   1933c:	000d883a 	mov	r6,zero
   19340:	0140040e 	bge	zero,r5,19354 <__ulp+0x2c>
   19344:	280f883a 	mov	r7,r5
   19348:	3807883a 	mov	r3,r7
   1934c:	3005883a 	mov	r2,r6
   19350:	f800283a 	ret
   19354:	008004c4 	movi	r2,19
   19358:	193ffb04 	addi	r4,r3,-20
   1935c:	10c00c0e 	bge	r2,r3,19390 <__ulp+0x68>
   19360:	008007c4 	movi	r2,31
   19364:	1107c83a 	sub	r3,r2,r4
   19368:	00800784 	movi	r2,30
   1936c:	01400044 	movi	r5,1
   19370:	11000216 	blt	r2,r4,1937c <__ulp+0x54>
   19374:	00800044 	movi	r2,1
   19378:	10ca983a 	sll	r5,r2,r3
   1937c:	000f883a 	mov	r7,zero
   19380:	280d883a 	mov	r6,r5
   19384:	3807883a 	mov	r3,r7
   19388:	3005883a 	mov	r2,r6
   1938c:	f800283a 	ret
   19390:	00800234 	movhi	r2,8
   19394:	10cfd83a 	sra	r7,r2,r3
   19398:	000d883a 	mov	r6,zero
   1939c:	3005883a 	mov	r2,r6
   193a0:	3807883a 	mov	r3,r7
   193a4:	f800283a 	ret

000193a8 <__b2d>:
   193a8:	20800417 	ldw	r2,16(r4)
   193ac:	defff904 	addi	sp,sp,-28
   193b0:	dd000415 	stw	r20,16(sp)
   193b4:	1085883a 	add	r2,r2,r2
   193b8:	25000504 	addi	r20,r4,20
   193bc:	1085883a 	add	r2,r2,r2
   193c0:	dc000015 	stw	r16,0(sp)
   193c4:	a0a1883a 	add	r16,r20,r2
   193c8:	dd400515 	stw	r21,20(sp)
   193cc:	857fff17 	ldw	r21,-4(r16)
   193d0:	dc400115 	stw	r17,4(sp)
   193d4:	dfc00615 	stw	ra,24(sp)
   193d8:	a809883a 	mov	r4,r21
   193dc:	2823883a 	mov	r17,r5
   193e0:	dcc00315 	stw	r19,12(sp)
   193e4:	dc800215 	stw	r18,8(sp)
   193e8:	00191940 	call	19194 <__hi0bits>
   193ec:	100b883a 	mov	r5,r2
   193f0:	00800804 	movi	r2,32
   193f4:	1145c83a 	sub	r2,r2,r5
   193f8:	88800015 	stw	r2,0(r17)
   193fc:	00800284 	movi	r2,10
   19400:	80ffff04 	addi	r3,r16,-4
   19404:	11401416 	blt	r2,r5,19458 <__b2d+0xb0>
   19408:	008002c4 	movi	r2,11
   1940c:	1149c83a 	sub	r4,r2,r5
   19410:	a0c02736 	bltu	r20,r3,194b0 <__b2d+0x108>
   19414:	000d883a 	mov	r6,zero
   19418:	28800544 	addi	r2,r5,21
   1941c:	a906d83a 	srl	r3,r21,r4
   19420:	a884983a 	sll	r2,r21,r2
   19424:	1ccffc34 	orhi	r19,r3,16368
   19428:	11a4b03a 	or	r18,r2,r6
   1942c:	9005883a 	mov	r2,r18
   19430:	9807883a 	mov	r3,r19
   19434:	dfc00617 	ldw	ra,24(sp)
   19438:	dd400517 	ldw	r21,20(sp)
   1943c:	dd000417 	ldw	r20,16(sp)
   19440:	dcc00317 	ldw	r19,12(sp)
   19444:	dc800217 	ldw	r18,8(sp)
   19448:	dc400117 	ldw	r17,4(sp)
   1944c:	dc000017 	ldw	r16,0(sp)
   19450:	dec00704 	addi	sp,sp,28
   19454:	f800283a 	ret
   19458:	a0c00e36 	bltu	r20,r3,19494 <__b2d+0xec>
   1945c:	293ffd44 	addi	r4,r5,-11
   19460:	000d883a 	mov	r6,zero
   19464:	20000f26 	beq	r4,zero,194a4 <__b2d+0xfc>
   19468:	00800804 	movi	r2,32
   1946c:	110bc83a 	sub	r5,r2,r4
   19470:	a0c01236 	bltu	r20,r3,194bc <__b2d+0x114>
   19474:	000f883a 	mov	r7,zero
   19478:	a904983a 	sll	r2,r21,r4
   1947c:	3146d83a 	srl	r3,r6,r5
   19480:	3108983a 	sll	r4,r6,r4
   19484:	108ffc34 	orhi	r2,r2,16368
   19488:	18a6b03a 	or	r19,r3,r2
   1948c:	3924b03a 	or	r18,r7,r4
   19490:	003fe606 	br	1942c <__b2d+0x84>
   19494:	293ffd44 	addi	r4,r5,-11
   19498:	81bffe17 	ldw	r6,-8(r16)
   1949c:	80fffe04 	addi	r3,r16,-8
   194a0:	203ff11e 	bne	r4,zero,19468 <__b2d+0xc0>
   194a4:	accffc34 	orhi	r19,r21,16368
   194a8:	3025883a 	mov	r18,r6
   194ac:	003fdf06 	br	1942c <__b2d+0x84>
   194b0:	18bfff17 	ldw	r2,-4(r3)
   194b4:	110cd83a 	srl	r6,r2,r4
   194b8:	003fd706 	br	19418 <__b2d+0x70>
   194bc:	18bfff17 	ldw	r2,-4(r3)
   194c0:	114ed83a 	srl	r7,r2,r5
   194c4:	003fec06 	br	19478 <__b2d+0xd0>

000194c8 <__ratio>:
   194c8:	defff904 	addi	sp,sp,-28
   194cc:	dc400215 	stw	r17,8(sp)
   194d0:	2823883a 	mov	r17,r5
   194d4:	d80b883a 	mov	r5,sp
   194d8:	dfc00615 	stw	ra,24(sp)
   194dc:	dd000515 	stw	r20,20(sp)
   194e0:	dcc00415 	stw	r19,16(sp)
   194e4:	dc800315 	stw	r18,12(sp)
   194e8:	2025883a 	mov	r18,r4
   194ec:	00193a80 	call	193a8 <__b2d>
   194f0:	8809883a 	mov	r4,r17
   194f4:	d9400104 	addi	r5,sp,4
   194f8:	1027883a 	mov	r19,r2
   194fc:	1829883a 	mov	r20,r3
   19500:	00193a80 	call	193a8 <__b2d>
   19504:	89000417 	ldw	r4,16(r17)
   19508:	91c00417 	ldw	r7,16(r18)
   1950c:	d9800117 	ldw	r6,4(sp)
   19510:	180b883a 	mov	r5,r3
   19514:	390fc83a 	sub	r7,r7,r4
   19518:	1009883a 	mov	r4,r2
   1951c:	d8800017 	ldw	r2,0(sp)
   19520:	380e917a 	slli	r7,r7,5
   19524:	2011883a 	mov	r8,r4
   19528:	1185c83a 	sub	r2,r2,r6
   1952c:	11c5883a 	add	r2,r2,r7
   19530:	1006953a 	slli	r3,r2,20
   19534:	2813883a 	mov	r9,r5
   19538:	00800d0e 	bge	zero,r2,19570 <__ratio+0xa8>
   1953c:	1d29883a 	add	r20,r3,r20
   19540:	a00b883a 	mov	r5,r20
   19544:	480f883a 	mov	r7,r9
   19548:	9809883a 	mov	r4,r19
   1954c:	400d883a 	mov	r6,r8
   19550:	001af440 	call	1af44 <__divdf3>
   19554:	dfc00617 	ldw	ra,24(sp)
   19558:	dd000517 	ldw	r20,20(sp)
   1955c:	dcc00417 	ldw	r19,16(sp)
   19560:	dc800317 	ldw	r18,12(sp)
   19564:	dc400217 	ldw	r17,8(sp)
   19568:	dec00704 	addi	sp,sp,28
   1956c:	f800283a 	ret
   19570:	28d3c83a 	sub	r9,r5,r3
   19574:	003ff206 	br	19540 <__ratio+0x78>

00019578 <_mprec_log10>:
   19578:	defffe04 	addi	sp,sp,-8
   1957c:	008005c4 	movi	r2,23
   19580:	dc000015 	stw	r16,0(sp)
   19584:	dfc00115 	stw	ra,4(sp)
   19588:	2021883a 	mov	r16,r4
   1958c:	11000c16 	blt	r2,r4,195c0 <_mprec_log10+0x48>
   19590:	200490fa 	slli	r2,r4,3
   19594:	00c000b4 	movhi	r3,2
   19598:	18fc3e04 	addi	r3,r3,-3848
   1959c:	10c5883a 	add	r2,r2,r3
   195a0:	12400117 	ldw	r9,4(r2)
   195a4:	12000017 	ldw	r8,0(r2)
   195a8:	4807883a 	mov	r3,r9
   195ac:	4005883a 	mov	r2,r8
   195b0:	dfc00117 	ldw	ra,4(sp)
   195b4:	dc000017 	ldw	r16,0(sp)
   195b8:	dec00204 	addi	sp,sp,8
   195bc:	f800283a 	ret
   195c0:	0011883a 	mov	r8,zero
   195c4:	024ffc34 	movhi	r9,16368
   195c8:	0005883a 	mov	r2,zero
   195cc:	00d00934 	movhi	r3,16420
   195d0:	480b883a 	mov	r5,r9
   195d4:	4009883a 	mov	r4,r8
   195d8:	180f883a 	mov	r7,r3
   195dc:	100d883a 	mov	r6,r2
   195e0:	001028c0 	call	1028c <__muldf3>
   195e4:	843fffc4 	addi	r16,r16,-1
   195e8:	1011883a 	mov	r8,r2
   195ec:	1813883a 	mov	r9,r3
   195f0:	803ff51e 	bne	r16,zero,195c8 <_mprec_log10+0x50>
   195f4:	4005883a 	mov	r2,r8
   195f8:	4807883a 	mov	r3,r9
   195fc:	dfc00117 	ldw	ra,4(sp)
   19600:	dc000017 	ldw	r16,0(sp)
   19604:	dec00204 	addi	sp,sp,8
   19608:	f800283a 	ret

0001960c <__copybits>:
   1960c:	297fffc4 	addi	r5,r5,-1
   19610:	30800417 	ldw	r2,16(r6)
   19614:	280bd17a 	srai	r5,r5,5
   19618:	31800504 	addi	r6,r6,20
   1961c:	1085883a 	add	r2,r2,r2
   19620:	294b883a 	add	r5,r5,r5
   19624:	294b883a 	add	r5,r5,r5
   19628:	1085883a 	add	r2,r2,r2
   1962c:	290b883a 	add	r5,r5,r4
   19630:	3087883a 	add	r3,r6,r2
   19634:	29400104 	addi	r5,r5,4
   19638:	30c0052e 	bgeu	r6,r3,19650 <__copybits+0x44>
   1963c:	30800017 	ldw	r2,0(r6)
   19640:	31800104 	addi	r6,r6,4
   19644:	20800015 	stw	r2,0(r4)
   19648:	21000104 	addi	r4,r4,4
   1964c:	30fffb36 	bltu	r6,r3,1963c <__copybits+0x30>
   19650:	2140032e 	bgeu	r4,r5,19660 <__copybits+0x54>
   19654:	20000015 	stw	zero,0(r4)
   19658:	21000104 	addi	r4,r4,4
   1965c:	217ffd36 	bltu	r4,r5,19654 <__copybits+0x48>
   19660:	f800283a 	ret

00019664 <__any_on>:
   19664:	20800417 	ldw	r2,16(r4)
   19668:	2807d17a 	srai	r3,r5,5
   1966c:	21000504 	addi	r4,r4,20
   19670:	10c00d0e 	bge	r2,r3,196a8 <__any_on+0x44>
   19674:	1085883a 	add	r2,r2,r2
   19678:	1085883a 	add	r2,r2,r2
   1967c:	208d883a 	add	r6,r4,r2
   19680:	2180182e 	bgeu	r4,r6,196e4 <__any_on+0x80>
   19684:	30bfff17 	ldw	r2,-4(r6)
   19688:	30ffff04 	addi	r3,r6,-4
   1968c:	1000041e 	bne	r2,zero,196a0 <__any_on+0x3c>
   19690:	20c0142e 	bgeu	r4,r3,196e4 <__any_on+0x80>
   19694:	18ffff04 	addi	r3,r3,-4
   19698:	18800017 	ldw	r2,0(r3)
   1969c:	103ffc26 	beq	r2,zero,19690 <__any_on+0x2c>
   196a0:	00800044 	movi	r2,1
   196a4:	f800283a 	ret
   196a8:	18800a0e 	bge	r3,r2,196d4 <__any_on+0x70>
   196ac:	294007cc 	andi	r5,r5,31
   196b0:	28000826 	beq	r5,zero,196d4 <__any_on+0x70>
   196b4:	18c5883a 	add	r2,r3,r3
   196b8:	1085883a 	add	r2,r2,r2
   196bc:	208d883a 	add	r6,r4,r2
   196c0:	30c00017 	ldw	r3,0(r6)
   196c4:	1944d83a 	srl	r2,r3,r5
   196c8:	1144983a 	sll	r2,r2,r5
   196cc:	18bff41e 	bne	r3,r2,196a0 <__any_on+0x3c>
   196d0:	003feb06 	br	19680 <__any_on+0x1c>
   196d4:	18c5883a 	add	r2,r3,r3
   196d8:	1085883a 	add	r2,r2,r2
   196dc:	208d883a 	add	r6,r4,r2
   196e0:	003fe706 	br	19680 <__any_on+0x1c>
   196e4:	0005883a 	mov	r2,zero
   196e8:	f800283a 	ret

000196ec <_Balloc>:
   196ec:	20c01317 	ldw	r3,76(r4)
   196f0:	defffb04 	addi	sp,sp,-20
   196f4:	dcc00315 	stw	r19,12(sp)
   196f8:	dc800215 	stw	r18,8(sp)
   196fc:	dfc00415 	stw	ra,16(sp)
   19700:	2825883a 	mov	r18,r5
   19704:	dc400115 	stw	r17,4(sp)
   19708:	dc000015 	stw	r16,0(sp)
   1970c:	2027883a 	mov	r19,r4
   19710:	01800404 	movi	r6,16
   19714:	01400104 	movi	r5,4
   19718:	18001726 	beq	r3,zero,19778 <_Balloc+0x8c>
   1971c:	01400044 	movi	r5,1
   19720:	9485883a 	add	r2,r18,r18
   19724:	2ca2983a 	sll	r17,r5,r18
   19728:	1085883a 	add	r2,r2,r2
   1972c:	10c7883a 	add	r3,r2,r3
   19730:	1c000017 	ldw	r16,0(r3)
   19734:	8c4d883a 	add	r6,r17,r17
   19738:	318d883a 	add	r6,r6,r6
   1973c:	9809883a 	mov	r4,r19
   19740:	31800504 	addi	r6,r6,20
   19744:	80001226 	beq	r16,zero,19790 <_Balloc+0xa4>
   19748:	80800017 	ldw	r2,0(r16)
   1974c:	18800015 	stw	r2,0(r3)
   19750:	80000415 	stw	zero,16(r16)
   19754:	80000315 	stw	zero,12(r16)
   19758:	8005883a 	mov	r2,r16
   1975c:	dfc00417 	ldw	ra,16(sp)
   19760:	dcc00317 	ldw	r19,12(sp)
   19764:	dc800217 	ldw	r18,8(sp)
   19768:	dc400117 	ldw	r17,4(sp)
   1976c:	dc000017 	ldw	r16,0(sp)
   19770:	dec00504 	addi	sp,sp,20
   19774:	f800283a 	ret
   19778:	001a3040 	call	1a304 <_calloc_r>
   1977c:	1007883a 	mov	r3,r2
   19780:	0021883a 	mov	r16,zero
   19784:	98801315 	stw	r2,76(r19)
   19788:	103fe41e 	bne	r2,zero,1971c <_Balloc+0x30>
   1978c:	003ff206 	br	19758 <_Balloc+0x6c>
   19790:	001a3040 	call	1a304 <_calloc_r>
   19794:	103ff026 	beq	r2,zero,19758 <_Balloc+0x6c>
   19798:	1021883a 	mov	r16,r2
   1979c:	14800115 	stw	r18,4(r2)
   197a0:	14400215 	stw	r17,8(r2)
   197a4:	003fea06 	br	19750 <_Balloc+0x64>

000197a8 <__d2b>:
   197a8:	defff504 	addi	sp,sp,-44
   197ac:	dcc00515 	stw	r19,20(sp)
   197b0:	04c00044 	movi	r19,1
   197b4:	dc000215 	stw	r16,8(sp)
   197b8:	2821883a 	mov	r16,r5
   197bc:	980b883a 	mov	r5,r19
   197c0:	ddc00915 	stw	r23,36(sp)
   197c4:	dd800815 	stw	r22,32(sp)
   197c8:	dd400715 	stw	r21,28(sp)
   197cc:	dd000615 	stw	r20,24(sp)
   197d0:	dc800415 	stw	r18,16(sp)
   197d4:	dc400315 	stw	r17,12(sp)
   197d8:	dfc00a15 	stw	ra,40(sp)
   197dc:	3023883a 	mov	r17,r6
   197e0:	382d883a 	mov	r22,r7
   197e4:	ddc00b17 	ldw	r23,44(sp)
   197e8:	00196ec0 	call	196ec <_Balloc>
   197ec:	1025883a 	mov	r18,r2
   197f0:	00a00034 	movhi	r2,32768
   197f4:	10bfffc4 	addi	r2,r2,-1
   197f8:	8888703a 	and	r4,r17,r2
   197fc:	202ad53a 	srli	r21,r4,20
   19800:	00800434 	movhi	r2,16
   19804:	10bfffc4 	addi	r2,r2,-1
   19808:	8886703a 	and	r3,r17,r2
   1980c:	a829003a 	cmpeq	r20,r21,zero
   19810:	800b883a 	mov	r5,r16
   19814:	d8c00115 	stw	r3,4(sp)
   19818:	94000504 	addi	r16,r18,20
   1981c:	a000021e 	bne	r20,zero,19828 <__d2b+0x80>
   19820:	18c00434 	orhi	r3,r3,16
   19824:	d8c00115 	stw	r3,4(sp)
   19828:	28002726 	beq	r5,zero,198c8 <__d2b+0x120>
   1982c:	d809883a 	mov	r4,sp
   19830:	d9400015 	stw	r5,0(sp)
   19834:	00192040 	call	19204 <__lo0bits>
   19838:	100d883a 	mov	r6,r2
   1983c:	10003526 	beq	r2,zero,19914 <__d2b+0x16c>
   19840:	d8c00117 	ldw	r3,4(sp)
   19844:	00800804 	movi	r2,32
   19848:	1185c83a 	sub	r2,r2,r6
   1984c:	d9000017 	ldw	r4,0(sp)
   19850:	1886983a 	sll	r3,r3,r2
   19854:	1906b03a 	or	r3,r3,r4
   19858:	90c00515 	stw	r3,20(r18)
   1985c:	d8c00117 	ldw	r3,4(sp)
   19860:	1986d83a 	srl	r3,r3,r6
   19864:	d8c00115 	stw	r3,4(sp)
   19868:	180b003a 	cmpeq	r5,r3,zero
   1986c:	00800084 	movi	r2,2
   19870:	114bc83a 	sub	r5,r2,r5
   19874:	80c00115 	stw	r3,4(r16)
   19878:	91400415 	stw	r5,16(r18)
   1987c:	a0001a1e 	bne	r20,zero,198e8 <__d2b+0x140>
   19880:	3545883a 	add	r2,r6,r21
   19884:	10bef344 	addi	r2,r2,-1075
   19888:	00c00d44 	movi	r3,53
   1988c:	b0800015 	stw	r2,0(r22)
   19890:	1987c83a 	sub	r3,r3,r6
   19894:	b8c00015 	stw	r3,0(r23)
   19898:	9005883a 	mov	r2,r18
   1989c:	dfc00a17 	ldw	ra,40(sp)
   198a0:	ddc00917 	ldw	r23,36(sp)
   198a4:	dd800817 	ldw	r22,32(sp)
   198a8:	dd400717 	ldw	r21,28(sp)
   198ac:	dd000617 	ldw	r20,24(sp)
   198b0:	dcc00517 	ldw	r19,20(sp)
   198b4:	dc800417 	ldw	r18,16(sp)
   198b8:	dc400317 	ldw	r17,12(sp)
   198bc:	dc000217 	ldw	r16,8(sp)
   198c0:	dec00b04 	addi	sp,sp,44
   198c4:	f800283a 	ret
   198c8:	d9000104 	addi	r4,sp,4
   198cc:	00192040 	call	19204 <__lo0bits>
   198d0:	11800804 	addi	r6,r2,32
   198d4:	d8800117 	ldw	r2,4(sp)
   198d8:	94c00415 	stw	r19,16(r18)
   198dc:	980b883a 	mov	r5,r19
   198e0:	90800515 	stw	r2,20(r18)
   198e4:	a03fe626 	beq	r20,zero,19880 <__d2b+0xd8>
   198e8:	2945883a 	add	r2,r5,r5
   198ec:	1085883a 	add	r2,r2,r2
   198f0:	1405883a 	add	r2,r2,r16
   198f4:	113fff17 	ldw	r4,-4(r2)
   198f8:	30fef384 	addi	r3,r6,-1074
   198fc:	2820917a 	slli	r16,r5,5
   19900:	b0c00015 	stw	r3,0(r22)
   19904:	00191940 	call	19194 <__hi0bits>
   19908:	80a1c83a 	sub	r16,r16,r2
   1990c:	bc000015 	stw	r16,0(r23)
   19910:	003fe106 	br	19898 <__d2b+0xf0>
   19914:	d8800017 	ldw	r2,0(sp)
   19918:	90800515 	stw	r2,20(r18)
   1991c:	d8c00117 	ldw	r3,4(sp)
   19920:	003fd106 	br	19868 <__d2b+0xc0>

00019924 <__mdiff>:
   19924:	defffb04 	addi	sp,sp,-20
   19928:	dc000015 	stw	r16,0(sp)
   1992c:	2821883a 	mov	r16,r5
   19930:	dc800215 	stw	r18,8(sp)
   19934:	300b883a 	mov	r5,r6
   19938:	2025883a 	mov	r18,r4
   1993c:	8009883a 	mov	r4,r16
   19940:	dc400115 	stw	r17,4(sp)
   19944:	dfc00415 	stw	ra,16(sp)
   19948:	dcc00315 	stw	r19,12(sp)
   1994c:	3023883a 	mov	r17,r6
   19950:	00192c80 	call	192c8 <__mcmp>
   19954:	10004226 	beq	r2,zero,19a60 <__mdiff+0x13c>
   19958:	10005016 	blt	r2,zero,19a9c <__mdiff+0x178>
   1995c:	0027883a 	mov	r19,zero
   19960:	81400117 	ldw	r5,4(r16)
   19964:	9009883a 	mov	r4,r18
   19968:	00196ec0 	call	196ec <_Balloc>
   1996c:	1019883a 	mov	r12,r2
   19970:	82800417 	ldw	r10,16(r16)
   19974:	88800417 	ldw	r2,16(r17)
   19978:	81800504 	addi	r6,r16,20
   1997c:	5287883a 	add	r3,r10,r10
   19980:	1085883a 	add	r2,r2,r2
   19984:	18c7883a 	add	r3,r3,r3
   19988:	1085883a 	add	r2,r2,r2
   1998c:	8a000504 	addi	r8,r17,20
   19990:	64c00315 	stw	r19,12(r12)
   19994:	30db883a 	add	r13,r6,r3
   19998:	4097883a 	add	r11,r8,r2
   1999c:	61c00504 	addi	r7,r12,20
   199a0:	0013883a 	mov	r9,zero
   199a4:	31000017 	ldw	r4,0(r6)
   199a8:	41400017 	ldw	r5,0(r8)
   199ac:	42000104 	addi	r8,r8,4
   199b0:	20bfffcc 	andi	r2,r4,65535
   199b4:	28ffffcc 	andi	r3,r5,65535
   199b8:	10c5c83a 	sub	r2,r2,r3
   199bc:	1245883a 	add	r2,r2,r9
   199c0:	2008d43a 	srli	r4,r4,16
   199c4:	280ad43a 	srli	r5,r5,16
   199c8:	1007d43a 	srai	r3,r2,16
   199cc:	3880000d 	sth	r2,0(r7)
   199d0:	2149c83a 	sub	r4,r4,r5
   199d4:	20c9883a 	add	r4,r4,r3
   199d8:	3900008d 	sth	r4,2(r7)
   199dc:	31800104 	addi	r6,r6,4
   199e0:	39c00104 	addi	r7,r7,4
   199e4:	2013d43a 	srai	r9,r4,16
   199e8:	42ffee36 	bltu	r8,r11,199a4 <__mdiff+0x80>
   199ec:	33400c2e 	bgeu	r6,r13,19a20 <__mdiff+0xfc>
   199f0:	30800017 	ldw	r2,0(r6)
   199f4:	31800104 	addi	r6,r6,4
   199f8:	10ffffcc 	andi	r3,r2,65535
   199fc:	1a47883a 	add	r3,r3,r9
   19a00:	1004d43a 	srli	r2,r2,16
   19a04:	1809d43a 	srai	r4,r3,16
   19a08:	38c0000d 	sth	r3,0(r7)
   19a0c:	1105883a 	add	r2,r2,r4
   19a10:	3880008d 	sth	r2,2(r7)
   19a14:	1013d43a 	srai	r9,r2,16
   19a18:	39c00104 	addi	r7,r7,4
   19a1c:	337ff436 	bltu	r6,r13,199f0 <__mdiff+0xcc>
   19a20:	38bfff17 	ldw	r2,-4(r7)
   19a24:	38ffff04 	addi	r3,r7,-4
   19a28:	1000041e 	bne	r2,zero,19a3c <__mdiff+0x118>
   19a2c:	18ffff04 	addi	r3,r3,-4
   19a30:	18800017 	ldw	r2,0(r3)
   19a34:	52bfffc4 	addi	r10,r10,-1
   19a38:	103ffc26 	beq	r2,zero,19a2c <__mdiff+0x108>
   19a3c:	6005883a 	mov	r2,r12
   19a40:	62800415 	stw	r10,16(r12)
   19a44:	dfc00417 	ldw	ra,16(sp)
   19a48:	dcc00317 	ldw	r19,12(sp)
   19a4c:	dc800217 	ldw	r18,8(sp)
   19a50:	dc400117 	ldw	r17,4(sp)
   19a54:	dc000017 	ldw	r16,0(sp)
   19a58:	dec00504 	addi	sp,sp,20
   19a5c:	f800283a 	ret
   19a60:	9009883a 	mov	r4,r18
   19a64:	000b883a 	mov	r5,zero
   19a68:	00196ec0 	call	196ec <_Balloc>
   19a6c:	1019883a 	mov	r12,r2
   19a70:	00800044 	movi	r2,1
   19a74:	60800415 	stw	r2,16(r12)
   19a78:	6005883a 	mov	r2,r12
   19a7c:	60000515 	stw	zero,20(r12)
   19a80:	dfc00417 	ldw	ra,16(sp)
   19a84:	dcc00317 	ldw	r19,12(sp)
   19a88:	dc800217 	ldw	r18,8(sp)
   19a8c:	dc400117 	ldw	r17,4(sp)
   19a90:	dc000017 	ldw	r16,0(sp)
   19a94:	dec00504 	addi	sp,sp,20
   19a98:	f800283a 	ret
   19a9c:	880d883a 	mov	r6,r17
   19aa0:	04c00044 	movi	r19,1
   19aa4:	8023883a 	mov	r17,r16
   19aa8:	3021883a 	mov	r16,r6
   19aac:	003fac06 	br	19960 <__mdiff+0x3c>

00019ab0 <__lshift>:
   19ab0:	defff904 	addi	sp,sp,-28
   19ab4:	28800417 	ldw	r2,16(r5)
   19ab8:	dc000015 	stw	r16,0(sp)
   19abc:	3021d17a 	srai	r16,r6,5
   19ac0:	28c00217 	ldw	r3,8(r5)
   19ac4:	10800044 	addi	r2,r2,1
   19ac8:	dc400115 	stw	r17,4(sp)
   19acc:	80a3883a 	add	r17,r16,r2
   19ad0:	dd400515 	stw	r21,20(sp)
   19ad4:	dd000415 	stw	r20,16(sp)
   19ad8:	dc800215 	stw	r18,8(sp)
   19adc:	dfc00615 	stw	ra,24(sp)
   19ae0:	2825883a 	mov	r18,r5
   19ae4:	dcc00315 	stw	r19,12(sp)
   19ae8:	3029883a 	mov	r20,r6
   19aec:	202b883a 	mov	r21,r4
   19af0:	29400117 	ldw	r5,4(r5)
   19af4:	1c40030e 	bge	r3,r17,19b04 <__lshift+0x54>
   19af8:	18c7883a 	add	r3,r3,r3
   19afc:	29400044 	addi	r5,r5,1
   19b00:	1c7ffd16 	blt	r3,r17,19af8 <__lshift+0x48>
   19b04:	a809883a 	mov	r4,r21
   19b08:	00196ec0 	call	196ec <_Balloc>
   19b0c:	1027883a 	mov	r19,r2
   19b10:	11400504 	addi	r5,r2,20
   19b14:	0400090e 	bge	zero,r16,19b3c <__lshift+0x8c>
   19b18:	2805883a 	mov	r2,r5
   19b1c:	0007883a 	mov	r3,zero
   19b20:	18c00044 	addi	r3,r3,1
   19b24:	10000015 	stw	zero,0(r2)
   19b28:	10800104 	addi	r2,r2,4
   19b2c:	80fffc1e 	bne	r16,r3,19b20 <__lshift+0x70>
   19b30:	8405883a 	add	r2,r16,r16
   19b34:	1085883a 	add	r2,r2,r2
   19b38:	288b883a 	add	r5,r5,r2
   19b3c:	90800417 	ldw	r2,16(r18)
   19b40:	91000504 	addi	r4,r18,20
   19b44:	a18007cc 	andi	r6,r20,31
   19b48:	1085883a 	add	r2,r2,r2
   19b4c:	1085883a 	add	r2,r2,r2
   19b50:	208f883a 	add	r7,r4,r2
   19b54:	30001e26 	beq	r6,zero,19bd0 <__lshift+0x120>
   19b58:	00800804 	movi	r2,32
   19b5c:	1191c83a 	sub	r8,r2,r6
   19b60:	0007883a 	mov	r3,zero
   19b64:	20800017 	ldw	r2,0(r4)
   19b68:	1184983a 	sll	r2,r2,r6
   19b6c:	1884b03a 	or	r2,r3,r2
   19b70:	28800015 	stw	r2,0(r5)
   19b74:	20c00017 	ldw	r3,0(r4)
   19b78:	21000104 	addi	r4,r4,4
   19b7c:	29400104 	addi	r5,r5,4
   19b80:	1a06d83a 	srl	r3,r3,r8
   19b84:	21fff736 	bltu	r4,r7,19b64 <__lshift+0xb4>
   19b88:	28c00015 	stw	r3,0(r5)
   19b8c:	18000126 	beq	r3,zero,19b94 <__lshift+0xe4>
   19b90:	8c400044 	addi	r17,r17,1
   19b94:	88bfffc4 	addi	r2,r17,-1
   19b98:	98800415 	stw	r2,16(r19)
   19b9c:	a809883a 	mov	r4,r21
   19ba0:	900b883a 	mov	r5,r18
   19ba4:	001916c0 	call	1916c <_Bfree>
   19ba8:	9805883a 	mov	r2,r19
   19bac:	dfc00617 	ldw	ra,24(sp)
   19bb0:	dd400517 	ldw	r21,20(sp)
   19bb4:	dd000417 	ldw	r20,16(sp)
   19bb8:	dcc00317 	ldw	r19,12(sp)
   19bbc:	dc800217 	ldw	r18,8(sp)
   19bc0:	dc400117 	ldw	r17,4(sp)
   19bc4:	dc000017 	ldw	r16,0(sp)
   19bc8:	dec00704 	addi	sp,sp,28
   19bcc:	f800283a 	ret
   19bd0:	20800017 	ldw	r2,0(r4)
   19bd4:	21000104 	addi	r4,r4,4
   19bd8:	28800015 	stw	r2,0(r5)
   19bdc:	29400104 	addi	r5,r5,4
   19be0:	21ffec2e 	bgeu	r4,r7,19b94 <__lshift+0xe4>
   19be4:	20800017 	ldw	r2,0(r4)
   19be8:	21000104 	addi	r4,r4,4
   19bec:	28800015 	stw	r2,0(r5)
   19bf0:	29400104 	addi	r5,r5,4
   19bf4:	21fff636 	bltu	r4,r7,19bd0 <__lshift+0x120>
   19bf8:	003fe606 	br	19b94 <__lshift+0xe4>

00019bfc <__multiply>:
   19bfc:	defff904 	addi	sp,sp,-28
   19c00:	dcc00315 	stw	r19,12(sp)
   19c04:	dc800215 	stw	r18,8(sp)
   19c08:	2cc00417 	ldw	r19,16(r5)
   19c0c:	34800417 	ldw	r18,16(r6)
   19c10:	dd000415 	stw	r20,16(sp)
   19c14:	dc400115 	stw	r17,4(sp)
   19c18:	dfc00615 	stw	ra,24(sp)
   19c1c:	dd400515 	stw	r21,20(sp)
   19c20:	dc000015 	stw	r16,0(sp)
   19c24:	2823883a 	mov	r17,r5
   19c28:	3029883a 	mov	r20,r6
   19c2c:	9c80040e 	bge	r19,r18,19c40 <__multiply+0x44>
   19c30:	9027883a 	mov	r19,r18
   19c34:	2c800417 	ldw	r18,16(r5)
   19c38:	2829883a 	mov	r20,r5
   19c3c:	3023883a 	mov	r17,r6
   19c40:	88800217 	ldw	r2,8(r17)
   19c44:	9ca1883a 	add	r16,r19,r18
   19c48:	89400117 	ldw	r5,4(r17)
   19c4c:	1400010e 	bge	r2,r16,19c54 <__multiply+0x58>
   19c50:	29400044 	addi	r5,r5,1
   19c54:	00196ec0 	call	196ec <_Balloc>
   19c58:	102b883a 	mov	r21,r2
   19c5c:	8405883a 	add	r2,r16,r16
   19c60:	1085883a 	add	r2,r2,r2
   19c64:	a9000504 	addi	r4,r21,20
   19c68:	209d883a 	add	r14,r4,r2
   19c6c:	2380042e 	bgeu	r4,r14,19c80 <__multiply+0x84>
   19c70:	2005883a 	mov	r2,r4
   19c74:	10000015 	stw	zero,0(r2)
   19c78:	10800104 	addi	r2,r2,4
   19c7c:	13bffd36 	bltu	r2,r14,19c74 <__multiply+0x78>
   19c80:	9485883a 	add	r2,r18,r18
   19c84:	9cc7883a 	add	r3,r19,r19
   19c88:	a1800504 	addi	r6,r20,20
   19c8c:	1085883a 	add	r2,r2,r2
   19c90:	8b400504 	addi	r13,r17,20
   19c94:	18c7883a 	add	r3,r3,r3
   19c98:	309f883a 	add	r15,r6,r2
   19c9c:	68d7883a 	add	r11,r13,r3
   19ca0:	33c03b2e 	bgeu	r6,r15,19d90 <__multiply+0x194>
   19ca4:	2019883a 	mov	r12,r4
   19ca8:	30800017 	ldw	r2,0(r6)
   19cac:	127fffcc 	andi	r9,r2,65535
   19cb0:	48001826 	beq	r9,zero,19d14 <__multiply+0x118>
   19cb4:	6811883a 	mov	r8,r13
   19cb8:	600f883a 	mov	r7,r12
   19cbc:	0015883a 	mov	r10,zero
   19cc0:	40c00017 	ldw	r3,0(r8)
   19cc4:	39400017 	ldw	r5,0(r7)
   19cc8:	42000104 	addi	r8,r8,4
   19ccc:	193fffcc 	andi	r4,r3,65535
   19cd0:	4909383a 	mul	r4,r9,r4
   19cd4:	1806d43a 	srli	r3,r3,16
   19cd8:	28bfffcc 	andi	r2,r5,65535
   19cdc:	5085883a 	add	r2,r10,r2
   19ce0:	2089883a 	add	r4,r4,r2
   19ce4:	48c7383a 	mul	r3,r9,r3
   19ce8:	280ad43a 	srli	r5,r5,16
   19cec:	2004d43a 	srli	r2,r4,16
   19cf0:	3900000d 	sth	r4,0(r7)
   19cf4:	1947883a 	add	r3,r3,r5
   19cf8:	10c5883a 	add	r2,r2,r3
   19cfc:	3880008d 	sth	r2,2(r7)
   19d00:	1014d43a 	srli	r10,r2,16
   19d04:	39c00104 	addi	r7,r7,4
   19d08:	42ffed36 	bltu	r8,r11,19cc0 <__multiply+0xc4>
   19d0c:	3a800015 	stw	r10,0(r7)
   19d10:	30800017 	ldw	r2,0(r6)
   19d14:	1012d43a 	srli	r9,r2,16
   19d18:	48001926 	beq	r9,zero,19d80 <__multiply+0x184>
   19d1c:	60800017 	ldw	r2,0(r12)
   19d20:	6811883a 	mov	r8,r13
   19d24:	600f883a 	mov	r7,r12
   19d28:	0015883a 	mov	r10,zero
   19d2c:	100b883a 	mov	r5,r2
   19d30:	41000017 	ldw	r4,0(r8)
   19d34:	2806d43a 	srli	r3,r5,16
   19d38:	3880000d 	sth	r2,0(r7)
   19d3c:	20bfffcc 	andi	r2,r4,65535
   19d40:	4885383a 	mul	r2,r9,r2
   19d44:	50c7883a 	add	r3,r10,r3
   19d48:	2008d43a 	srli	r4,r4,16
   19d4c:	10c5883a 	add	r2,r2,r3
   19d50:	3880008d 	sth	r2,2(r7)
   19d54:	39c00104 	addi	r7,r7,4
   19d58:	39400017 	ldw	r5,0(r7)
   19d5c:	4909383a 	mul	r4,r9,r4
   19d60:	1004d43a 	srli	r2,r2,16
   19d64:	28ffffcc 	andi	r3,r5,65535
   19d68:	20c9883a 	add	r4,r4,r3
   19d6c:	1105883a 	add	r2,r2,r4
   19d70:	42000104 	addi	r8,r8,4
   19d74:	1014d43a 	srli	r10,r2,16
   19d78:	42ffed36 	bltu	r8,r11,19d30 <__multiply+0x134>
   19d7c:	38800015 	stw	r2,0(r7)
   19d80:	31800104 	addi	r6,r6,4
   19d84:	33c0022e 	bgeu	r6,r15,19d90 <__multiply+0x194>
   19d88:	63000104 	addi	r12,r12,4
   19d8c:	003fc606 	br	19ca8 <__multiply+0xac>
   19d90:	0400090e 	bge	zero,r16,19db8 <__multiply+0x1bc>
   19d94:	70bfff17 	ldw	r2,-4(r14)
   19d98:	70ffff04 	addi	r3,r14,-4
   19d9c:	10000326 	beq	r2,zero,19dac <__multiply+0x1b0>
   19da0:	00000506 	br	19db8 <__multiply+0x1bc>
   19da4:	18800017 	ldw	r2,0(r3)
   19da8:	1000031e 	bne	r2,zero,19db8 <__multiply+0x1bc>
   19dac:	843fffc4 	addi	r16,r16,-1
   19db0:	18ffff04 	addi	r3,r3,-4
   19db4:	803ffb1e 	bne	r16,zero,19da4 <__multiply+0x1a8>
   19db8:	a805883a 	mov	r2,r21
   19dbc:	ac000415 	stw	r16,16(r21)
   19dc0:	dfc00617 	ldw	ra,24(sp)
   19dc4:	dd400517 	ldw	r21,20(sp)
   19dc8:	dd000417 	ldw	r20,16(sp)
   19dcc:	dcc00317 	ldw	r19,12(sp)
   19dd0:	dc800217 	ldw	r18,8(sp)
   19dd4:	dc400117 	ldw	r17,4(sp)
   19dd8:	dc000017 	ldw	r16,0(sp)
   19ddc:	dec00704 	addi	sp,sp,28
   19de0:	f800283a 	ret

00019de4 <__i2b>:
   19de4:	defffd04 	addi	sp,sp,-12
   19de8:	dc000015 	stw	r16,0(sp)
   19dec:	04000044 	movi	r16,1
   19df0:	dc800115 	stw	r18,4(sp)
   19df4:	2825883a 	mov	r18,r5
   19df8:	800b883a 	mov	r5,r16
   19dfc:	dfc00215 	stw	ra,8(sp)
   19e00:	00196ec0 	call	196ec <_Balloc>
   19e04:	14000415 	stw	r16,16(r2)
   19e08:	14800515 	stw	r18,20(r2)
   19e0c:	dfc00217 	ldw	ra,8(sp)
   19e10:	dc800117 	ldw	r18,4(sp)
   19e14:	dc000017 	ldw	r16,0(sp)
   19e18:	dec00304 	addi	sp,sp,12
   19e1c:	f800283a 	ret

00019e20 <__multadd>:
   19e20:	defffa04 	addi	sp,sp,-24
   19e24:	dc800215 	stw	r18,8(sp)
   19e28:	2c800417 	ldw	r18,16(r5)
   19e2c:	dd000415 	stw	r20,16(sp)
   19e30:	dcc00315 	stw	r19,12(sp)
   19e34:	dc000015 	stw	r16,0(sp)
   19e38:	dfc00515 	stw	ra,20(sp)
   19e3c:	3821883a 	mov	r16,r7
   19e40:	dc400115 	stw	r17,4(sp)
   19e44:	2827883a 	mov	r19,r5
   19e48:	2029883a 	mov	r20,r4
   19e4c:	2a000504 	addi	r8,r5,20
   19e50:	000f883a 	mov	r7,zero
   19e54:	40800017 	ldw	r2,0(r8)
   19e58:	39c00044 	addi	r7,r7,1
   19e5c:	10ffffcc 	andi	r3,r2,65535
   19e60:	1987383a 	mul	r3,r3,r6
   19e64:	1004d43a 	srli	r2,r2,16
   19e68:	1c07883a 	add	r3,r3,r16
   19e6c:	180ad43a 	srli	r5,r3,16
   19e70:	1185383a 	mul	r2,r2,r6
   19e74:	18ffffcc 	andi	r3,r3,65535
   19e78:	1145883a 	add	r2,r2,r5
   19e7c:	1008943a 	slli	r4,r2,16
   19e80:	1020d43a 	srli	r16,r2,16
   19e84:	20c9883a 	add	r4,r4,r3
   19e88:	41000015 	stw	r4,0(r8)
   19e8c:	42000104 	addi	r8,r8,4
   19e90:	3cbff016 	blt	r7,r18,19e54 <__multadd+0x34>
   19e94:	80000826 	beq	r16,zero,19eb8 <__multadd+0x98>
   19e98:	98800217 	ldw	r2,8(r19)
   19e9c:	90800f0e 	bge	r18,r2,19edc <__multadd+0xbc>
   19ea0:	9485883a 	add	r2,r18,r18
   19ea4:	1085883a 	add	r2,r2,r2
   19ea8:	14c5883a 	add	r2,r2,r19
   19eac:	90c00044 	addi	r3,r18,1
   19eb0:	14000515 	stw	r16,20(r2)
   19eb4:	98c00415 	stw	r3,16(r19)
   19eb8:	9805883a 	mov	r2,r19
   19ebc:	dfc00517 	ldw	ra,20(sp)
   19ec0:	dd000417 	ldw	r20,16(sp)
   19ec4:	dcc00317 	ldw	r19,12(sp)
   19ec8:	dc800217 	ldw	r18,8(sp)
   19ecc:	dc400117 	ldw	r17,4(sp)
   19ed0:	dc000017 	ldw	r16,0(sp)
   19ed4:	dec00604 	addi	sp,sp,24
   19ed8:	f800283a 	ret
   19edc:	99400117 	ldw	r5,4(r19)
   19ee0:	a009883a 	mov	r4,r20
   19ee4:	29400044 	addi	r5,r5,1
   19ee8:	00196ec0 	call	196ec <_Balloc>
   19eec:	99800417 	ldw	r6,16(r19)
   19ef0:	99400304 	addi	r5,r19,12
   19ef4:	11000304 	addi	r4,r2,12
   19ef8:	318d883a 	add	r6,r6,r6
   19efc:	318d883a 	add	r6,r6,r6
   19f00:	31800204 	addi	r6,r6,8
   19f04:	1023883a 	mov	r17,r2
   19f08:	0013e340 	call	13e34 <memcpy>
   19f0c:	980b883a 	mov	r5,r19
   19f10:	a009883a 	mov	r4,r20
   19f14:	001916c0 	call	1916c <_Bfree>
   19f18:	8827883a 	mov	r19,r17
   19f1c:	003fe006 	br	19ea0 <__multadd+0x80>

00019f20 <__pow5mult>:
   19f20:	defffa04 	addi	sp,sp,-24
   19f24:	308000cc 	andi	r2,r6,3
   19f28:	dd000415 	stw	r20,16(sp)
   19f2c:	dcc00315 	stw	r19,12(sp)
   19f30:	dc000015 	stw	r16,0(sp)
   19f34:	dfc00515 	stw	ra,20(sp)
   19f38:	dc800215 	stw	r18,8(sp)
   19f3c:	dc400115 	stw	r17,4(sp)
   19f40:	3021883a 	mov	r16,r6
   19f44:	2027883a 	mov	r19,r4
   19f48:	2829883a 	mov	r20,r5
   19f4c:	10002b1e 	bne	r2,zero,19ffc <__pow5mult+0xdc>
   19f50:	8025d0ba 	srai	r18,r16,2
   19f54:	90001b26 	beq	r18,zero,19fc4 <__pow5mult+0xa4>
   19f58:	9c001217 	ldw	r16,72(r19)
   19f5c:	8000081e 	bne	r16,zero,19f80 <__pow5mult+0x60>
   19f60:	00003006 	br	1a024 <__pow5mult+0x104>
   19f64:	800b883a 	mov	r5,r16
   19f68:	800d883a 	mov	r6,r16
   19f6c:	9809883a 	mov	r4,r19
   19f70:	90001426 	beq	r18,zero,19fc4 <__pow5mult+0xa4>
   19f74:	80800017 	ldw	r2,0(r16)
   19f78:	10001b26 	beq	r2,zero,19fe8 <__pow5mult+0xc8>
   19f7c:	1021883a 	mov	r16,r2
   19f80:	9080004c 	andi	r2,r18,1
   19f84:	1005003a 	cmpeq	r2,r2,zero
   19f88:	9025d07a 	srai	r18,r18,1
   19f8c:	800d883a 	mov	r6,r16
   19f90:	9809883a 	mov	r4,r19
   19f94:	a00b883a 	mov	r5,r20
   19f98:	103ff21e 	bne	r2,zero,19f64 <__pow5mult+0x44>
   19f9c:	0019bfc0 	call	19bfc <__multiply>
   19fa0:	a00b883a 	mov	r5,r20
   19fa4:	9809883a 	mov	r4,r19
   19fa8:	1023883a 	mov	r17,r2
   19fac:	001916c0 	call	1916c <_Bfree>
   19fb0:	8829883a 	mov	r20,r17
   19fb4:	800b883a 	mov	r5,r16
   19fb8:	800d883a 	mov	r6,r16
   19fbc:	9809883a 	mov	r4,r19
   19fc0:	903fec1e 	bne	r18,zero,19f74 <__pow5mult+0x54>
   19fc4:	a005883a 	mov	r2,r20
   19fc8:	dfc00517 	ldw	ra,20(sp)
   19fcc:	dd000417 	ldw	r20,16(sp)
   19fd0:	dcc00317 	ldw	r19,12(sp)
   19fd4:	dc800217 	ldw	r18,8(sp)
   19fd8:	dc400117 	ldw	r17,4(sp)
   19fdc:	dc000017 	ldw	r16,0(sp)
   19fe0:	dec00604 	addi	sp,sp,24
   19fe4:	f800283a 	ret
   19fe8:	0019bfc0 	call	19bfc <__multiply>
   19fec:	80800015 	stw	r2,0(r16)
   19ff0:	1021883a 	mov	r16,r2
   19ff4:	10000015 	stw	zero,0(r2)
   19ff8:	003fe106 	br	19f80 <__pow5mult+0x60>
   19ffc:	1085883a 	add	r2,r2,r2
   1a000:	00c000b4 	movhi	r3,2
   1a004:	18fc8404 	addi	r3,r3,-3568
   1a008:	1085883a 	add	r2,r2,r2
   1a00c:	10c5883a 	add	r2,r2,r3
   1a010:	11bfff17 	ldw	r6,-4(r2)
   1a014:	000f883a 	mov	r7,zero
   1a018:	0019e200 	call	19e20 <__multadd>
   1a01c:	1029883a 	mov	r20,r2
   1a020:	003fcb06 	br	19f50 <__pow5mult+0x30>
   1a024:	9809883a 	mov	r4,r19
   1a028:	01409c44 	movi	r5,625
   1a02c:	0019de40 	call	19de4 <__i2b>
   1a030:	98801215 	stw	r2,72(r19)
   1a034:	1021883a 	mov	r16,r2
   1a038:	10000015 	stw	zero,0(r2)
   1a03c:	003fd006 	br	19f80 <__pow5mult+0x60>

0001a040 <__s2b>:
   1a040:	defff904 	addi	sp,sp,-28
   1a044:	dcc00315 	stw	r19,12(sp)
   1a048:	dc800215 	stw	r18,8(sp)
   1a04c:	2827883a 	mov	r19,r5
   1a050:	2025883a 	mov	r18,r4
   1a054:	01400244 	movi	r5,9
   1a058:	39000204 	addi	r4,r7,8
   1a05c:	dd000415 	stw	r20,16(sp)
   1a060:	dc400115 	stw	r17,4(sp)
   1a064:	dfc00615 	stw	ra,24(sp)
   1a068:	dd400515 	stw	r21,20(sp)
   1a06c:	dc000015 	stw	r16,0(sp)
   1a070:	3829883a 	mov	r20,r7
   1a074:	3023883a 	mov	r17,r6
   1a078:	001095c0 	call	1095c <__divsi3>
   1a07c:	00c00044 	movi	r3,1
   1a080:	1880350e 	bge	r3,r2,1a158 <__s2b+0x118>
   1a084:	000b883a 	mov	r5,zero
   1a088:	18c7883a 	add	r3,r3,r3
   1a08c:	29400044 	addi	r5,r5,1
   1a090:	18bffd16 	blt	r3,r2,1a088 <__s2b+0x48>
   1a094:	9009883a 	mov	r4,r18
   1a098:	00196ec0 	call	196ec <_Balloc>
   1a09c:	1011883a 	mov	r8,r2
   1a0a0:	d8800717 	ldw	r2,28(sp)
   1a0a4:	00c00044 	movi	r3,1
   1a0a8:	01800244 	movi	r6,9
   1a0ac:	40800515 	stw	r2,20(r8)
   1a0b0:	40c00415 	stw	r3,16(r8)
   1a0b4:	3440260e 	bge	r6,r17,1a150 <__s2b+0x110>
   1a0b8:	3021883a 	mov	r16,r6
   1a0bc:	99ab883a 	add	r21,r19,r6
   1a0c0:	9c05883a 	add	r2,r19,r16
   1a0c4:	11c00007 	ldb	r7,0(r2)
   1a0c8:	400b883a 	mov	r5,r8
   1a0cc:	9009883a 	mov	r4,r18
   1a0d0:	39fff404 	addi	r7,r7,-48
   1a0d4:	01800284 	movi	r6,10
   1a0d8:	0019e200 	call	19e20 <__multadd>
   1a0dc:	84000044 	addi	r16,r16,1
   1a0e0:	1011883a 	mov	r8,r2
   1a0e4:	8c3ff61e 	bne	r17,r16,1a0c0 <__s2b+0x80>
   1a0e8:	ac45883a 	add	r2,r21,r17
   1a0ec:	117ffe04 	addi	r5,r2,-8
   1a0f0:	880d883a 	mov	r6,r17
   1a0f4:	35000c0e 	bge	r6,r20,1a128 <__s2b+0xe8>
   1a0f8:	a185c83a 	sub	r2,r20,r6
   1a0fc:	2821883a 	mov	r16,r5
   1a100:	28a3883a 	add	r17,r5,r2
   1a104:	81c00007 	ldb	r7,0(r16)
   1a108:	400b883a 	mov	r5,r8
   1a10c:	9009883a 	mov	r4,r18
   1a110:	39fff404 	addi	r7,r7,-48
   1a114:	01800284 	movi	r6,10
   1a118:	0019e200 	call	19e20 <__multadd>
   1a11c:	84000044 	addi	r16,r16,1
   1a120:	1011883a 	mov	r8,r2
   1a124:	847ff71e 	bne	r16,r17,1a104 <__s2b+0xc4>
   1a128:	4005883a 	mov	r2,r8
   1a12c:	dfc00617 	ldw	ra,24(sp)
   1a130:	dd400517 	ldw	r21,20(sp)
   1a134:	dd000417 	ldw	r20,16(sp)
   1a138:	dcc00317 	ldw	r19,12(sp)
   1a13c:	dc800217 	ldw	r18,8(sp)
   1a140:	dc400117 	ldw	r17,4(sp)
   1a144:	dc000017 	ldw	r16,0(sp)
   1a148:	dec00704 	addi	sp,sp,28
   1a14c:	f800283a 	ret
   1a150:	99400284 	addi	r5,r19,10
   1a154:	003fe706 	br	1a0f4 <__s2b+0xb4>
   1a158:	000b883a 	mov	r5,zero
   1a15c:	003fcd06 	br	1a094 <__s2b+0x54>

0001a160 <_read_r>:
   1a160:	defffd04 	addi	sp,sp,-12
   1a164:	dc000015 	stw	r16,0(sp)
   1a168:	040000b4 	movhi	r16,2
   1a16c:	840a1704 	addi	r16,r16,10332
   1a170:	dc400115 	stw	r17,4(sp)
   1a174:	80000015 	stw	zero,0(r16)
   1a178:	2023883a 	mov	r17,r4
   1a17c:	2809883a 	mov	r4,r5
   1a180:	300b883a 	mov	r5,r6
   1a184:	380d883a 	mov	r6,r7
   1a188:	dfc00215 	stw	ra,8(sp)
   1a18c:	001c0f80 	call	1c0f8 <read>
   1a190:	1007883a 	mov	r3,r2
   1a194:	00bfffc4 	movi	r2,-1
   1a198:	18800626 	beq	r3,r2,1a1b4 <_read_r+0x54>
   1a19c:	1805883a 	mov	r2,r3
   1a1a0:	dfc00217 	ldw	ra,8(sp)
   1a1a4:	dc400117 	ldw	r17,4(sp)
   1a1a8:	dc000017 	ldw	r16,0(sp)
   1a1ac:	dec00304 	addi	sp,sp,12
   1a1b0:	f800283a 	ret
   1a1b4:	80800017 	ldw	r2,0(r16)
   1a1b8:	103ff826 	beq	r2,zero,1a19c <_read_r+0x3c>
   1a1bc:	88800015 	stw	r2,0(r17)
   1a1c0:	1805883a 	mov	r2,r3
   1a1c4:	dfc00217 	ldw	ra,8(sp)
   1a1c8:	dc400117 	ldw	r17,4(sp)
   1a1cc:	dc000017 	ldw	r16,0(sp)
   1a1d0:	dec00304 	addi	sp,sp,12
   1a1d4:	f800283a 	ret

0001a1d8 <__isinfd>:
   1a1d8:	200d883a 	mov	r6,r4
   1a1dc:	0109c83a 	sub	r4,zero,r4
   1a1e0:	2188b03a 	or	r4,r4,r6
   1a1e4:	2008d7fa 	srli	r4,r4,31
   1a1e8:	00a00034 	movhi	r2,32768
   1a1ec:	10bfffc4 	addi	r2,r2,-1
   1a1f0:	1144703a 	and	r2,r2,r5
   1a1f4:	2088b03a 	or	r4,r4,r2
   1a1f8:	009ffc34 	movhi	r2,32752
   1a1fc:	1105c83a 	sub	r2,r2,r4
   1a200:	0087c83a 	sub	r3,zero,r2
   1a204:	10c4b03a 	or	r2,r2,r3
   1a208:	1004d7fa 	srli	r2,r2,31
   1a20c:	00c00044 	movi	r3,1
   1a210:	1885c83a 	sub	r2,r3,r2
   1a214:	f800283a 	ret

0001a218 <__isnand>:
   1a218:	200d883a 	mov	r6,r4
   1a21c:	0109c83a 	sub	r4,zero,r4
   1a220:	2188b03a 	or	r4,r4,r6
   1a224:	2008d7fa 	srli	r4,r4,31
   1a228:	00a00034 	movhi	r2,32768
   1a22c:	10bfffc4 	addi	r2,r2,-1
   1a230:	1144703a 	and	r2,r2,r5
   1a234:	2088b03a 	or	r4,r4,r2
   1a238:	009ffc34 	movhi	r2,32752
   1a23c:	1105c83a 	sub	r2,r2,r4
   1a240:	1004d7fa 	srli	r2,r2,31
   1a244:	f800283a 	ret

0001a248 <strcmp>:
   1a248:	2144b03a 	or	r2,r4,r5
   1a24c:	108000cc 	andi	r2,r2,3
   1a250:	10001d1e 	bne	r2,zero,1a2c8 <strcmp+0x80>
   1a254:	200f883a 	mov	r7,r4
   1a258:	28800017 	ldw	r2,0(r5)
   1a25c:	21000017 	ldw	r4,0(r4)
   1a260:	280d883a 	mov	r6,r5
   1a264:	2080161e 	bne	r4,r2,1a2c0 <strcmp+0x78>
   1a268:	023fbff4 	movhi	r8,65279
   1a26c:	423fbfc4 	addi	r8,r8,-257
   1a270:	2207883a 	add	r3,r4,r8
   1a274:	01602074 	movhi	r5,32897
   1a278:	29602004 	addi	r5,r5,-32640
   1a27c:	1946703a 	and	r3,r3,r5
   1a280:	0104303a 	nor	r2,zero,r4
   1a284:	10c4703a 	and	r2,r2,r3
   1a288:	10001c1e 	bne	r2,zero,1a2fc <strcmp+0xb4>
   1a28c:	4013883a 	mov	r9,r8
   1a290:	2811883a 	mov	r8,r5
   1a294:	00000106 	br	1a29c <strcmp+0x54>
   1a298:	1800181e 	bne	r3,zero,1a2fc <strcmp+0xb4>
   1a29c:	39c00104 	addi	r7,r7,4
   1a2a0:	39000017 	ldw	r4,0(r7)
   1a2a4:	31800104 	addi	r6,r6,4
   1a2a8:	31400017 	ldw	r5,0(r6)
   1a2ac:	2245883a 	add	r2,r4,r9
   1a2b0:	1204703a 	and	r2,r2,r8
   1a2b4:	0106303a 	nor	r3,zero,r4
   1a2b8:	1886703a 	and	r3,r3,r2
   1a2bc:	217ff626 	beq	r4,r5,1a298 <strcmp+0x50>
   1a2c0:	3809883a 	mov	r4,r7
   1a2c4:	300b883a 	mov	r5,r6
   1a2c8:	20c00007 	ldb	r3,0(r4)
   1a2cc:	1800051e 	bne	r3,zero,1a2e4 <strcmp+0x9c>
   1a2d0:	00000606 	br	1a2ec <strcmp+0xa4>
   1a2d4:	21000044 	addi	r4,r4,1
   1a2d8:	20c00007 	ldb	r3,0(r4)
   1a2dc:	29400044 	addi	r5,r5,1
   1a2e0:	18000226 	beq	r3,zero,1a2ec <strcmp+0xa4>
   1a2e4:	28800007 	ldb	r2,0(r5)
   1a2e8:	18bffa26 	beq	r3,r2,1a2d4 <strcmp+0x8c>
   1a2ec:	20c00003 	ldbu	r3,0(r4)
   1a2f0:	28800003 	ldbu	r2,0(r5)
   1a2f4:	1885c83a 	sub	r2,r3,r2
   1a2f8:	f800283a 	ret
   1a2fc:	0005883a 	mov	r2,zero
   1a300:	f800283a 	ret

0001a304 <_calloc_r>:
   1a304:	298b383a 	mul	r5,r5,r6
   1a308:	defffe04 	addi	sp,sp,-8
   1a30c:	dc000015 	stw	r16,0(sp)
   1a310:	dfc00115 	stw	ra,4(sp)
   1a314:	001359c0 	call	1359c <_malloc_r>
   1a318:	1021883a 	mov	r16,r2
   1a31c:	01c00904 	movi	r7,36
   1a320:	10000d26 	beq	r2,zero,1a358 <_calloc_r+0x54>
   1a324:	10ffff17 	ldw	r3,-4(r2)
   1a328:	1009883a 	mov	r4,r2
   1a32c:	00bfff04 	movi	r2,-4
   1a330:	1886703a 	and	r3,r3,r2
   1a334:	1887883a 	add	r3,r3,r2
   1a338:	180d883a 	mov	r6,r3
   1a33c:	000b883a 	mov	r5,zero
   1a340:	38c01736 	bltu	r7,r3,1a3a0 <_calloc_r+0x9c>
   1a344:	008004c4 	movi	r2,19
   1a348:	10c00836 	bltu	r2,r3,1a36c <_calloc_r+0x68>
   1a34c:	20000215 	stw	zero,8(r4)
   1a350:	20000015 	stw	zero,0(r4)
   1a354:	20000115 	stw	zero,4(r4)
   1a358:	8005883a 	mov	r2,r16
   1a35c:	dfc00117 	ldw	ra,4(sp)
   1a360:	dc000017 	ldw	r16,0(sp)
   1a364:	dec00204 	addi	sp,sp,8
   1a368:	f800283a 	ret
   1a36c:	008006c4 	movi	r2,27
   1a370:	80000015 	stw	zero,0(r16)
   1a374:	80000115 	stw	zero,4(r16)
   1a378:	81000204 	addi	r4,r16,8
   1a37c:	10fff32e 	bgeu	r2,r3,1a34c <_calloc_r+0x48>
   1a380:	80000215 	stw	zero,8(r16)
   1a384:	80000315 	stw	zero,12(r16)
   1a388:	81000404 	addi	r4,r16,16
   1a38c:	19ffef1e 	bne	r3,r7,1a34c <_calloc_r+0x48>
   1a390:	81000604 	addi	r4,r16,24
   1a394:	80000415 	stw	zero,16(r16)
   1a398:	80000515 	stw	zero,20(r16)
   1a39c:	003feb06 	br	1a34c <_calloc_r+0x48>
   1a3a0:	0013fb40 	call	13fb4 <memset>
   1a3a4:	8005883a 	mov	r2,r16
   1a3a8:	dfc00117 	ldw	ra,4(sp)
   1a3ac:	dc000017 	ldw	r16,0(sp)
   1a3b0:	dec00204 	addi	sp,sp,8
   1a3b4:	f800283a 	ret

0001a3b8 <__udivdi3>:
   1a3b8:	defff004 	addi	sp,sp,-64
   1a3bc:	2005883a 	mov	r2,r4
   1a3c0:	3011883a 	mov	r8,r6
   1a3c4:	df000e15 	stw	fp,56(sp)
   1a3c8:	dd000a15 	stw	r20,40(sp)
   1a3cc:	dc000615 	stw	r16,24(sp)
   1a3d0:	dfc00f15 	stw	ra,60(sp)
   1a3d4:	ddc00d15 	stw	r23,52(sp)
   1a3d8:	dd800c15 	stw	r22,48(sp)
   1a3dc:	dd400b15 	stw	r21,44(sp)
   1a3e0:	dcc00915 	stw	r19,36(sp)
   1a3e4:	dc800815 	stw	r18,32(sp)
   1a3e8:	dc400715 	stw	r17,28(sp)
   1a3ec:	4021883a 	mov	r16,r8
   1a3f0:	1039883a 	mov	fp,r2
   1a3f4:	2829883a 	mov	r20,r5
   1a3f8:	38003b1e 	bne	r7,zero,1a4e8 <__udivdi3+0x130>
   1a3fc:	2a005c36 	bltu	r5,r8,1a570 <__udivdi3+0x1b8>
   1a400:	4000a626 	beq	r8,zero,1a69c <__udivdi3+0x2e4>
   1a404:	00bfffd4 	movui	r2,65535
   1a408:	14009e36 	bltu	r2,r16,1a684 <__udivdi3+0x2cc>
   1a40c:	00803fc4 	movi	r2,255
   1a410:	14013d36 	bltu	r2,r16,1a908 <__udivdi3+0x550>
   1a414:	000b883a 	mov	r5,zero
   1a418:	0005883a 	mov	r2,zero
   1a41c:	8084d83a 	srl	r2,r16,r2
   1a420:	010000b4 	movhi	r4,2
   1a424:	213b2704 	addi	r4,r4,-4964
   1a428:	01800804 	movi	r6,32
   1a42c:	1105883a 	add	r2,r2,r4
   1a430:	10c00003 	ldbu	r3,0(r2)
   1a434:	28c7883a 	add	r3,r5,r3
   1a438:	30edc83a 	sub	r22,r6,r3
   1a43c:	b000ee1e 	bne	r22,zero,1a7f8 <__udivdi3+0x440>
   1a440:	802ad43a 	srli	r21,r16,16
   1a444:	00800044 	movi	r2,1
   1a448:	a423c83a 	sub	r17,r20,r16
   1a44c:	85ffffcc 	andi	r23,r16,65535
   1a450:	d8800315 	stw	r2,12(sp)
   1a454:	8809883a 	mov	r4,r17
   1a458:	a80b883a 	mov	r5,r21
   1a45c:	0010a1c0 	call	10a1c <__udivsi3>
   1a460:	8809883a 	mov	r4,r17
   1a464:	a80b883a 	mov	r5,r21
   1a468:	102d883a 	mov	r22,r2
   1a46c:	0010a240 	call	10a24 <__umodsi3>
   1a470:	1004943a 	slli	r2,r2,16
   1a474:	e006d43a 	srli	r3,fp,16
   1a478:	bda3383a 	mul	r17,r23,r22
   1a47c:	10c4b03a 	or	r2,r2,r3
   1a480:	1440042e 	bgeu	r2,r17,1a494 <__udivdi3+0xdc>
   1a484:	1405883a 	add	r2,r2,r16
   1a488:	b5bfffc4 	addi	r22,r22,-1
   1a48c:	14000136 	bltu	r2,r16,1a494 <__udivdi3+0xdc>
   1a490:	14413d36 	bltu	r2,r17,1a988 <__udivdi3+0x5d0>
   1a494:	1463c83a 	sub	r17,r2,r17
   1a498:	8809883a 	mov	r4,r17
   1a49c:	a80b883a 	mov	r5,r21
   1a4a0:	0010a1c0 	call	10a1c <__udivsi3>
   1a4a4:	8809883a 	mov	r4,r17
   1a4a8:	a80b883a 	mov	r5,r21
   1a4ac:	1029883a 	mov	r20,r2
   1a4b0:	0010a240 	call	10a24 <__umodsi3>
   1a4b4:	1004943a 	slli	r2,r2,16
   1a4b8:	bd09383a 	mul	r4,r23,r20
   1a4bc:	e0ffffcc 	andi	r3,fp,65535
   1a4c0:	10c4b03a 	or	r2,r2,r3
   1a4c4:	1100042e 	bgeu	r2,r4,1a4d8 <__udivdi3+0x120>
   1a4c8:	8085883a 	add	r2,r16,r2
   1a4cc:	a53fffc4 	addi	r20,r20,-1
   1a4d0:	14000136 	bltu	r2,r16,1a4d8 <__udivdi3+0x120>
   1a4d4:	11012036 	bltu	r2,r4,1a958 <__udivdi3+0x5a0>
   1a4d8:	b004943a 	slli	r2,r22,16
   1a4dc:	d9000317 	ldw	r4,12(sp)
   1a4e0:	a084b03a 	or	r2,r20,r2
   1a4e4:	00001506 	br	1a53c <__udivdi3+0x184>
   1a4e8:	380d883a 	mov	r6,r7
   1a4ec:	29c06236 	bltu	r5,r7,1a678 <__udivdi3+0x2c0>
   1a4f0:	00bfffd4 	movui	r2,65535
   1a4f4:	11c05a36 	bltu	r2,r7,1a660 <__udivdi3+0x2a8>
   1a4f8:	00803fc4 	movi	r2,255
   1a4fc:	11c0fc36 	bltu	r2,r7,1a8f0 <__udivdi3+0x538>
   1a500:	000b883a 	mov	r5,zero
   1a504:	0005883a 	mov	r2,zero
   1a508:	3084d83a 	srl	r2,r6,r2
   1a50c:	010000b4 	movhi	r4,2
   1a510:	213b2704 	addi	r4,r4,-4964
   1a514:	01c00804 	movi	r7,32
   1a518:	1105883a 	add	r2,r2,r4
   1a51c:	10c00003 	ldbu	r3,0(r2)
   1a520:	28c7883a 	add	r3,r5,r3
   1a524:	38efc83a 	sub	r23,r7,r3
   1a528:	b800691e 	bne	r23,zero,1a6d0 <__udivdi3+0x318>
   1a52c:	35000136 	bltu	r6,r20,1a534 <__udivdi3+0x17c>
   1a530:	e4005136 	bltu	fp,r16,1a678 <__udivdi3+0x2c0>
   1a534:	00800044 	movi	r2,1
   1a538:	0009883a 	mov	r4,zero
   1a53c:	2007883a 	mov	r3,r4
   1a540:	dfc00f17 	ldw	ra,60(sp)
   1a544:	df000e17 	ldw	fp,56(sp)
   1a548:	ddc00d17 	ldw	r23,52(sp)
   1a54c:	dd800c17 	ldw	r22,48(sp)
   1a550:	dd400b17 	ldw	r21,44(sp)
   1a554:	dd000a17 	ldw	r20,40(sp)
   1a558:	dcc00917 	ldw	r19,36(sp)
   1a55c:	dc800817 	ldw	r18,32(sp)
   1a560:	dc400717 	ldw	r17,28(sp)
   1a564:	dc000617 	ldw	r16,24(sp)
   1a568:	dec01004 	addi	sp,sp,64
   1a56c:	f800283a 	ret
   1a570:	00bfffd4 	movui	r2,65535
   1a574:	12005036 	bltu	r2,r8,1a6b8 <__udivdi3+0x300>
   1a578:	00803fc4 	movi	r2,255
   1a57c:	1200e836 	bltu	r2,r8,1a920 <__udivdi3+0x568>
   1a580:	000b883a 	mov	r5,zero
   1a584:	0005883a 	mov	r2,zero
   1a588:	8084d83a 	srl	r2,r16,r2
   1a58c:	010000b4 	movhi	r4,2
   1a590:	213b2704 	addi	r4,r4,-4964
   1a594:	01800804 	movi	r6,32
   1a598:	1105883a 	add	r2,r2,r4
   1a59c:	10c00003 	ldbu	r3,0(r2)
   1a5a0:	28c7883a 	add	r3,r5,r3
   1a5a4:	30cbc83a 	sub	r5,r6,r3
   1a5a8:	28000626 	beq	r5,zero,1a5c4 <__udivdi3+0x20c>
   1a5ac:	3145c83a 	sub	r2,r6,r5
   1a5b0:	e084d83a 	srl	r2,fp,r2
   1a5b4:	a146983a 	sll	r3,r20,r5
   1a5b8:	e178983a 	sll	fp,fp,r5
   1a5bc:	8160983a 	sll	r16,r16,r5
   1a5c0:	18a8b03a 	or	r20,r3,r2
   1a5c4:	802ad43a 	srli	r21,r16,16
   1a5c8:	a009883a 	mov	r4,r20
   1a5cc:	85ffffcc 	andi	r23,r16,65535
   1a5d0:	a80b883a 	mov	r5,r21
   1a5d4:	0010a1c0 	call	10a1c <__udivsi3>
   1a5d8:	a009883a 	mov	r4,r20
   1a5dc:	a80b883a 	mov	r5,r21
   1a5e0:	102d883a 	mov	r22,r2
   1a5e4:	0010a240 	call	10a24 <__umodsi3>
   1a5e8:	1004943a 	slli	r2,r2,16
   1a5ec:	e006d43a 	srli	r3,fp,16
   1a5f0:	bda3383a 	mul	r17,r23,r22
   1a5f4:	10c4b03a 	or	r2,r2,r3
   1a5f8:	1440042e 	bgeu	r2,r17,1a60c <__udivdi3+0x254>
   1a5fc:	1405883a 	add	r2,r2,r16
   1a600:	b5bfffc4 	addi	r22,r22,-1
   1a604:	14000136 	bltu	r2,r16,1a60c <__udivdi3+0x254>
   1a608:	1440d536 	bltu	r2,r17,1a960 <__udivdi3+0x5a8>
   1a60c:	1463c83a 	sub	r17,r2,r17
   1a610:	8809883a 	mov	r4,r17
   1a614:	a80b883a 	mov	r5,r21
   1a618:	0010a1c0 	call	10a1c <__udivsi3>
   1a61c:	8809883a 	mov	r4,r17
   1a620:	a80b883a 	mov	r5,r21
   1a624:	1029883a 	mov	r20,r2
   1a628:	0010a240 	call	10a24 <__umodsi3>
   1a62c:	1004943a 	slli	r2,r2,16
   1a630:	bd09383a 	mul	r4,r23,r20
   1a634:	e0ffffcc 	andi	r3,fp,65535
   1a638:	10c4b03a 	or	r2,r2,r3
   1a63c:	1100042e 	bgeu	r2,r4,1a650 <__udivdi3+0x298>
   1a640:	8085883a 	add	r2,r16,r2
   1a644:	a53fffc4 	addi	r20,r20,-1
   1a648:	14000136 	bltu	r2,r16,1a650 <__udivdi3+0x298>
   1a64c:	1100c736 	bltu	r2,r4,1a96c <__udivdi3+0x5b4>
   1a650:	b004943a 	slli	r2,r22,16
   1a654:	0009883a 	mov	r4,zero
   1a658:	a084b03a 	or	r2,r20,r2
   1a65c:	003fb706 	br	1a53c <__udivdi3+0x184>
   1a660:	00804034 	movhi	r2,256
   1a664:	10bfffc4 	addi	r2,r2,-1
   1a668:	11c0a436 	bltu	r2,r7,1a8fc <__udivdi3+0x544>
   1a66c:	01400404 	movi	r5,16
   1a670:	2805883a 	mov	r2,r5
   1a674:	003fa406 	br	1a508 <__udivdi3+0x150>
   1a678:	0005883a 	mov	r2,zero
   1a67c:	0009883a 	mov	r4,zero
   1a680:	003fae06 	br	1a53c <__udivdi3+0x184>
   1a684:	00804034 	movhi	r2,256
   1a688:	10bfffc4 	addi	r2,r2,-1
   1a68c:	1400a136 	bltu	r2,r16,1a914 <__udivdi3+0x55c>
   1a690:	01400404 	movi	r5,16
   1a694:	2805883a 	mov	r2,r5
   1a698:	003f6006 	br	1a41c <__udivdi3+0x64>
   1a69c:	01000044 	movi	r4,1
   1a6a0:	000b883a 	mov	r5,zero
   1a6a4:	0010a1c0 	call	10a1c <__udivsi3>
   1a6a8:	1021883a 	mov	r16,r2
   1a6ac:	00bfffd4 	movui	r2,65535
   1a6b0:	143ff436 	bltu	r2,r16,1a684 <__udivdi3+0x2cc>
   1a6b4:	003f5506 	br	1a40c <__udivdi3+0x54>
   1a6b8:	00804034 	movhi	r2,256
   1a6bc:	10bfffc4 	addi	r2,r2,-1
   1a6c0:	12009a36 	bltu	r2,r8,1a92c <__udivdi3+0x574>
   1a6c4:	01400404 	movi	r5,16
   1a6c8:	2805883a 	mov	r2,r5
   1a6cc:	003fae06 	br	1a588 <__udivdi3+0x1d0>
   1a6d0:	3dc5c83a 	sub	r2,r7,r23
   1a6d4:	35c8983a 	sll	r4,r6,r23
   1a6d8:	8086d83a 	srl	r3,r16,r2
   1a6dc:	a0a2d83a 	srl	r17,r20,r2
   1a6e0:	e084d83a 	srl	r2,fp,r2
   1a6e4:	20eab03a 	or	r21,r4,r3
   1a6e8:	a82cd43a 	srli	r22,r21,16
   1a6ec:	a5c6983a 	sll	r3,r20,r23
   1a6f0:	8809883a 	mov	r4,r17
   1a6f4:	b00b883a 	mov	r5,r22
   1a6f8:	1886b03a 	or	r3,r3,r2
   1a6fc:	d8c00215 	stw	r3,8(sp)
   1a700:	0010a1c0 	call	10a1c <__udivsi3>
   1a704:	8809883a 	mov	r4,r17
   1a708:	b00b883a 	mov	r5,r22
   1a70c:	1029883a 	mov	r20,r2
   1a710:	0010a240 	call	10a24 <__umodsi3>
   1a714:	a8ffffcc 	andi	r3,r21,65535
   1a718:	d8c00515 	stw	r3,20(sp)
   1a71c:	d9000217 	ldw	r4,8(sp)
   1a720:	d9400517 	ldw	r5,20(sp)
   1a724:	1004943a 	slli	r2,r2,16
   1a728:	2006d43a 	srli	r3,r4,16
   1a72c:	85e0983a 	sll	r16,r16,r23
   1a730:	2d23383a 	mul	r17,r5,r20
   1a734:	10c4b03a 	or	r2,r2,r3
   1a738:	dc000015 	stw	r16,0(sp)
   1a73c:	1440032e 	bgeu	r2,r17,1a74c <__udivdi3+0x394>
   1a740:	1545883a 	add	r2,r2,r21
   1a744:	a53fffc4 	addi	r20,r20,-1
   1a748:	15407f2e 	bgeu	r2,r21,1a948 <__udivdi3+0x590>
   1a74c:	1463c83a 	sub	r17,r2,r17
   1a750:	8809883a 	mov	r4,r17
   1a754:	b00b883a 	mov	r5,r22
   1a758:	0010a1c0 	call	10a1c <__udivsi3>
   1a75c:	8809883a 	mov	r4,r17
   1a760:	b00b883a 	mov	r5,r22
   1a764:	1021883a 	mov	r16,r2
   1a768:	0010a240 	call	10a24 <__umodsi3>
   1a76c:	d8c00517 	ldw	r3,20(sp)
   1a770:	d9000217 	ldw	r4,8(sp)
   1a774:	1004943a 	slli	r2,r2,16
   1a778:	1c0f383a 	mul	r7,r3,r16
   1a77c:	20ffffcc 	andi	r3,r4,65535
   1a780:	10e2b03a 	or	r17,r2,r3
   1a784:	89c0032e 	bgeu	r17,r7,1a794 <__udivdi3+0x3dc>
   1a788:	8d63883a 	add	r17,r17,r21
   1a78c:	843fffc4 	addi	r16,r16,-1
   1a790:	8d40692e 	bgeu	r17,r21,1a938 <__udivdi3+0x580>
   1a794:	a008943a 	slli	r4,r20,16
   1a798:	d9400017 	ldw	r5,0(sp)
   1a79c:	89e3c83a 	sub	r17,r17,r7
   1a7a0:	8110b03a 	or	r8,r16,r4
   1a7a4:	280cd43a 	srli	r6,r5,16
   1a7a8:	28ffffcc 	andi	r3,r5,65535
   1a7ac:	40bfffcc 	andi	r2,r8,65535
   1a7b0:	400ad43a 	srli	r5,r8,16
   1a7b4:	10d3383a 	mul	r9,r2,r3
   1a7b8:	1185383a 	mul	r2,r2,r6
   1a7bc:	28c7383a 	mul	r3,r5,r3
   1a7c0:	4808d43a 	srli	r4,r9,16
   1a7c4:	298b383a 	mul	r5,r5,r6
   1a7c8:	10c5883a 	add	r2,r2,r3
   1a7cc:	2089883a 	add	r4,r4,r2
   1a7d0:	20c0022e 	bgeu	r4,r3,1a7dc <__udivdi3+0x424>
   1a7d4:	00800074 	movhi	r2,1
   1a7d8:	288b883a 	add	r5,r5,r2
   1a7dc:	2004d43a 	srli	r2,r4,16
   1a7e0:	288b883a 	add	r5,r5,r2
   1a7e4:	89403f36 	bltu	r17,r5,1a8e4 <__udivdi3+0x52c>
   1a7e8:	89403926 	beq	r17,r5,1a8d0 <__udivdi3+0x518>
   1a7ec:	4005883a 	mov	r2,r8
   1a7f0:	0009883a 	mov	r4,zero
   1a7f4:	003f5106 	br	1a53c <__udivdi3+0x184>
   1a7f8:	85a0983a 	sll	r16,r16,r22
   1a7fc:	3585c83a 	sub	r2,r6,r22
   1a800:	a0a2d83a 	srl	r17,r20,r2
   1a804:	802ad43a 	srli	r21,r16,16
   1a808:	e084d83a 	srl	r2,fp,r2
   1a80c:	a586983a 	sll	r3,r20,r22
   1a810:	8809883a 	mov	r4,r17
   1a814:	a80b883a 	mov	r5,r21
   1a818:	1886b03a 	or	r3,r3,r2
   1a81c:	d8c00115 	stw	r3,4(sp)
   1a820:	0010a1c0 	call	10a1c <__udivsi3>
   1a824:	8809883a 	mov	r4,r17
   1a828:	a80b883a 	mov	r5,r21
   1a82c:	d8800415 	stw	r2,16(sp)
   1a830:	0010a240 	call	10a24 <__umodsi3>
   1a834:	d9000117 	ldw	r4,4(sp)
   1a838:	d9400417 	ldw	r5,16(sp)
   1a83c:	1004943a 	slli	r2,r2,16
   1a840:	85ffffcc 	andi	r23,r16,65535
   1a844:	2006d43a 	srli	r3,r4,16
   1a848:	b963383a 	mul	r17,r23,r5
   1a84c:	10c4b03a 	or	r2,r2,r3
   1a850:	1440042e 	bgeu	r2,r17,1a864 <__udivdi3+0x4ac>
   1a854:	297fffc4 	addi	r5,r5,-1
   1a858:	1405883a 	add	r2,r2,r16
   1a85c:	d9400415 	stw	r5,16(sp)
   1a860:	1400442e 	bgeu	r2,r16,1a974 <__udivdi3+0x5bc>
   1a864:	1463c83a 	sub	r17,r2,r17
   1a868:	8809883a 	mov	r4,r17
   1a86c:	a80b883a 	mov	r5,r21
   1a870:	0010a1c0 	call	10a1c <__udivsi3>
   1a874:	8809883a 	mov	r4,r17
   1a878:	a80b883a 	mov	r5,r21
   1a87c:	1029883a 	mov	r20,r2
   1a880:	0010a240 	call	10a24 <__umodsi3>
   1a884:	d9400117 	ldw	r5,4(sp)
   1a888:	1004943a 	slli	r2,r2,16
   1a88c:	bd09383a 	mul	r4,r23,r20
   1a890:	28ffffcc 	andi	r3,r5,65535
   1a894:	10c6b03a 	or	r3,r2,r3
   1a898:	1900062e 	bgeu	r3,r4,1a8b4 <__udivdi3+0x4fc>
   1a89c:	1c07883a 	add	r3,r3,r16
   1a8a0:	a53fffc4 	addi	r20,r20,-1
   1a8a4:	1c000336 	bltu	r3,r16,1a8b4 <__udivdi3+0x4fc>
   1a8a8:	1900022e 	bgeu	r3,r4,1a8b4 <__udivdi3+0x4fc>
   1a8ac:	a53fffc4 	addi	r20,r20,-1
   1a8b0:	1c07883a 	add	r3,r3,r16
   1a8b4:	d9400417 	ldw	r5,16(sp)
   1a8b8:	e5b8983a 	sll	fp,fp,r22
   1a8bc:	1923c83a 	sub	r17,r3,r4
   1a8c0:	2804943a 	slli	r2,r5,16
   1a8c4:	a0a8b03a 	or	r20,r20,r2
   1a8c8:	dd000315 	stw	r20,12(sp)
   1a8cc:	003ee106 	br	1a454 <__udivdi3+0x9c>
   1a8d0:	2004943a 	slli	r2,r4,16
   1a8d4:	e5c8983a 	sll	r4,fp,r23
   1a8d8:	48ffffcc 	andi	r3,r9,65535
   1a8dc:	10c5883a 	add	r2,r2,r3
   1a8e0:	20bfc22e 	bgeu	r4,r2,1a7ec <__udivdi3+0x434>
   1a8e4:	40bfffc4 	addi	r2,r8,-1
   1a8e8:	0009883a 	mov	r4,zero
   1a8ec:	003f1306 	br	1a53c <__udivdi3+0x184>
   1a8f0:	01400204 	movi	r5,8
   1a8f4:	2805883a 	mov	r2,r5
   1a8f8:	003f0306 	br	1a508 <__udivdi3+0x150>
   1a8fc:	01400604 	movi	r5,24
   1a900:	2805883a 	mov	r2,r5
   1a904:	003f0006 	br	1a508 <__udivdi3+0x150>
   1a908:	01400204 	movi	r5,8
   1a90c:	2805883a 	mov	r2,r5
   1a910:	003ec206 	br	1a41c <__udivdi3+0x64>
   1a914:	01400604 	movi	r5,24
   1a918:	2805883a 	mov	r2,r5
   1a91c:	003ebf06 	br	1a41c <__udivdi3+0x64>
   1a920:	01400204 	movi	r5,8
   1a924:	2805883a 	mov	r2,r5
   1a928:	003f1706 	br	1a588 <__udivdi3+0x1d0>
   1a92c:	01400604 	movi	r5,24
   1a930:	2805883a 	mov	r2,r5
   1a934:	003f1406 	br	1a588 <__udivdi3+0x1d0>
   1a938:	89ff962e 	bgeu	r17,r7,1a794 <__udivdi3+0x3dc>
   1a93c:	8d63883a 	add	r17,r17,r21
   1a940:	843fffc4 	addi	r16,r16,-1
   1a944:	003f9306 	br	1a794 <__udivdi3+0x3dc>
   1a948:	147f802e 	bgeu	r2,r17,1a74c <__udivdi3+0x394>
   1a94c:	a53fffc4 	addi	r20,r20,-1
   1a950:	1545883a 	add	r2,r2,r21
   1a954:	003f7d06 	br	1a74c <__udivdi3+0x394>
   1a958:	a53fffc4 	addi	r20,r20,-1
   1a95c:	003ede06 	br	1a4d8 <__udivdi3+0x120>
   1a960:	b5bfffc4 	addi	r22,r22,-1
   1a964:	1405883a 	add	r2,r2,r16
   1a968:	003f2806 	br	1a60c <__udivdi3+0x254>
   1a96c:	a53fffc4 	addi	r20,r20,-1
   1a970:	003f3706 	br	1a650 <__udivdi3+0x298>
   1a974:	147fbb2e 	bgeu	r2,r17,1a864 <__udivdi3+0x4ac>
   1a978:	297fffc4 	addi	r5,r5,-1
   1a97c:	1405883a 	add	r2,r2,r16
   1a980:	d9400415 	stw	r5,16(sp)
   1a984:	003fb706 	br	1a864 <__udivdi3+0x4ac>
   1a988:	b5bfffc4 	addi	r22,r22,-1
   1a98c:	1405883a 	add	r2,r2,r16
   1a990:	003ec006 	br	1a494 <__udivdi3+0xdc>

0001a994 <__umoddi3>:
   1a994:	defff104 	addi	sp,sp,-60
   1a998:	dd800b15 	stw	r22,44(sp)
   1a99c:	dd000915 	stw	r20,36(sp)
   1a9a0:	dc000515 	stw	r16,20(sp)
   1a9a4:	dfc00e15 	stw	ra,56(sp)
   1a9a8:	df000d15 	stw	fp,52(sp)
   1a9ac:	ddc00c15 	stw	r23,48(sp)
   1a9b0:	dd400a15 	stw	r21,40(sp)
   1a9b4:	dcc00815 	stw	r19,32(sp)
   1a9b8:	dc800715 	stw	r18,28(sp)
   1a9bc:	dc400615 	stw	r17,24(sp)
   1a9c0:	3021883a 	mov	r16,r6
   1a9c4:	202d883a 	mov	r22,r4
   1a9c8:	2829883a 	mov	r20,r5
   1a9cc:	38002b1e 	bne	r7,zero,1aa7c <__umoddi3+0xe8>
   1a9d0:	29805036 	bltu	r5,r6,1ab14 <__umoddi3+0x180>
   1a9d4:	30008a26 	beq	r6,zero,1ac00 <__umoddi3+0x26c>
   1a9d8:	00bfffd4 	movui	r2,65535
   1a9dc:	14008236 	bltu	r2,r16,1abe8 <__umoddi3+0x254>
   1a9e0:	00803fc4 	movi	r2,255
   1a9e4:	14013636 	bltu	r2,r16,1aec0 <__umoddi3+0x52c>
   1a9e8:	000b883a 	mov	r5,zero
   1a9ec:	0005883a 	mov	r2,zero
   1a9f0:	8084d83a 	srl	r2,r16,r2
   1a9f4:	010000b4 	movhi	r4,2
   1a9f8:	213b2704 	addi	r4,r4,-4964
   1a9fc:	01800804 	movi	r6,32
   1aa00:	1105883a 	add	r2,r2,r4
   1aa04:	10c00003 	ldbu	r3,0(r2)
   1aa08:	28c7883a 	add	r3,r5,r3
   1aa0c:	30efc83a 	sub	r23,r6,r3
   1aa10:	b800941e 	bne	r23,zero,1ac64 <__umoddi3+0x2d0>
   1aa14:	802ad43a 	srli	r21,r16,16
   1aa18:	a423c83a 	sub	r17,r20,r16
   1aa1c:	0039883a 	mov	fp,zero
   1aa20:	853fffcc 	andi	r20,r16,65535
   1aa24:	8809883a 	mov	r4,r17
   1aa28:	a80b883a 	mov	r5,r21
   1aa2c:	0010a1c0 	call	10a1c <__udivsi3>
   1aa30:	8809883a 	mov	r4,r17
   1aa34:	a80b883a 	mov	r5,r21
   1aa38:	a0a3383a 	mul	r17,r20,r2
   1aa3c:	0010a240 	call	10a24 <__umodsi3>
   1aa40:	1004943a 	slli	r2,r2,16
   1aa44:	b006d43a 	srli	r3,r22,16
   1aa48:	10c4b03a 	or	r2,r2,r3
   1aa4c:	1440032e 	bgeu	r2,r17,1aa5c <__umoddi3+0xc8>
   1aa50:	1405883a 	add	r2,r2,r16
   1aa54:	14000136 	bltu	r2,r16,1aa5c <__umoddi3+0xc8>
   1aa58:	14413536 	bltu	r2,r17,1af30 <__umoddi3+0x59c>
   1aa5c:	1463c83a 	sub	r17,r2,r17
   1aa60:	8809883a 	mov	r4,r17
   1aa64:	a80b883a 	mov	r5,r21
   1aa68:	0010a1c0 	call	10a1c <__udivsi3>
   1aa6c:	8809883a 	mov	r4,r17
   1aa70:	a0a3383a 	mul	r17,r20,r2
   1aa74:	a80b883a 	mov	r5,r21
   1aa78:	00004d06 	br	1abb0 <__umoddi3+0x21c>
   1aa7c:	380d883a 	mov	r6,r7
   1aa80:	29c0102e 	bgeu	r5,r7,1aac4 <__umoddi3+0x130>
   1aa84:	2011883a 	mov	r8,r4
   1aa88:	2813883a 	mov	r9,r5
   1aa8c:	4005883a 	mov	r2,r8
   1aa90:	4807883a 	mov	r3,r9
   1aa94:	dfc00e17 	ldw	ra,56(sp)
   1aa98:	df000d17 	ldw	fp,52(sp)
   1aa9c:	ddc00c17 	ldw	r23,48(sp)
   1aaa0:	dd800b17 	ldw	r22,44(sp)
   1aaa4:	dd400a17 	ldw	r21,40(sp)
   1aaa8:	dd000917 	ldw	r20,36(sp)
   1aaac:	dcc00817 	ldw	r19,32(sp)
   1aab0:	dc800717 	ldw	r18,28(sp)
   1aab4:	dc400617 	ldw	r17,24(sp)
   1aab8:	dc000517 	ldw	r16,20(sp)
   1aabc:	dec00f04 	addi	sp,sp,60
   1aac0:	f800283a 	ret
   1aac4:	00bfffd4 	movui	r2,65535
   1aac8:	11c05a36 	bltu	r2,r7,1ac34 <__umoddi3+0x2a0>
   1aacc:	00803fc4 	movi	r2,255
   1aad0:	11c0fe36 	bltu	r2,r7,1aecc <__umoddi3+0x538>
   1aad4:	000b883a 	mov	r5,zero
   1aad8:	0005883a 	mov	r2,zero
   1aadc:	3084d83a 	srl	r2,r6,r2
   1aae0:	010000b4 	movhi	r4,2
   1aae4:	213b2704 	addi	r4,r4,-4964
   1aae8:	01c00804 	movi	r7,32
   1aaec:	1105883a 	add	r2,r2,r4
   1aaf0:	10c00003 	ldbu	r3,0(r2)
   1aaf4:	28c7883a 	add	r3,r5,r3
   1aaf8:	38ebc83a 	sub	r21,r7,r3
   1aafc:	a800851e 	bne	r21,zero,1ad14 <__umoddi3+0x380>
   1ab00:	35005236 	bltu	r6,r20,1ac4c <__umoddi3+0x2b8>
   1ab04:	b400512e 	bgeu	r22,r16,1ac4c <__umoddi3+0x2b8>
   1ab08:	b011883a 	mov	r8,r22
   1ab0c:	a013883a 	mov	r9,r20
   1ab10:	003fde06 	br	1aa8c <__umoddi3+0xf8>
   1ab14:	00bfffd4 	movui	r2,65535
   1ab18:	11804036 	bltu	r2,r6,1ac1c <__umoddi3+0x288>
   1ab1c:	00803fc4 	movi	r2,255
   1ab20:	1180ed36 	bltu	r2,r6,1aed8 <__umoddi3+0x544>
   1ab24:	000b883a 	mov	r5,zero
   1ab28:	0005883a 	mov	r2,zero
   1ab2c:	8084d83a 	srl	r2,r16,r2
   1ab30:	010000b4 	movhi	r4,2
   1ab34:	213b2704 	addi	r4,r4,-4964
   1ab38:	01800804 	movi	r6,32
   1ab3c:	1105883a 	add	r2,r2,r4
   1ab40:	10c00003 	ldbu	r3,0(r2)
   1ab44:	28c7883a 	add	r3,r5,r3
   1ab48:	30c7c83a 	sub	r3,r6,r3
   1ab4c:	1800bf1e 	bne	r3,zero,1ae4c <__umoddi3+0x4b8>
   1ab50:	0039883a 	mov	fp,zero
   1ab54:	802ad43a 	srli	r21,r16,16
   1ab58:	a009883a 	mov	r4,r20
   1ab5c:	85ffffcc 	andi	r23,r16,65535
   1ab60:	a80b883a 	mov	r5,r21
   1ab64:	0010a1c0 	call	10a1c <__udivsi3>
   1ab68:	a009883a 	mov	r4,r20
   1ab6c:	a80b883a 	mov	r5,r21
   1ab70:	b8a3383a 	mul	r17,r23,r2
   1ab74:	0010a240 	call	10a24 <__umodsi3>
   1ab78:	1004943a 	slli	r2,r2,16
   1ab7c:	b006d43a 	srli	r3,r22,16
   1ab80:	10c4b03a 	or	r2,r2,r3
   1ab84:	1440032e 	bgeu	r2,r17,1ab94 <__umoddi3+0x200>
   1ab88:	1405883a 	add	r2,r2,r16
   1ab8c:	14000136 	bltu	r2,r16,1ab94 <__umoddi3+0x200>
   1ab90:	1440e536 	bltu	r2,r17,1af28 <__umoddi3+0x594>
   1ab94:	1463c83a 	sub	r17,r2,r17
   1ab98:	8809883a 	mov	r4,r17
   1ab9c:	a80b883a 	mov	r5,r21
   1aba0:	0010a1c0 	call	10a1c <__udivsi3>
   1aba4:	8809883a 	mov	r4,r17
   1aba8:	b8a3383a 	mul	r17,r23,r2
   1abac:	a80b883a 	mov	r5,r21
   1abb0:	0010a240 	call	10a24 <__umodsi3>
   1abb4:	1004943a 	slli	r2,r2,16
   1abb8:	b0ffffcc 	andi	r3,r22,65535
   1abbc:	10c4b03a 	or	r2,r2,r3
   1abc0:	1440042e 	bgeu	r2,r17,1abd4 <__umoddi3+0x240>
   1abc4:	1405883a 	add	r2,r2,r16
   1abc8:	14000236 	bltu	r2,r16,1abd4 <__umoddi3+0x240>
   1abcc:	1440012e 	bgeu	r2,r17,1abd4 <__umoddi3+0x240>
   1abd0:	1405883a 	add	r2,r2,r16
   1abd4:	1445c83a 	sub	r2,r2,r17
   1abd8:	1724d83a 	srl	r18,r2,fp
   1abdc:	0013883a 	mov	r9,zero
   1abe0:	9011883a 	mov	r8,r18
   1abe4:	003fa906 	br	1aa8c <__umoddi3+0xf8>
   1abe8:	00804034 	movhi	r2,256
   1abec:	10bfffc4 	addi	r2,r2,-1
   1abf0:	1400b036 	bltu	r2,r16,1aeb4 <__umoddi3+0x520>
   1abf4:	01400404 	movi	r5,16
   1abf8:	2805883a 	mov	r2,r5
   1abfc:	003f7c06 	br	1a9f0 <__umoddi3+0x5c>
   1ac00:	01000044 	movi	r4,1
   1ac04:	000b883a 	mov	r5,zero
   1ac08:	0010a1c0 	call	10a1c <__udivsi3>
   1ac0c:	1021883a 	mov	r16,r2
   1ac10:	00bfffd4 	movui	r2,65535
   1ac14:	143ff436 	bltu	r2,r16,1abe8 <__umoddi3+0x254>
   1ac18:	003f7106 	br	1a9e0 <__umoddi3+0x4c>
   1ac1c:	00804034 	movhi	r2,256
   1ac20:	10bfffc4 	addi	r2,r2,-1
   1ac24:	1180af36 	bltu	r2,r6,1aee4 <__umoddi3+0x550>
   1ac28:	01400404 	movi	r5,16
   1ac2c:	2805883a 	mov	r2,r5
   1ac30:	003fbe06 	br	1ab2c <__umoddi3+0x198>
   1ac34:	00804034 	movhi	r2,256
   1ac38:	10bfffc4 	addi	r2,r2,-1
   1ac3c:	11c0ac36 	bltu	r2,r7,1aef0 <__umoddi3+0x55c>
   1ac40:	01400404 	movi	r5,16
   1ac44:	2805883a 	mov	r2,r5
   1ac48:	003fa406 	br	1aadc <__umoddi3+0x148>
   1ac4c:	b409c83a 	sub	r4,r22,r16
   1ac50:	b105803a 	cmpltu	r2,r22,r4
   1ac54:	a187c83a 	sub	r3,r20,r6
   1ac58:	18a9c83a 	sub	r20,r3,r2
   1ac5c:	202d883a 	mov	r22,r4
   1ac60:	003fa906 	br	1ab08 <__umoddi3+0x174>
   1ac64:	85e0983a 	sll	r16,r16,r23
   1ac68:	35c5c83a 	sub	r2,r6,r23
   1ac6c:	a0a2d83a 	srl	r17,r20,r2
   1ac70:	802ad43a 	srli	r21,r16,16
   1ac74:	b084d83a 	srl	r2,r22,r2
   1ac78:	a5c6983a 	sll	r3,r20,r23
   1ac7c:	8809883a 	mov	r4,r17
   1ac80:	a80b883a 	mov	r5,r21
   1ac84:	1886b03a 	or	r3,r3,r2
   1ac88:	d8c00115 	stw	r3,4(sp)
   1ac8c:	853fffcc 	andi	r20,r16,65535
   1ac90:	0010a1c0 	call	10a1c <__udivsi3>
   1ac94:	8809883a 	mov	r4,r17
   1ac98:	a80b883a 	mov	r5,r21
   1ac9c:	a0a3383a 	mul	r17,r20,r2
   1aca0:	0010a240 	call	10a24 <__umodsi3>
   1aca4:	d9000117 	ldw	r4,4(sp)
   1aca8:	1004943a 	slli	r2,r2,16
   1acac:	b839883a 	mov	fp,r23
   1acb0:	2006d43a 	srli	r3,r4,16
   1acb4:	10c4b03a 	or	r2,r2,r3
   1acb8:	1440022e 	bgeu	r2,r17,1acc4 <__umoddi3+0x330>
   1acbc:	1405883a 	add	r2,r2,r16
   1acc0:	1400962e 	bgeu	r2,r16,1af1c <__umoddi3+0x588>
   1acc4:	1463c83a 	sub	r17,r2,r17
   1acc8:	8809883a 	mov	r4,r17
   1accc:	a80b883a 	mov	r5,r21
   1acd0:	0010a1c0 	call	10a1c <__udivsi3>
   1acd4:	8809883a 	mov	r4,r17
   1acd8:	a80b883a 	mov	r5,r21
   1acdc:	a0a3383a 	mul	r17,r20,r2
   1ace0:	0010a240 	call	10a24 <__umodsi3>
   1ace4:	d9400117 	ldw	r5,4(sp)
   1ace8:	1004943a 	slli	r2,r2,16
   1acec:	28ffffcc 	andi	r3,r5,65535
   1acf0:	10c4b03a 	or	r2,r2,r3
   1acf4:	1440042e 	bgeu	r2,r17,1ad08 <__umoddi3+0x374>
   1acf8:	1405883a 	add	r2,r2,r16
   1acfc:	14000236 	bltu	r2,r16,1ad08 <__umoddi3+0x374>
   1ad00:	1440012e 	bgeu	r2,r17,1ad08 <__umoddi3+0x374>
   1ad04:	1405883a 	add	r2,r2,r16
   1ad08:	b5ec983a 	sll	r22,r22,r23
   1ad0c:	1463c83a 	sub	r17,r2,r17
   1ad10:	003f4406 	br	1aa24 <__umoddi3+0x90>
   1ad14:	3d4fc83a 	sub	r7,r7,r21
   1ad18:	3546983a 	sll	r3,r6,r21
   1ad1c:	81c4d83a 	srl	r2,r16,r7
   1ad20:	a1e2d83a 	srl	r17,r20,r7
   1ad24:	a54c983a 	sll	r6,r20,r21
   1ad28:	18aeb03a 	or	r23,r3,r2
   1ad2c:	b828d43a 	srli	r20,r23,16
   1ad30:	b1c4d83a 	srl	r2,r22,r7
   1ad34:	8809883a 	mov	r4,r17
   1ad38:	a00b883a 	mov	r5,r20
   1ad3c:	308cb03a 	or	r6,r6,r2
   1ad40:	d9c00315 	stw	r7,12(sp)
   1ad44:	d9800215 	stw	r6,8(sp)
   1ad48:	0010a1c0 	call	10a1c <__udivsi3>
   1ad4c:	8809883a 	mov	r4,r17
   1ad50:	a00b883a 	mov	r5,r20
   1ad54:	1039883a 	mov	fp,r2
   1ad58:	0010a240 	call	10a24 <__umodsi3>
   1ad5c:	b8ffffcc 	andi	r3,r23,65535
   1ad60:	d8c00415 	stw	r3,16(sp)
   1ad64:	d9000217 	ldw	r4,8(sp)
   1ad68:	d9400417 	ldw	r5,16(sp)
   1ad6c:	1004943a 	slli	r2,r2,16
   1ad70:	2006d43a 	srli	r3,r4,16
   1ad74:	8560983a 	sll	r16,r16,r21
   1ad78:	2f23383a 	mul	r17,r5,fp
   1ad7c:	10c4b03a 	or	r2,r2,r3
   1ad80:	dc000015 	stw	r16,0(sp)
   1ad84:	b56c983a 	sll	r22,r22,r21
   1ad88:	1440032e 	bgeu	r2,r17,1ad98 <__umoddi3+0x404>
   1ad8c:	15c5883a 	add	r2,r2,r23
   1ad90:	e73fffc4 	addi	fp,fp,-1
   1ad94:	15c05d2e 	bgeu	r2,r23,1af0c <__umoddi3+0x578>
   1ad98:	1463c83a 	sub	r17,r2,r17
   1ad9c:	8809883a 	mov	r4,r17
   1ada0:	a00b883a 	mov	r5,r20
   1ada4:	0010a1c0 	call	10a1c <__udivsi3>
   1ada8:	8809883a 	mov	r4,r17
   1adac:	a00b883a 	mov	r5,r20
   1adb0:	1021883a 	mov	r16,r2
   1adb4:	0010a240 	call	10a24 <__umodsi3>
   1adb8:	d8c00417 	ldw	r3,16(sp)
   1adbc:	d9000217 	ldw	r4,8(sp)
   1adc0:	1004943a 	slli	r2,r2,16
   1adc4:	1c23383a 	mul	r17,r3,r16
   1adc8:	20ffffcc 	andi	r3,r4,65535
   1adcc:	10ceb03a 	or	r7,r2,r3
   1add0:	3c40032e 	bgeu	r7,r17,1ade0 <__umoddi3+0x44c>
   1add4:	3dcf883a 	add	r7,r7,r23
   1add8:	843fffc4 	addi	r16,r16,-1
   1addc:	3dc0472e 	bgeu	r7,r23,1aefc <__umoddi3+0x568>
   1ade0:	e004943a 	slli	r2,fp,16
   1ade4:	d9400017 	ldw	r5,0(sp)
   1ade8:	3c4fc83a 	sub	r7,r7,r17
   1adec:	8084b03a 	or	r2,r16,r2
   1adf0:	28ffffcc 	andi	r3,r5,65535
   1adf4:	280cd43a 	srli	r6,r5,16
   1adf8:	100ad43a 	srli	r5,r2,16
   1adfc:	10bfffcc 	andi	r2,r2,65535
   1ae00:	10d1383a 	mul	r8,r2,r3
   1ae04:	28c7383a 	mul	r3,r5,r3
   1ae08:	1185383a 	mul	r2,r2,r6
   1ae0c:	4008d43a 	srli	r4,r8,16
   1ae10:	298b383a 	mul	r5,r5,r6
   1ae14:	10c5883a 	add	r2,r2,r3
   1ae18:	2089883a 	add	r4,r4,r2
   1ae1c:	20c0022e 	bgeu	r4,r3,1ae28 <__umoddi3+0x494>
   1ae20:	00800074 	movhi	r2,1
   1ae24:	288b883a 	add	r5,r5,r2
   1ae28:	2004d43a 	srli	r2,r4,16
   1ae2c:	2008943a 	slli	r4,r4,16
   1ae30:	40ffffcc 	andi	r3,r8,65535
   1ae34:	288b883a 	add	r5,r5,r2
   1ae38:	20c9883a 	add	r4,r4,r3
   1ae3c:	39400b36 	bltu	r7,r5,1ae6c <__umoddi3+0x4d8>
   1ae40:	39403d26 	beq	r7,r5,1af38 <__umoddi3+0x5a4>
   1ae44:	394bc83a 	sub	r5,r7,r5
   1ae48:	00000f06 	br	1ae88 <__umoddi3+0x4f4>
   1ae4c:	30c5c83a 	sub	r2,r6,r3
   1ae50:	1839883a 	mov	fp,r3
   1ae54:	b084d83a 	srl	r2,r22,r2
   1ae58:	a0c6983a 	sll	r3,r20,r3
   1ae5c:	8720983a 	sll	r16,r16,fp
   1ae60:	b72c983a 	sll	r22,r22,fp
   1ae64:	18a8b03a 	or	r20,r3,r2
   1ae68:	003f3a06 	br	1ab54 <__umoddi3+0x1c0>
   1ae6c:	d8c00017 	ldw	r3,0(sp)
   1ae70:	20c5c83a 	sub	r2,r4,r3
   1ae74:	2089803a 	cmpltu	r4,r4,r2
   1ae78:	2dc7c83a 	sub	r3,r5,r23
   1ae7c:	1907c83a 	sub	r3,r3,r4
   1ae80:	38cbc83a 	sub	r5,r7,r3
   1ae84:	1009883a 	mov	r4,r2
   1ae88:	b105c83a 	sub	r2,r22,r4
   1ae8c:	b087803a 	cmpltu	r3,r22,r2
   1ae90:	28c7c83a 	sub	r3,r5,r3
   1ae94:	d9400317 	ldw	r5,12(sp)
   1ae98:	1544d83a 	srl	r2,r2,r21
   1ae9c:	1948983a 	sll	r4,r3,r5
   1aea0:	1d46d83a 	srl	r3,r3,r21
   1aea4:	20a4b03a 	or	r18,r4,r2
   1aea8:	9011883a 	mov	r8,r18
   1aeac:	1813883a 	mov	r9,r3
   1aeb0:	003ef606 	br	1aa8c <__umoddi3+0xf8>
   1aeb4:	01400604 	movi	r5,24
   1aeb8:	2805883a 	mov	r2,r5
   1aebc:	003ecc06 	br	1a9f0 <__umoddi3+0x5c>
   1aec0:	01400204 	movi	r5,8
   1aec4:	2805883a 	mov	r2,r5
   1aec8:	003ec906 	br	1a9f0 <__umoddi3+0x5c>
   1aecc:	01400204 	movi	r5,8
   1aed0:	2805883a 	mov	r2,r5
   1aed4:	003f0106 	br	1aadc <__umoddi3+0x148>
   1aed8:	01400204 	movi	r5,8
   1aedc:	2805883a 	mov	r2,r5
   1aee0:	003f1206 	br	1ab2c <__umoddi3+0x198>
   1aee4:	01400604 	movi	r5,24
   1aee8:	2805883a 	mov	r2,r5
   1aeec:	003f0f06 	br	1ab2c <__umoddi3+0x198>
   1aef0:	01400604 	movi	r5,24
   1aef4:	2805883a 	mov	r2,r5
   1aef8:	003ef806 	br	1aadc <__umoddi3+0x148>
   1aefc:	3c7fb82e 	bgeu	r7,r17,1ade0 <__umoddi3+0x44c>
   1af00:	843fffc4 	addi	r16,r16,-1
   1af04:	3dcf883a 	add	r7,r7,r23
   1af08:	003fb506 	br	1ade0 <__umoddi3+0x44c>
   1af0c:	147fa22e 	bgeu	r2,r17,1ad98 <__umoddi3+0x404>
   1af10:	e73fffc4 	addi	fp,fp,-1
   1af14:	15c5883a 	add	r2,r2,r23
   1af18:	003f9f06 	br	1ad98 <__umoddi3+0x404>
   1af1c:	147f692e 	bgeu	r2,r17,1acc4 <__umoddi3+0x330>
   1af20:	1405883a 	add	r2,r2,r16
   1af24:	003f6706 	br	1acc4 <__umoddi3+0x330>
   1af28:	1405883a 	add	r2,r2,r16
   1af2c:	003f1906 	br	1ab94 <__umoddi3+0x200>
   1af30:	1405883a 	add	r2,r2,r16
   1af34:	003ec906 	br	1aa5c <__umoddi3+0xc8>
   1af38:	b13fcc36 	bltu	r22,r4,1ae6c <__umoddi3+0x4d8>
   1af3c:	000b883a 	mov	r5,zero
   1af40:	003fd106 	br	1ae88 <__umoddi3+0x4f4>

0001af44 <__divdf3>:
   1af44:	deffed04 	addi	sp,sp,-76
   1af48:	dcc01115 	stw	r19,68(sp)
   1af4c:	dcc00404 	addi	r19,sp,16
   1af50:	2011883a 	mov	r8,r4
   1af54:	2813883a 	mov	r9,r5
   1af58:	dc000e15 	stw	r16,56(sp)
   1af5c:	d809883a 	mov	r4,sp
   1af60:	980b883a 	mov	r5,r19
   1af64:	dc000904 	addi	r16,sp,36
   1af68:	dfc01215 	stw	ra,72(sp)
   1af6c:	da400115 	stw	r9,4(sp)
   1af70:	d9c00315 	stw	r7,12(sp)
   1af74:	da000015 	stw	r8,0(sp)
   1af78:	d9800215 	stw	r6,8(sp)
   1af7c:	dc801015 	stw	r18,64(sp)
   1af80:	dc400f15 	stw	r17,60(sp)
   1af84:	00116700 	call	11670 <__unpack_d>
   1af88:	d9000204 	addi	r4,sp,8
   1af8c:	800b883a 	mov	r5,r16
   1af90:	00116700 	call	11670 <__unpack_d>
   1af94:	d9000417 	ldw	r4,16(sp)
   1af98:	00800044 	movi	r2,1
   1af9c:	11000b2e 	bgeu	r2,r4,1afcc <__divdf3+0x88>
   1afa0:	d9400917 	ldw	r5,36(sp)
   1afa4:	1140762e 	bgeu	r2,r5,1b180 <__divdf3+0x23c>
   1afa8:	d8800517 	ldw	r2,20(sp)
   1afac:	d8c00a17 	ldw	r3,40(sp)
   1afb0:	01800104 	movi	r6,4
   1afb4:	10c4f03a 	xor	r2,r2,r3
   1afb8:	d8800515 	stw	r2,20(sp)
   1afbc:	21800226 	beq	r4,r6,1afc8 <__divdf3+0x84>
   1afc0:	00800084 	movi	r2,2
   1afc4:	2080141e 	bne	r4,r2,1b018 <__divdf3+0xd4>
   1afc8:	29000926 	beq	r5,r4,1aff0 <__divdf3+0xac>
   1afcc:	9809883a 	mov	r4,r19
   1afd0:	001135c0 	call	1135c <__pack_d>
   1afd4:	dfc01217 	ldw	ra,72(sp)
   1afd8:	dcc01117 	ldw	r19,68(sp)
   1afdc:	dc801017 	ldw	r18,64(sp)
   1afe0:	dc400f17 	ldw	r17,60(sp)
   1afe4:	dc000e17 	ldw	r16,56(sp)
   1afe8:	dec01304 	addi	sp,sp,76
   1afec:	f800283a 	ret
   1aff0:	010000b4 	movhi	r4,2
   1aff4:	213b2204 	addi	r4,r4,-4984
   1aff8:	001135c0 	call	1135c <__pack_d>
   1affc:	dfc01217 	ldw	ra,72(sp)
   1b000:	dcc01117 	ldw	r19,68(sp)
   1b004:	dc801017 	ldw	r18,64(sp)
   1b008:	dc400f17 	ldw	r17,60(sp)
   1b00c:	dc000e17 	ldw	r16,56(sp)
   1b010:	dec01304 	addi	sp,sp,76
   1b014:	f800283a 	ret
   1b018:	29805b26 	beq	r5,r6,1b188 <__divdf3+0x244>
   1b01c:	28802d26 	beq	r5,r2,1b0d4 <__divdf3+0x190>
   1b020:	d8c00617 	ldw	r3,24(sp)
   1b024:	d8800b17 	ldw	r2,44(sp)
   1b028:	d9c00817 	ldw	r7,32(sp)
   1b02c:	dc400d17 	ldw	r17,52(sp)
   1b030:	188bc83a 	sub	r5,r3,r2
   1b034:	d9800717 	ldw	r6,28(sp)
   1b038:	dc000c17 	ldw	r16,48(sp)
   1b03c:	d9400615 	stw	r5,24(sp)
   1b040:	3c403836 	bltu	r7,r17,1b124 <__divdf3+0x1e0>
   1b044:	89c03626 	beq	r17,r7,1b120 <__divdf3+0x1dc>
   1b048:	0015883a 	mov	r10,zero
   1b04c:	001d883a 	mov	r14,zero
   1b050:	02c40034 	movhi	r11,4096
   1b054:	001f883a 	mov	r15,zero
   1b058:	003f883a 	mov	ra,zero
   1b05c:	04800f44 	movi	r18,61
   1b060:	00000f06 	br	1b0a0 <__divdf3+0x15c>
   1b064:	601d883a 	mov	r14,r12
   1b068:	681f883a 	mov	r15,r13
   1b06c:	400d883a 	mov	r6,r8
   1b070:	100f883a 	mov	r7,r2
   1b074:	3191883a 	add	r8,r6,r6
   1b078:	5808d07a 	srli	r4,r11,1
   1b07c:	4185803a 	cmpltu	r2,r8,r6
   1b080:	39d3883a 	add	r9,r7,r7
   1b084:	28c6b03a 	or	r3,r5,r3
   1b088:	1245883a 	add	r2,r2,r9
   1b08c:	1815883a 	mov	r10,r3
   1b090:	2017883a 	mov	r11,r4
   1b094:	400d883a 	mov	r6,r8
   1b098:	100f883a 	mov	r7,r2
   1b09c:	fc801726 	beq	ra,r18,1b0fc <__divdf3+0x1b8>
   1b0a0:	580a97fa 	slli	r5,r11,31
   1b0a4:	5006d07a 	srli	r3,r10,1
   1b0a8:	ffc00044 	addi	ra,ra,1
   1b0ac:	3c7ff136 	bltu	r7,r17,1b074 <__divdf3+0x130>
   1b0b0:	3411c83a 	sub	r8,r6,r16
   1b0b4:	3205803a 	cmpltu	r2,r6,r8
   1b0b8:	3c53c83a 	sub	r9,r7,r17
   1b0bc:	7298b03a 	or	r12,r14,r10
   1b0c0:	7adab03a 	or	r13,r15,r11
   1b0c4:	4885c83a 	sub	r2,r9,r2
   1b0c8:	89ffe61e 	bne	r17,r7,1b064 <__divdf3+0x120>
   1b0cc:	343fe936 	bltu	r6,r16,1b074 <__divdf3+0x130>
   1b0d0:	003fe406 	br	1b064 <__divdf3+0x120>
   1b0d4:	9809883a 	mov	r4,r19
   1b0d8:	d9800415 	stw	r6,16(sp)
   1b0dc:	001135c0 	call	1135c <__pack_d>
   1b0e0:	dfc01217 	ldw	ra,72(sp)
   1b0e4:	dcc01117 	ldw	r19,68(sp)
   1b0e8:	dc801017 	ldw	r18,64(sp)
   1b0ec:	dc400f17 	ldw	r17,60(sp)
   1b0f0:	dc000e17 	ldw	r16,56(sp)
   1b0f4:	dec01304 	addi	sp,sp,76
   1b0f8:	f800283a 	ret
   1b0fc:	00803fc4 	movi	r2,255
   1b100:	7090703a 	and	r8,r14,r2
   1b104:	00802004 	movi	r2,128
   1b108:	0007883a 	mov	r3,zero
   1b10c:	0013883a 	mov	r9,zero
   1b110:	40800d26 	beq	r8,r2,1b148 <__divdf3+0x204>
   1b114:	dbc00815 	stw	r15,32(sp)
   1b118:	db800715 	stw	r14,28(sp)
   1b11c:	003fab06 	br	1afcc <__divdf3+0x88>
   1b120:	343fc92e 	bgeu	r6,r16,1b048 <__divdf3+0x104>
   1b124:	3185883a 	add	r2,r6,r6
   1b128:	1189803a 	cmpltu	r4,r2,r6
   1b12c:	39c7883a 	add	r3,r7,r7
   1b130:	20c9883a 	add	r4,r4,r3
   1b134:	297fffc4 	addi	r5,r5,-1
   1b138:	100d883a 	mov	r6,r2
   1b13c:	200f883a 	mov	r7,r4
   1b140:	d9400615 	stw	r5,24(sp)
   1b144:	003fc006 	br	1b048 <__divdf3+0x104>
   1b148:	483ff21e 	bne	r9,zero,1b114 <__divdf3+0x1d0>
   1b14c:	01004004 	movi	r4,256
   1b150:	7104703a 	and	r2,r14,r4
   1b154:	10c4b03a 	or	r2,r2,r3
   1b158:	103fee1e 	bne	r2,zero,1b114 <__divdf3+0x1d0>
   1b15c:	31c4b03a 	or	r2,r6,r7
   1b160:	103fec26 	beq	r2,zero,1b114 <__divdf3+0x1d0>
   1b164:	7205883a 	add	r2,r14,r8
   1b168:	1391803a 	cmpltu	r8,r2,r14
   1b16c:	43d1883a 	add	r8,r8,r15
   1b170:	013fc004 	movi	r4,-256
   1b174:	111c703a 	and	r14,r2,r4
   1b178:	401f883a 	mov	r15,r8
   1b17c:	003fe506 	br	1b114 <__divdf3+0x1d0>
   1b180:	8009883a 	mov	r4,r16
   1b184:	003f9206 	br	1afd0 <__divdf3+0x8c>
   1b188:	9809883a 	mov	r4,r19
   1b18c:	d8000715 	stw	zero,28(sp)
   1b190:	d8000815 	stw	zero,32(sp)
   1b194:	d8000615 	stw	zero,24(sp)
   1b198:	003f8d06 	br	1afd0 <__divdf3+0x8c>

0001b19c <__eqdf2>:
   1b19c:	deffef04 	addi	sp,sp,-68
   1b1a0:	dc400f15 	stw	r17,60(sp)
   1b1a4:	dc400404 	addi	r17,sp,16
   1b1a8:	2005883a 	mov	r2,r4
   1b1ac:	2807883a 	mov	r3,r5
   1b1b0:	dc000e15 	stw	r16,56(sp)
   1b1b4:	d809883a 	mov	r4,sp
   1b1b8:	880b883a 	mov	r5,r17
   1b1bc:	dc000904 	addi	r16,sp,36
   1b1c0:	d8c00115 	stw	r3,4(sp)
   1b1c4:	d8800015 	stw	r2,0(sp)
   1b1c8:	d9800215 	stw	r6,8(sp)
   1b1cc:	dfc01015 	stw	ra,64(sp)
   1b1d0:	d9c00315 	stw	r7,12(sp)
   1b1d4:	00116700 	call	11670 <__unpack_d>
   1b1d8:	d9000204 	addi	r4,sp,8
   1b1dc:	800b883a 	mov	r5,r16
   1b1e0:	00116700 	call	11670 <__unpack_d>
   1b1e4:	d8800417 	ldw	r2,16(sp)
   1b1e8:	00c00044 	movi	r3,1
   1b1ec:	180d883a 	mov	r6,r3
   1b1f0:	1880062e 	bgeu	r3,r2,1b20c <__eqdf2+0x70>
   1b1f4:	d8800917 	ldw	r2,36(sp)
   1b1f8:	8809883a 	mov	r4,r17
   1b1fc:	800b883a 	mov	r5,r16
   1b200:	1880022e 	bgeu	r3,r2,1b20c <__eqdf2+0x70>
   1b204:	00117a80 	call	117a8 <__fpcmp_parts_d>
   1b208:	100d883a 	mov	r6,r2
   1b20c:	3005883a 	mov	r2,r6
   1b210:	dfc01017 	ldw	ra,64(sp)
   1b214:	dc400f17 	ldw	r17,60(sp)
   1b218:	dc000e17 	ldw	r16,56(sp)
   1b21c:	dec01104 	addi	sp,sp,68
   1b220:	f800283a 	ret

0001b224 <__nedf2>:
   1b224:	deffef04 	addi	sp,sp,-68
   1b228:	dc400f15 	stw	r17,60(sp)
   1b22c:	dc400404 	addi	r17,sp,16
   1b230:	2005883a 	mov	r2,r4
   1b234:	2807883a 	mov	r3,r5
   1b238:	dc000e15 	stw	r16,56(sp)
   1b23c:	d809883a 	mov	r4,sp
   1b240:	880b883a 	mov	r5,r17
   1b244:	dc000904 	addi	r16,sp,36
   1b248:	d8c00115 	stw	r3,4(sp)
   1b24c:	d8800015 	stw	r2,0(sp)
   1b250:	d9800215 	stw	r6,8(sp)
   1b254:	dfc01015 	stw	ra,64(sp)
   1b258:	d9c00315 	stw	r7,12(sp)
   1b25c:	00116700 	call	11670 <__unpack_d>
   1b260:	d9000204 	addi	r4,sp,8
   1b264:	800b883a 	mov	r5,r16
   1b268:	00116700 	call	11670 <__unpack_d>
   1b26c:	d8800417 	ldw	r2,16(sp)
   1b270:	00c00044 	movi	r3,1
   1b274:	180d883a 	mov	r6,r3
   1b278:	1880062e 	bgeu	r3,r2,1b294 <__nedf2+0x70>
   1b27c:	d8800917 	ldw	r2,36(sp)
   1b280:	8809883a 	mov	r4,r17
   1b284:	800b883a 	mov	r5,r16
   1b288:	1880022e 	bgeu	r3,r2,1b294 <__nedf2+0x70>
   1b28c:	00117a80 	call	117a8 <__fpcmp_parts_d>
   1b290:	100d883a 	mov	r6,r2
   1b294:	3005883a 	mov	r2,r6
   1b298:	dfc01017 	ldw	ra,64(sp)
   1b29c:	dc400f17 	ldw	r17,60(sp)
   1b2a0:	dc000e17 	ldw	r16,56(sp)
   1b2a4:	dec01104 	addi	sp,sp,68
   1b2a8:	f800283a 	ret

0001b2ac <__gtdf2>:
   1b2ac:	deffef04 	addi	sp,sp,-68
   1b2b0:	dc400f15 	stw	r17,60(sp)
   1b2b4:	dc400404 	addi	r17,sp,16
   1b2b8:	2005883a 	mov	r2,r4
   1b2bc:	2807883a 	mov	r3,r5
   1b2c0:	dc000e15 	stw	r16,56(sp)
   1b2c4:	d809883a 	mov	r4,sp
   1b2c8:	880b883a 	mov	r5,r17
   1b2cc:	dc000904 	addi	r16,sp,36
   1b2d0:	d8c00115 	stw	r3,4(sp)
   1b2d4:	d8800015 	stw	r2,0(sp)
   1b2d8:	d9800215 	stw	r6,8(sp)
   1b2dc:	dfc01015 	stw	ra,64(sp)
   1b2e0:	d9c00315 	stw	r7,12(sp)
   1b2e4:	00116700 	call	11670 <__unpack_d>
   1b2e8:	d9000204 	addi	r4,sp,8
   1b2ec:	800b883a 	mov	r5,r16
   1b2f0:	00116700 	call	11670 <__unpack_d>
   1b2f4:	d8800417 	ldw	r2,16(sp)
   1b2f8:	00c00044 	movi	r3,1
   1b2fc:	01bfffc4 	movi	r6,-1
   1b300:	1880062e 	bgeu	r3,r2,1b31c <__gtdf2+0x70>
   1b304:	d8800917 	ldw	r2,36(sp)
   1b308:	8809883a 	mov	r4,r17
   1b30c:	800b883a 	mov	r5,r16
   1b310:	1880022e 	bgeu	r3,r2,1b31c <__gtdf2+0x70>
   1b314:	00117a80 	call	117a8 <__fpcmp_parts_d>
   1b318:	100d883a 	mov	r6,r2
   1b31c:	3005883a 	mov	r2,r6
   1b320:	dfc01017 	ldw	ra,64(sp)
   1b324:	dc400f17 	ldw	r17,60(sp)
   1b328:	dc000e17 	ldw	r16,56(sp)
   1b32c:	dec01104 	addi	sp,sp,68
   1b330:	f800283a 	ret

0001b334 <__gedf2>:
   1b334:	deffef04 	addi	sp,sp,-68
   1b338:	dc400f15 	stw	r17,60(sp)
   1b33c:	dc400404 	addi	r17,sp,16
   1b340:	2005883a 	mov	r2,r4
   1b344:	2807883a 	mov	r3,r5
   1b348:	dc000e15 	stw	r16,56(sp)
   1b34c:	d809883a 	mov	r4,sp
   1b350:	880b883a 	mov	r5,r17
   1b354:	dc000904 	addi	r16,sp,36
   1b358:	d8c00115 	stw	r3,4(sp)
   1b35c:	d8800015 	stw	r2,0(sp)
   1b360:	d9800215 	stw	r6,8(sp)
   1b364:	dfc01015 	stw	ra,64(sp)
   1b368:	d9c00315 	stw	r7,12(sp)
   1b36c:	00116700 	call	11670 <__unpack_d>
   1b370:	d9000204 	addi	r4,sp,8
   1b374:	800b883a 	mov	r5,r16
   1b378:	00116700 	call	11670 <__unpack_d>
   1b37c:	d8800417 	ldw	r2,16(sp)
   1b380:	00c00044 	movi	r3,1
   1b384:	01bfffc4 	movi	r6,-1
   1b388:	1880062e 	bgeu	r3,r2,1b3a4 <__gedf2+0x70>
   1b38c:	d8800917 	ldw	r2,36(sp)
   1b390:	8809883a 	mov	r4,r17
   1b394:	800b883a 	mov	r5,r16
   1b398:	1880022e 	bgeu	r3,r2,1b3a4 <__gedf2+0x70>
   1b39c:	00117a80 	call	117a8 <__fpcmp_parts_d>
   1b3a0:	100d883a 	mov	r6,r2
   1b3a4:	3005883a 	mov	r2,r6
   1b3a8:	dfc01017 	ldw	ra,64(sp)
   1b3ac:	dc400f17 	ldw	r17,60(sp)
   1b3b0:	dc000e17 	ldw	r16,56(sp)
   1b3b4:	dec01104 	addi	sp,sp,68
   1b3b8:	f800283a 	ret

0001b3bc <__floatunsidf>:
   1b3bc:	defff204 	addi	sp,sp,-56
   1b3c0:	dfc00d15 	stw	ra,52(sp)
   1b3c4:	ddc00c15 	stw	r23,48(sp)
   1b3c8:	dd800b15 	stw	r22,44(sp)
   1b3cc:	dd400a15 	stw	r21,40(sp)
   1b3d0:	dd000915 	stw	r20,36(sp)
   1b3d4:	dcc00815 	stw	r19,32(sp)
   1b3d8:	dc800715 	stw	r18,28(sp)
   1b3dc:	dc400615 	stw	r17,24(sp)
   1b3e0:	dc000515 	stw	r16,20(sp)
   1b3e4:	d8000115 	stw	zero,4(sp)
   1b3e8:	20000f1e 	bne	r4,zero,1b428 <__floatunsidf+0x6c>
   1b3ec:	00800084 	movi	r2,2
   1b3f0:	d8800015 	stw	r2,0(sp)
   1b3f4:	d809883a 	mov	r4,sp
   1b3f8:	001135c0 	call	1135c <__pack_d>
   1b3fc:	dfc00d17 	ldw	ra,52(sp)
   1b400:	ddc00c17 	ldw	r23,48(sp)
   1b404:	dd800b17 	ldw	r22,44(sp)
   1b408:	dd400a17 	ldw	r21,40(sp)
   1b40c:	dd000917 	ldw	r20,36(sp)
   1b410:	dcc00817 	ldw	r19,32(sp)
   1b414:	dc800717 	ldw	r18,28(sp)
   1b418:	dc400617 	ldw	r17,24(sp)
   1b41c:	dc000517 	ldw	r16,20(sp)
   1b420:	dec00e04 	addi	sp,sp,56
   1b424:	f800283a 	ret
   1b428:	008000c4 	movi	r2,3
   1b42c:	00c00f04 	movi	r3,60
   1b430:	002f883a 	mov	r23,zero
   1b434:	202d883a 	mov	r22,r4
   1b438:	d8800015 	stw	r2,0(sp)
   1b43c:	d8c00215 	stw	r3,8(sp)
   1b440:	d9000315 	stw	r4,12(sp)
   1b444:	ddc00415 	stw	r23,16(sp)
   1b448:	001100c0 	call	1100c <__clzsi2>
   1b44c:	12400744 	addi	r9,r2,29
   1b450:	48000b16 	blt	r9,zero,1b480 <__floatunsidf+0xc4>
   1b454:	483fe726 	beq	r9,zero,1b3f4 <__floatunsidf+0x38>
   1b458:	10bfff44 	addi	r2,r2,-3
   1b45c:	10002e16 	blt	r2,zero,1b518 <__floatunsidf+0x15c>
   1b460:	b0a2983a 	sll	r17,r22,r2
   1b464:	0021883a 	mov	r16,zero
   1b468:	d8800217 	ldw	r2,8(sp)
   1b46c:	dc400415 	stw	r17,16(sp)
   1b470:	dc000315 	stw	r16,12(sp)
   1b474:	1245c83a 	sub	r2,r2,r9
   1b478:	d8800215 	stw	r2,8(sp)
   1b47c:	003fdd06 	br	1b3f4 <__floatunsidf+0x38>
   1b480:	0255c83a 	sub	r10,zero,r9
   1b484:	51bff804 	addi	r6,r10,-32
   1b488:	30001b16 	blt	r6,zero,1b4f8 <__floatunsidf+0x13c>
   1b48c:	b9a8d83a 	srl	r20,r23,r6
   1b490:	002b883a 	mov	r21,zero
   1b494:	000f883a 	mov	r7,zero
   1b498:	01000044 	movi	r4,1
   1b49c:	0011883a 	mov	r8,zero
   1b4a0:	30002516 	blt	r6,zero,1b538 <__floatunsidf+0x17c>
   1b4a4:	21a6983a 	sll	r19,r4,r6
   1b4a8:	0025883a 	mov	r18,zero
   1b4ac:	00bfffc4 	movi	r2,-1
   1b4b0:	9089883a 	add	r4,r18,r2
   1b4b4:	988b883a 	add	r5,r19,r2
   1b4b8:	248d803a 	cmpltu	r6,r4,r18
   1b4bc:	314b883a 	add	r5,r6,r5
   1b4c0:	b104703a 	and	r2,r22,r4
   1b4c4:	b946703a 	and	r3,r23,r5
   1b4c8:	10c4b03a 	or	r2,r2,r3
   1b4cc:	10000226 	beq	r2,zero,1b4d8 <__floatunsidf+0x11c>
   1b4d0:	01c00044 	movi	r7,1
   1b4d4:	0011883a 	mov	r8,zero
   1b4d8:	d9000217 	ldw	r4,8(sp)
   1b4dc:	a1c4b03a 	or	r2,r20,r7
   1b4e0:	aa06b03a 	or	r3,r21,r8
   1b4e4:	2249c83a 	sub	r4,r4,r9
   1b4e8:	d8c00415 	stw	r3,16(sp)
   1b4ec:	d9000215 	stw	r4,8(sp)
   1b4f0:	d8800315 	stw	r2,12(sp)
   1b4f4:	003fbf06 	br	1b3f4 <__floatunsidf+0x38>
   1b4f8:	bdc7883a 	add	r3,r23,r23
   1b4fc:	008007c4 	movi	r2,31
   1b500:	1285c83a 	sub	r2,r2,r10
   1b504:	1886983a 	sll	r3,r3,r2
   1b508:	b2a8d83a 	srl	r20,r22,r10
   1b50c:	baaad83a 	srl	r21,r23,r10
   1b510:	1d28b03a 	or	r20,r3,r20
   1b514:	003fdf06 	br	1b494 <__floatunsidf+0xd8>
   1b518:	b006d07a 	srli	r3,r22,1
   1b51c:	008007c4 	movi	r2,31
   1b520:	1245c83a 	sub	r2,r2,r9
   1b524:	1886d83a 	srl	r3,r3,r2
   1b528:	ba62983a 	sll	r17,r23,r9
   1b52c:	b260983a 	sll	r16,r22,r9
   1b530:	1c62b03a 	or	r17,r3,r17
   1b534:	003fcc06 	br	1b468 <__floatunsidf+0xac>
   1b538:	2006d07a 	srli	r3,r4,1
   1b53c:	008007c4 	movi	r2,31
   1b540:	1285c83a 	sub	r2,r2,r10
   1b544:	18a6d83a 	srl	r19,r3,r2
   1b548:	22a4983a 	sll	r18,r4,r10
   1b54c:	003fd706 	br	1b4ac <__floatunsidf+0xf0>

0001b550 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1b550:	defff804 	addi	sp,sp,-32
   1b554:	dfc00715 	stw	ra,28(sp)
   1b558:	df000615 	stw	fp,24(sp)
   1b55c:	df000604 	addi	fp,sp,24
   1b560:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1b564:	e0bffc17 	ldw	r2,-16(fp)
   1b568:	1004803a 	cmplt	r2,r2,zero
   1b56c:	1000081e 	bne	r2,zero,1b590 <close+0x40>
   1b570:	e0bffc17 	ldw	r2,-16(fp)
   1b574:	10800324 	muli	r2,r2,12
   1b578:	1007883a 	mov	r3,r2
   1b57c:	008000b4 	movhi	r2,2
   1b580:	10bea704 	addi	r2,r2,-1380
   1b584:	1887883a 	add	r3,r3,r2
   1b588:	e0ffff15 	stw	r3,-4(fp)
   1b58c:	00000106 	br	1b594 <close+0x44>
   1b590:	e03fff15 	stw	zero,-4(fp)
   1b594:	e0bfff17 	ldw	r2,-4(fp)
   1b598:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   1b59c:	e0bffb17 	ldw	r2,-20(fp)
   1b5a0:	1005003a 	cmpeq	r2,r2,zero
   1b5a4:	10001d1e 	bne	r2,zero,1b61c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1b5a8:	e0bffb17 	ldw	r2,-20(fp)
   1b5ac:	10800017 	ldw	r2,0(r2)
   1b5b0:	10800417 	ldw	r2,16(r2)
   1b5b4:	1005003a 	cmpeq	r2,r2,zero
   1b5b8:	1000071e 	bne	r2,zero,1b5d8 <close+0x88>
   1b5bc:	e0bffb17 	ldw	r2,-20(fp)
   1b5c0:	10800017 	ldw	r2,0(r2)
   1b5c4:	10800417 	ldw	r2,16(r2)
   1b5c8:	e13ffb17 	ldw	r4,-20(fp)
   1b5cc:	103ee83a 	callr	r2
   1b5d0:	e0bffe15 	stw	r2,-8(fp)
   1b5d4:	00000106 	br	1b5dc <close+0x8c>
   1b5d8:	e03ffe15 	stw	zero,-8(fp)
   1b5dc:	e0bffe17 	ldw	r2,-8(fp)
   1b5e0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1b5e4:	e13ffc17 	ldw	r4,-16(fp)
   1b5e8:	001c2780 	call	1c278 <alt_release_fd>
    if (rval < 0)
   1b5ec:	e0bffa17 	ldw	r2,-24(fp)
   1b5f0:	1004403a 	cmpge	r2,r2,zero
   1b5f4:	1000071e 	bne	r2,zero,1b614 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   1b5f8:	001b64c0 	call	1b64c <alt_get_errno>
   1b5fc:	e0fffa17 	ldw	r3,-24(fp)
   1b600:	00c7c83a 	sub	r3,zero,r3
   1b604:	10c00015 	stw	r3,0(r2)
      return -1;
   1b608:	00bfffc4 	movi	r2,-1
   1b60c:	e0bffd15 	stw	r2,-12(fp)
   1b610:	00000806 	br	1b634 <close+0xe4>
    }
    return 0;
   1b614:	e03ffd15 	stw	zero,-12(fp)
   1b618:	00000606 	br	1b634 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b61c:	001b64c0 	call	1b64c <alt_get_errno>
   1b620:	1007883a 	mov	r3,r2
   1b624:	00801444 	movi	r2,81
   1b628:	18800015 	stw	r2,0(r3)
    return -1;
   1b62c:	00bfffc4 	movi	r2,-1
   1b630:	e0bffd15 	stw	r2,-12(fp)
   1b634:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   1b638:	e037883a 	mov	sp,fp
   1b63c:	dfc00117 	ldw	ra,4(sp)
   1b640:	df000017 	ldw	fp,0(sp)
   1b644:	dec00204 	addi	sp,sp,8
   1b648:	f800283a 	ret

0001b64c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b64c:	defffd04 	addi	sp,sp,-12
   1b650:	dfc00215 	stw	ra,8(sp)
   1b654:	df000115 	stw	fp,4(sp)
   1b658:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b65c:	008000b4 	movhi	r2,2
   1b660:	10834a04 	addi	r2,r2,3368
   1b664:	10800017 	ldw	r2,0(r2)
   1b668:	1005003a 	cmpeq	r2,r2,zero
   1b66c:	1000061e 	bne	r2,zero,1b688 <alt_get_errno+0x3c>
   1b670:	008000b4 	movhi	r2,2
   1b674:	10834a04 	addi	r2,r2,3368
   1b678:	10800017 	ldw	r2,0(r2)
   1b67c:	103ee83a 	callr	r2
   1b680:	e0bfff15 	stw	r2,-4(fp)
   1b684:	00000306 	br	1b694 <alt_get_errno+0x48>
   1b688:	008000b4 	movhi	r2,2
   1b68c:	108a1704 	addi	r2,r2,10332
   1b690:	e0bfff15 	stw	r2,-4(fp)
   1b694:	e0bfff17 	ldw	r2,-4(fp)
}
   1b698:	e037883a 	mov	sp,fp
   1b69c:	dfc00117 	ldw	ra,4(sp)
   1b6a0:	df000017 	ldw	fp,0(sp)
   1b6a4:	dec00204 	addi	sp,sp,8
   1b6a8:	f800283a 	ret

0001b6ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1b6ac:	defffc04 	addi	sp,sp,-16
   1b6b0:	df000315 	stw	fp,12(sp)
   1b6b4:	df000304 	addi	fp,sp,12
   1b6b8:	e13ffd15 	stw	r4,-12(fp)
   1b6bc:	e17ffe15 	stw	r5,-8(fp)
   1b6c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1b6c4:	e0bfff17 	ldw	r2,-4(fp)
}
   1b6c8:	e037883a 	mov	sp,fp
   1b6cc:	df000017 	ldw	fp,0(sp)
   1b6d0:	dec00104 	addi	sp,sp,4
   1b6d4:	f800283a 	ret

0001b6d8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1b6d8:	defffd04 	addi	sp,sp,-12
   1b6dc:	df000215 	stw	fp,8(sp)
   1b6e0:	df000204 	addi	fp,sp,8
   1b6e4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   1b6e8:	e0bfff17 	ldw	r2,-4(fp)
   1b6ec:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1b6f0:	e0bffe17 	ldw	r2,-8(fp)
   1b6f4:	1005003a 	cmpeq	r2,r2,zero
   1b6f8:	1000021e 	bne	r2,zero,1b704 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1b6fc:	002af070 	cmpltui	zero,zero,43969
   1b700:	00000106 	br	1b708 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   1b704:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   1b708:	e037883a 	mov	sp,fp
   1b70c:	df000017 	ldw	fp,0(sp)
   1b710:	dec00104 	addi	sp,sp,4
   1b714:	f800283a 	ret

0001b718 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1b718:	defffd04 	addi	sp,sp,-12
   1b71c:	dfc00215 	stw	ra,8(sp)
   1b720:	df000115 	stw	fp,4(sp)
   1b724:	df000104 	addi	fp,sp,4
   1b728:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1b72c:	e13fff17 	ldw	r4,-4(fp)
   1b730:	001b6d80 	call	1b6d8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1b734:	003fff06 	br	1b734 <_exit+0x1c>

0001b738 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1b738:	defff904 	addi	sp,sp,-28
   1b73c:	dfc00615 	stw	ra,24(sp)
   1b740:	df000515 	stw	fp,20(sp)
   1b744:	df000504 	addi	fp,sp,20
   1b748:	e13ffc15 	stw	r4,-16(fp)
   1b74c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b750:	e0bffc17 	ldw	r2,-16(fp)
   1b754:	1004803a 	cmplt	r2,r2,zero
   1b758:	1000081e 	bne	r2,zero,1b77c <fstat+0x44>
   1b75c:	e0bffc17 	ldw	r2,-16(fp)
   1b760:	10800324 	muli	r2,r2,12
   1b764:	1007883a 	mov	r3,r2
   1b768:	008000b4 	movhi	r2,2
   1b76c:	10bea704 	addi	r2,r2,-1380
   1b770:	1887883a 	add	r3,r3,r2
   1b774:	e0ffff15 	stw	r3,-4(fp)
   1b778:	00000106 	br	1b780 <fstat+0x48>
   1b77c:	e03fff15 	stw	zero,-4(fp)
   1b780:	e0bfff17 	ldw	r2,-4(fp)
   1b784:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1b788:	e0bffb17 	ldw	r2,-20(fp)
   1b78c:	1005003a 	cmpeq	r2,r2,zero
   1b790:	1000121e 	bne	r2,zero,1b7dc <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1b794:	e0bffb17 	ldw	r2,-20(fp)
   1b798:	10800017 	ldw	r2,0(r2)
   1b79c:	10800817 	ldw	r2,32(r2)
   1b7a0:	1005003a 	cmpeq	r2,r2,zero
   1b7a4:	1000081e 	bne	r2,zero,1b7c8 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   1b7a8:	e0bffb17 	ldw	r2,-20(fp)
   1b7ac:	10800017 	ldw	r2,0(r2)
   1b7b0:	10800817 	ldw	r2,32(r2)
   1b7b4:	e13ffb17 	ldw	r4,-20(fp)
   1b7b8:	e17ffd17 	ldw	r5,-12(fp)
   1b7bc:	103ee83a 	callr	r2
   1b7c0:	e0bffe15 	stw	r2,-8(fp)
   1b7c4:	00000b06 	br	1b7f4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1b7c8:	e0fffd17 	ldw	r3,-12(fp)
   1b7cc:	00880004 	movi	r2,8192
   1b7d0:	18800115 	stw	r2,4(r3)
      return 0;
   1b7d4:	e03ffe15 	stw	zero,-8(fp)
   1b7d8:	00000606 	br	1b7f4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b7dc:	001b80c0 	call	1b80c <alt_get_errno>
   1b7e0:	1007883a 	mov	r3,r2
   1b7e4:	00801444 	movi	r2,81
   1b7e8:	18800015 	stw	r2,0(r3)
    return -1;
   1b7ec:	00bfffc4 	movi	r2,-1
   1b7f0:	e0bffe15 	stw	r2,-8(fp)
   1b7f4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1b7f8:	e037883a 	mov	sp,fp
   1b7fc:	dfc00117 	ldw	ra,4(sp)
   1b800:	df000017 	ldw	fp,0(sp)
   1b804:	dec00204 	addi	sp,sp,8
   1b808:	f800283a 	ret

0001b80c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b80c:	defffd04 	addi	sp,sp,-12
   1b810:	dfc00215 	stw	ra,8(sp)
   1b814:	df000115 	stw	fp,4(sp)
   1b818:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b81c:	008000b4 	movhi	r2,2
   1b820:	10834a04 	addi	r2,r2,3368
   1b824:	10800017 	ldw	r2,0(r2)
   1b828:	1005003a 	cmpeq	r2,r2,zero
   1b82c:	1000061e 	bne	r2,zero,1b848 <alt_get_errno+0x3c>
   1b830:	008000b4 	movhi	r2,2
   1b834:	10834a04 	addi	r2,r2,3368
   1b838:	10800017 	ldw	r2,0(r2)
   1b83c:	103ee83a 	callr	r2
   1b840:	e0bfff15 	stw	r2,-4(fp)
   1b844:	00000306 	br	1b854 <alt_get_errno+0x48>
   1b848:	008000b4 	movhi	r2,2
   1b84c:	108a1704 	addi	r2,r2,10332
   1b850:	e0bfff15 	stw	r2,-4(fp)
   1b854:	e0bfff17 	ldw	r2,-4(fp)
}
   1b858:	e037883a 	mov	sp,fp
   1b85c:	dfc00117 	ldw	ra,4(sp)
   1b860:	df000017 	ldw	fp,0(sp)
   1b864:	dec00204 	addi	sp,sp,8
   1b868:	f800283a 	ret

0001b86c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1b86c:	deffff04 	addi	sp,sp,-4
   1b870:	df000015 	stw	fp,0(sp)
   1b874:	d839883a 	mov	fp,sp
  return 0;
   1b878:	0005883a 	mov	r2,zero
}
   1b87c:	e037883a 	mov	sp,fp
   1b880:	df000017 	ldw	fp,0(sp)
   1b884:	dec00104 	addi	sp,sp,4
   1b888:	f800283a 	ret

0001b88c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1b88c:	deffeb04 	addi	sp,sp,-84
   1b890:	dfc01415 	stw	ra,80(sp)
   1b894:	df001315 	stw	fp,76(sp)
   1b898:	df001304 	addi	fp,sp,76
   1b89c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b8a0:	e0bffd17 	ldw	r2,-12(fp)
   1b8a4:	1004803a 	cmplt	r2,r2,zero
   1b8a8:	1000081e 	bne	r2,zero,1b8cc <isatty+0x40>
   1b8ac:	e0bffd17 	ldw	r2,-12(fp)
   1b8b0:	10800324 	muli	r2,r2,12
   1b8b4:	1007883a 	mov	r3,r2
   1b8b8:	008000b4 	movhi	r2,2
   1b8bc:	10bea704 	addi	r2,r2,-1380
   1b8c0:	1887883a 	add	r3,r3,r2
   1b8c4:	e0ffff15 	stw	r3,-4(fp)
   1b8c8:	00000106 	br	1b8d0 <isatty+0x44>
   1b8cc:	e03fff15 	stw	zero,-4(fp)
   1b8d0:	e0bfff17 	ldw	r2,-4(fp)
   1b8d4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   1b8d8:	e0bfed17 	ldw	r2,-76(fp)
   1b8dc:	1005003a 	cmpeq	r2,r2,zero
   1b8e0:	10000f1e 	bne	r2,zero,1b920 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1b8e4:	e0bfed17 	ldw	r2,-76(fp)
   1b8e8:	10800017 	ldw	r2,0(r2)
   1b8ec:	10800817 	ldw	r2,32(r2)
   1b8f0:	1004c03a 	cmpne	r2,r2,zero
   1b8f4:	1000031e 	bne	r2,zero,1b904 <isatty+0x78>
    {
      return 1;
   1b8f8:	00800044 	movi	r2,1
   1b8fc:	e0bffe15 	stw	r2,-8(fp)
   1b900:	00000c06 	br	1b934 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1b904:	e17fee04 	addi	r5,fp,-72
   1b908:	e13ffd17 	ldw	r4,-12(fp)
   1b90c:	001b7380 	call	1b738 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1b910:	e0bfef17 	ldw	r2,-68(fp)
   1b914:	10880020 	cmpeqi	r2,r2,8192
   1b918:	e0bffe15 	stw	r2,-8(fp)
   1b91c:	00000506 	br	1b934 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b920:	001b94c0 	call	1b94c <alt_get_errno>
   1b924:	1007883a 	mov	r3,r2
   1b928:	00801444 	movi	r2,81
   1b92c:	18800015 	stw	r2,0(r3)
    return 0;
   1b930:	e03ffe15 	stw	zero,-8(fp)
   1b934:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1b938:	e037883a 	mov	sp,fp
   1b93c:	dfc00117 	ldw	ra,4(sp)
   1b940:	df000017 	ldw	fp,0(sp)
   1b944:	dec00204 	addi	sp,sp,8
   1b948:	f800283a 	ret

0001b94c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b94c:	defffd04 	addi	sp,sp,-12
   1b950:	dfc00215 	stw	ra,8(sp)
   1b954:	df000115 	stw	fp,4(sp)
   1b958:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b95c:	008000b4 	movhi	r2,2
   1b960:	10834a04 	addi	r2,r2,3368
   1b964:	10800017 	ldw	r2,0(r2)
   1b968:	1005003a 	cmpeq	r2,r2,zero
   1b96c:	1000061e 	bne	r2,zero,1b988 <alt_get_errno+0x3c>
   1b970:	008000b4 	movhi	r2,2
   1b974:	10834a04 	addi	r2,r2,3368
   1b978:	10800017 	ldw	r2,0(r2)
   1b97c:	103ee83a 	callr	r2
   1b980:	e0bfff15 	stw	r2,-4(fp)
   1b984:	00000306 	br	1b994 <alt_get_errno+0x48>
   1b988:	008000b4 	movhi	r2,2
   1b98c:	108a1704 	addi	r2,r2,10332
   1b990:	e0bfff15 	stw	r2,-4(fp)
   1b994:	e0bfff17 	ldw	r2,-4(fp)
}
   1b998:	e037883a 	mov	sp,fp
   1b99c:	dfc00117 	ldw	ra,4(sp)
   1b9a0:	df000017 	ldw	fp,0(sp)
   1b9a4:	dec00204 	addi	sp,sp,8
   1b9a8:	f800283a 	ret

0001b9ac <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1b9ac:	defffa04 	addi	sp,sp,-24
   1b9b0:	dfc00515 	stw	ra,20(sp)
   1b9b4:	df000415 	stw	fp,16(sp)
   1b9b8:	df000404 	addi	fp,sp,16
   1b9bc:	e13ffd15 	stw	r4,-12(fp)
   1b9c0:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
   1b9c4:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
   1b9c8:	e0bffd17 	ldw	r2,-12(fp)
   1b9cc:	10800048 	cmpgei	r2,r2,1
   1b9d0:	1000301e 	bne	r2,zero,1ba94 <kill+0xe8>
  {
    switch (sig)
   1b9d4:	e0bffe17 	ldw	r2,-8(fp)
   1b9d8:	10800828 	cmpgeui	r2,r2,32
   1b9dc:	10002a1e 	bne	r2,zero,1ba88 <kill+0xdc>
   1b9e0:	e0bffe17 	ldw	r2,-8(fp)
   1b9e4:	1085883a 	add	r2,r2,r2
   1b9e8:	1087883a 	add	r3,r2,r2
   1b9ec:	008000b4 	movhi	r2,2
   1b9f0:	10ae8004 	addi	r2,r2,-17920
   1b9f4:	1885883a 	add	r2,r3,r2
   1b9f8:	10800017 	ldw	r2,0(r2)
   1b9fc:	1000683a 	jmp	r2
   1ba00:	0001baa8 	cmpgeui	zero,zero,1770
   1ba04:	0001ba88 	cmpgei	zero,zero,1770
   1ba08:	0001ba88 	cmpgei	zero,zero,1770
   1ba0c:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba10:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba14:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba18:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba1c:	0001ba88 	cmpgei	zero,zero,1770
   1ba20:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba24:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba28:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba2c:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba30:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba34:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba38:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba3c:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba40:	0001baa8 	cmpgeui	zero,zero,1770
   1ba44:	0001ba88 	cmpgei	zero,zero,1770
   1ba48:	0001ba88 	cmpgei	zero,zero,1770
   1ba4c:	0001ba88 	cmpgei	zero,zero,1770
   1ba50:	0001baa8 	cmpgeui	zero,zero,1770
   1ba54:	0001ba88 	cmpgei	zero,zero,1770
   1ba58:	0001ba88 	cmpgei	zero,zero,1770
   1ba5c:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba60:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba64:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba68:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba6c:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba70:	0001ba88 	cmpgei	zero,zero,1770
   1ba74:	0001ba88 	cmpgei	zero,zero,1770
   1ba78:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
   1ba7c:	0001ba80 	call	1ba8 <_Z15nearestNeighborP7MyImageS0_+0x120>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1ba80:	0009883a 	mov	r4,zero
   1ba84:	001b7180 	call	1b718 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1ba88:	00800584 	movi	r2,22
   1ba8c:	e0bffc15 	stw	r2,-16(fp)
   1ba90:	00000506 	br	1baa8 <kill+0xfc>
    }
  }

  else if (pid > 0)
   1ba94:	e0bffd17 	ldw	r2,-12(fp)
   1ba98:	10800050 	cmplti	r2,r2,1
   1ba9c:	1000021e 	bne	r2,zero,1baa8 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1baa0:	008000c4 	movi	r2,3
   1baa4:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
   1baa8:	e0bffc17 	ldw	r2,-16(fp)
   1baac:	1005003a 	cmpeq	r2,r2,zero
   1bab0:	1000071e 	bne	r2,zero,1bad0 <kill+0x124>
  {
    ALT_ERRNO = status;
   1bab4:	001baec0 	call	1baec <alt_get_errno>
   1bab8:	1007883a 	mov	r3,r2
   1babc:	e0bffc17 	ldw	r2,-16(fp)
   1bac0:	18800015 	stw	r2,0(r3)
    return -1;
   1bac4:	00bfffc4 	movi	r2,-1
   1bac8:	e0bfff15 	stw	r2,-4(fp)
   1bacc:	00000106 	br	1bad4 <kill+0x128>
  }

  return 0;
   1bad0:	e03fff15 	stw	zero,-4(fp)
   1bad4:	e0bfff17 	ldw	r2,-4(fp)
}
   1bad8:	e037883a 	mov	sp,fp
   1badc:	dfc00117 	ldw	ra,4(sp)
   1bae0:	df000017 	ldw	fp,0(sp)
   1bae4:	dec00204 	addi	sp,sp,8
   1bae8:	f800283a 	ret

0001baec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1baec:	defffd04 	addi	sp,sp,-12
   1baf0:	dfc00215 	stw	ra,8(sp)
   1baf4:	df000115 	stw	fp,4(sp)
   1baf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1bafc:	008000b4 	movhi	r2,2
   1bb00:	10834a04 	addi	r2,r2,3368
   1bb04:	10800017 	ldw	r2,0(r2)
   1bb08:	1005003a 	cmpeq	r2,r2,zero
   1bb0c:	1000061e 	bne	r2,zero,1bb28 <alt_get_errno+0x3c>
   1bb10:	008000b4 	movhi	r2,2
   1bb14:	10834a04 	addi	r2,r2,3368
   1bb18:	10800017 	ldw	r2,0(r2)
   1bb1c:	103ee83a 	callr	r2
   1bb20:	e0bfff15 	stw	r2,-4(fp)
   1bb24:	00000306 	br	1bb34 <alt_get_errno+0x48>
   1bb28:	008000b4 	movhi	r2,2
   1bb2c:	108a1704 	addi	r2,r2,10332
   1bb30:	e0bfff15 	stw	r2,-4(fp)
   1bb34:	e0bfff17 	ldw	r2,-4(fp)
}
   1bb38:	e037883a 	mov	sp,fp
   1bb3c:	dfc00117 	ldw	ra,4(sp)
   1bb40:	df000017 	ldw	fp,0(sp)
   1bb44:	dec00204 	addi	sp,sp,8
   1bb48:	f800283a 	ret

0001bb4c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1bb4c:	defffe04 	addi	sp,sp,-8
   1bb50:	dfc00115 	stw	ra,4(sp)
   1bb54:	df000015 	stw	fp,0(sp)
   1bb58:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1bb5c:	010000b4 	movhi	r4,2
   1bb60:	21034f04 	addi	r4,r4,3388
   1bb64:	014000b4 	movhi	r5,2
   1bb68:	297c9804 	addi	r5,r5,-3488
   1bb6c:	018000b4 	movhi	r6,2
   1bb70:	31834f04 	addi	r6,r6,3388
   1bb74:	001bbcc0 	call	1bbcc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1bb78:	01000034 	movhi	r4,0
   1bb7c:	21000804 	addi	r4,r4,32
   1bb80:	01400034 	movhi	r5,0
   1bb84:	29400804 	addi	r5,r5,32
   1bb88:	01800034 	movhi	r6,0
   1bb8c:	31806d04 	addi	r6,r6,436
   1bb90:	001bbcc0 	call	1bbcc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1bb94:	010000b4 	movhi	r4,2
   1bb98:	21393d04 	addi	r4,r4,-6924
   1bb9c:	014000b4 	movhi	r5,2
   1bba0:	29793d04 	addi	r5,r5,-6924
   1bba4:	018000b4 	movhi	r6,2
   1bba8:	31bc9804 	addi	r6,r6,-3488
   1bbac:	001bbcc0 	call	1bbcc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1bbb0:	001d3bc0 	call	1d3bc <alt_dcache_flush_all>
  alt_icache_flush_all();
   1bbb4:	001d8480 	call	1d848 <alt_icache_flush_all>
}
   1bbb8:	e037883a 	mov	sp,fp
   1bbbc:	dfc00117 	ldw	ra,4(sp)
   1bbc0:	df000017 	ldw	fp,0(sp)
   1bbc4:	dec00204 	addi	sp,sp,8
   1bbc8:	f800283a 	ret

0001bbcc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1bbcc:	defffc04 	addi	sp,sp,-16
   1bbd0:	df000315 	stw	fp,12(sp)
   1bbd4:	df000304 	addi	fp,sp,12
   1bbd8:	e13ffd15 	stw	r4,-12(fp)
   1bbdc:	e17ffe15 	stw	r5,-8(fp)
   1bbe0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1bbe4:	e0fffe17 	ldw	r3,-8(fp)
   1bbe8:	e0bffd17 	ldw	r2,-12(fp)
   1bbec:	18800e26 	beq	r3,r2,1bc28 <alt_load_section+0x5c>
  {
    while( to != end )
   1bbf0:	00000a06 	br	1bc1c <alt_load_section+0x50>
    {
      *to++ = *from++;
   1bbf4:	e0bffd17 	ldw	r2,-12(fp)
   1bbf8:	10c00017 	ldw	r3,0(r2)
   1bbfc:	e0bffe17 	ldw	r2,-8(fp)
   1bc00:	10c00015 	stw	r3,0(r2)
   1bc04:	e0bffe17 	ldw	r2,-8(fp)
   1bc08:	10800104 	addi	r2,r2,4
   1bc0c:	e0bffe15 	stw	r2,-8(fp)
   1bc10:	e0bffd17 	ldw	r2,-12(fp)
   1bc14:	10800104 	addi	r2,r2,4
   1bc18:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1bc1c:	e0fffe17 	ldw	r3,-8(fp)
   1bc20:	e0bfff17 	ldw	r2,-4(fp)
   1bc24:	18bff31e 	bne	r3,r2,1bbf4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1bc28:	e037883a 	mov	sp,fp
   1bc2c:	df000017 	ldw	fp,0(sp)
   1bc30:	dec00104 	addi	sp,sp,4
   1bc34:	f800283a 	ret

0001bc38 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1bc38:	defff804 	addi	sp,sp,-32
   1bc3c:	dfc00715 	stw	ra,28(sp)
   1bc40:	df000615 	stw	fp,24(sp)
   1bc44:	df000604 	addi	fp,sp,24
   1bc48:	e13ffc15 	stw	r4,-16(fp)
   1bc4c:	e17ffd15 	stw	r5,-12(fp)
   1bc50:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1bc54:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1bc58:	e0bffc17 	ldw	r2,-16(fp)
   1bc5c:	1004803a 	cmplt	r2,r2,zero
   1bc60:	1000081e 	bne	r2,zero,1bc84 <lseek+0x4c>
   1bc64:	e0bffc17 	ldw	r2,-16(fp)
   1bc68:	10800324 	muli	r2,r2,12
   1bc6c:	1007883a 	mov	r3,r2
   1bc70:	008000b4 	movhi	r2,2
   1bc74:	10bea704 	addi	r2,r2,-1380
   1bc78:	1887883a 	add	r3,r3,r2
   1bc7c:	e0ffff15 	stw	r3,-4(fp)
   1bc80:	00000106 	br	1bc88 <lseek+0x50>
   1bc84:	e03fff15 	stw	zero,-4(fp)
   1bc88:	e0bfff17 	ldw	r2,-4(fp)
   1bc8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   1bc90:	e0bffb17 	ldw	r2,-20(fp)
   1bc94:	1005003a 	cmpeq	r2,r2,zero
   1bc98:	1000111e 	bne	r2,zero,1bce0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1bc9c:	e0bffb17 	ldw	r2,-20(fp)
   1bca0:	10800017 	ldw	r2,0(r2)
   1bca4:	10800717 	ldw	r2,28(r2)
   1bca8:	1005003a 	cmpeq	r2,r2,zero
   1bcac:	1000091e 	bne	r2,zero,1bcd4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1bcb0:	e0bffb17 	ldw	r2,-20(fp)
   1bcb4:	10800017 	ldw	r2,0(r2)
   1bcb8:	10800717 	ldw	r2,28(r2)
   1bcbc:	e13ffb17 	ldw	r4,-20(fp)
   1bcc0:	e17ffd17 	ldw	r5,-12(fp)
   1bcc4:	e1bffe17 	ldw	r6,-8(fp)
   1bcc8:	103ee83a 	callr	r2
   1bccc:	e0bffa15 	stw	r2,-24(fp)
   1bcd0:	00000506 	br	1bce8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1bcd4:	00bfde84 	movi	r2,-134
   1bcd8:	e0bffa15 	stw	r2,-24(fp)
   1bcdc:	00000206 	br	1bce8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1bce0:	00bfebc4 	movi	r2,-81
   1bce4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   1bce8:	e0bffa17 	ldw	r2,-24(fp)
   1bcec:	1004403a 	cmpge	r2,r2,zero
   1bcf0:	1000071e 	bne	r2,zero,1bd10 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   1bcf4:	001bd280 	call	1bd28 <alt_get_errno>
   1bcf8:	1007883a 	mov	r3,r2
   1bcfc:	e0bffa17 	ldw	r2,-24(fp)
   1bd00:	0085c83a 	sub	r2,zero,r2
   1bd04:	18800015 	stw	r2,0(r3)
    rc = -1;
   1bd08:	00bfffc4 	movi	r2,-1
   1bd0c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   1bd10:	e0bffa17 	ldw	r2,-24(fp)
}
   1bd14:	e037883a 	mov	sp,fp
   1bd18:	dfc00117 	ldw	ra,4(sp)
   1bd1c:	df000017 	ldw	fp,0(sp)
   1bd20:	dec00204 	addi	sp,sp,8
   1bd24:	f800283a 	ret

0001bd28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bd28:	defffd04 	addi	sp,sp,-12
   1bd2c:	dfc00215 	stw	ra,8(sp)
   1bd30:	df000115 	stw	fp,4(sp)
   1bd34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1bd38:	008000b4 	movhi	r2,2
   1bd3c:	10834a04 	addi	r2,r2,3368
   1bd40:	10800017 	ldw	r2,0(r2)
   1bd44:	1005003a 	cmpeq	r2,r2,zero
   1bd48:	1000061e 	bne	r2,zero,1bd64 <alt_get_errno+0x3c>
   1bd4c:	008000b4 	movhi	r2,2
   1bd50:	10834a04 	addi	r2,r2,3368
   1bd54:	10800017 	ldw	r2,0(r2)
   1bd58:	103ee83a 	callr	r2
   1bd5c:	e0bfff15 	stw	r2,-4(fp)
   1bd60:	00000306 	br	1bd70 <alt_get_errno+0x48>
   1bd64:	008000b4 	movhi	r2,2
   1bd68:	108a1704 	addi	r2,r2,10332
   1bd6c:	e0bfff15 	stw	r2,-4(fp)
   1bd70:	e0bfff17 	ldw	r2,-4(fp)
}
   1bd74:	e037883a 	mov	sp,fp
   1bd78:	dfc00117 	ldw	ra,4(sp)
   1bd7c:	df000017 	ldw	fp,0(sp)
   1bd80:	dec00204 	addi	sp,sp,8
   1bd84:	f800283a 	ret

0001bd88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1bd88:	defffd04 	addi	sp,sp,-12
   1bd8c:	dfc00215 	stw	ra,8(sp)
   1bd90:	df000115 	stw	fp,4(sp)
   1bd94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1bd98:	0009883a 	mov	r4,zero
   1bd9c:	001c5140 	call	1c514 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1bda0:	001c5480 	call	1c548 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1bda4:	010000b4 	movhi	r4,2
   1bda8:	213c8a04 	addi	r4,r4,-3544
   1bdac:	014000b4 	movhi	r5,2
   1bdb0:	297c8a04 	addi	r5,r5,-3544
   1bdb4:	018000b4 	movhi	r6,2
   1bdb8:	31bc8a04 	addi	r6,r6,-3544
   1bdbc:	001dc080 	call	1dc08 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1bdc0:	001d5140 	call	1d514 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1bdc4:	010000b4 	movhi	r4,2
   1bdc8:	21355e04 	addi	r4,r4,-10888
   1bdcc:	001ded40 	call	1ded4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1bdd0:	d126ea17 	ldw	r4,-25688(gp)
   1bdd4:	d166eb17 	ldw	r5,-25684(gp)
   1bdd8:	d1a6ec17 	ldw	r6,-25680(gp)
   1bddc:	0003c440 	call	3c44 <main>
   1bde0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1bde4:	01000044 	movi	r4,1
   1bde8:	001b5500 	call	1b550 <close>
  exit (result);
   1bdec:	e13fff17 	ldw	r4,-4(fp)
   1bdf0:	001dee80 	call	1dee8 <exit>

0001bdf4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1bdf4:	defffe04 	addi	sp,sp,-8
   1bdf8:	df000115 	stw	fp,4(sp)
   1bdfc:	df000104 	addi	fp,sp,4
   1be00:	e13fff15 	stw	r4,-4(fp)
}
   1be04:	e037883a 	mov	sp,fp
   1be08:	df000017 	ldw	fp,0(sp)
   1be0c:	dec00104 	addi	sp,sp,4
   1be10:	f800283a 	ret

0001be14 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1be14:	defffe04 	addi	sp,sp,-8
   1be18:	df000115 	stw	fp,4(sp)
   1be1c:	df000104 	addi	fp,sp,4
   1be20:	e13fff15 	stw	r4,-4(fp)
}
   1be24:	e037883a 	mov	sp,fp
   1be28:	df000017 	ldw	fp,0(sp)
   1be2c:	dec00104 	addi	sp,sp,4
   1be30:	f800283a 	ret

0001be34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1be34:	defffc04 	addi	sp,sp,-16
   1be38:	df000315 	stw	fp,12(sp)
   1be3c:	df000304 	addi	fp,sp,12
   1be40:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1be44:	e0bffe17 	ldw	r2,-8(fp)
   1be48:	10800217 	ldw	r2,8(r2)
   1be4c:	10d00034 	orhi	r3,r2,16384
   1be50:	e0bffe17 	ldw	r2,-8(fp)
   1be54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1be58:	e03ffd15 	stw	zero,-12(fp)
   1be5c:	00002006 	br	1bee0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1be60:	e0bffd17 	ldw	r2,-12(fp)
   1be64:	00c000b4 	movhi	r3,2
   1be68:	18fea704 	addi	r3,r3,-1380
   1be6c:	10800324 	muli	r2,r2,12
   1be70:	10c5883a 	add	r2,r2,r3
   1be74:	10c00017 	ldw	r3,0(r2)
   1be78:	e0bffe17 	ldw	r2,-8(fp)
   1be7c:	10800017 	ldw	r2,0(r2)
   1be80:	1880141e 	bne	r3,r2,1bed4 <alt_file_locked+0xa0>
   1be84:	e0bffd17 	ldw	r2,-12(fp)
   1be88:	00c000b4 	movhi	r3,2
   1be8c:	18fea704 	addi	r3,r3,-1380
   1be90:	10800324 	muli	r2,r2,12
   1be94:	10c5883a 	add	r2,r2,r3
   1be98:	10800204 	addi	r2,r2,8
   1be9c:	10800017 	ldw	r2,0(r2)
   1bea0:	1004403a 	cmpge	r2,r2,zero
   1bea4:	10000b1e 	bne	r2,zero,1bed4 <alt_file_locked+0xa0>
   1bea8:	e0bffd17 	ldw	r2,-12(fp)
   1beac:	10800324 	muli	r2,r2,12
   1beb0:	1007883a 	mov	r3,r2
   1beb4:	008000b4 	movhi	r2,2
   1beb8:	10bea704 	addi	r2,r2,-1380
   1bebc:	1887883a 	add	r3,r3,r2
   1bec0:	e0bffe17 	ldw	r2,-8(fp)
   1bec4:	18800326 	beq	r3,r2,1bed4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1bec8:	00bffcc4 	movi	r2,-13
   1becc:	e0bfff15 	stw	r2,-4(fp)
   1bed0:	00000a06 	br	1befc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1bed4:	e0bffd17 	ldw	r2,-12(fp)
   1bed8:	10800044 	addi	r2,r2,1
   1bedc:	e0bffd15 	stw	r2,-12(fp)
   1bee0:	008000b4 	movhi	r2,2
   1bee4:	10834904 	addi	r2,r2,3364
   1bee8:	10800017 	ldw	r2,0(r2)
   1beec:	1007883a 	mov	r3,r2
   1bef0:	e0bffd17 	ldw	r2,-12(fp)
   1bef4:	18bfda2e 	bgeu	r3,r2,1be60 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1bef8:	e03fff15 	stw	zero,-4(fp)
   1befc:	e0bfff17 	ldw	r2,-4(fp)
}
   1bf00:	e037883a 	mov	sp,fp
   1bf04:	df000017 	ldw	fp,0(sp)
   1bf08:	dec00104 	addi	sp,sp,4
   1bf0c:	f800283a 	ret

0001bf10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1bf10:	defff404 	addi	sp,sp,-48
   1bf14:	dfc00b15 	stw	ra,44(sp)
   1bf18:	df000a15 	stw	fp,40(sp)
   1bf1c:	df000a04 	addi	fp,sp,40
   1bf20:	e13ffb15 	stw	r4,-20(fp)
   1bf24:	e17ffc15 	stw	r5,-16(fp)
   1bf28:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1bf2c:	00bfffc4 	movi	r2,-1
   1bf30:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   1bf34:	00bffb44 	movi	r2,-19
   1bf38:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   1bf3c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1bf40:	e13ffb17 	ldw	r4,-20(fp)
   1bf44:	014000b4 	movhi	r5,2
   1bf48:	29434704 	addi	r5,r5,3356
   1bf4c:	001d5dc0 	call	1d5dc <alt_find_dev>
   1bf50:	e0bffa15 	stw	r2,-24(fp)
   1bf54:	e0bffa17 	ldw	r2,-24(fp)
   1bf58:	1004c03a 	cmpne	r2,r2,zero
   1bf5c:	1000051e 	bne	r2,zero,1bf74 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1bf60:	e13ffb17 	ldw	r4,-20(fp)
   1bf64:	001d6700 	call	1d670 <alt_find_file>
   1bf68:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   1bf6c:	00800044 	movi	r2,1
   1bf70:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1bf74:	e0bffa17 	ldw	r2,-24(fp)
   1bf78:	1005003a 	cmpeq	r2,r2,zero
   1bf7c:	1000301e 	bne	r2,zero,1c040 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1bf80:	e13ffa17 	ldw	r4,-24(fp)
   1bf84:	001d7900 	call	1d790 <alt_get_fd>
   1bf88:	e0bff815 	stw	r2,-32(fp)
   1bf8c:	e0bff817 	ldw	r2,-32(fp)
   1bf90:	1004403a 	cmpge	r2,r2,zero
   1bf94:	1000031e 	bne	r2,zero,1bfa4 <open+0x94>
    {
      status = index;
   1bf98:	e0bff817 	ldw	r2,-32(fp)
   1bf9c:	e0bff715 	stw	r2,-36(fp)
   1bfa0:	00002906 	br	1c048 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   1bfa4:	e0bff817 	ldw	r2,-32(fp)
   1bfa8:	10800324 	muli	r2,r2,12
   1bfac:	1007883a 	mov	r3,r2
   1bfb0:	008000b4 	movhi	r2,2
   1bfb4:	10bea704 	addi	r2,r2,-1380
   1bfb8:	1885883a 	add	r2,r3,r2
   1bfbc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1bfc0:	e0fffc17 	ldw	r3,-16(fp)
   1bfc4:	00900034 	movhi	r2,16384
   1bfc8:	10bfffc4 	addi	r2,r2,-1
   1bfcc:	1886703a 	and	r3,r3,r2
   1bfd0:	e0bff917 	ldw	r2,-28(fp)
   1bfd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1bfd8:	e0bff617 	ldw	r2,-40(fp)
   1bfdc:	1004c03a 	cmpne	r2,r2,zero
   1bfe0:	1000061e 	bne	r2,zero,1bffc <open+0xec>
   1bfe4:	e13ff917 	ldw	r4,-28(fp)
   1bfe8:	001be340 	call	1be34 <alt_file_locked>
   1bfec:	e0bff715 	stw	r2,-36(fp)
   1bff0:	e0bff717 	ldw	r2,-36(fp)
   1bff4:	1004803a 	cmplt	r2,r2,zero
   1bff8:	1000131e 	bne	r2,zero,1c048 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1bffc:	e0bffa17 	ldw	r2,-24(fp)
   1c000:	10800317 	ldw	r2,12(r2)
   1c004:	1005003a 	cmpeq	r2,r2,zero
   1c008:	1000091e 	bne	r2,zero,1c030 <open+0x120>
   1c00c:	e0bffa17 	ldw	r2,-24(fp)
   1c010:	10800317 	ldw	r2,12(r2)
   1c014:	e13ff917 	ldw	r4,-28(fp)
   1c018:	e17ffb17 	ldw	r5,-20(fp)
   1c01c:	e1bffc17 	ldw	r6,-16(fp)
   1c020:	e1fffd17 	ldw	r7,-12(fp)
   1c024:	103ee83a 	callr	r2
   1c028:	e0bfff15 	stw	r2,-4(fp)
   1c02c:	00000106 	br	1c034 <open+0x124>
   1c030:	e03fff15 	stw	zero,-4(fp)
   1c034:	e0bfff17 	ldw	r2,-4(fp)
   1c038:	e0bff715 	stw	r2,-36(fp)
   1c03c:	00000206 	br	1c048 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1c040:	00bffb44 	movi	r2,-19
   1c044:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1c048:	e0bff717 	ldw	r2,-36(fp)
   1c04c:	1004403a 	cmpge	r2,r2,zero
   1c050:	1000091e 	bne	r2,zero,1c078 <open+0x168>
  {
    alt_release_fd (index);  
   1c054:	e13ff817 	ldw	r4,-32(fp)
   1c058:	001c2780 	call	1c278 <alt_release_fd>
    ALT_ERRNO = -status;
   1c05c:	001c0980 	call	1c098 <alt_get_errno>
   1c060:	e0fff717 	ldw	r3,-36(fp)
   1c064:	00c7c83a 	sub	r3,zero,r3
   1c068:	10c00015 	stw	r3,0(r2)
    return -1;
   1c06c:	00bfffc4 	movi	r2,-1
   1c070:	e0bffe15 	stw	r2,-8(fp)
   1c074:	00000206 	br	1c080 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   1c078:	e0bff817 	ldw	r2,-32(fp)
   1c07c:	e0bffe15 	stw	r2,-8(fp)
   1c080:	e0bffe17 	ldw	r2,-8(fp)
}
   1c084:	e037883a 	mov	sp,fp
   1c088:	dfc00117 	ldw	ra,4(sp)
   1c08c:	df000017 	ldw	fp,0(sp)
   1c090:	dec00204 	addi	sp,sp,8
   1c094:	f800283a 	ret

0001c098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c098:	defffd04 	addi	sp,sp,-12
   1c09c:	dfc00215 	stw	ra,8(sp)
   1c0a0:	df000115 	stw	fp,4(sp)
   1c0a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1c0a8:	008000b4 	movhi	r2,2
   1c0ac:	10834a04 	addi	r2,r2,3368
   1c0b0:	10800017 	ldw	r2,0(r2)
   1c0b4:	1005003a 	cmpeq	r2,r2,zero
   1c0b8:	1000061e 	bne	r2,zero,1c0d4 <alt_get_errno+0x3c>
   1c0bc:	008000b4 	movhi	r2,2
   1c0c0:	10834a04 	addi	r2,r2,3368
   1c0c4:	10800017 	ldw	r2,0(r2)
   1c0c8:	103ee83a 	callr	r2
   1c0cc:	e0bfff15 	stw	r2,-4(fp)
   1c0d0:	00000306 	br	1c0e0 <alt_get_errno+0x48>
   1c0d4:	008000b4 	movhi	r2,2
   1c0d8:	108a1704 	addi	r2,r2,10332
   1c0dc:	e0bfff15 	stw	r2,-4(fp)
   1c0e0:	e0bfff17 	ldw	r2,-4(fp)
}
   1c0e4:	e037883a 	mov	sp,fp
   1c0e8:	dfc00117 	ldw	ra,4(sp)
   1c0ec:	df000017 	ldw	fp,0(sp)
   1c0f0:	dec00204 	addi	sp,sp,8
   1c0f4:	f800283a 	ret

0001c0f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1c0f8:	defff704 	addi	sp,sp,-36
   1c0fc:	dfc00815 	stw	ra,32(sp)
   1c100:	df000715 	stw	fp,28(sp)
   1c104:	df000704 	addi	fp,sp,28
   1c108:	e13ffb15 	stw	r4,-20(fp)
   1c10c:	e17ffc15 	stw	r5,-16(fp)
   1c110:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1c114:	e0bffb17 	ldw	r2,-20(fp)
   1c118:	1004803a 	cmplt	r2,r2,zero
   1c11c:	1000081e 	bne	r2,zero,1c140 <read+0x48>
   1c120:	e0bffb17 	ldw	r2,-20(fp)
   1c124:	10800324 	muli	r2,r2,12
   1c128:	1007883a 	mov	r3,r2
   1c12c:	008000b4 	movhi	r2,2
   1c130:	10bea704 	addi	r2,r2,-1380
   1c134:	1887883a 	add	r3,r3,r2
   1c138:	e0ffff15 	stw	r3,-4(fp)
   1c13c:	00000106 	br	1c144 <read+0x4c>
   1c140:	e03fff15 	stw	zero,-4(fp)
   1c144:	e0bfff17 	ldw	r2,-4(fp)
   1c148:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1c14c:	e0bffa17 	ldw	r2,-24(fp)
   1c150:	1005003a 	cmpeq	r2,r2,zero
   1c154:	1000241e 	bne	r2,zero,1c1e8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1c158:	e0bffa17 	ldw	r2,-24(fp)
   1c15c:	10800217 	ldw	r2,8(r2)
   1c160:	108000cc 	andi	r2,r2,3
   1c164:	10800060 	cmpeqi	r2,r2,1
   1c168:	10001a1e 	bne	r2,zero,1c1d4 <read+0xdc>
   1c16c:	e0bffa17 	ldw	r2,-24(fp)
   1c170:	10800017 	ldw	r2,0(r2)
   1c174:	10800517 	ldw	r2,20(r2)
   1c178:	1005003a 	cmpeq	r2,r2,zero
   1c17c:	1000151e 	bne	r2,zero,1c1d4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1c180:	e0bffa17 	ldw	r2,-24(fp)
   1c184:	10800017 	ldw	r2,0(r2)
   1c188:	10800517 	ldw	r2,20(r2)
   1c18c:	e17ffc17 	ldw	r5,-16(fp)
   1c190:	e1bffd17 	ldw	r6,-12(fp)
   1c194:	e13ffa17 	ldw	r4,-24(fp)
   1c198:	103ee83a 	callr	r2
   1c19c:	e0bff915 	stw	r2,-28(fp)
   1c1a0:	e0bff917 	ldw	r2,-28(fp)
   1c1a4:	1004403a 	cmpge	r2,r2,zero
   1c1a8:	1000071e 	bne	r2,zero,1c1c8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   1c1ac:	001c2180 	call	1c218 <alt_get_errno>
   1c1b0:	e0fff917 	ldw	r3,-28(fp)
   1c1b4:	00c7c83a 	sub	r3,zero,r3
   1c1b8:	10c00015 	stw	r3,0(r2)
          return -1;
   1c1bc:	00bfffc4 	movi	r2,-1
   1c1c0:	e0bffe15 	stw	r2,-8(fp)
   1c1c4:	00000e06 	br	1c200 <read+0x108>
        }
        return rval;
   1c1c8:	e0bff917 	ldw	r2,-28(fp)
   1c1cc:	e0bffe15 	stw	r2,-8(fp)
   1c1d0:	00000b06 	br	1c200 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1c1d4:	001c2180 	call	1c218 <alt_get_errno>
   1c1d8:	1007883a 	mov	r3,r2
   1c1dc:	00800344 	movi	r2,13
   1c1e0:	18800015 	stw	r2,0(r3)
   1c1e4:	00000406 	br	1c1f8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1c1e8:	001c2180 	call	1c218 <alt_get_errno>
   1c1ec:	1007883a 	mov	r3,r2
   1c1f0:	00801444 	movi	r2,81
   1c1f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1c1f8:	00bfffc4 	movi	r2,-1
   1c1fc:	e0bffe15 	stw	r2,-8(fp)
   1c200:	e0bffe17 	ldw	r2,-8(fp)
}
   1c204:	e037883a 	mov	sp,fp
   1c208:	dfc00117 	ldw	ra,4(sp)
   1c20c:	df000017 	ldw	fp,0(sp)
   1c210:	dec00204 	addi	sp,sp,8
   1c214:	f800283a 	ret

0001c218 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c218:	defffd04 	addi	sp,sp,-12
   1c21c:	dfc00215 	stw	ra,8(sp)
   1c220:	df000115 	stw	fp,4(sp)
   1c224:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1c228:	008000b4 	movhi	r2,2
   1c22c:	10834a04 	addi	r2,r2,3368
   1c230:	10800017 	ldw	r2,0(r2)
   1c234:	1005003a 	cmpeq	r2,r2,zero
   1c238:	1000061e 	bne	r2,zero,1c254 <alt_get_errno+0x3c>
   1c23c:	008000b4 	movhi	r2,2
   1c240:	10834a04 	addi	r2,r2,3368
   1c244:	10800017 	ldw	r2,0(r2)
   1c248:	103ee83a 	callr	r2
   1c24c:	e0bfff15 	stw	r2,-4(fp)
   1c250:	00000306 	br	1c260 <alt_get_errno+0x48>
   1c254:	008000b4 	movhi	r2,2
   1c258:	108a1704 	addi	r2,r2,10332
   1c25c:	e0bfff15 	stw	r2,-4(fp)
   1c260:	e0bfff17 	ldw	r2,-4(fp)
}
   1c264:	e037883a 	mov	sp,fp
   1c268:	dfc00117 	ldw	ra,4(sp)
   1c26c:	df000017 	ldw	fp,0(sp)
   1c270:	dec00204 	addi	sp,sp,8
   1c274:	f800283a 	ret

0001c278 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1c278:	defffe04 	addi	sp,sp,-8
   1c27c:	df000115 	stw	fp,4(sp)
   1c280:	df000104 	addi	fp,sp,4
   1c284:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1c288:	e0bfff17 	ldw	r2,-4(fp)
   1c28c:	108000d0 	cmplti	r2,r2,3
   1c290:	10000d1e 	bne	r2,zero,1c2c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1c294:	e0bfff17 	ldw	r2,-4(fp)
   1c298:	00c000b4 	movhi	r3,2
   1c29c:	18fea704 	addi	r3,r3,-1380
   1c2a0:	10800324 	muli	r2,r2,12
   1c2a4:	10c5883a 	add	r2,r2,r3
   1c2a8:	10800204 	addi	r2,r2,8
   1c2ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1c2b0:	e0bfff17 	ldw	r2,-4(fp)
   1c2b4:	00c000b4 	movhi	r3,2
   1c2b8:	18fea704 	addi	r3,r3,-1380
   1c2bc:	10800324 	muli	r2,r2,12
   1c2c0:	10c5883a 	add	r2,r2,r3
   1c2c4:	10000015 	stw	zero,0(r2)
  }
}
   1c2c8:	e037883a 	mov	sp,fp
   1c2cc:	df000017 	ldw	fp,0(sp)
   1c2d0:	dec00104 	addi	sp,sp,4
   1c2d4:	f800283a 	ret

0001c2d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1c2d8:	defff804 	addi	sp,sp,-32
   1c2dc:	df000715 	stw	fp,28(sp)
   1c2e0:	df000704 	addi	fp,sp,28
   1c2e4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c2e8:	0005303a 	rdctl	r2,status
   1c2ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c2f0:	e0fffb17 	ldw	r3,-20(fp)
   1c2f4:	00bfff84 	movi	r2,-2
   1c2f8:	1884703a 	and	r2,r3,r2
   1c2fc:	1001703a 	wrctl	status,r2
  
  return context;
   1c300:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1c304:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1c308:	d0a01717 	ldw	r2,-32676(gp)
   1c30c:	10c000c4 	addi	r3,r2,3
   1c310:	00bfff04 	movi	r2,-4
   1c314:	1884703a 	and	r2,r3,r2
   1c318:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1c31c:	d0e01717 	ldw	r3,-32676(gp)
   1c320:	e0bffe17 	ldw	r2,-8(fp)
   1c324:	1887883a 	add	r3,r3,r2
   1c328:	00808034 	movhi	r2,512
   1c32c:	10800004 	addi	r2,r2,0
   1c330:	10c0072e 	bgeu	r2,r3,1c350 <sbrk+0x78>
   1c334:	e0bffd17 	ldw	r2,-12(fp)
   1c338:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c33c:	e0bffa17 	ldw	r2,-24(fp)
   1c340:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1c344:	00bfffc4 	movi	r2,-1
   1c348:	e0bfff15 	stw	r2,-4(fp)
   1c34c:	00000c06 	br	1c380 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1c350:	d0a01717 	ldw	r2,-32676(gp)
   1c354:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   1c358:	d0e01717 	ldw	r3,-32676(gp)
   1c35c:	e0bffe17 	ldw	r2,-8(fp)
   1c360:	1885883a 	add	r2,r3,r2
   1c364:	d0a01715 	stw	r2,-32676(gp)
   1c368:	e0bffd17 	ldw	r2,-12(fp)
   1c36c:	e0bff915 	stw	r2,-28(fp)
   1c370:	e0bff917 	ldw	r2,-28(fp)
   1c374:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1c378:	e0bffc17 	ldw	r2,-16(fp)
   1c37c:	e0bfff15 	stw	r2,-4(fp)
   1c380:	e0bfff17 	ldw	r2,-4(fp)
} 
   1c384:	e037883a 	mov	sp,fp
   1c388:	df000017 	ldw	fp,0(sp)
   1c38c:	dec00104 	addi	sp,sp,4
   1c390:	f800283a 	ret

0001c394 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1c394:	defff704 	addi	sp,sp,-36
   1c398:	dfc00815 	stw	ra,32(sp)
   1c39c:	df000715 	stw	fp,28(sp)
   1c3a0:	df000704 	addi	fp,sp,28
   1c3a4:	e13ffb15 	stw	r4,-20(fp)
   1c3a8:	e17ffc15 	stw	r5,-16(fp)
   1c3ac:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1c3b0:	e0bffb17 	ldw	r2,-20(fp)
   1c3b4:	1004803a 	cmplt	r2,r2,zero
   1c3b8:	1000081e 	bne	r2,zero,1c3dc <write+0x48>
   1c3bc:	e0bffb17 	ldw	r2,-20(fp)
   1c3c0:	10800324 	muli	r2,r2,12
   1c3c4:	1007883a 	mov	r3,r2
   1c3c8:	008000b4 	movhi	r2,2
   1c3cc:	10bea704 	addi	r2,r2,-1380
   1c3d0:	1887883a 	add	r3,r3,r2
   1c3d4:	e0ffff15 	stw	r3,-4(fp)
   1c3d8:	00000106 	br	1c3e0 <write+0x4c>
   1c3dc:	e03fff15 	stw	zero,-4(fp)
   1c3e0:	e0bfff17 	ldw	r2,-4(fp)
   1c3e4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1c3e8:	e0bffa17 	ldw	r2,-24(fp)
   1c3ec:	1005003a 	cmpeq	r2,r2,zero
   1c3f0:	1000241e 	bne	r2,zero,1c484 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1c3f4:	e0bffa17 	ldw	r2,-24(fp)
   1c3f8:	10800217 	ldw	r2,8(r2)
   1c3fc:	108000cc 	andi	r2,r2,3
   1c400:	1005003a 	cmpeq	r2,r2,zero
   1c404:	10001a1e 	bne	r2,zero,1c470 <write+0xdc>
   1c408:	e0bffa17 	ldw	r2,-24(fp)
   1c40c:	10800017 	ldw	r2,0(r2)
   1c410:	10800617 	ldw	r2,24(r2)
   1c414:	1005003a 	cmpeq	r2,r2,zero
   1c418:	1000151e 	bne	r2,zero,1c470 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1c41c:	e0bffa17 	ldw	r2,-24(fp)
   1c420:	10800017 	ldw	r2,0(r2)
   1c424:	10800617 	ldw	r2,24(r2)
   1c428:	e17ffc17 	ldw	r5,-16(fp)
   1c42c:	e1bffd17 	ldw	r6,-12(fp)
   1c430:	e13ffa17 	ldw	r4,-24(fp)
   1c434:	103ee83a 	callr	r2
   1c438:	e0bff915 	stw	r2,-28(fp)
   1c43c:	e0bff917 	ldw	r2,-28(fp)
   1c440:	1004403a 	cmpge	r2,r2,zero
   1c444:	1000071e 	bne	r2,zero,1c464 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   1c448:	001c4b40 	call	1c4b4 <alt_get_errno>
   1c44c:	e0fff917 	ldw	r3,-28(fp)
   1c450:	00c7c83a 	sub	r3,zero,r3
   1c454:	10c00015 	stw	r3,0(r2)
        return -1;
   1c458:	00bfffc4 	movi	r2,-1
   1c45c:	e0bffe15 	stw	r2,-8(fp)
   1c460:	00000e06 	br	1c49c <write+0x108>
      }
      return rval;
   1c464:	e0bff917 	ldw	r2,-28(fp)
   1c468:	e0bffe15 	stw	r2,-8(fp)
   1c46c:	00000b06 	br	1c49c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1c470:	001c4b40 	call	1c4b4 <alt_get_errno>
   1c474:	1007883a 	mov	r3,r2
   1c478:	00800344 	movi	r2,13
   1c47c:	18800015 	stw	r2,0(r3)
   1c480:	00000406 	br	1c494 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1c484:	001c4b40 	call	1c4b4 <alt_get_errno>
   1c488:	1007883a 	mov	r3,r2
   1c48c:	00801444 	movi	r2,81
   1c490:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1c494:	00bfffc4 	movi	r2,-1
   1c498:	e0bffe15 	stw	r2,-8(fp)
   1c49c:	e0bffe17 	ldw	r2,-8(fp)
}
   1c4a0:	e037883a 	mov	sp,fp
   1c4a4:	dfc00117 	ldw	ra,4(sp)
   1c4a8:	df000017 	ldw	fp,0(sp)
   1c4ac:	dec00204 	addi	sp,sp,8
   1c4b0:	f800283a 	ret

0001c4b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c4b4:	defffd04 	addi	sp,sp,-12
   1c4b8:	dfc00215 	stw	ra,8(sp)
   1c4bc:	df000115 	stw	fp,4(sp)
   1c4c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1c4c4:	008000b4 	movhi	r2,2
   1c4c8:	10834a04 	addi	r2,r2,3368
   1c4cc:	10800017 	ldw	r2,0(r2)
   1c4d0:	1005003a 	cmpeq	r2,r2,zero
   1c4d4:	1000061e 	bne	r2,zero,1c4f0 <alt_get_errno+0x3c>
   1c4d8:	008000b4 	movhi	r2,2
   1c4dc:	10834a04 	addi	r2,r2,3368
   1c4e0:	10800017 	ldw	r2,0(r2)
   1c4e4:	103ee83a 	callr	r2
   1c4e8:	e0bfff15 	stw	r2,-4(fp)
   1c4ec:	00000306 	br	1c4fc <alt_get_errno+0x48>
   1c4f0:	008000b4 	movhi	r2,2
   1c4f4:	108a1704 	addi	r2,r2,10332
   1c4f8:	e0bfff15 	stw	r2,-4(fp)
   1c4fc:	e0bfff17 	ldw	r2,-4(fp)
}
   1c500:	e037883a 	mov	sp,fp
   1c504:	dfc00117 	ldw	ra,4(sp)
   1c508:	df000017 	ldw	fp,0(sp)
   1c50c:	dec00204 	addi	sp,sp,8
   1c510:	f800283a 	ret

0001c514 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1c514:	defffd04 	addi	sp,sp,-12
   1c518:	dfc00215 	stw	ra,8(sp)
   1c51c:	df000115 	stw	fp,4(sp)
   1c520:	df000104 	addi	fp,sp,4
   1c524:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
   1c528:	001de240 	call	1de24 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1c52c:	00800044 	movi	r2,1
   1c530:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1c534:	e037883a 	mov	sp,fp
   1c538:	dfc00117 	ldw	ra,4(sp)
   1c53c:	df000017 	ldw	fp,0(sp)
   1c540:	dec00204 	addi	sp,sp,8
   1c544:	f800283a 	ret

0001c548 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1c548:	defffd04 	addi	sp,sp,-12
   1c54c:	dfc00215 	stw	ra,8(sp)
   1c550:	df000115 	stw	fp,4(sp)
   1c554:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   1c558:	010000b4 	movhi	r4,2
   1c55c:	213f1104 	addi	r4,r4,-956
   1c560:	000b883a 	mov	r5,zero
   1c564:	01800144 	movi	r6,5
   1c568:	001c9040 	call	1c904 <altera_avalon_jtag_uart_init>
   1c56c:	010000b4 	movhi	r4,2
   1c570:	213f0704 	addi	r4,r4,-996
   1c574:	001c7840 	call	1c784 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
   1c578:	008000b4 	movhi	r2,2
   1c57c:	10831f04 	addi	r2,r2,3196
   1c580:	10800a17 	ldw	r2,40(r2)
   1c584:	10800017 	ldw	r2,0(r2)
   1c588:	1007883a 	mov	r3,r2
   1c58c:	008000b4 	movhi	r2,2
   1c590:	10831f04 	addi	r2,r2,3196
   1c594:	10c00b15 	stw	r3,44(r2)
   1c598:	008000b4 	movhi	r2,2
   1c59c:	10831f04 	addi	r2,r2,3196
   1c5a0:	10800a17 	ldw	r2,40(r2)
   1c5a4:	10800104 	addi	r2,r2,4
   1c5a8:	10800017 	ldw	r2,0(r2)
   1c5ac:	1007883a 	mov	r3,r2
   1c5b0:	008000b4 	movhi	r2,2
   1c5b4:	10831f04 	addi	r2,r2,3196
   1c5b8:	10c00c15 	stw	r3,48(r2)
   1c5bc:	008000b4 	movhi	r2,2
   1c5c0:	10831f04 	addi	r2,r2,3196
   1c5c4:	10800a17 	ldw	r2,40(r2)
   1c5c8:	10800204 	addi	r2,r2,8
   1c5cc:	10800017 	ldw	r2,0(r2)
   1c5d0:	10ffffcc 	andi	r3,r2,65535
   1c5d4:	008000b4 	movhi	r2,2
   1c5d8:	10831f04 	addi	r2,r2,3196
   1c5dc:	10c00f15 	stw	r3,60(r2)
   1c5e0:	008000b4 	movhi	r2,2
   1c5e4:	10831f04 	addi	r2,r2,3196
   1c5e8:	10800a17 	ldw	r2,40(r2)
   1c5ec:	10800204 	addi	r2,r2,8
   1c5f0:	10800017 	ldw	r2,0(r2)
   1c5f4:	1005d43a 	srai	r2,r2,16
   1c5f8:	10ffffcc 	andi	r3,r2,65535
   1c5fc:	008000b4 	movhi	r2,2
   1c600:	10831f04 	addi	r2,r2,3196
   1c604:	10c01015 	stw	r3,64(r2)
   1c608:	008000b4 	movhi	r2,2
   1c60c:	10831f04 	addi	r2,r2,3196
   1c610:	10800a17 	ldw	r2,40(r2)
   1c614:	10800304 	addi	r2,r2,12
   1c618:	10800017 	ldw	r2,0(r2)
   1c61c:	1005d07a 	srai	r2,r2,1
   1c620:	10c0004c 	andi	r3,r2,1
   1c624:	008000b4 	movhi	r2,2
   1c628:	10831f04 	addi	r2,r2,3196
   1c62c:	10c00d15 	stw	r3,52(r2)
   1c630:	008000b4 	movhi	r2,2
   1c634:	10831f04 	addi	r2,r2,3196
   1c638:	10800a17 	ldw	r2,40(r2)
   1c63c:	10800304 	addi	r2,r2,12
   1c640:	10800017 	ldw	r2,0(r2)
   1c644:	1005d13a 	srai	r2,r2,4
   1c648:	10c003cc 	andi	r3,r2,15
   1c64c:	008000b4 	movhi	r2,2
   1c650:	10831f04 	addi	r2,r2,3196
   1c654:	10c00e15 	stw	r3,56(r2)
   1c658:	008000b4 	movhi	r2,2
   1c65c:	10831f04 	addi	r2,r2,3196
   1c660:	10800a17 	ldw	r2,40(r2)
   1c664:	10800304 	addi	r2,r2,12
   1c668:	10800017 	ldw	r2,0(r2)
   1c66c:	1005d43a 	srai	r2,r2,16
   1c670:	1007883a 	mov	r3,r2
   1c674:	00bfffc4 	movi	r2,-1
   1c678:	1884703a 	and	r2,r3,r2
   1c67c:	e0bfff45 	stb	r2,-3(fp)
   1c680:	008000b4 	movhi	r2,2
   1c684:	10831f04 	addi	r2,r2,3196
   1c688:	10800a17 	ldw	r2,40(r2)
   1c68c:	10800304 	addi	r2,r2,12
   1c690:	10800017 	ldw	r2,0(r2)
   1c694:	1005d63a 	srai	r2,r2,24
   1c698:	1007883a 	mov	r3,r2
   1c69c:	00bfffc4 	movi	r2,-1
   1c6a0:	1884703a 	and	r2,r3,r2
   1c6a4:	e0bfff05 	stb	r2,-4(fp)
   1c6a8:	008000b4 	movhi	r2,2
   1c6ac:	10831f04 	addi	r2,r2,3196
   1c6b0:	10800e17 	ldw	r2,56(r2)
   1c6b4:	10800058 	cmpnei	r2,r2,1
   1c6b8:	1000041e 	bne	r2,zero,1c6cc <alt_sys_init+0x184>
   1c6bc:	008000b4 	movhi	r2,2
   1c6c0:	10831f04 	addi	r2,r2,3196
   1c6c4:	10001115 	stw	zero,68(r2)
   1c6c8:	00000e06 	br	1c704 <alt_sys_init+0x1bc>
   1c6cc:	008000b4 	movhi	r2,2
   1c6d0:	10831f04 	addi	r2,r2,3196
   1c6d4:	10800e17 	ldw	r2,56(r2)
   1c6d8:	10800098 	cmpnei	r2,r2,2
   1c6dc:	1000051e 	bne	r2,zero,1c6f4 <alt_sys_init+0x1ac>
   1c6e0:	00c000b4 	movhi	r3,2
   1c6e4:	18c31f04 	addi	r3,r3,3196
   1c6e8:	00800044 	movi	r2,1
   1c6ec:	18801115 	stw	r2,68(r3)
   1c6f0:	00000406 	br	1c704 <alt_sys_init+0x1bc>
   1c6f4:	00c000b4 	movhi	r3,2
   1c6f8:	18c31f04 	addi	r3,r3,3196
   1c6fc:	00800084 	movi	r2,2
   1c700:	18801115 	stw	r2,68(r3)
   1c704:	e0ffff43 	ldbu	r3,-3(fp)
   1c708:	00800804 	movi	r2,32
   1c70c:	10c7c83a 	sub	r3,r2,r3
   1c710:	00bfffc4 	movi	r2,-1
   1c714:	10c6d83a 	srl	r3,r2,r3
   1c718:	008000b4 	movhi	r2,2
   1c71c:	10831f04 	addi	r2,r2,3196
   1c720:	10c01215 	stw	r3,72(r2)
   1c724:	e0ffff43 	ldbu	r3,-3(fp)
   1c728:	008000b4 	movhi	r2,2
   1c72c:	10831f04 	addi	r2,r2,3196
   1c730:	10801117 	ldw	r2,68(r2)
   1c734:	1887883a 	add	r3,r3,r2
   1c738:	008000b4 	movhi	r2,2
   1c73c:	10831f04 	addi	r2,r2,3196
   1c740:	10c01315 	stw	r3,76(r2)
   1c744:	e0ffff03 	ldbu	r3,-4(fp)
   1c748:	00800804 	movi	r2,32
   1c74c:	10c7c83a 	sub	r3,r2,r3
   1c750:	00bfffc4 	movi	r2,-1
   1c754:	10c6d83a 	srl	r3,r2,r3
   1c758:	008000b4 	movhi	r2,2
   1c75c:	10831f04 	addi	r2,r2,3196
   1c760:	10c01415 	stw	r3,80(r2)
   1c764:	010000b4 	movhi	r4,2
   1c768:	21031f04 	addi	r4,r4,3196
   1c76c:	001c7840 	call	1c784 <alt_dev_reg>
}
   1c770:	e037883a 	mov	sp,fp
   1c774:	dfc00117 	ldw	ra,4(sp)
   1c778:	df000017 	ldw	fp,0(sp)
   1c77c:	dec00204 	addi	sp,sp,8
   1c780:	f800283a 	ret

0001c784 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1c784:	defffd04 	addi	sp,sp,-12
   1c788:	dfc00215 	stw	ra,8(sp)
   1c78c:	df000115 	stw	fp,4(sp)
   1c790:	df000104 	addi	fp,sp,4
   1c794:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1c798:	e13fff17 	ldw	r4,-4(fp)
   1c79c:	014000b4 	movhi	r5,2
   1c7a0:	29434704 	addi	r5,r5,3356
   1c7a4:	001d4000 	call	1d400 <alt_dev_llist_insert>
}
   1c7a8:	e037883a 	mov	sp,fp
   1c7ac:	dfc00117 	ldw	ra,4(sp)
   1c7b0:	df000017 	ldw	fp,0(sp)
   1c7b4:	dec00204 	addi	sp,sp,8
   1c7b8:	f800283a 	ret

0001c7bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1c7bc:	defffa04 	addi	sp,sp,-24
   1c7c0:	dfc00515 	stw	ra,20(sp)
   1c7c4:	df000415 	stw	fp,16(sp)
   1c7c8:	df000404 	addi	fp,sp,16
   1c7cc:	e13ffd15 	stw	r4,-12(fp)
   1c7d0:	e17ffe15 	stw	r5,-8(fp)
   1c7d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c7d8:	e0bffd17 	ldw	r2,-12(fp)
   1c7dc:	10800017 	ldw	r2,0(r2)
   1c7e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1c7e4:	e0bffc17 	ldw	r2,-16(fp)
   1c7e8:	11000a04 	addi	r4,r2,40
   1c7ec:	e0bffd17 	ldw	r2,-12(fp)
   1c7f0:	11c00217 	ldw	r7,8(r2)
   1c7f4:	e17ffe17 	ldw	r5,-8(fp)
   1c7f8:	e1bfff17 	ldw	r6,-4(fp)
   1c7fc:	001ce040 	call	1ce04 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1c800:	e037883a 	mov	sp,fp
   1c804:	dfc00117 	ldw	ra,4(sp)
   1c808:	df000017 	ldw	fp,0(sp)
   1c80c:	dec00204 	addi	sp,sp,8
   1c810:	f800283a 	ret

0001c814 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1c814:	defffa04 	addi	sp,sp,-24
   1c818:	dfc00515 	stw	ra,20(sp)
   1c81c:	df000415 	stw	fp,16(sp)
   1c820:	df000404 	addi	fp,sp,16
   1c824:	e13ffd15 	stw	r4,-12(fp)
   1c828:	e17ffe15 	stw	r5,-8(fp)
   1c82c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c830:	e0bffd17 	ldw	r2,-12(fp)
   1c834:	10800017 	ldw	r2,0(r2)
   1c838:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1c83c:	e0bffc17 	ldw	r2,-16(fp)
   1c840:	11000a04 	addi	r4,r2,40
   1c844:	e0bffd17 	ldw	r2,-12(fp)
   1c848:	11c00217 	ldw	r7,8(r2)
   1c84c:	e17ffe17 	ldw	r5,-8(fp)
   1c850:	e1bfff17 	ldw	r6,-4(fp)
   1c854:	001d0280 	call	1d028 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1c858:	e037883a 	mov	sp,fp
   1c85c:	dfc00117 	ldw	ra,4(sp)
   1c860:	df000017 	ldw	fp,0(sp)
   1c864:	dec00204 	addi	sp,sp,8
   1c868:	f800283a 	ret

0001c86c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1c86c:	defffc04 	addi	sp,sp,-16
   1c870:	dfc00315 	stw	ra,12(sp)
   1c874:	df000215 	stw	fp,8(sp)
   1c878:	df000204 	addi	fp,sp,8
   1c87c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c880:	e0bfff17 	ldw	r2,-4(fp)
   1c884:	10800017 	ldw	r2,0(r2)
   1c888:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1c88c:	e0bffe17 	ldw	r2,-8(fp)
   1c890:	11000a04 	addi	r4,r2,40
   1c894:	e0bfff17 	ldw	r2,-4(fp)
   1c898:	11400217 	ldw	r5,8(r2)
   1c89c:	001cc9c0 	call	1cc9c <altera_avalon_jtag_uart_close>
}
   1c8a0:	e037883a 	mov	sp,fp
   1c8a4:	dfc00117 	ldw	ra,4(sp)
   1c8a8:	df000017 	ldw	fp,0(sp)
   1c8ac:	dec00204 	addi	sp,sp,8
   1c8b0:	f800283a 	ret

0001c8b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1c8b4:	defffa04 	addi	sp,sp,-24
   1c8b8:	dfc00515 	stw	ra,20(sp)
   1c8bc:	df000415 	stw	fp,16(sp)
   1c8c0:	df000404 	addi	fp,sp,16
   1c8c4:	e13ffd15 	stw	r4,-12(fp)
   1c8c8:	e17ffe15 	stw	r5,-8(fp)
   1c8cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1c8d0:	e0bffd17 	ldw	r2,-12(fp)
   1c8d4:	10800017 	ldw	r2,0(r2)
   1c8d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1c8dc:	e0bffc17 	ldw	r2,-16(fp)
   1c8e0:	11000a04 	addi	r4,r2,40
   1c8e4:	e17ffe17 	ldw	r5,-8(fp)
   1c8e8:	e1bfff17 	ldw	r6,-4(fp)
   1c8ec:	001cd100 	call	1cd10 <altera_avalon_jtag_uart_ioctl>
}
   1c8f0:	e037883a 	mov	sp,fp
   1c8f4:	dfc00117 	ldw	ra,4(sp)
   1c8f8:	df000017 	ldw	fp,0(sp)
   1c8fc:	dec00204 	addi	sp,sp,8
   1c900:	f800283a 	ret

0001c904 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1c904:	defffa04 	addi	sp,sp,-24
   1c908:	dfc00515 	stw	ra,20(sp)
   1c90c:	df000415 	stw	fp,16(sp)
   1c910:	df000404 	addi	fp,sp,16
   1c914:	e13ffd15 	stw	r4,-12(fp)
   1c918:	e17ffe15 	stw	r5,-8(fp)
   1c91c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c920:	e0fffd17 	ldw	r3,-12(fp)
   1c924:	00800044 	movi	r2,1
   1c928:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1c92c:	e0bffd17 	ldw	r2,-12(fp)
   1c930:	10800017 	ldw	r2,0(r2)
   1c934:	11000104 	addi	r4,r2,4
   1c938:	e0bffd17 	ldw	r2,-12(fp)
   1c93c:	10800817 	ldw	r2,32(r2)
   1c940:	1007883a 	mov	r3,r2
   1c944:	2005883a 	mov	r2,r4
   1c948:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1c94c:	e13ffe17 	ldw	r4,-8(fp)
   1c950:	e17fff17 	ldw	r5,-4(fp)
   1c954:	d8000015 	stw	zero,0(sp)
   1c958:	018000b4 	movhi	r6,2
   1c95c:	31b27104 	addi	r6,r6,-13884
   1c960:	e1fffd17 	ldw	r7,-12(fp)
   1c964:	001d8780 	call	1d878 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1c968:	e0bffd17 	ldw	r2,-12(fp)
   1c96c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1c970:	e0bffd17 	ldw	r2,-12(fp)
   1c974:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1c978:	008000b4 	movhi	r2,2
   1c97c:	108a2204 	addi	r2,r2,10376
   1c980:	10800017 	ldw	r2,0(r2)
   1c984:	100b883a 	mov	r5,r2
   1c988:	018000b4 	movhi	r6,2
   1c98c:	31b2fb04 	addi	r6,r6,-13332
   1c990:	e1fffd17 	ldw	r7,-12(fp)
   1c994:	001d2680 	call	1d268 <alt_alarm_start>
   1c998:	1004403a 	cmpge	r2,r2,zero
   1c99c:	1000041e 	bne	r2,zero,1c9b0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1c9a0:	e0fffd17 	ldw	r3,-12(fp)
   1c9a4:	00a00034 	movhi	r2,32768
   1c9a8:	10bfffc4 	addi	r2,r2,-1
   1c9ac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1c9b0:	e037883a 	mov	sp,fp
   1c9b4:	dfc00117 	ldw	ra,4(sp)
   1c9b8:	df000017 	ldw	fp,0(sp)
   1c9bc:	dec00204 	addi	sp,sp,8
   1c9c0:	f800283a 	ret

0001c9c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1c9c4:	defff804 	addi	sp,sp,-32
   1c9c8:	df000715 	stw	fp,28(sp)
   1c9cc:	df000704 	addi	fp,sp,28
   1c9d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1c9d4:	e0bfff17 	ldw	r2,-4(fp)
   1c9d8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   1c9dc:	e0bffe17 	ldw	r2,-8(fp)
   1c9e0:	10800017 	ldw	r2,0(r2)
   1c9e4:	e0bffd15 	stw	r2,-12(fp)
   1c9e8:	00000006 	br	1c9ec <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c9ec:	e0bffd17 	ldw	r2,-12(fp)
   1c9f0:	10800104 	addi	r2,r2,4
   1c9f4:	10800037 	ldwio	r2,0(r2)
   1c9f8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1c9fc:	e0bffc17 	ldw	r2,-16(fp)
   1ca00:	1080c00c 	andi	r2,r2,768
   1ca04:	1005003a 	cmpeq	r2,r2,zero
   1ca08:	1000741e 	bne	r2,zero,1cbdc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1ca0c:	e0bffc17 	ldw	r2,-16(fp)
   1ca10:	1080400c 	andi	r2,r2,256
   1ca14:	1005003a 	cmpeq	r2,r2,zero
   1ca18:	1000351e 	bne	r2,zero,1caf0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1ca1c:	00800074 	movhi	r2,1
   1ca20:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ca24:	e0bffe17 	ldw	r2,-8(fp)
   1ca28:	10800a17 	ldw	r2,40(r2)
   1ca2c:	10800044 	addi	r2,r2,1
   1ca30:	1081ffcc 	andi	r2,r2,2047
   1ca34:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   1ca38:	e0bffe17 	ldw	r2,-8(fp)
   1ca3c:	10c00b17 	ldw	r3,44(r2)
   1ca40:	e0bffa17 	ldw	r2,-24(fp)
   1ca44:	18801626 	beq	r3,r2,1caa0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1ca48:	e0bffd17 	ldw	r2,-12(fp)
   1ca4c:	10800037 	ldwio	r2,0(r2)
   1ca50:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1ca54:	e0bffb17 	ldw	r2,-20(fp)
   1ca58:	10a0000c 	andi	r2,r2,32768
   1ca5c:	1005003a 	cmpeq	r2,r2,zero
   1ca60:	10000f1e 	bne	r2,zero,1caa0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1ca64:	e0bffe17 	ldw	r2,-8(fp)
   1ca68:	10c00a17 	ldw	r3,40(r2)
   1ca6c:	e0bffb17 	ldw	r2,-20(fp)
   1ca70:	1009883a 	mov	r4,r2
   1ca74:	e0bffe17 	ldw	r2,-8(fp)
   1ca78:	1885883a 	add	r2,r3,r2
   1ca7c:	10800e04 	addi	r2,r2,56
   1ca80:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ca84:	e0bffe17 	ldw	r2,-8(fp)
   1ca88:	10800a17 	ldw	r2,40(r2)
   1ca8c:	10800044 	addi	r2,r2,1
   1ca90:	10c1ffcc 	andi	r3,r2,2047
   1ca94:	e0bffe17 	ldw	r2,-8(fp)
   1ca98:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1ca9c:	003fe106 	br	1ca24 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1caa0:	e0bffb17 	ldw	r2,-20(fp)
   1caa4:	10bfffec 	andhi	r2,r2,65535
   1caa8:	1005003a 	cmpeq	r2,r2,zero
   1caac:	1000101e 	bne	r2,zero,1caf0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1cab0:	e0bffe17 	ldw	r2,-8(fp)
   1cab4:	10c00817 	ldw	r3,32(r2)
   1cab8:	00bfff84 	movi	r2,-2
   1cabc:	1886703a 	and	r3,r3,r2
   1cac0:	e0bffe17 	ldw	r2,-8(fp)
   1cac4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1cac8:	e0bffd17 	ldw	r2,-12(fp)
   1cacc:	11000104 	addi	r4,r2,4
   1cad0:	e0bffe17 	ldw	r2,-8(fp)
   1cad4:	10800817 	ldw	r2,32(r2)
   1cad8:	1007883a 	mov	r3,r2
   1cadc:	2005883a 	mov	r2,r4
   1cae0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1cae4:	e0bffd17 	ldw	r2,-12(fp)
   1cae8:	10800104 	addi	r2,r2,4
   1caec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1caf0:	e0bffc17 	ldw	r2,-16(fp)
   1caf4:	1080800c 	andi	r2,r2,512
   1caf8:	1005003a 	cmpeq	r2,r2,zero
   1cafc:	103fbb1e 	bne	r2,zero,1c9ec <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1cb00:	e0bffc17 	ldw	r2,-16(fp)
   1cb04:	10bfffec 	andhi	r2,r2,65535
   1cb08:	1004d43a 	srli	r2,r2,16
   1cb0c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1cb10:	00001506 	br	1cb68 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1cb14:	e13ffd17 	ldw	r4,-12(fp)
   1cb18:	e0bffe17 	ldw	r2,-8(fp)
   1cb1c:	10c00d17 	ldw	r3,52(r2)
   1cb20:	e0bffe17 	ldw	r2,-8(fp)
   1cb24:	1885883a 	add	r2,r3,r2
   1cb28:	10820e04 	addi	r2,r2,2104
   1cb2c:	10800003 	ldbu	r2,0(r2)
   1cb30:	10c03fcc 	andi	r3,r2,255
   1cb34:	18c0201c 	xori	r3,r3,128
   1cb38:	18ffe004 	addi	r3,r3,-128
   1cb3c:	2005883a 	mov	r2,r4
   1cb40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cb44:	e0bffe17 	ldw	r2,-8(fp)
   1cb48:	10800d17 	ldw	r2,52(r2)
   1cb4c:	10800044 	addi	r2,r2,1
   1cb50:	10c1ffcc 	andi	r3,r2,2047
   1cb54:	e0bffe17 	ldw	r2,-8(fp)
   1cb58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1cb5c:	e0bff917 	ldw	r2,-28(fp)
   1cb60:	10bfffc4 	addi	r2,r2,-1
   1cb64:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1cb68:	e0bff917 	ldw	r2,-28(fp)
   1cb6c:	1005003a 	cmpeq	r2,r2,zero
   1cb70:	1000051e 	bne	r2,zero,1cb88 <altera_avalon_jtag_uart_irq+0x1c4>
   1cb74:	e0bffe17 	ldw	r2,-8(fp)
   1cb78:	10c00d17 	ldw	r3,52(r2)
   1cb7c:	e0bffe17 	ldw	r2,-8(fp)
   1cb80:	10800c17 	ldw	r2,48(r2)
   1cb84:	18bfe31e 	bne	r3,r2,1cb14 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1cb88:	e0bff917 	ldw	r2,-28(fp)
   1cb8c:	1005003a 	cmpeq	r2,r2,zero
   1cb90:	103f961e 	bne	r2,zero,1c9ec <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1cb94:	e0bffe17 	ldw	r2,-8(fp)
   1cb98:	10c00817 	ldw	r3,32(r2)
   1cb9c:	00bfff44 	movi	r2,-3
   1cba0:	1886703a 	and	r3,r3,r2
   1cba4:	e0bffe17 	ldw	r2,-8(fp)
   1cba8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1cbac:	e0bffe17 	ldw	r2,-8(fp)
   1cbb0:	10800017 	ldw	r2,0(r2)
   1cbb4:	11000104 	addi	r4,r2,4
   1cbb8:	e0bffe17 	ldw	r2,-8(fp)
   1cbbc:	10800817 	ldw	r2,32(r2)
   1cbc0:	1007883a 	mov	r3,r2
   1cbc4:	2005883a 	mov	r2,r4
   1cbc8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1cbcc:	e0bffd17 	ldw	r2,-12(fp)
   1cbd0:	10800104 	addi	r2,r2,4
   1cbd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1cbd8:	003f8406 	br	1c9ec <altera_avalon_jtag_uart_irq+0x28>
}
   1cbdc:	e037883a 	mov	sp,fp
   1cbe0:	df000017 	ldw	fp,0(sp)
   1cbe4:	dec00104 	addi	sp,sp,4
   1cbe8:	f800283a 	ret

0001cbec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1cbec:	defffc04 	addi	sp,sp,-16
   1cbf0:	df000315 	stw	fp,12(sp)
   1cbf4:	df000304 	addi	fp,sp,12
   1cbf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1cbfc:	e0bfff17 	ldw	r2,-4(fp)
   1cc00:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1cc04:	e0bffe17 	ldw	r2,-8(fp)
   1cc08:	10800017 	ldw	r2,0(r2)
   1cc0c:	10800104 	addi	r2,r2,4
   1cc10:	10800037 	ldwio	r2,0(r2)
   1cc14:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1cc18:	e0bffd17 	ldw	r2,-12(fp)
   1cc1c:	1081000c 	andi	r2,r2,1024
   1cc20:	1005003a 	cmpeq	r2,r2,zero
   1cc24:	10000c1e 	bne	r2,zero,1cc58 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1cc28:	e0bffe17 	ldw	r2,-8(fp)
   1cc2c:	10800017 	ldw	r2,0(r2)
   1cc30:	11000104 	addi	r4,r2,4
   1cc34:	e0bffe17 	ldw	r2,-8(fp)
   1cc38:	10800817 	ldw	r2,32(r2)
   1cc3c:	10810014 	ori	r2,r2,1024
   1cc40:	1007883a 	mov	r3,r2
   1cc44:	2005883a 	mov	r2,r4
   1cc48:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1cc4c:	e0bffe17 	ldw	r2,-8(fp)
   1cc50:	10000915 	stw	zero,36(r2)
   1cc54:	00000a06 	br	1cc80 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1cc58:	e0bffe17 	ldw	r2,-8(fp)
   1cc5c:	10c00917 	ldw	r3,36(r2)
   1cc60:	00a00034 	movhi	r2,32768
   1cc64:	10bfff04 	addi	r2,r2,-4
   1cc68:	10c00536 	bltu	r2,r3,1cc80 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   1cc6c:	e0bffe17 	ldw	r2,-8(fp)
   1cc70:	10800917 	ldw	r2,36(r2)
   1cc74:	10c00044 	addi	r3,r2,1
   1cc78:	e0bffe17 	ldw	r2,-8(fp)
   1cc7c:	10c00915 	stw	r3,36(r2)
   1cc80:	008000b4 	movhi	r2,2
   1cc84:	108a2204 	addi	r2,r2,10376
   1cc88:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1cc8c:	e037883a 	mov	sp,fp
   1cc90:	df000017 	ldw	fp,0(sp)
   1cc94:	dec00104 	addi	sp,sp,4
   1cc98:	f800283a 	ret

0001cc9c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1cc9c:	defffc04 	addi	sp,sp,-16
   1cca0:	df000315 	stw	fp,12(sp)
   1cca4:	df000304 	addi	fp,sp,12
   1cca8:	e13ffd15 	stw	r4,-12(fp)
   1ccac:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ccb0:	00000706 	br	1ccd0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   1ccb4:	e0bffe17 	ldw	r2,-8(fp)
   1ccb8:	1090000c 	andi	r2,r2,16384
   1ccbc:	1005003a 	cmpeq	r2,r2,zero
   1ccc0:	1000031e 	bne	r2,zero,1ccd0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   1ccc4:	00bffd44 	movi	r2,-11
   1ccc8:	e0bfff15 	stw	r2,-4(fp)
   1cccc:	00000b06 	br	1ccfc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ccd0:	e0bffd17 	ldw	r2,-12(fp)
   1ccd4:	10c00d17 	ldw	r3,52(r2)
   1ccd8:	e0bffd17 	ldw	r2,-12(fp)
   1ccdc:	10800c17 	ldw	r2,48(r2)
   1cce0:	18800526 	beq	r3,r2,1ccf8 <altera_avalon_jtag_uart_close+0x5c>
   1cce4:	e0bffd17 	ldw	r2,-12(fp)
   1cce8:	10c00917 	ldw	r3,36(r2)
   1ccec:	e0bffd17 	ldw	r2,-12(fp)
   1ccf0:	10800117 	ldw	r2,4(r2)
   1ccf4:	18bfef36 	bltu	r3,r2,1ccb4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1ccf8:	e03fff15 	stw	zero,-4(fp)
   1ccfc:	e0bfff17 	ldw	r2,-4(fp)
}
   1cd00:	e037883a 	mov	sp,fp
   1cd04:	df000017 	ldw	fp,0(sp)
   1cd08:	dec00104 	addi	sp,sp,4
   1cd0c:	f800283a 	ret

0001cd10 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1cd10:	defff804 	addi	sp,sp,-32
   1cd14:	df000715 	stw	fp,28(sp)
   1cd18:	df000704 	addi	fp,sp,28
   1cd1c:	e13ffb15 	stw	r4,-20(fp)
   1cd20:	e17ffc15 	stw	r5,-16(fp)
   1cd24:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   1cd28:	00bff9c4 	movi	r2,-25
   1cd2c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   1cd30:	e0bffc17 	ldw	r2,-16(fp)
   1cd34:	e0bfff15 	stw	r2,-4(fp)
   1cd38:	e0ffff17 	ldw	r3,-4(fp)
   1cd3c:	189a8060 	cmpeqi	r2,r3,27137
   1cd40:	1000041e 	bne	r2,zero,1cd54 <altera_avalon_jtag_uart_ioctl+0x44>
   1cd44:	e0ffff17 	ldw	r3,-4(fp)
   1cd48:	189a80a0 	cmpeqi	r2,r3,27138
   1cd4c:	10001b1e 	bne	r2,zero,1cdbc <altera_avalon_jtag_uart_ioctl+0xac>
   1cd50:	00002706 	br	1cdf0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1cd54:	e0bffb17 	ldw	r2,-20(fp)
   1cd58:	10c00117 	ldw	r3,4(r2)
   1cd5c:	00a00034 	movhi	r2,32768
   1cd60:	10bfffc4 	addi	r2,r2,-1
   1cd64:	18802226 	beq	r3,r2,1cdf0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   1cd68:	e0bffd17 	ldw	r2,-12(fp)
   1cd6c:	10800017 	ldw	r2,0(r2)
   1cd70:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1cd74:	e0bff917 	ldw	r2,-28(fp)
   1cd78:	10800090 	cmplti	r2,r2,2
   1cd7c:	1000071e 	bne	r2,zero,1cd9c <altera_avalon_jtag_uart_ioctl+0x8c>
   1cd80:	e0fff917 	ldw	r3,-28(fp)
   1cd84:	00a00034 	movhi	r2,32768
   1cd88:	10bfffc4 	addi	r2,r2,-1
   1cd8c:	18800326 	beq	r3,r2,1cd9c <altera_avalon_jtag_uart_ioctl+0x8c>
   1cd90:	e0bff917 	ldw	r2,-28(fp)
   1cd94:	e0bffe15 	stw	r2,-8(fp)
   1cd98:	00000306 	br	1cda8 <altera_avalon_jtag_uart_ioctl+0x98>
   1cd9c:	00e00034 	movhi	r3,32768
   1cda0:	18ffff84 	addi	r3,r3,-2
   1cda4:	e0fffe15 	stw	r3,-8(fp)
   1cda8:	e0bffb17 	ldw	r2,-20(fp)
   1cdac:	e0fffe17 	ldw	r3,-8(fp)
   1cdb0:	10c00115 	stw	r3,4(r2)
      rc = 0;
   1cdb4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   1cdb8:	00000d06 	br	1cdf0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1cdbc:	e0bffb17 	ldw	r2,-20(fp)
   1cdc0:	10c00117 	ldw	r3,4(r2)
   1cdc4:	00a00034 	movhi	r2,32768
   1cdc8:	10bfffc4 	addi	r2,r2,-1
   1cdcc:	18800826 	beq	r3,r2,1cdf0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1cdd0:	e13ffd17 	ldw	r4,-12(fp)
   1cdd4:	e0bffb17 	ldw	r2,-20(fp)
   1cdd8:	10c00917 	ldw	r3,36(r2)
   1cddc:	e0bffb17 	ldw	r2,-20(fp)
   1cde0:	10800117 	ldw	r2,4(r2)
   1cde4:	1885803a 	cmpltu	r2,r3,r2
   1cde8:	20800015 	stw	r2,0(r4)
      rc = 0;
   1cdec:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   1cdf0:	e0bffa17 	ldw	r2,-24(fp)
}
   1cdf4:	e037883a 	mov	sp,fp
   1cdf8:	df000017 	ldw	fp,0(sp)
   1cdfc:	dec00104 	addi	sp,sp,4
   1ce00:	f800283a 	ret

0001ce04 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1ce04:	defff204 	addi	sp,sp,-56
   1ce08:	dfc00d15 	stw	ra,52(sp)
   1ce0c:	df000c15 	stw	fp,48(sp)
   1ce10:	df000c04 	addi	fp,sp,48
   1ce14:	e13ffb15 	stw	r4,-20(fp)
   1ce18:	e17ffc15 	stw	r5,-16(fp)
   1ce1c:	e1bffd15 	stw	r6,-12(fp)
   1ce20:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   1ce24:	e0bffc17 	ldw	r2,-16(fp)
   1ce28:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1ce2c:	00004806 	br	1cf50 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1ce30:	e0bffb17 	ldw	r2,-20(fp)
   1ce34:	10800a17 	ldw	r2,40(r2)
   1ce38:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1ce3c:	e0bffb17 	ldw	r2,-20(fp)
   1ce40:	10800b17 	ldw	r2,44(r2)
   1ce44:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   1ce48:	e0fff717 	ldw	r3,-36(fp)
   1ce4c:	e0bff617 	ldw	r2,-40(fp)
   1ce50:	18800536 	bltu	r3,r2,1ce68 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1ce54:	e0bff717 	ldw	r2,-36(fp)
   1ce58:	e0fff617 	ldw	r3,-40(fp)
   1ce5c:	10c5c83a 	sub	r2,r2,r3
   1ce60:	e0bff815 	stw	r2,-32(fp)
   1ce64:	00000406 	br	1ce78 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1ce68:	00820004 	movi	r2,2048
   1ce6c:	e0fff617 	ldw	r3,-40(fp)
   1ce70:	10c5c83a 	sub	r2,r2,r3
   1ce74:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1ce78:	e0bff817 	ldw	r2,-32(fp)
   1ce7c:	1005003a 	cmpeq	r2,r2,zero
   1ce80:	10001f1e 	bne	r2,zero,1cf00 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   1ce84:	e0fffd17 	ldw	r3,-12(fp)
   1ce88:	e0bff817 	ldw	r2,-32(fp)
   1ce8c:	1880022e 	bgeu	r3,r2,1ce98 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   1ce90:	e0bffd17 	ldw	r2,-12(fp)
   1ce94:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1ce98:	e0bffb17 	ldw	r2,-20(fp)
   1ce9c:	10c00e04 	addi	r3,r2,56
   1cea0:	e0bff617 	ldw	r2,-40(fp)
   1cea4:	1887883a 	add	r3,r3,r2
   1cea8:	e0bffa17 	ldw	r2,-24(fp)
   1ceac:	1009883a 	mov	r4,r2
   1ceb0:	180b883a 	mov	r5,r3
   1ceb4:	e1bff817 	ldw	r6,-32(fp)
   1ceb8:	0013e340 	call	13e34 <memcpy>
      ptr   += n;
   1cebc:	e0fff817 	ldw	r3,-32(fp)
   1cec0:	e0bffa17 	ldw	r2,-24(fp)
   1cec4:	10c5883a 	add	r2,r2,r3
   1cec8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   1cecc:	e0fffd17 	ldw	r3,-12(fp)
   1ced0:	e0bff817 	ldw	r2,-32(fp)
   1ced4:	1885c83a 	sub	r2,r3,r2
   1ced8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cedc:	e0fff617 	ldw	r3,-40(fp)
   1cee0:	e0bff817 	ldw	r2,-32(fp)
   1cee4:	1885883a 	add	r2,r3,r2
   1cee8:	10c1ffcc 	andi	r3,r2,2047
   1ceec:	e0bffb17 	ldw	r2,-20(fp)
   1cef0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1cef4:	e0bffd17 	ldw	r2,-12(fp)
   1cef8:	10800048 	cmpgei	r2,r2,1
   1cefc:	103fcc1e 	bne	r2,zero,1ce30 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   1cf00:	e0fffa17 	ldw	r3,-24(fp)
   1cf04:	e0bffc17 	ldw	r2,-16(fp)
   1cf08:	1880141e 	bne	r3,r2,1cf5c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1cf0c:	e0bffe17 	ldw	r2,-8(fp)
   1cf10:	1090000c 	andi	r2,r2,16384
   1cf14:	1004c03a 	cmpne	r2,r2,zero
   1cf18:	1000101e 	bne	r2,zero,1cf5c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1cf1c:	e0bffb17 	ldw	r2,-20(fp)
   1cf20:	10c00a17 	ldw	r3,40(r2)
   1cf24:	e0bff717 	ldw	r2,-36(fp)
   1cf28:	1880051e 	bne	r3,r2,1cf40 <altera_avalon_jtag_uart_read+0x13c>
   1cf2c:	e0bffb17 	ldw	r2,-20(fp)
   1cf30:	10c00917 	ldw	r3,36(r2)
   1cf34:	e0bffb17 	ldw	r2,-20(fp)
   1cf38:	10800117 	ldw	r2,4(r2)
   1cf3c:	18bff736 	bltu	r3,r2,1cf1c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1cf40:	e0bffb17 	ldw	r2,-20(fp)
   1cf44:	10c00a17 	ldw	r3,40(r2)
   1cf48:	e0bff717 	ldw	r2,-36(fp)
   1cf4c:	18800326 	beq	r3,r2,1cf5c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1cf50:	e0bffd17 	ldw	r2,-12(fp)
   1cf54:	10800048 	cmpgei	r2,r2,1
   1cf58:	103fb51e 	bne	r2,zero,1ce30 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1cf5c:	e0fffa17 	ldw	r3,-24(fp)
   1cf60:	e0bffc17 	ldw	r2,-16(fp)
   1cf64:	18801926 	beq	r3,r2,1cfcc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cf68:	0005303a 	rdctl	r2,status
   1cf6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cf70:	e0fff517 	ldw	r3,-44(fp)
   1cf74:	00bfff84 	movi	r2,-2
   1cf78:	1884703a 	and	r2,r3,r2
   1cf7c:	1001703a 	wrctl	status,r2
  
  return context;
   1cf80:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1cf84:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1cf88:	e0bffb17 	ldw	r2,-20(fp)
   1cf8c:	10800817 	ldw	r2,32(r2)
   1cf90:	10c00054 	ori	r3,r2,1
   1cf94:	e0bffb17 	ldw	r2,-20(fp)
   1cf98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1cf9c:	e0bffb17 	ldw	r2,-20(fp)
   1cfa0:	10800017 	ldw	r2,0(r2)
   1cfa4:	11000104 	addi	r4,r2,4
   1cfa8:	e0bffb17 	ldw	r2,-20(fp)
   1cfac:	10800817 	ldw	r2,32(r2)
   1cfb0:	1007883a 	mov	r3,r2
   1cfb4:	2005883a 	mov	r2,r4
   1cfb8:	10c00035 	stwio	r3,0(r2)
   1cfbc:	e0bff917 	ldw	r2,-28(fp)
   1cfc0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cfc4:	e0bff417 	ldw	r2,-48(fp)
   1cfc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1cfcc:	e0fffa17 	ldw	r3,-24(fp)
   1cfd0:	e0bffc17 	ldw	r2,-16(fp)
   1cfd4:	18800526 	beq	r3,r2,1cfec <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   1cfd8:	e0fffa17 	ldw	r3,-24(fp)
   1cfdc:	e0bffc17 	ldw	r2,-16(fp)
   1cfe0:	1887c83a 	sub	r3,r3,r2
   1cfe4:	e0ffff15 	stw	r3,-4(fp)
   1cfe8:	00000906 	br	1d010 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   1cfec:	e0bffe17 	ldw	r2,-8(fp)
   1cff0:	1090000c 	andi	r2,r2,16384
   1cff4:	1005003a 	cmpeq	r2,r2,zero
   1cff8:	1000031e 	bne	r2,zero,1d008 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1cffc:	00bffd44 	movi	r2,-11
   1d000:	e0bfff15 	stw	r2,-4(fp)
   1d004:	00000206 	br	1d010 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1d008:	00bffec4 	movi	r2,-5
   1d00c:	e0bfff15 	stw	r2,-4(fp)
   1d010:	e0bfff17 	ldw	r2,-4(fp)
}
   1d014:	e037883a 	mov	sp,fp
   1d018:	dfc00117 	ldw	ra,4(sp)
   1d01c:	df000017 	ldw	fp,0(sp)
   1d020:	dec00204 	addi	sp,sp,8
   1d024:	f800283a 	ret

0001d028 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1d028:	defff204 	addi	sp,sp,-56
   1d02c:	dfc00d15 	stw	ra,52(sp)
   1d030:	df000c15 	stw	fp,48(sp)
   1d034:	df000c04 	addi	fp,sp,48
   1d038:	e13ffb15 	stw	r4,-20(fp)
   1d03c:	e17ffc15 	stw	r5,-16(fp)
   1d040:	e1bffd15 	stw	r6,-12(fp)
   1d044:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1d048:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1d04c:	e0bffc17 	ldw	r2,-16(fp)
   1d050:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1d054:	00003a06 	br	1d140 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1d058:	e0bffb17 	ldw	r2,-20(fp)
   1d05c:	10800c17 	ldw	r2,48(r2)
   1d060:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   1d064:	e0bffb17 	ldw	r2,-20(fp)
   1d068:	10800d17 	ldw	r2,52(r2)
   1d06c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   1d070:	e0fffa17 	ldw	r3,-24(fp)
   1d074:	e0bff917 	ldw	r2,-28(fp)
   1d078:	1880062e 	bgeu	r3,r2,1d094 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1d07c:	e0fff917 	ldw	r3,-28(fp)
   1d080:	e0bffa17 	ldw	r2,-24(fp)
   1d084:	1885c83a 	sub	r2,r3,r2
   1d088:	10bfffc4 	addi	r2,r2,-1
   1d08c:	e0bff815 	stw	r2,-32(fp)
   1d090:	00000c06 	br	1d0c4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   1d094:	e0bff917 	ldw	r2,-28(fp)
   1d098:	1005003a 	cmpeq	r2,r2,zero
   1d09c:	1000051e 	bne	r2,zero,1d0b4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1d0a0:	00820004 	movi	r2,2048
   1d0a4:	e0fffa17 	ldw	r3,-24(fp)
   1d0a8:	10c5c83a 	sub	r2,r2,r3
   1d0ac:	e0bff815 	stw	r2,-32(fp)
   1d0b0:	00000406 	br	1d0c4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1d0b4:	0081ffc4 	movi	r2,2047
   1d0b8:	e0fffa17 	ldw	r3,-24(fp)
   1d0bc:	10c5c83a 	sub	r2,r2,r3
   1d0c0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1d0c4:	e0bff817 	ldw	r2,-32(fp)
   1d0c8:	1005003a 	cmpeq	r2,r2,zero
   1d0cc:	10001f1e 	bne	r2,zero,1d14c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   1d0d0:	e0fffd17 	ldw	r3,-12(fp)
   1d0d4:	e0bff817 	ldw	r2,-32(fp)
   1d0d8:	1880022e 	bgeu	r3,r2,1d0e4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   1d0dc:	e0bffd17 	ldw	r2,-12(fp)
   1d0e0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1d0e4:	e0bffb17 	ldw	r2,-20(fp)
   1d0e8:	10c20e04 	addi	r3,r2,2104
   1d0ec:	e0bffa17 	ldw	r2,-24(fp)
   1d0f0:	1885883a 	add	r2,r3,r2
   1d0f4:	e0fffc17 	ldw	r3,-16(fp)
   1d0f8:	1009883a 	mov	r4,r2
   1d0fc:	180b883a 	mov	r5,r3
   1d100:	e1bff817 	ldw	r6,-32(fp)
   1d104:	0013e340 	call	13e34 <memcpy>
      ptr   += n;
   1d108:	e0fff817 	ldw	r3,-32(fp)
   1d10c:	e0bffc17 	ldw	r2,-16(fp)
   1d110:	10c5883a 	add	r2,r2,r3
   1d114:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   1d118:	e0fffd17 	ldw	r3,-12(fp)
   1d11c:	e0bff817 	ldw	r2,-32(fp)
   1d120:	1885c83a 	sub	r2,r3,r2
   1d124:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d128:	e0fffa17 	ldw	r3,-24(fp)
   1d12c:	e0bff817 	ldw	r2,-32(fp)
   1d130:	1885883a 	add	r2,r3,r2
   1d134:	10c1ffcc 	andi	r3,r2,2047
   1d138:	e0bffb17 	ldw	r2,-20(fp)
   1d13c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1d140:	e0bffd17 	ldw	r2,-12(fp)
   1d144:	10800048 	cmpgei	r2,r2,1
   1d148:	103fc31e 	bne	r2,zero,1d058 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d14c:	0005303a 	rdctl	r2,status
   1d150:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d154:	e0fff517 	ldw	r3,-44(fp)
   1d158:	00bfff84 	movi	r2,-2
   1d15c:	1884703a 	and	r2,r3,r2
   1d160:	1001703a 	wrctl	status,r2
  
  return context;
   1d164:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1d168:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1d16c:	e0bffb17 	ldw	r2,-20(fp)
   1d170:	10800817 	ldw	r2,32(r2)
   1d174:	10c00094 	ori	r3,r2,2
   1d178:	e0bffb17 	ldw	r2,-20(fp)
   1d17c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1d180:	e0bffb17 	ldw	r2,-20(fp)
   1d184:	10800017 	ldw	r2,0(r2)
   1d188:	11000104 	addi	r4,r2,4
   1d18c:	e0bffb17 	ldw	r2,-20(fp)
   1d190:	10800817 	ldw	r2,32(r2)
   1d194:	1007883a 	mov	r3,r2
   1d198:	2005883a 	mov	r2,r4
   1d19c:	10c00035 	stwio	r3,0(r2)
   1d1a0:	e0bff717 	ldw	r2,-36(fp)
   1d1a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d1a8:	e0bff417 	ldw	r2,-48(fp)
   1d1ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1d1b0:	e0bffd17 	ldw	r2,-12(fp)
   1d1b4:	10800050 	cmplti	r2,r2,1
   1d1b8:	1000111e 	bne	r2,zero,1d200 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   1d1bc:	e0bffe17 	ldw	r2,-8(fp)
   1d1c0:	1090000c 	andi	r2,r2,16384
   1d1c4:	1004c03a 	cmpne	r2,r2,zero
   1d1c8:	1000101e 	bne	r2,zero,1d20c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1d1cc:	e0bffb17 	ldw	r2,-20(fp)
   1d1d0:	10c00d17 	ldw	r3,52(r2)
   1d1d4:	e0bff917 	ldw	r2,-28(fp)
   1d1d8:	1880051e 	bne	r3,r2,1d1f0 <altera_avalon_jtag_uart_write+0x1c8>
   1d1dc:	e0bffb17 	ldw	r2,-20(fp)
   1d1e0:	10c00917 	ldw	r3,36(r2)
   1d1e4:	e0bffb17 	ldw	r2,-20(fp)
   1d1e8:	10800117 	ldw	r2,4(r2)
   1d1ec:	18bff736 	bltu	r3,r2,1d1cc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1d1f0:	e0bffb17 	ldw	r2,-20(fp)
   1d1f4:	10c00d17 	ldw	r3,52(r2)
   1d1f8:	e0bff917 	ldw	r2,-28(fp)
   1d1fc:	18800326 	beq	r3,r2,1d20c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   1d200:	e0bffd17 	ldw	r2,-12(fp)
   1d204:	10800048 	cmpgei	r2,r2,1
   1d208:	103fcd1e 	bne	r2,zero,1d140 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1d20c:	e0fffc17 	ldw	r3,-16(fp)
   1d210:	e0bff617 	ldw	r2,-40(fp)
   1d214:	18800526 	beq	r3,r2,1d22c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   1d218:	e0fffc17 	ldw	r3,-16(fp)
   1d21c:	e0bff617 	ldw	r2,-40(fp)
   1d220:	1887c83a 	sub	r3,r3,r2
   1d224:	e0ffff15 	stw	r3,-4(fp)
   1d228:	00000906 	br	1d250 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   1d22c:	e0bffe17 	ldw	r2,-8(fp)
   1d230:	1090000c 	andi	r2,r2,16384
   1d234:	1005003a 	cmpeq	r2,r2,zero
   1d238:	1000031e 	bne	r2,zero,1d248 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   1d23c:	00bffd44 	movi	r2,-11
   1d240:	e0bfff15 	stw	r2,-4(fp)
   1d244:	00000206 	br	1d250 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1d248:	00bffec4 	movi	r2,-5
   1d24c:	e0bfff15 	stw	r2,-4(fp)
   1d250:	e0bfff17 	ldw	r2,-4(fp)
}
   1d254:	e037883a 	mov	sp,fp
   1d258:	dfc00117 	ldw	ra,4(sp)
   1d25c:	df000017 	ldw	fp,0(sp)
   1d260:	dec00204 	addi	sp,sp,8
   1d264:	f800283a 	ret

0001d268 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1d268:	defff404 	addi	sp,sp,-48
   1d26c:	df000b15 	stw	fp,44(sp)
   1d270:	df000b04 	addi	fp,sp,44
   1d274:	e13ffb15 	stw	r4,-20(fp)
   1d278:	e17ffc15 	stw	r5,-16(fp)
   1d27c:	e1bffd15 	stw	r6,-12(fp)
   1d280:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1d284:	e03ff915 	stw	zero,-28(fp)
   1d288:	008000b4 	movhi	r2,2
   1d28c:	108a2204 	addi	r2,r2,10376
   1d290:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1d294:	1005003a 	cmpeq	r2,r2,zero
   1d298:	1000411e 	bne	r2,zero,1d3a0 <alt_alarm_start+0x138>
  {
    if (alarm)
   1d29c:	e0bffb17 	ldw	r2,-20(fp)
   1d2a0:	1005003a 	cmpeq	r2,r2,zero
   1d2a4:	10003b1e 	bne	r2,zero,1d394 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1d2a8:	e0fffb17 	ldw	r3,-20(fp)
   1d2ac:	e0bffd17 	ldw	r2,-12(fp)
   1d2b0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   1d2b4:	e0fffb17 	ldw	r3,-20(fp)
   1d2b8:	e0bffe17 	ldw	r2,-8(fp)
   1d2bc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d2c0:	0005303a 	rdctl	r2,status
   1d2c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d2c8:	e0fff817 	ldw	r3,-32(fp)
   1d2cc:	00bfff84 	movi	r2,-2
   1d2d0:	1884703a 	and	r2,r3,r2
   1d2d4:	1001703a 	wrctl	status,r2
  
  return context;
   1d2d8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1d2dc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1d2e0:	008000b4 	movhi	r2,2
   1d2e4:	108a2304 	addi	r2,r2,10380
   1d2e8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1d2ec:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1d2f0:	e0fffc17 	ldw	r3,-16(fp)
   1d2f4:	e0bff917 	ldw	r2,-28(fp)
   1d2f8:	1885883a 	add	r2,r3,r2
   1d2fc:	10c00044 	addi	r3,r2,1
   1d300:	e0bffb17 	ldw	r2,-20(fp)
   1d304:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1d308:	e0bffb17 	ldw	r2,-20(fp)
   1d30c:	10c00217 	ldw	r3,8(r2)
   1d310:	e0bff917 	ldw	r2,-28(fp)
   1d314:	1880042e 	bgeu	r3,r2,1d328 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1d318:	e0fffb17 	ldw	r3,-20(fp)
   1d31c:	00800044 	movi	r2,1
   1d320:	18800405 	stb	r2,16(r3)
   1d324:	00000206 	br	1d330 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1d328:	e0bffb17 	ldw	r2,-20(fp)
   1d32c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1d330:	e0fffb17 	ldw	r3,-20(fp)
   1d334:	008000b4 	movhi	r2,2
   1d338:	10834d04 	addi	r2,r2,3380
   1d33c:	e0bff615 	stw	r2,-40(fp)
   1d340:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d344:	e0fff717 	ldw	r3,-36(fp)
   1d348:	e0bff617 	ldw	r2,-40(fp)
   1d34c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1d350:	e0bff617 	ldw	r2,-40(fp)
   1d354:	10c00017 	ldw	r3,0(r2)
   1d358:	e0bff717 	ldw	r2,-36(fp)
   1d35c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d360:	e0bff617 	ldw	r2,-40(fp)
   1d364:	10c00017 	ldw	r3,0(r2)
   1d368:	e0bff717 	ldw	r2,-36(fp)
   1d36c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1d370:	e0fff617 	ldw	r3,-40(fp)
   1d374:	e0bff717 	ldw	r2,-36(fp)
   1d378:	18800015 	stw	r2,0(r3)
   1d37c:	e0bffa17 	ldw	r2,-24(fp)
   1d380:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d384:	e0bff517 	ldw	r2,-44(fp)
   1d388:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1d38c:	e03fff15 	stw	zero,-4(fp)
   1d390:	00000506 	br	1d3a8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   1d394:	00bffa84 	movi	r2,-22
   1d398:	e0bfff15 	stw	r2,-4(fp)
   1d39c:	00000206 	br	1d3a8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   1d3a0:	00bfde84 	movi	r2,-134
   1d3a4:	e0bfff15 	stw	r2,-4(fp)
   1d3a8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   1d3ac:	e037883a 	mov	sp,fp
   1d3b0:	df000017 	ldw	fp,0(sp)
   1d3b4:	dec00104 	addi	sp,sp,4
   1d3b8:	f800283a 	ret

0001d3bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1d3bc:	defffe04 	addi	sp,sp,-8
   1d3c0:	df000115 	stw	fp,4(sp)
   1d3c4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1d3c8:	e03fff15 	stw	zero,-4(fp)
   1d3cc:	00000506 	br	1d3e4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   1d3d0:	e0bfff17 	ldw	r2,-4(fp)
   1d3d4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1d3d8:	e0bfff17 	ldw	r2,-4(fp)
   1d3dc:	10800804 	addi	r2,r2,32
   1d3e0:	e0bfff15 	stw	r2,-4(fp)
   1d3e4:	e0bfff17 	ldw	r2,-4(fp)
   1d3e8:	10820030 	cmpltui	r2,r2,2048
   1d3ec:	103ff81e 	bne	r2,zero,1d3d0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1d3f0:	e037883a 	mov	sp,fp
   1d3f4:	df000017 	ldw	fp,0(sp)
   1d3f8:	dec00104 	addi	sp,sp,4
   1d3fc:	f800283a 	ret

0001d400 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1d400:	defff904 	addi	sp,sp,-28
   1d404:	dfc00615 	stw	ra,24(sp)
   1d408:	df000515 	stw	fp,20(sp)
   1d40c:	df000504 	addi	fp,sp,20
   1d410:	e13ffd15 	stw	r4,-12(fp)
   1d414:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1d418:	e0bffd17 	ldw	r2,-12(fp)
   1d41c:	1005003a 	cmpeq	r2,r2,zero
   1d420:	1000041e 	bne	r2,zero,1d434 <alt_dev_llist_insert+0x34>
   1d424:	e0bffd17 	ldw	r2,-12(fp)
   1d428:	10800217 	ldw	r2,8(r2)
   1d42c:	1004c03a 	cmpne	r2,r2,zero
   1d430:	1000071e 	bne	r2,zero,1d450 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   1d434:	001d4b40 	call	1d4b4 <alt_get_errno>
   1d438:	1007883a 	mov	r3,r2
   1d43c:	00800584 	movi	r2,22
   1d440:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1d444:	00bffa84 	movi	r2,-22
   1d448:	e0bfff15 	stw	r2,-4(fp)
   1d44c:	00001306 	br	1d49c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1d450:	e0fffd17 	ldw	r3,-12(fp)
   1d454:	e0bffe17 	ldw	r2,-8(fp)
   1d458:	e0bffb15 	stw	r2,-20(fp)
   1d45c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d460:	e0fffc17 	ldw	r3,-16(fp)
   1d464:	e0bffb17 	ldw	r2,-20(fp)
   1d468:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1d46c:	e0bffb17 	ldw	r2,-20(fp)
   1d470:	10c00017 	ldw	r3,0(r2)
   1d474:	e0bffc17 	ldw	r2,-16(fp)
   1d478:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d47c:	e0bffb17 	ldw	r2,-20(fp)
   1d480:	10c00017 	ldw	r3,0(r2)
   1d484:	e0bffc17 	ldw	r2,-16(fp)
   1d488:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1d48c:	e0fffb17 	ldw	r3,-20(fp)
   1d490:	e0bffc17 	ldw	r2,-16(fp)
   1d494:	18800015 	stw	r2,0(r3)

  return 0;  
   1d498:	e03fff15 	stw	zero,-4(fp)
   1d49c:	e0bfff17 	ldw	r2,-4(fp)
}
   1d4a0:	e037883a 	mov	sp,fp
   1d4a4:	dfc00117 	ldw	ra,4(sp)
   1d4a8:	df000017 	ldw	fp,0(sp)
   1d4ac:	dec00204 	addi	sp,sp,8
   1d4b0:	f800283a 	ret

0001d4b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1d4b4:	defffd04 	addi	sp,sp,-12
   1d4b8:	dfc00215 	stw	ra,8(sp)
   1d4bc:	df000115 	stw	fp,4(sp)
   1d4c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1d4c4:	008000b4 	movhi	r2,2
   1d4c8:	10834a04 	addi	r2,r2,3368
   1d4cc:	10800017 	ldw	r2,0(r2)
   1d4d0:	1005003a 	cmpeq	r2,r2,zero
   1d4d4:	1000061e 	bne	r2,zero,1d4f0 <alt_get_errno+0x3c>
   1d4d8:	008000b4 	movhi	r2,2
   1d4dc:	10834a04 	addi	r2,r2,3368
   1d4e0:	10800017 	ldw	r2,0(r2)
   1d4e4:	103ee83a 	callr	r2
   1d4e8:	e0bfff15 	stw	r2,-4(fp)
   1d4ec:	00000306 	br	1d4fc <alt_get_errno+0x48>
   1d4f0:	008000b4 	movhi	r2,2
   1d4f4:	108a1704 	addi	r2,r2,10332
   1d4f8:	e0bfff15 	stw	r2,-4(fp)
   1d4fc:	e0bfff17 	ldw	r2,-4(fp)
}
   1d500:	e037883a 	mov	sp,fp
   1d504:	dfc00117 	ldw	ra,4(sp)
   1d508:	df000017 	ldw	fp,0(sp)
   1d50c:	dec00204 	addi	sp,sp,8
   1d510:	f800283a 	ret

0001d514 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1d514:	defffd04 	addi	sp,sp,-12
   1d518:	dfc00215 	stw	ra,8(sp)
   1d51c:	df000115 	stw	fp,4(sp)
   1d520:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d524:	00bfff04 	movi	r2,-4
   1d528:	00c000b4 	movhi	r3,2
   1d52c:	18f93d04 	addi	r3,r3,-6924
   1d530:	1885883a 	add	r2,r3,r2
   1d534:	e0bfff15 	stw	r2,-4(fp)
   1d538:	00000606 	br	1d554 <_do_ctors+0x40>
        (*ctor) (); 
   1d53c:	e0bfff17 	ldw	r2,-4(fp)
   1d540:	10800017 	ldw	r2,0(r2)
   1d544:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d548:	e0bfff17 	ldw	r2,-4(fp)
   1d54c:	10bfff04 	addi	r2,r2,-4
   1d550:	e0bfff15 	stw	r2,-4(fp)
   1d554:	e0ffff17 	ldw	r3,-4(fp)
   1d558:	008000b4 	movhi	r2,2
   1d55c:	10b93c04 	addi	r2,r2,-6928
   1d560:	18bff62e 	bgeu	r3,r2,1d53c <_do_ctors+0x28>
        (*ctor) (); 
}
   1d564:	e037883a 	mov	sp,fp
   1d568:	dfc00117 	ldw	ra,4(sp)
   1d56c:	df000017 	ldw	fp,0(sp)
   1d570:	dec00204 	addi	sp,sp,8
   1d574:	f800283a 	ret

0001d578 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1d578:	defffd04 	addi	sp,sp,-12
   1d57c:	dfc00215 	stw	ra,8(sp)
   1d580:	df000115 	stw	fp,4(sp)
   1d584:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d588:	00bfff04 	movi	r2,-4
   1d58c:	00c000b4 	movhi	r3,2
   1d590:	18f93d04 	addi	r3,r3,-6924
   1d594:	1885883a 	add	r2,r3,r2
   1d598:	e0bfff15 	stw	r2,-4(fp)
   1d59c:	00000606 	br	1d5b8 <_do_dtors+0x40>
        (*dtor) (); 
   1d5a0:	e0bfff17 	ldw	r2,-4(fp)
   1d5a4:	10800017 	ldw	r2,0(r2)
   1d5a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d5ac:	e0bfff17 	ldw	r2,-4(fp)
   1d5b0:	10bfff04 	addi	r2,r2,-4
   1d5b4:	e0bfff15 	stw	r2,-4(fp)
   1d5b8:	e0ffff17 	ldw	r3,-4(fp)
   1d5bc:	008000b4 	movhi	r2,2
   1d5c0:	10b93d04 	addi	r2,r2,-6924
   1d5c4:	18bff62e 	bgeu	r3,r2,1d5a0 <_do_dtors+0x28>
        (*dtor) (); 
}
   1d5c8:	e037883a 	mov	sp,fp
   1d5cc:	dfc00117 	ldw	ra,4(sp)
   1d5d0:	df000017 	ldw	fp,0(sp)
   1d5d4:	dec00204 	addi	sp,sp,8
   1d5d8:	f800283a 	ret

0001d5dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1d5dc:	defff904 	addi	sp,sp,-28
   1d5e0:	dfc00615 	stw	ra,24(sp)
   1d5e4:	df000515 	stw	fp,20(sp)
   1d5e8:	df000504 	addi	fp,sp,20
   1d5ec:	e13ffd15 	stw	r4,-12(fp)
   1d5f0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1d5f4:	e0bffe17 	ldw	r2,-8(fp)
   1d5f8:	10800017 	ldw	r2,0(r2)
   1d5fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1d600:	e13ffd17 	ldw	r4,-12(fp)
   1d604:	001511c0 	call	1511c <strlen>
   1d608:	10800044 	addi	r2,r2,1
   1d60c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d610:	00000d06 	br	1d648 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1d614:	e0bffc17 	ldw	r2,-16(fp)
   1d618:	11000217 	ldw	r4,8(r2)
   1d61c:	e1bffb17 	ldw	r6,-20(fp)
   1d620:	e17ffd17 	ldw	r5,-12(fp)
   1d624:	0013dc00 	call	13dc0 <memcmp>
   1d628:	1004c03a 	cmpne	r2,r2,zero
   1d62c:	1000031e 	bne	r2,zero,1d63c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1d630:	e0bffc17 	ldw	r2,-16(fp)
   1d634:	e0bfff15 	stw	r2,-4(fp)
   1d638:	00000706 	br	1d658 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1d63c:	e0bffc17 	ldw	r2,-16(fp)
   1d640:	10800017 	ldw	r2,0(r2)
   1d644:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d648:	e0fffe17 	ldw	r3,-8(fp)
   1d64c:	e0bffc17 	ldw	r2,-16(fp)
   1d650:	10fff01e 	bne	r2,r3,1d614 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1d654:	e03fff15 	stw	zero,-4(fp)
   1d658:	e0bfff17 	ldw	r2,-4(fp)
}
   1d65c:	e037883a 	mov	sp,fp
   1d660:	dfc00117 	ldw	ra,4(sp)
   1d664:	df000017 	ldw	fp,0(sp)
   1d668:	dec00204 	addi	sp,sp,8
   1d66c:	f800283a 	ret

0001d670 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1d670:	defffa04 	addi	sp,sp,-24
   1d674:	dfc00515 	stw	ra,20(sp)
   1d678:	df000415 	stw	fp,16(sp)
   1d67c:	df000404 	addi	fp,sp,16
   1d680:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1d684:	008000b4 	movhi	r2,2
   1d688:	10834504 	addi	r2,r2,3348
   1d68c:	10800017 	ldw	r2,0(r2)
   1d690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1d694:	00003306 	br	1d764 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1d698:	e0bffd17 	ldw	r2,-12(fp)
   1d69c:	11000217 	ldw	r4,8(r2)
   1d6a0:	001511c0 	call	1511c <strlen>
   1d6a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1d6a8:	e0bffd17 	ldw	r2,-12(fp)
   1d6ac:	10c00217 	ldw	r3,8(r2)
   1d6b0:	e0bffc17 	ldw	r2,-16(fp)
   1d6b4:	1885883a 	add	r2,r3,r2
   1d6b8:	10bfffc4 	addi	r2,r2,-1
   1d6bc:	10800003 	ldbu	r2,0(r2)
   1d6c0:	10803fcc 	andi	r2,r2,255
   1d6c4:	1080201c 	xori	r2,r2,128
   1d6c8:	10bfe004 	addi	r2,r2,-128
   1d6cc:	10800bd8 	cmpnei	r2,r2,47
   1d6d0:	1000031e 	bne	r2,zero,1d6e0 <alt_find_file+0x70>
    {
      len -= 1;
   1d6d4:	e0bffc17 	ldw	r2,-16(fp)
   1d6d8:	10bfffc4 	addi	r2,r2,-1
   1d6dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1d6e0:	e0bffc17 	ldw	r2,-16(fp)
   1d6e4:	1007883a 	mov	r3,r2
   1d6e8:	e0bffe17 	ldw	r2,-8(fp)
   1d6ec:	1885883a 	add	r2,r3,r2
   1d6f0:	10800003 	ldbu	r2,0(r2)
   1d6f4:	10803fcc 	andi	r2,r2,255
   1d6f8:	1080201c 	xori	r2,r2,128
   1d6fc:	10bfe004 	addi	r2,r2,-128
   1d700:	10800be0 	cmpeqi	r2,r2,47
   1d704:	10000a1e 	bne	r2,zero,1d730 <alt_find_file+0xc0>
   1d708:	e0bffc17 	ldw	r2,-16(fp)
   1d70c:	1007883a 	mov	r3,r2
   1d710:	e0bffe17 	ldw	r2,-8(fp)
   1d714:	1885883a 	add	r2,r3,r2
   1d718:	10800003 	ldbu	r2,0(r2)
   1d71c:	10803fcc 	andi	r2,r2,255
   1d720:	1080201c 	xori	r2,r2,128
   1d724:	10bfe004 	addi	r2,r2,-128
   1d728:	1004c03a 	cmpne	r2,r2,zero
   1d72c:	10000a1e 	bne	r2,zero,1d758 <alt_find_file+0xe8>
   1d730:	e0bffd17 	ldw	r2,-12(fp)
   1d734:	11000217 	ldw	r4,8(r2)
   1d738:	e1bffc17 	ldw	r6,-16(fp)
   1d73c:	e17ffe17 	ldw	r5,-8(fp)
   1d740:	0013dc00 	call	13dc0 <memcmp>
   1d744:	1004c03a 	cmpne	r2,r2,zero
   1d748:	1000031e 	bne	r2,zero,1d758 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1d74c:	e0bffd17 	ldw	r2,-12(fp)
   1d750:	e0bfff15 	stw	r2,-4(fp)
   1d754:	00000806 	br	1d778 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1d758:	e0bffd17 	ldw	r2,-12(fp)
   1d75c:	10800017 	ldw	r2,0(r2)
   1d760:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1d764:	00c000b4 	movhi	r3,2
   1d768:	18c34504 	addi	r3,r3,3348
   1d76c:	e0bffd17 	ldw	r2,-12(fp)
   1d770:	10ffc91e 	bne	r2,r3,1d698 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1d774:	e03fff15 	stw	zero,-4(fp)
   1d778:	e0bfff17 	ldw	r2,-4(fp)
}
   1d77c:	e037883a 	mov	sp,fp
   1d780:	dfc00117 	ldw	ra,4(sp)
   1d784:	df000017 	ldw	fp,0(sp)
   1d788:	dec00204 	addi	sp,sp,8
   1d78c:	f800283a 	ret

0001d790 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1d790:	defffc04 	addi	sp,sp,-16
   1d794:	df000315 	stw	fp,12(sp)
   1d798:	df000304 	addi	fp,sp,12
   1d79c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1d7a0:	00bffa04 	movi	r2,-24
   1d7a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1d7a8:	e03ffe15 	stw	zero,-8(fp)
   1d7ac:	00001e06 	br	1d828 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   1d7b0:	e0bffe17 	ldw	r2,-8(fp)
   1d7b4:	00c000b4 	movhi	r3,2
   1d7b8:	18fea704 	addi	r3,r3,-1380
   1d7bc:	10800324 	muli	r2,r2,12
   1d7c0:	10c5883a 	add	r2,r2,r3
   1d7c4:	10800017 	ldw	r2,0(r2)
   1d7c8:	1004c03a 	cmpne	r2,r2,zero
   1d7cc:	1000131e 	bne	r2,zero,1d81c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   1d7d0:	e0bffe17 	ldw	r2,-8(fp)
   1d7d4:	00c000b4 	movhi	r3,2
   1d7d8:	18fea704 	addi	r3,r3,-1380
   1d7dc:	10800324 	muli	r2,r2,12
   1d7e0:	10c7883a 	add	r3,r2,r3
   1d7e4:	e0bfff17 	ldw	r2,-4(fp)
   1d7e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1d7ec:	008000b4 	movhi	r2,2
   1d7f0:	10834904 	addi	r2,r2,3364
   1d7f4:	10c00017 	ldw	r3,0(r2)
   1d7f8:	e0bffe17 	ldw	r2,-8(fp)
   1d7fc:	1880040e 	bge	r3,r2,1d810 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   1d800:	00c000b4 	movhi	r3,2
   1d804:	18c34904 	addi	r3,r3,3364
   1d808:	e0bffe17 	ldw	r2,-8(fp)
   1d80c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1d810:	e0bffe17 	ldw	r2,-8(fp)
   1d814:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1d818:	00000606 	br	1d834 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1d81c:	e0bffe17 	ldw	r2,-8(fp)
   1d820:	10800044 	addi	r2,r2,1
   1d824:	e0bffe15 	stw	r2,-8(fp)
   1d828:	e0bffe17 	ldw	r2,-8(fp)
   1d82c:	10800810 	cmplti	r2,r2,32
   1d830:	103fdf1e 	bne	r2,zero,1d7b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1d834:	e0bffd17 	ldw	r2,-12(fp)
}
   1d838:	e037883a 	mov	sp,fp
   1d83c:	df000017 	ldw	fp,0(sp)
   1d840:	dec00104 	addi	sp,sp,4
   1d844:	f800283a 	ret

0001d848 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1d848:	defffe04 	addi	sp,sp,-8
   1d84c:	dfc00115 	stw	ra,4(sp)
   1d850:	df000015 	stw	fp,0(sp)
   1d854:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1d858:	0009883a 	mov	r4,zero
   1d85c:	01440004 	movi	r5,4096
   1d860:	001de440 	call	1de44 <alt_icache_flush>
#endif
}
   1d864:	e037883a 	mov	sp,fp
   1d868:	dfc00117 	ldw	ra,4(sp)
   1d86c:	df000017 	ldw	fp,0(sp)
   1d870:	dec00204 	addi	sp,sp,8
   1d874:	f800283a 	ret

0001d878 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1d878:	defff904 	addi	sp,sp,-28
   1d87c:	dfc00615 	stw	ra,24(sp)
   1d880:	df000515 	stw	fp,20(sp)
   1d884:	df000504 	addi	fp,sp,20
   1d888:	e13ffc15 	stw	r4,-16(fp)
   1d88c:	e17ffd15 	stw	r5,-12(fp)
   1d890:	e1bffe15 	stw	r6,-8(fp)
   1d894:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1d898:	e0800217 	ldw	r2,8(fp)
   1d89c:	d8800015 	stw	r2,0(sp)
   1d8a0:	e13ffc17 	ldw	r4,-16(fp)
   1d8a4:	e17ffd17 	ldw	r5,-12(fp)
   1d8a8:	e1bffe17 	ldw	r6,-8(fp)
   1d8ac:	e1ffff17 	ldw	r7,-4(fp)
   1d8b0:	001da4c0 	call	1da4c <alt_iic_isr_register>
}  
   1d8b4:	e037883a 	mov	sp,fp
   1d8b8:	dfc00117 	ldw	ra,4(sp)
   1d8bc:	df000017 	ldw	fp,0(sp)
   1d8c0:	dec00204 	addi	sp,sp,8
   1d8c4:	f800283a 	ret

0001d8c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1d8c8:	defff904 	addi	sp,sp,-28
   1d8cc:	df000615 	stw	fp,24(sp)
   1d8d0:	df000604 	addi	fp,sp,24
   1d8d4:	e13ffe15 	stw	r4,-8(fp)
   1d8d8:	e17fff15 	stw	r5,-4(fp)
   1d8dc:	e0bfff17 	ldw	r2,-4(fp)
   1d8e0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d8e4:	0005303a 	rdctl	r2,status
   1d8e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d8ec:	e0fffb17 	ldw	r3,-20(fp)
   1d8f0:	00bfff84 	movi	r2,-2
   1d8f4:	1884703a 	and	r2,r3,r2
   1d8f8:	1001703a 	wrctl	status,r2
  
  return context;
   1d8fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1d900:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   1d904:	e0fffc17 	ldw	r3,-16(fp)
   1d908:	00800044 	movi	r2,1
   1d90c:	10c4983a 	sll	r2,r2,r3
   1d910:	1007883a 	mov	r3,r2
   1d914:	008000b4 	movhi	r2,2
   1d918:	108a2104 	addi	r2,r2,10372
   1d91c:	10800017 	ldw	r2,0(r2)
   1d920:	1886b03a 	or	r3,r3,r2
   1d924:	008000b4 	movhi	r2,2
   1d928:	108a2104 	addi	r2,r2,10372
   1d92c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1d930:	008000b4 	movhi	r2,2
   1d934:	108a2104 	addi	r2,r2,10372
   1d938:	10800017 	ldw	r2,0(r2)
   1d93c:	100170fa 	wrctl	ienable,r2
   1d940:	e0bffd17 	ldw	r2,-12(fp)
   1d944:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d948:	e0bffa17 	ldw	r2,-24(fp)
   1d94c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1d950:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1d954:	e037883a 	mov	sp,fp
   1d958:	df000017 	ldw	fp,0(sp)
   1d95c:	dec00104 	addi	sp,sp,4
   1d960:	f800283a 	ret

0001d964 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1d964:	defff904 	addi	sp,sp,-28
   1d968:	df000615 	stw	fp,24(sp)
   1d96c:	df000604 	addi	fp,sp,24
   1d970:	e13ffe15 	stw	r4,-8(fp)
   1d974:	e17fff15 	stw	r5,-4(fp)
   1d978:	e0bfff17 	ldw	r2,-4(fp)
   1d97c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d980:	0005303a 	rdctl	r2,status
   1d984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d988:	e0fffb17 	ldw	r3,-20(fp)
   1d98c:	00bfff84 	movi	r2,-2
   1d990:	1884703a 	and	r2,r3,r2
   1d994:	1001703a 	wrctl	status,r2
  
  return context;
   1d998:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1d99c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   1d9a0:	e0fffc17 	ldw	r3,-16(fp)
   1d9a4:	00800044 	movi	r2,1
   1d9a8:	10c4983a 	sll	r2,r2,r3
   1d9ac:	0084303a 	nor	r2,zero,r2
   1d9b0:	1007883a 	mov	r3,r2
   1d9b4:	008000b4 	movhi	r2,2
   1d9b8:	108a2104 	addi	r2,r2,10372
   1d9bc:	10800017 	ldw	r2,0(r2)
   1d9c0:	1886703a 	and	r3,r3,r2
   1d9c4:	008000b4 	movhi	r2,2
   1d9c8:	108a2104 	addi	r2,r2,10372
   1d9cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1d9d0:	008000b4 	movhi	r2,2
   1d9d4:	108a2104 	addi	r2,r2,10372
   1d9d8:	10800017 	ldw	r2,0(r2)
   1d9dc:	100170fa 	wrctl	ienable,r2
   1d9e0:	e0bffd17 	ldw	r2,-12(fp)
   1d9e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d9e8:	e0bffa17 	ldw	r2,-24(fp)
   1d9ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1d9f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1d9f4:	e037883a 	mov	sp,fp
   1d9f8:	df000017 	ldw	fp,0(sp)
   1d9fc:	dec00104 	addi	sp,sp,4
   1da00:	f800283a 	ret

0001da04 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1da04:	defffc04 	addi	sp,sp,-16
   1da08:	df000315 	stw	fp,12(sp)
   1da0c:	df000304 	addi	fp,sp,12
   1da10:	e13ffe15 	stw	r4,-8(fp)
   1da14:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1da18:	000530fa 	rdctl	r2,ienable
   1da1c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1da20:	e0ffff17 	ldw	r3,-4(fp)
   1da24:	00800044 	movi	r2,1
   1da28:	10c4983a 	sll	r2,r2,r3
   1da2c:	1007883a 	mov	r3,r2
   1da30:	e0bffd17 	ldw	r2,-12(fp)
   1da34:	1884703a 	and	r2,r3,r2
   1da38:	1004c03a 	cmpne	r2,r2,zero
}
   1da3c:	e037883a 	mov	sp,fp
   1da40:	df000017 	ldw	fp,0(sp)
   1da44:	dec00104 	addi	sp,sp,4
   1da48:	f800283a 	ret

0001da4c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1da4c:	defff404 	addi	sp,sp,-48
   1da50:	dfc00b15 	stw	ra,44(sp)
   1da54:	df000a15 	stw	fp,40(sp)
   1da58:	df000a04 	addi	fp,sp,40
   1da5c:	e13ffb15 	stw	r4,-20(fp)
   1da60:	e17ffc15 	stw	r5,-16(fp)
   1da64:	e1bffd15 	stw	r6,-12(fp)
   1da68:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   1da6c:	00bffa84 	movi	r2,-22
   1da70:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1da74:	e0bffc17 	ldw	r2,-16(fp)
   1da78:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1da7c:	e0bff917 	ldw	r2,-28(fp)
   1da80:	10800808 	cmpgei	r2,r2,32
   1da84:	1000291e 	bne	r2,zero,1db2c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1da88:	0005303a 	rdctl	r2,status
   1da8c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1da90:	e0fff717 	ldw	r3,-36(fp)
   1da94:	00bfff84 	movi	r2,-2
   1da98:	1884703a 	and	r2,r3,r2
   1da9c:	1001703a 	wrctl	status,r2
  
  return context;
   1daa0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1daa4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   1daa8:	e0bff917 	ldw	r2,-28(fp)
   1daac:	00c000b4 	movhi	r3,2
   1dab0:	18cc3204 	addi	r3,r3,12488
   1dab4:	100490fa 	slli	r2,r2,3
   1dab8:	10c7883a 	add	r3,r2,r3
   1dabc:	e0bffd17 	ldw	r2,-12(fp)
   1dac0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   1dac4:	e0bff917 	ldw	r2,-28(fp)
   1dac8:	00c000b4 	movhi	r3,2
   1dacc:	18cc3204 	addi	r3,r3,12488
   1dad0:	100490fa 	slli	r2,r2,3
   1dad4:	10c5883a 	add	r2,r2,r3
   1dad8:	10c00104 	addi	r3,r2,4
   1dadc:	e0bffe17 	ldw	r2,-8(fp)
   1dae0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1dae4:	e0bffd17 	ldw	r2,-12(fp)
   1dae8:	1005003a 	cmpeq	r2,r2,zero
   1daec:	1000051e 	bne	r2,zero,1db04 <alt_iic_isr_register+0xb8>
   1daf0:	e17ff917 	ldw	r5,-28(fp)
   1daf4:	e13ffb17 	ldw	r4,-20(fp)
   1daf8:	001d8c80 	call	1d8c8 <alt_ic_irq_enable>
   1dafc:	e0bfff15 	stw	r2,-4(fp)
   1db00:	00000406 	br	1db14 <alt_iic_isr_register+0xc8>
   1db04:	e17ff917 	ldw	r5,-28(fp)
   1db08:	e13ffb17 	ldw	r4,-20(fp)
   1db0c:	001d9640 	call	1d964 <alt_ic_irq_disable>
   1db10:	e0bfff15 	stw	r2,-4(fp)
   1db14:	e0bfff17 	ldw	r2,-4(fp)
   1db18:	e0bffa15 	stw	r2,-24(fp)
   1db1c:	e0bff817 	ldw	r2,-32(fp)
   1db20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db24:	e0bff617 	ldw	r2,-40(fp)
   1db28:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1db2c:	e0bffa17 	ldw	r2,-24(fp)
}
   1db30:	e037883a 	mov	sp,fp
   1db34:	dfc00117 	ldw	ra,4(sp)
   1db38:	df000017 	ldw	fp,0(sp)
   1db3c:	dec00204 	addi	sp,sp,8
   1db40:	f800283a 	ret

0001db44 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1db44:	defff904 	addi	sp,sp,-28
   1db48:	dfc00615 	stw	ra,24(sp)
   1db4c:	df000515 	stw	fp,20(sp)
   1db50:	df000504 	addi	fp,sp,20
   1db54:	e13ffc15 	stw	r4,-16(fp)
   1db58:	e17ffd15 	stw	r5,-12(fp)
   1db5c:	e1bffe15 	stw	r6,-8(fp)
   1db60:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1db64:	e13ffd17 	ldw	r4,-12(fp)
   1db68:	e17ffe17 	ldw	r5,-8(fp)
   1db6c:	e1bfff17 	ldw	r6,-4(fp)
   1db70:	001bf100 	call	1bf10 <open>
   1db74:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1db78:	e0bffb17 	ldw	r2,-20(fp)
   1db7c:	1004803a 	cmplt	r2,r2,zero
   1db80:	10001c1e 	bne	r2,zero,1dbf4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1db84:	e0bffb17 	ldw	r2,-20(fp)
   1db88:	00c000b4 	movhi	r3,2
   1db8c:	18fea704 	addi	r3,r3,-1380
   1db90:	10800324 	muli	r2,r2,12
   1db94:	10c5883a 	add	r2,r2,r3
   1db98:	10c00017 	ldw	r3,0(r2)
   1db9c:	e0bffc17 	ldw	r2,-16(fp)
   1dba0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1dba4:	e0bffb17 	ldw	r2,-20(fp)
   1dba8:	00c000b4 	movhi	r3,2
   1dbac:	18fea704 	addi	r3,r3,-1380
   1dbb0:	10800324 	muli	r2,r2,12
   1dbb4:	10c5883a 	add	r2,r2,r3
   1dbb8:	10800104 	addi	r2,r2,4
   1dbbc:	10c00017 	ldw	r3,0(r2)
   1dbc0:	e0bffc17 	ldw	r2,-16(fp)
   1dbc4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1dbc8:	e0bffb17 	ldw	r2,-20(fp)
   1dbcc:	00c000b4 	movhi	r3,2
   1dbd0:	18fea704 	addi	r3,r3,-1380
   1dbd4:	10800324 	muli	r2,r2,12
   1dbd8:	10c5883a 	add	r2,r2,r3
   1dbdc:	10800204 	addi	r2,r2,8
   1dbe0:	10c00017 	ldw	r3,0(r2)
   1dbe4:	e0bffc17 	ldw	r2,-16(fp)
   1dbe8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1dbec:	e13ffb17 	ldw	r4,-20(fp)
   1dbf0:	001c2780 	call	1c278 <alt_release_fd>
  }
} 
   1dbf4:	e037883a 	mov	sp,fp
   1dbf8:	dfc00117 	ldw	ra,4(sp)
   1dbfc:	df000017 	ldw	fp,0(sp)
   1dc00:	dec00204 	addi	sp,sp,8
   1dc04:	f800283a 	ret

0001dc08 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1dc08:	defffb04 	addi	sp,sp,-20
   1dc0c:	dfc00415 	stw	ra,16(sp)
   1dc10:	df000315 	stw	fp,12(sp)
   1dc14:	df000304 	addi	fp,sp,12
   1dc18:	e13ffd15 	stw	r4,-12(fp)
   1dc1c:	e17ffe15 	stw	r5,-8(fp)
   1dc20:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1dc24:	010000b4 	movhi	r4,2
   1dc28:	213eaa04 	addi	r4,r4,-1368
   1dc2c:	e17ffd17 	ldw	r5,-12(fp)
   1dc30:	01800044 	movi	r6,1
   1dc34:	01c07fc4 	movi	r7,511
   1dc38:	001db440 	call	1db44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1dc3c:	010000b4 	movhi	r4,2
   1dc40:	213ea704 	addi	r4,r4,-1380
   1dc44:	e17ffe17 	ldw	r5,-8(fp)
   1dc48:	000d883a 	mov	r6,zero
   1dc4c:	01c07fc4 	movi	r7,511
   1dc50:	001db440 	call	1db44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1dc54:	010000b4 	movhi	r4,2
   1dc58:	213ead04 	addi	r4,r4,-1356
   1dc5c:	e17fff17 	ldw	r5,-4(fp)
   1dc60:	01800044 	movi	r6,1
   1dc64:	01c07fc4 	movi	r7,511
   1dc68:	001db440 	call	1db44 <alt_open_fd>
}  
   1dc6c:	e037883a 	mov	sp,fp
   1dc70:	dfc00117 	ldw	ra,4(sp)
   1dc74:	df000017 	ldw	fp,0(sp)
   1dc78:	dec00204 	addi	sp,sp,8
   1dc7c:	f800283a 	ret

0001dc80 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1dc80:	defffa04 	addi	sp,sp,-24
   1dc84:	df000515 	stw	fp,20(sp)
   1dc88:	df000504 	addi	fp,sp,20
   1dc8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dc90:	0005303a 	rdctl	r2,status
   1dc94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dc98:	e0fffd17 	ldw	r3,-12(fp)
   1dc9c:	00bfff84 	movi	r2,-2
   1dca0:	1884703a 	and	r2,r3,r2
   1dca4:	1001703a 	wrctl	status,r2
  
  return context;
   1dca8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1dcac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1dcb0:	e0bfff17 	ldw	r2,-4(fp)
   1dcb4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1dcb8:	e0bffc17 	ldw	r2,-16(fp)
   1dcbc:	10c00017 	ldw	r3,0(r2)
   1dcc0:	e0bffc17 	ldw	r2,-16(fp)
   1dcc4:	10800117 	ldw	r2,4(r2)
   1dcc8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1dccc:	e0bffc17 	ldw	r2,-16(fp)
   1dcd0:	10c00117 	ldw	r3,4(r2)
   1dcd4:	e0bffc17 	ldw	r2,-16(fp)
   1dcd8:	10800017 	ldw	r2,0(r2)
   1dcdc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1dce0:	e0fffc17 	ldw	r3,-16(fp)
   1dce4:	e0bffc17 	ldw	r2,-16(fp)
   1dce8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1dcec:	e0fffc17 	ldw	r3,-16(fp)
   1dcf0:	e0bffc17 	ldw	r2,-16(fp)
   1dcf4:	18800015 	stw	r2,0(r3)
   1dcf8:	e0bffe17 	ldw	r2,-8(fp)
   1dcfc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dd00:	e0bffb17 	ldw	r2,-20(fp)
   1dd04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1dd08:	e037883a 	mov	sp,fp
   1dd0c:	df000017 	ldw	fp,0(sp)
   1dd10:	dec00104 	addi	sp,sp,4
   1dd14:	f800283a 	ret

0001dd18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1dd18:	defffb04 	addi	sp,sp,-20
   1dd1c:	dfc00415 	stw	ra,16(sp)
   1dd20:	df000315 	stw	fp,12(sp)
   1dd24:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1dd28:	d0a01917 	ldw	r2,-32668(gp)
   1dd2c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1dd30:	d0a6ef17 	ldw	r2,-25668(gp)
   1dd34:	10800044 	addi	r2,r2,1
   1dd38:	d0a6ef15 	stw	r2,-25668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1dd3c:	00003106 	br	1de04 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1dd40:	e0bffe17 	ldw	r2,-8(fp)
   1dd44:	10800017 	ldw	r2,0(r2)
   1dd48:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1dd4c:	e0bffe17 	ldw	r2,-8(fp)
   1dd50:	10800403 	ldbu	r2,16(r2)
   1dd54:	10803fcc 	andi	r2,r2,255
   1dd58:	1005003a 	cmpeq	r2,r2,zero
   1dd5c:	1000051e 	bne	r2,zero,1dd74 <alt_tick+0x5c>
   1dd60:	d0a6ef17 	ldw	r2,-25668(gp)
   1dd64:	1004c03a 	cmpne	r2,r2,zero
   1dd68:	1000021e 	bne	r2,zero,1dd74 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1dd6c:	e0bffe17 	ldw	r2,-8(fp)
   1dd70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1dd74:	e0bffe17 	ldw	r2,-8(fp)
   1dd78:	10c00217 	ldw	r3,8(r2)
   1dd7c:	d0a6ef17 	ldw	r2,-25668(gp)
   1dd80:	10c01e36 	bltu	r2,r3,1ddfc <alt_tick+0xe4>
   1dd84:	e0bffe17 	ldw	r2,-8(fp)
   1dd88:	10800403 	ldbu	r2,16(r2)
   1dd8c:	10803fcc 	andi	r2,r2,255
   1dd90:	1004c03a 	cmpne	r2,r2,zero
   1dd94:	1000191e 	bne	r2,zero,1ddfc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   1dd98:	e0bffe17 	ldw	r2,-8(fp)
   1dd9c:	10c00317 	ldw	r3,12(r2)
   1dda0:	e0bffe17 	ldw	r2,-8(fp)
   1dda4:	11000517 	ldw	r4,20(r2)
   1dda8:	183ee83a 	callr	r3
   1ddac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1ddb0:	e0bffd17 	ldw	r2,-12(fp)
   1ddb4:	1004c03a 	cmpne	r2,r2,zero
   1ddb8:	1000031e 	bne	r2,zero,1ddc8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   1ddbc:	e13ffe17 	ldw	r4,-8(fp)
   1ddc0:	001dc800 	call	1dc80 <alt_alarm_stop>
   1ddc4:	00000d06 	br	1ddfc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1ddc8:	e0bffe17 	ldw	r2,-8(fp)
   1ddcc:	10c00217 	ldw	r3,8(r2)
   1ddd0:	e0bffd17 	ldw	r2,-12(fp)
   1ddd4:	1887883a 	add	r3,r3,r2
   1ddd8:	e0bffe17 	ldw	r2,-8(fp)
   1dddc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1dde0:	e0bffe17 	ldw	r2,-8(fp)
   1dde4:	10c00217 	ldw	r3,8(r2)
   1dde8:	d0a6ef17 	ldw	r2,-25668(gp)
   1ddec:	1880032e 	bgeu	r3,r2,1ddfc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1ddf0:	e0fffe17 	ldw	r3,-8(fp)
   1ddf4:	00800044 	movi	r2,1
   1ddf8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   1ddfc:	e0bfff17 	ldw	r2,-4(fp)
   1de00:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1de04:	d0e01904 	addi	r3,gp,-32668
   1de08:	e0bffe17 	ldw	r2,-8(fp)
   1de0c:	10ffcc1e 	bne	r2,r3,1dd40 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1de10:	e037883a 	mov	sp,fp
   1de14:	dfc00117 	ldw	ra,4(sp)
   1de18:	df000017 	ldw	fp,0(sp)
   1de1c:	dec00204 	addi	sp,sp,8
   1de20:	f800283a 	ret

0001de24 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1de24:	deffff04 	addi	sp,sp,-4
   1de28:	df000015 	stw	fp,0(sp)
   1de2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1de30:	000170fa 	wrctl	ienable,zero
}
   1de34:	e037883a 	mov	sp,fp
   1de38:	df000017 	ldw	fp,0(sp)
   1de3c:	dec00104 	addi	sp,sp,4
   1de40:	f800283a 	ret

0001de44 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1de44:	defffb04 	addi	sp,sp,-20
   1de48:	df000415 	stw	fp,16(sp)
   1de4c:	df000404 	addi	fp,sp,16
   1de50:	e13ffe15 	stw	r4,-8(fp)
   1de54:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1de58:	e0bfff17 	ldw	r2,-4(fp)
   1de5c:	10840070 	cmpltui	r2,r2,4097
   1de60:	1000021e 	bne	r2,zero,1de6c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1de64:	00840004 	movi	r2,4096
   1de68:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1de6c:	e0fffe17 	ldw	r3,-8(fp)
   1de70:	e0bfff17 	ldw	r2,-4(fp)
   1de74:	1885883a 	add	r2,r3,r2
   1de78:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1de7c:	e0bffe17 	ldw	r2,-8(fp)
   1de80:	e0bffd15 	stw	r2,-12(fp)
   1de84:	00000506 	br	1de9c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1de88:	e0bffd17 	ldw	r2,-12(fp)
   1de8c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1de90:	e0bffd17 	ldw	r2,-12(fp)
   1de94:	10800804 	addi	r2,r2,32
   1de98:	e0bffd15 	stw	r2,-12(fp)
   1de9c:	e0fffd17 	ldw	r3,-12(fp)
   1dea0:	e0bffc17 	ldw	r2,-16(fp)
   1dea4:	18bff836 	bltu	r3,r2,1de88 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1dea8:	e0bffe17 	ldw	r2,-8(fp)
   1deac:	108007cc 	andi	r2,r2,31
   1deb0:	1005003a 	cmpeq	r2,r2,zero
   1deb4:	1000021e 	bne	r2,zero,1dec0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1deb8:	e0bffd17 	ldw	r2,-12(fp)
   1debc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1dec0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1dec4:	e037883a 	mov	sp,fp
   1dec8:	df000017 	ldw	fp,0(sp)
   1decc:	dec00104 	addi	sp,sp,4
   1ded0:	f800283a 	ret

0001ded4 <atexit>:
   1ded4:	200b883a 	mov	r5,r4
   1ded8:	000d883a 	mov	r6,zero
   1dedc:	0009883a 	mov	r4,zero
   1dee0:	000f883a 	mov	r7,zero
   1dee4:	001df201 	jmpi	1df20 <__register_exitproc>

0001dee8 <exit>:
   1dee8:	defffe04 	addi	sp,sp,-8
   1deec:	000b883a 	mov	r5,zero
   1def0:	dc000015 	stw	r16,0(sp)
   1def4:	dfc00115 	stw	ra,4(sp)
   1def8:	2021883a 	mov	r16,r4
   1defc:	001e0580 	call	1e058 <__call_exitprocs>
   1df00:	008000b4 	movhi	r2,2
   1df04:	10834004 	addi	r2,r2,3328
   1df08:	11000017 	ldw	r4,0(r2)
   1df0c:	20800f17 	ldw	r2,60(r4)
   1df10:	10000126 	beq	r2,zero,1df18 <exit+0x30>
   1df14:	103ee83a 	callr	r2
   1df18:	8009883a 	mov	r4,r16
   1df1c:	001b7180 	call	1b718 <_exit>

0001df20 <__register_exitproc>:
   1df20:	defffa04 	addi	sp,sp,-24
   1df24:	008000b4 	movhi	r2,2
   1df28:	10834004 	addi	r2,r2,3328
   1df2c:	dc000015 	stw	r16,0(sp)
   1df30:	14000017 	ldw	r16,0(r2)
   1df34:	dd000415 	stw	r20,16(sp)
   1df38:	2829883a 	mov	r20,r5
   1df3c:	81405217 	ldw	r5,328(r16)
   1df40:	dcc00315 	stw	r19,12(sp)
   1df44:	dc800215 	stw	r18,8(sp)
   1df48:	dc400115 	stw	r17,4(sp)
   1df4c:	dfc00515 	stw	ra,20(sp)
   1df50:	2023883a 	mov	r17,r4
   1df54:	3027883a 	mov	r19,r6
   1df58:	3825883a 	mov	r18,r7
   1df5c:	28002526 	beq	r5,zero,1dff4 <__register_exitproc+0xd4>
   1df60:	29000117 	ldw	r4,4(r5)
   1df64:	008007c4 	movi	r2,31
   1df68:	11002716 	blt	r2,r4,1e008 <__register_exitproc+0xe8>
   1df6c:	8800101e 	bne	r17,zero,1dfb0 <__register_exitproc+0x90>
   1df70:	2105883a 	add	r2,r4,r4
   1df74:	1085883a 	add	r2,r2,r2
   1df78:	20c00044 	addi	r3,r4,1
   1df7c:	1145883a 	add	r2,r2,r5
   1df80:	0009883a 	mov	r4,zero
   1df84:	15000215 	stw	r20,8(r2)
   1df88:	28c00115 	stw	r3,4(r5)
   1df8c:	2005883a 	mov	r2,r4
   1df90:	dfc00517 	ldw	ra,20(sp)
   1df94:	dd000417 	ldw	r20,16(sp)
   1df98:	dcc00317 	ldw	r19,12(sp)
   1df9c:	dc800217 	ldw	r18,8(sp)
   1dfa0:	dc400117 	ldw	r17,4(sp)
   1dfa4:	dc000017 	ldw	r16,0(sp)
   1dfa8:	dec00604 	addi	sp,sp,24
   1dfac:	f800283a 	ret
   1dfb0:	29802204 	addi	r6,r5,136
   1dfb4:	00800044 	movi	r2,1
   1dfb8:	110e983a 	sll	r7,r2,r4
   1dfbc:	30c04017 	ldw	r3,256(r6)
   1dfc0:	2105883a 	add	r2,r4,r4
   1dfc4:	1085883a 	add	r2,r2,r2
   1dfc8:	1185883a 	add	r2,r2,r6
   1dfcc:	19c6b03a 	or	r3,r3,r7
   1dfd0:	14802015 	stw	r18,128(r2)
   1dfd4:	14c00015 	stw	r19,0(r2)
   1dfd8:	00800084 	movi	r2,2
   1dfdc:	30c04015 	stw	r3,256(r6)
   1dfe0:	88bfe31e 	bne	r17,r2,1df70 <__register_exitproc+0x50>
   1dfe4:	30804117 	ldw	r2,260(r6)
   1dfe8:	11c4b03a 	or	r2,r2,r7
   1dfec:	30804115 	stw	r2,260(r6)
   1dff0:	003fdf06 	br	1df70 <__register_exitproc+0x50>
   1dff4:	008000b4 	movhi	r2,2
   1dff8:	108c7204 	addi	r2,r2,12744
   1dffc:	100b883a 	mov	r5,r2
   1e000:	80805215 	stw	r2,328(r16)
   1e004:	003fd606 	br	1df60 <__register_exitproc+0x40>
   1e008:	00800074 	movhi	r2,1
   1e00c:	108d6204 	addi	r2,r2,13704
   1e010:	1000021e 	bne	r2,zero,1e01c <__register_exitproc+0xfc>
   1e014:	013fffc4 	movi	r4,-1
   1e018:	003fdc06 	br	1df8c <__register_exitproc+0x6c>
   1e01c:	01006404 	movi	r4,400
   1e020:	103ee83a 	callr	r2
   1e024:	1007883a 	mov	r3,r2
   1e028:	103ffa26 	beq	r2,zero,1e014 <__register_exitproc+0xf4>
   1e02c:	80805217 	ldw	r2,328(r16)
   1e030:	180b883a 	mov	r5,r3
   1e034:	18000115 	stw	zero,4(r3)
   1e038:	18800015 	stw	r2,0(r3)
   1e03c:	80c05215 	stw	r3,328(r16)
   1e040:	18006215 	stw	zero,392(r3)
   1e044:	18006315 	stw	zero,396(r3)
   1e048:	0009883a 	mov	r4,zero
   1e04c:	883fc826 	beq	r17,zero,1df70 <__register_exitproc+0x50>
   1e050:	003fd706 	br	1dfb0 <__register_exitproc+0x90>

0001e054 <register_fini>:
   1e054:	f800283a 	ret

0001e058 <__call_exitprocs>:
   1e058:	008000b4 	movhi	r2,2
   1e05c:	10834004 	addi	r2,r2,3328
   1e060:	10800017 	ldw	r2,0(r2)
   1e064:	defff304 	addi	sp,sp,-52
   1e068:	df000b15 	stw	fp,44(sp)
   1e06c:	d8800115 	stw	r2,4(sp)
   1e070:	00800074 	movhi	r2,1
   1e074:	108d5d04 	addi	r2,r2,13684
   1e078:	1005003a 	cmpeq	r2,r2,zero
   1e07c:	d8800215 	stw	r2,8(sp)
   1e080:	d8800117 	ldw	r2,4(sp)
   1e084:	dd400815 	stw	r21,32(sp)
   1e088:	dd000715 	stw	r20,28(sp)
   1e08c:	10805204 	addi	r2,r2,328
   1e090:	dfc00c15 	stw	ra,48(sp)
   1e094:	ddc00a15 	stw	r23,40(sp)
   1e098:	dd800915 	stw	r22,36(sp)
   1e09c:	dcc00615 	stw	r19,24(sp)
   1e0a0:	dc800515 	stw	r18,20(sp)
   1e0a4:	dc400415 	stw	r17,16(sp)
   1e0a8:	dc000315 	stw	r16,12(sp)
   1e0ac:	282b883a 	mov	r21,r5
   1e0b0:	2039883a 	mov	fp,r4
   1e0b4:	d8800015 	stw	r2,0(sp)
   1e0b8:	2829003a 	cmpeq	r20,r5,zero
   1e0bc:	d8800117 	ldw	r2,4(sp)
   1e0c0:	14405217 	ldw	r17,328(r2)
   1e0c4:	88001026 	beq	r17,zero,1e108 <__call_exitprocs+0xb0>
   1e0c8:	ddc00017 	ldw	r23,0(sp)
   1e0cc:	88800117 	ldw	r2,4(r17)
   1e0d0:	8c802204 	addi	r18,r17,136
   1e0d4:	143fffc4 	addi	r16,r2,-1
   1e0d8:	80000916 	blt	r16,zero,1e100 <__call_exitprocs+0xa8>
   1e0dc:	05bfffc4 	movi	r22,-1
   1e0e0:	a000151e 	bne	r20,zero,1e138 <__call_exitprocs+0xe0>
   1e0e4:	8409883a 	add	r4,r16,r16
   1e0e8:	2105883a 	add	r2,r4,r4
   1e0ec:	1485883a 	add	r2,r2,r18
   1e0f0:	10c02017 	ldw	r3,128(r2)
   1e0f4:	a8c01126 	beq	r21,r3,1e13c <__call_exitprocs+0xe4>
   1e0f8:	843fffc4 	addi	r16,r16,-1
   1e0fc:	85bff81e 	bne	r16,r22,1e0e0 <__call_exitprocs+0x88>
   1e100:	d8800217 	ldw	r2,8(sp)
   1e104:	10003126 	beq	r2,zero,1e1cc <__call_exitprocs+0x174>
   1e108:	dfc00c17 	ldw	ra,48(sp)
   1e10c:	df000b17 	ldw	fp,44(sp)
   1e110:	ddc00a17 	ldw	r23,40(sp)
   1e114:	dd800917 	ldw	r22,36(sp)
   1e118:	dd400817 	ldw	r21,32(sp)
   1e11c:	dd000717 	ldw	r20,28(sp)
   1e120:	dcc00617 	ldw	r19,24(sp)
   1e124:	dc800517 	ldw	r18,20(sp)
   1e128:	dc400417 	ldw	r17,16(sp)
   1e12c:	dc000317 	ldw	r16,12(sp)
   1e130:	dec00d04 	addi	sp,sp,52
   1e134:	f800283a 	ret
   1e138:	8409883a 	add	r4,r16,r16
   1e13c:	88c00117 	ldw	r3,4(r17)
   1e140:	2105883a 	add	r2,r4,r4
   1e144:	1445883a 	add	r2,r2,r17
   1e148:	18ffffc4 	addi	r3,r3,-1
   1e14c:	11800217 	ldw	r6,8(r2)
   1e150:	1c001526 	beq	r3,r16,1e1a8 <__call_exitprocs+0x150>
   1e154:	10000215 	stw	zero,8(r2)
   1e158:	303fe726 	beq	r6,zero,1e0f8 <__call_exitprocs+0xa0>
   1e15c:	00c00044 	movi	r3,1
   1e160:	1c06983a 	sll	r3,r3,r16
   1e164:	90804017 	ldw	r2,256(r18)
   1e168:	8cc00117 	ldw	r19,4(r17)
   1e16c:	1884703a 	and	r2,r3,r2
   1e170:	10001426 	beq	r2,zero,1e1c4 <__call_exitprocs+0x16c>
   1e174:	90804117 	ldw	r2,260(r18)
   1e178:	1884703a 	and	r2,r3,r2
   1e17c:	10000c1e 	bne	r2,zero,1e1b0 <__call_exitprocs+0x158>
   1e180:	2105883a 	add	r2,r4,r4
   1e184:	1485883a 	add	r2,r2,r18
   1e188:	11400017 	ldw	r5,0(r2)
   1e18c:	e009883a 	mov	r4,fp
   1e190:	303ee83a 	callr	r6
   1e194:	88800117 	ldw	r2,4(r17)
   1e198:	98bfc81e 	bne	r19,r2,1e0bc <__call_exitprocs+0x64>
   1e19c:	b8800017 	ldw	r2,0(r23)
   1e1a0:	147fd526 	beq	r2,r17,1e0f8 <__call_exitprocs+0xa0>
   1e1a4:	003fc506 	br	1e0bc <__call_exitprocs+0x64>
   1e1a8:	8c000115 	stw	r16,4(r17)
   1e1ac:	003fea06 	br	1e158 <__call_exitprocs+0x100>
   1e1b0:	2105883a 	add	r2,r4,r4
   1e1b4:	1485883a 	add	r2,r2,r18
   1e1b8:	11000017 	ldw	r4,0(r2)
   1e1bc:	303ee83a 	callr	r6
   1e1c0:	003ff406 	br	1e194 <__call_exitprocs+0x13c>
   1e1c4:	303ee83a 	callr	r6
   1e1c8:	003ff206 	br	1e194 <__call_exitprocs+0x13c>
   1e1cc:	88800117 	ldw	r2,4(r17)
   1e1d0:	1000081e 	bne	r2,zero,1e1f4 <__call_exitprocs+0x19c>
   1e1d4:	89000017 	ldw	r4,0(r17)
   1e1d8:	20000726 	beq	r4,zero,1e1f8 <__call_exitprocs+0x1a0>
   1e1dc:	b9000015 	stw	r4,0(r23)
   1e1e0:	8809883a 	mov	r4,r17
   1e1e4:	00135740 	call	13574 <free>
   1e1e8:	bc400017 	ldw	r17,0(r23)
   1e1ec:	883fb71e 	bne	r17,zero,1e0cc <__call_exitprocs+0x74>
   1e1f0:	003fc506 	br	1e108 <__call_exitprocs+0xb0>
   1e1f4:	89000017 	ldw	r4,0(r17)
   1e1f8:	882f883a 	mov	r23,r17
   1e1fc:	2023883a 	mov	r17,r4
   1e200:	883fb21e 	bne	r17,zero,1e0cc <__call_exitprocs+0x74>
   1e204:	003fc006 	br	1e108 <__call_exitprocs+0xb0>
   1e208:	0201ffff 	0x201ffff
   1e20c:	ffff0000 	call	ffff000 <__alt_mem_onchip_memory+0xddfe000>
   1e210:	00000401 	jmpi	40 <__flash_exceptions_start+0x20>
   1e214:	ffff0001 	jmpi	ffff000 <__alt_mem_onchip_memory+0xddfe000>
   1e218:	00000201 	jmpi	20 <__flash_exceptions_start>
   1e21c:	0201ffff 	0x201ffff
   1e220:	ffff0000 	call	ffff000 <__alt_mem_onchip_memory+0xddfe000>
   1e224:	00000401 	jmpi	40 <__flash_exceptions_start+0x20>
   1e228:	ffff0001 	jmpi	ffff000 <__alt_mem_onchip_memory+0xddfe000>
   1e22c:	00000801 	jmpi	80 <__flash_exceptions_start+0x60>
   1e230:	00020001 	jmpi	2000 <readTextClassifier+0x398>
   1e234:	883a0003 	ldbu	zero,-6144(r17)
   1e238:	010d0bff 	0x10d0bff
   1e23c:	01030004 	movi	r4,3072
   1e240:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e244:	0000007d 	0x7d
   1e248:	00000000 	call	0 <__alt_mem_sdram>
   1e24c:	01110bff 	0x1110bff
   1e250:	01030008 	cmpgei	r4,zero,3072
   1e254:	03000203 	ldbu	r12,8(zero)
   1e258:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e25c:	0000007d 	0x7d
   1e260:	00000000 	call	0 <__alt_mem_sdram>
   1e264:	01110bff 	0x1110bff
   1e268:	01030008 	cmpgei	r4,zero,3072
   1e26c:	03000203 	ldbu	r12,8(zero)
   1e270:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e274:	0000007d 	0x7d
   1e278:	00000000 	call	0 <__alt_mem_sdram>
   1e27c:	01110bff 	0x1110bff
   1e280:	01030008 	cmpgei	r4,zero,3072
   1e284:	03000203 	ldbu	r12,8(zero)
   1e288:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e28c:	0000007d 	0x7d
   1e290:	00000000 	call	0 <__alt_mem_sdram>
   1e294:	01110bff 	0x1110bff
   1e298:	01030008 	cmpgei	r4,zero,3072
   1e29c:	03000203 	ldbu	r12,8(zero)
   1e2a0:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e2a4:	0000007d 	0x7d
   1e2a8:	00000000 	call	0 <__alt_mem_sdram>
   1e2ac:	01110bff 	0x1110bff
   1e2b0:	01030008 	cmpgei	r4,zero,3072
   1e2b4:	03000203 	ldbu	r12,8(zero)
   1e2b8:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e2bc:	0000007d 	0x7d
   1e2c0:	00000000 	call	0 <__alt_mem_sdram>
   1e2c4:	01110bff 	0x1110bff
   1e2c8:	01030008 	cmpgei	r4,zero,3072
   1e2cc:	03000203 	ldbu	r12,8(zero)
   1e2d0:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e2d4:	0000007d 	0x7d
   1e2d8:	00000000 	call	0 <__alt_mem_sdram>
   1e2dc:	01110bff 	0x1110bff
   1e2e0:	01030008 	cmpgei	r4,zero,3072
   1e2e4:	03000203 	ldbu	r12,8(zero)
   1e2e8:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e2ec:	0000007d 	0x7d
   1e2f0:	00000000 	call	0 <__alt_mem_sdram>
   1e2f4:	01110bff 	0x1110bff
   1e2f8:	01030008 	cmpgei	r4,zero,3072
   1e2fc:	03000203 	ldbu	r12,8(zero)
   1e300:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e304:	0000007d 	0x7d
   1e308:	00000000 	call	0 <__alt_mem_sdram>
   1e30c:	01110bff 	0x1110bff
   1e310:	01030008 	cmpgei	r4,zero,3072
   1e314:	03000203 	ldbu	r12,8(zero)
   1e318:	7f000000 	call	7f00000 <__alt_mem_onchip_memory+0x5cff000>
   1e31c:	0000007d 	0x7d
   1e320:	00000000 	call	0 <__alt_mem_sdram>
   1e324:	01090bff 	0x1090bff
   1e328:	7f030002 	0x7f030002
   1e32c:	007d0000 	call	7d000 <_gp+0x54330>
   1e330:	00000000 	call	0 <__alt_mem_sdram>
   1e334:	01090bff 	0x1090bff
   1e338:	7f030002 	0x7f030002
   1e33c:	007d0000 	call	7d000 <_gp+0x54330>
   1e340:	00000000 	call	0 <__alt_mem_sdram>
   1e344:	01090bff 	0x1090bff
   1e348:	7f030002 	0x7f030002
   1e34c:	007d0000 	call	7d000 <_gp+0x54330>
   1e350:	00000000 	call	0 <__alt_mem_sdram>
   1e354:	01090bff 	0x1090bff
   1e358:	7f030002 	0x7f030002
   1e35c:	007d0000 	call	7d000 <_gp+0x54330>
   1e360:	00000000 	call	0 <__alt_mem_sdram>
   1e364:	01090bff 	0x1090bff
   1e368:	7f030002 	0x7f030002
   1e36c:	007d0000 	call	7d000 <_gp+0x54330>
   1e370:	00000000 	call	0 <__alt_mem_sdram>
   1e374:	01090bff 	0x1090bff
   1e378:	7f030002 	0x7f030002
   1e37c:	007d0000 	call	7d000 <_gp+0x54330>
   1e380:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e384:	ff000002 	0xff000002
   1e388:	000201ff 	0x201ff
   1e38c:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e390:	ff000002 	0xff000002
   1e394:	000201ff 	0x201ff
   1e398:	00000000 	call	0 <__alt_mem_sdram>
   1e39c:	01090bff 	0x1090bff
   1e3a0:	7f030002 	0x7f030002
   1e3a4:	007d0000 	call	7d000 <_gp+0x54330>
   1e3a8:	00000000 	call	0 <__alt_mem_sdram>
   1e3ac:	01090bff 	0x1090bff
   1e3b0:	7f030002 	0x7f030002
   1e3b4:	007d0000 	call	7d000 <_gp+0x54330>
   1e3b8:	00000000 	call	0 <__alt_mem_sdram>
   1e3bc:	01090bff 	0x1090bff
   1e3c0:	7f030002 	0x7f030002
   1e3c4:	007d0000 	call	7d000 <_gp+0x54330>
   1e3c8:	00000000 	call	0 <__alt_mem_sdram>
   1e3cc:	01090bff 	0x1090bff
   1e3d0:	7f030002 	0x7f030002
   1e3d4:	007d0000 	call	7d000 <_gp+0x54330>
   1e3d8:	00000000 	call	0 <__alt_mem_sdram>
   1e3dc:	01090bff 	0x1090bff
   1e3e0:	7f030002 	0x7f030002
   1e3e4:	007d0000 	call	7d000 <_gp+0x54330>
   1e3e8:	00000000 	call	0 <__alt_mem_sdram>
   1e3ec:	01090bff 	0x1090bff
   1e3f0:	7f010002 	0x7f010002
   1e3f4:	00000000 	call	0 <__alt_mem_sdram>
   1e3f8:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e3fc:	00000002 	0x2
   1e400:	01090bff 	0x1090bff
   1e404:	7f010002 	0x7f010002
   1e408:	00000000 	call	0 <__alt_mem_sdram>
   1e40c:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e410:	ff000002 	0xff000002
   1e414:	000201ff 	0x201ff
   1e418:	00000000 	call	0 <__alt_mem_sdram>
   1e41c:	01090bff 	0x1090bff
   1e420:	01010004 	movi	r4,1024
   1e424:	00007f00 	call	7f0 <writePgm+0x5c>
   1e428:	00000000 	call	0 <__alt_mem_sdram>
   1e42c:	01090bff 	0x1090bff
   1e430:	01010004 	movi	r4,1024
   1e434:	00007f00 	call	7f0 <writePgm+0x5c>
   1e438:	00000000 	call	0 <__alt_mem_sdram>
   1e43c:	010d0bff 	0x10d0bff
   1e440:	01010006 	br	1e844 <_ZTISt16invalid_argument+0x8>
   1e444:	7f000200 	call	7f00020 <__alt_mem_onchip_memory+0x5cff020>
   1e448:	00000000 	call	0 <__alt_mem_sdram>
   1e44c:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e450:	ff000002 	0xff000002
   1e454:	000201ff 	0x201ff
   1e458:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e45c:	ff000002 	0xff000002
   1e460:	000201ff 	0x201ff
   1e464:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e468:	01000004 	movi	r4,0
   1e46c:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e470:	01000004 	movi	r4,0
   1e474:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e478:	01000004 	movi	r4,0
   1e47c:	01ffff00 	call	1ffff0 <_gp+0x1d7320>
   1e480:	01000008 	cmpgei	r4,zero,0
   1e484:	03000200 	call	300020 <_gp+0x2d7350>
   1e488:	00000000 	call	0 <__alt_mem_sdram>
   1e48c:	01090bff 	0x1090bff
   1e490:	7f010002 	0x7f010002
	...
   1e49c:	010d0bff 	0x10d0bff
   1e4a0:	01000004 	movi	r4,0
   1e4a4:	00000101 	jmpi	10 <__alt_mem_sdram+0x10>
   1e4a8:	00000000 	call	0 <__alt_mem_sdram>
   1e4ac:	010d0bff 	0x10d0bff
   1e4b0:	01000004 	movi	r4,0
   1e4b4:	00000101 	jmpi	10 <__alt_mem_sdram+0x10>
   1e4b8:	00000000 	call	0 <__alt_mem_sdram>
   1e4bc:	010d0bff 	0x10d0bff
   1e4c0:	01000004 	movi	r4,0
   1e4c4:	00000101 	jmpi	10 <__alt_mem_sdram+0x10>
   1e4c8:	00000000 	call	0 <__alt_mem_sdram>
   1e4cc:	010d0bff 	0x10d0bff
   1e4d0:	7f010002 	0x7f010002
   1e4d4:	00000000 	call	0 <__alt_mem_sdram>
   1e4d8:	0001ebe0 	cmpeqi	zero,zero,1967
   1e4dc:	00000001 	jmpi	0 <__alt_mem_sdram>
   1e4e0:	01090bff 	0x1090bff
   1e4e4:	7f010002 	0x7f010002
	...
   1e4f0:	0001e054 	movui	zero,1921
